
Lab02_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba40  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fa4  0800bbec  0800bbec  0000cbec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db90  0800db90  0000f1b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800db90  0800db90  0000eb90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db98  0800db98  0000f1b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db98  0800db98  0000eb98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800db9c  0800db9c  0000eb9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b4  20000000  0800dba0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1b4  2**0
                  CONTENTS
 10 .bss          00001b30  200001b4  200001b4  0000f1b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001ce4  20001ce4  0000f1b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ac52  00000000  00000000  0000f1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e5c  00000000  00000000  00029e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a90  00000000  00000000  0002dc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001490  00000000  00000000  0002f728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027e2a  00000000  00000000  00030bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021818  00000000  00000000  000589e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6bf9  00000000  00000000  0007a1fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00160df3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000070d0  00000000  00000000  00160e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  00167f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200001b4 	.word	0x200001b4
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800bbd4 	.word	0x0800bbd4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001b8 	.word	0x200001b8
 80001e8:	0800bbd4 	.word	0x0800bbd4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ArrayReset>:
        disable = false; //để tạm dừng màn hình bên trái

//============================================================

void ArrayReset()
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
    for (int i = 0; i <= 30; i++)
 80004e2:	2300      	movs	r3, #0
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	e016      	b.n	8000516 <ArrayReset+0x3a>
        for (int j = 0; j <= 30; j++)
 80004e8:	2300      	movs	r3, #0
 80004ea:	60bb      	str	r3, [r7, #8]
 80004ec:	e00d      	b.n	800050a <ArrayReset+0x2e>
            tetris[j][i] = 0;
 80004ee:	491e      	ldr	r1, [pc, #120]	@ (8000568 <ArrayReset+0x8c>)
 80004f0:	68ba      	ldr	r2, [r7, #8]
 80004f2:	4613      	mov	r3, r2
 80004f4:	011b      	lsls	r3, r3, #4
 80004f6:	1a9b      	subs	r3, r3, r2
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	68fa      	ldr	r2, [r7, #12]
 80004fc:	4413      	add	r3, r2
 80004fe:	2200      	movs	r2, #0
 8000500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int j = 0; j <= 30; j++)
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	3301      	adds	r3, #1
 8000508:	60bb      	str	r3, [r7, #8]
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	2b1e      	cmp	r3, #30
 800050e:	ddee      	ble.n	80004ee <ArrayReset+0x12>
    for (int i = 0; i <= 30; i++)
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	3301      	adds	r3, #1
 8000514:	60fb      	str	r3, [r7, #12]
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	2b1e      	cmp	r3, #30
 800051a:	dde5      	ble.n	80004e8 <ArrayReset+0xc>

    for (int i = 0; i <= 21; i++)
 800051c:	2300      	movs	r3, #0
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	e018      	b.n	8000554 <ArrayReset+0x78>
    {
        tetris[i][22] = 1;
 8000522:	4911      	ldr	r1, [pc, #68]	@ (8000568 <ArrayReset+0x8c>)
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	4613      	mov	r3, r2
 8000528:	011b      	lsls	r3, r3, #4
 800052a:	1a9b      	subs	r3, r3, r2
 800052c:	00db      	lsls	r3, r3, #3
 800052e:	440b      	add	r3, r1
 8000530:	3358      	adds	r3, #88	@ 0x58
 8000532:	2201      	movs	r2, #1
 8000534:	601a      	str	r2, [r3, #0]
        tetris[21][i] = 1;
 8000536:	4a0c      	ldr	r2, [pc, #48]	@ (8000568 <ArrayReset+0x8c>)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	f203 2376 	addw	r3, r3, #630	@ 0x276
 800053e:	2101      	movs	r1, #1
 8000540:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        tetris[0][i] = 1;
 8000544:	4a08      	ldr	r2, [pc, #32]	@ (8000568 <ArrayReset+0x8c>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2101      	movs	r1, #1
 800054a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i <= 21; i++)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	3301      	adds	r3, #1
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2b15      	cmp	r3, #21
 8000558:	dde3      	ble.n	8000522 <ArrayReset+0x46>
    }
}
 800055a:	bf00      	nop
 800055c:	bf00      	nop
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	200001d0 	.word	0x200001d0

0800056c <PrintArray>:

void PrintArray(int x, int y) // In mảng bắt đầu từ vị trí có toạ độ (x, y)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
    for (int i = 1; i <= 21; i++)
 8000576:	2301      	movs	r3, #1
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	e060      	b.n	800063e <PrintArray+0xd2>
    {
        for (int j = 1; j <= 20; j++)
 800057c:	2301      	movs	r3, #1
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	e057      	b.n	8000632 <PrintArray+0xc6>
        {
            switch (tetris[j][i])
 8000582:	4933      	ldr	r1, [pc, #204]	@ (8000650 <PrintArray+0xe4>)
 8000584:	68ba      	ldr	r2, [r7, #8]
 8000586:	4613      	mov	r3, r2
 8000588:	011b      	lsls	r3, r3, #4
 800058a:	1a9b      	subs	r3, r3, r2
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	68fa      	ldr	r2, [r7, #12]
 8000590:	4413      	add	r3, r2
 8000592:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000596:	2b06      	cmp	r3, #6
 8000598:	d848      	bhi.n	800062c <PrintArray+0xc0>
 800059a:	a201      	add	r2, pc, #4	@ (adr r2, 80005a0 <PrintArray+0x34>)
 800059c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a0:	080005bd 	.word	0x080005bd
 80005a4:	080005cd 	.word	0x080005cd
 80005a8:	080005dd 	.word	0x080005dd
 80005ac:	080005ed 	.word	0x080005ed
 80005b0:	080005fd 	.word	0x080005fd
 80005b4:	0800060d 	.word	0x0800060d
 80005b8:	0800061d 	.word	0x0800061d
            {
            case 0: { Colour(0); PrintXY(j, i); break; }
 80005bc:	2000      	movs	r0, #0
 80005be:	f005 fb27 	bl	8005c10 <Colour>
 80005c2:	68f9      	ldr	r1, [r7, #12]
 80005c4:	68b8      	ldr	r0, [r7, #8]
 80005c6:	f005 fb03 	bl	8005bd0 <PrintXY>
 80005ca:	e02f      	b.n	800062c <PrintArray+0xc0>
            case 1: { Colour(1); PrintXY(j, i); break; }
 80005cc:	2001      	movs	r0, #1
 80005ce:	f005 fb1f 	bl	8005c10 <Colour>
 80005d2:	68f9      	ldr	r1, [r7, #12]
 80005d4:	68b8      	ldr	r0, [r7, #8]
 80005d6:	f005 fafb 	bl	8005bd0 <PrintXY>
 80005da:	e027      	b.n	800062c <PrintArray+0xc0>
            case 2: { Colour(2); PrintXY(j, i); break; }
 80005dc:	2002      	movs	r0, #2
 80005de:	f005 fb17 	bl	8005c10 <Colour>
 80005e2:	68f9      	ldr	r1, [r7, #12]
 80005e4:	68b8      	ldr	r0, [r7, #8]
 80005e6:	f005 faf3 	bl	8005bd0 <PrintXY>
 80005ea:	e01f      	b.n	800062c <PrintArray+0xc0>
            case 3: { Colour(3); PrintXY(j, i); break; }
 80005ec:	2003      	movs	r0, #3
 80005ee:	f005 fb0f 	bl	8005c10 <Colour>
 80005f2:	68f9      	ldr	r1, [r7, #12]
 80005f4:	68b8      	ldr	r0, [r7, #8]
 80005f6:	f005 faeb 	bl	8005bd0 <PrintXY>
 80005fa:	e017      	b.n	800062c <PrintArray+0xc0>
            case 4: { Colour(4); PrintXY(j, i); break; }
 80005fc:	2004      	movs	r0, #4
 80005fe:	f005 fb07 	bl	8005c10 <Colour>
 8000602:	68f9      	ldr	r1, [r7, #12]
 8000604:	68b8      	ldr	r0, [r7, #8]
 8000606:	f005 fae3 	bl	8005bd0 <PrintXY>
 800060a:	e00f      	b.n	800062c <PrintArray+0xc0>
            case 5: { Colour(5); PrintXY(j, i); break; }
 800060c:	2005      	movs	r0, #5
 800060e:	f005 faff 	bl	8005c10 <Colour>
 8000612:	68f9      	ldr	r1, [r7, #12]
 8000614:	68b8      	ldr	r0, [r7, #8]
 8000616:	f005 fadb 	bl	8005bd0 <PrintXY>
 800061a:	e007      	b.n	800062c <PrintArray+0xc0>
            case 6: { Colour(6); PrintXY(j, i); break; }
 800061c:	2006      	movs	r0, #6
 800061e:	f005 faf7 	bl	8005c10 <Colour>
 8000622:	68f9      	ldr	r1, [r7, #12]
 8000624:	68b8      	ldr	r0, [r7, #8]
 8000626:	f005 fad3 	bl	8005bd0 <PrintXY>
 800062a:	bf00      	nop
        for (int j = 1; j <= 20; j++)
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	3301      	adds	r3, #1
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	2b14      	cmp	r3, #20
 8000636:	dda4      	ble.n	8000582 <PrintArray+0x16>
    for (int i = 1; i <= 21; i++)
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	3301      	adds	r3, #1
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	2b15      	cmp	r3, #21
 8000642:	dd9b      	ble.n	800057c <PrintArray+0x10>
            }
        }
    }
}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	200001d0 	.word	0x200001d0

08000654 <DeleteRow>:
// Check full rows
// and delete full rows
// and return a value of deleted rows

void DeleteRow(int n)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
    for (int i = 1; i <= 20; i++) tetris[i][n] = 0;
 800065c:	2301      	movs	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	e00d      	b.n	800067e <DeleteRow+0x2a>
 8000662:	490c      	ldr	r1, [pc, #48]	@ (8000694 <DeleteRow+0x40>)
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	4613      	mov	r3, r2
 8000668:	011b      	lsls	r3, r3, #4
 800066a:	1a9b      	subs	r3, r3, r2
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	4413      	add	r3, r2
 8000672:	2200      	movs	r2, #0
 8000674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b14      	cmp	r3, #20
 8000682:	ddee      	ble.n	8000662 <DeleteRow+0xe>
}
 8000684:	bf00      	nop
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	200001d0 	.word	0x200001d0

08000698 <MoveAllRowAbove>:

void MoveAllRowAbove(int n)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
    for (int i = n; i >= 1; i--)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	e020      	b.n	80006e8 <MoveAllRowAbove+0x50>
    {
        for (int j = 20; j >= 1; j--)
 80006a6:	2314      	movs	r3, #20
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	e017      	b.n	80006dc <MoveAllRowAbove+0x44>
        {
            tetris[j][i] = tetris[j][i - 1];
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	1e59      	subs	r1, r3, #1
 80006b0:	4812      	ldr	r0, [pc, #72]	@ (80006fc <MoveAllRowAbove+0x64>)
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	4613      	mov	r3, r2
 80006b6:	011b      	lsls	r3, r3, #4
 80006b8:	1a9b      	subs	r3, r3, r2
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	440b      	add	r3, r1
 80006be:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80006c2:	480e      	ldr	r0, [pc, #56]	@ (80006fc <MoveAllRowAbove+0x64>)
 80006c4:	68ba      	ldr	r2, [r7, #8]
 80006c6:	4613      	mov	r3, r2
 80006c8:	011b      	lsls	r3, r3, #4
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	4413      	add	r3, r2
 80006d2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for (int j = 20; j >= 1; j--)
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	3b01      	subs	r3, #1
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	dce4      	bgt.n	80006ac <MoveAllRowAbove+0x14>
    for (int i = n; i >= 1; i--)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	3b01      	subs	r3, #1
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	dcdb      	bgt.n	80006a6 <MoveAllRowAbove+0xe>
        }
    }
}
 80006ee:	bf00      	nop
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	200001d0 	.word	0x200001d0

08000700 <CheckFullRow>:

int CheckFullRow() // Function that checks and returns a number of full rows
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
    int FullRow = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
    bool t = false;
 800070a:	2300      	movs	r3, #0
 800070c:	72fb      	strb	r3, [r7, #11]
    fullrow = false;
 800070e:	4b1e      	ldr	r3, [pc, #120]	@ (8000788 <CheckFullRow+0x88>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
    for (int i = 1; i <= 21; i++)
 8000714:	2301      	movs	r3, #1
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	e02e      	b.n	8000778 <CheckFullRow+0x78>
    {
        for (int j = 1; j <= 21; j++)
 800071a:	2301      	movs	r3, #1
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	e019      	b.n	8000754 <CheckFullRow+0x54>
        {
            if (tetris[j][i] == 0)
 8000720:	491a      	ldr	r1, [pc, #104]	@ (800078c <CheckFullRow+0x8c>)
 8000722:	683a      	ldr	r2, [r7, #0]
 8000724:	4613      	mov	r3, r2
 8000726:	011b      	lsls	r3, r3, #4
 8000728:	1a9b      	subs	r3, r3, r2
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	4413      	add	r3, r2
 8000730:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d105      	bne.n	8000744 <CheckFullRow+0x44>
            {
                t = false;
 8000738:	2300      	movs	r3, #0
 800073a:	72fb      	strb	r3, [r7, #11]
                fullrow = t;
 800073c:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <CheckFullRow+0x88>)
 800073e:	7afb      	ldrb	r3, [r7, #11]
 8000740:	7013      	strb	r3, [r2, #0]
                break;
 8000742:	e00a      	b.n	800075a <CheckFullRow+0x5a>
            }
            t = true;
 8000744:	2301      	movs	r3, #1
 8000746:	72fb      	strb	r3, [r7, #11]
            fullrow = t;
 8000748:	4a0f      	ldr	r2, [pc, #60]	@ (8000788 <CheckFullRow+0x88>)
 800074a:	7afb      	ldrb	r3, [r7, #11]
 800074c:	7013      	strb	r3, [r2, #0]
        for (int j = 1; j <= 21; j++)
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	3301      	adds	r3, #1
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	2b15      	cmp	r3, #21
 8000758:	dde2      	ble.n	8000720 <CheckFullRow+0x20>
        }
        if (t)
 800075a:	7afb      	ldrb	r3, [r7, #11]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d008      	beq.n	8000772 <CheckFullRow+0x72>
        {
            FullRow++;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3301      	adds	r3, #1
 8000764:	60fb      	str	r3, [r7, #12]
            DeleteRow(i);
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f7ff ff74 	bl	8000654 <DeleteRow>
            MoveAllRowAbove(i);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff ff93 	bl	8000698 <MoveAllRowAbove>
    for (int i = 1; i <= 21; i++)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	3301      	adds	r3, #1
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b15      	cmp	r3, #21
 800077c:	ddcd      	ble.n	800071a <CheckFullRow+0x1a>
        }
    }
    return FullRow;
 800077e:	68fb      	ldr	r3, [r7, #12]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000ff3 	.word	0x20000ff3
 800078c:	200001d0 	.word	0x200001d0

08000790 <PrintVariables>:

void PrintVariables()
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
	...

080007a0 <Refresh>:

void Refresh()
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
    PrintArray(1, 1);
 80007a4:	2101      	movs	r1, #1
 80007a6:	2001      	movs	r0, #1
 80007a8:	f7ff fee0 	bl	800056c <PrintArray>
    Colour(colour);
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <Refresh+0x28>)
 80007ae:	881b      	ldrh	r3, [r3, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f005 fa2d 	bl	8005c10 <Colour>
    PrintTetromino();
 80007b6:	f004 f96b 	bl	8004a90 <PrintTetromino>
    Colour(6);
 80007ba:	2006      	movs	r0, #6
 80007bc:	f005 fa28 	bl	8005c10 <Colour>

    PrintVariables();
 80007c0:	f7ff ffe6 	bl	8000790 <PrintVariables>

    //Print next piece
    // PrintNextPiece(30, 4);

    // Print level
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000ff0 	.word	0x20000ff0

080007cc <InputProcess>:

void InputProcess() // Function processing user's input
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
//    if (isUSERKey() == 1) {
//    	while (isUSERKey() == 1);
//    	TETRIS_Snake = 1;
//    }
	if (isLeftKey() == 1 && !Pause) // Moves current tetromino to the left if the 'a' key is pressed
 80007d0:	f005 f98a 	bl	8005ae8 <isLeftKey>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d12b      	bne.n	8000832 <InputProcess+0x66>
 80007da:	4b83      	ldr	r3, [pc, #524]	@ (80009e8 <InputProcess+0x21c>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	f083 0301 	eor.w	r3, r3, #1
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d024      	beq.n	8000832 <InputProcess+0x66>
    {
        while (isLeftKey() == 1) {
 80007e8:	e009      	b.n	80007fe <InputProcess+0x32>
        	if (isKeyHold >= KEY_HOLD_TIME) break;
 80007ea:	4b80      	ldr	r3, [pc, #512]	@ (80009ec <InputProcess+0x220>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a80      	ldr	r2, [pc, #512]	@ (80009f0 <InputProcess+0x224>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	dc0a      	bgt.n	800080a <InputProcess+0x3e>
        	else isKeyHold++;
 80007f4:	4b7d      	ldr	r3, [pc, #500]	@ (80009ec <InputProcess+0x220>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	3301      	adds	r3, #1
 80007fa:	4a7c      	ldr	r2, [pc, #496]	@ (80009ec <InputProcess+0x220>)
 80007fc:	6013      	str	r3, [r2, #0]
        while (isLeftKey() == 1) {
 80007fe:	f005 f973 	bl	8005ae8 <isLeftKey>
 8000802:	4603      	mov	r3, r0
 8000804:	2b01      	cmp	r3, #1
 8000806:	d0f0      	beq.n	80007ea <InputProcess+0x1e>
 8000808:	e000      	b.n	800080c <InputProcess+0x40>
        	if (isKeyHold >= KEY_HOLD_TIME) break;
 800080a:	bf00      	nop
        }
    	if (CanMoveLeft) tetrominoLocX--;
 800080c:	4b79      	ldr	r3, [pc, #484]	@ (80009f4 <InputProcess+0x228>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d004      	beq.n	800081e <InputProcess+0x52>
 8000814:	4b78      	ldr	r3, [pc, #480]	@ (80009f8 <InputProcess+0x22c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	3b01      	subs	r3, #1
 800081a:	4a77      	ldr	r2, [pc, #476]	@ (80009f8 <InputProcess+0x22c>)
 800081c:	6013      	str	r3, [r2, #0]
        Refresh();
 800081e:	f7ff ffbf 	bl	80007a0 <Refresh>
        if (isLeftKey() == 0) isKeyHold = 0;
 8000822:	f005 f961 	bl	8005ae8 <isLeftKey>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d102      	bne.n	8000832 <InputProcess+0x66>
 800082c:	4b6f      	ldr	r3, [pc, #444]	@ (80009ec <InputProcess+0x220>)
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
    }
    if (isRightKey() == 1 && !Pause) // Moves current tetromino to the right if the 'd' key is pressed
 8000832:	f005 f96b 	bl	8005b0c <isRightKey>
 8000836:	4603      	mov	r3, r0
 8000838:	2b01      	cmp	r3, #1
 800083a:	d12b      	bne.n	8000894 <InputProcess+0xc8>
 800083c:	4b6a      	ldr	r3, [pc, #424]	@ (80009e8 <InputProcess+0x21c>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	f083 0301 	eor.w	r3, r3, #1
 8000844:	b2db      	uxtb	r3, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	d024      	beq.n	8000894 <InputProcess+0xc8>
    {
        while (isRightKey() == 1) {
 800084a:	e009      	b.n	8000860 <InputProcess+0x94>
        	if (isKeyHold >= KEY_HOLD_TIME) break;
 800084c:	4b67      	ldr	r3, [pc, #412]	@ (80009ec <InputProcess+0x220>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a67      	ldr	r2, [pc, #412]	@ (80009f0 <InputProcess+0x224>)
 8000852:	4293      	cmp	r3, r2
 8000854:	dc0a      	bgt.n	800086c <InputProcess+0xa0>
        	else isKeyHold++;
 8000856:	4b65      	ldr	r3, [pc, #404]	@ (80009ec <InputProcess+0x220>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	3301      	adds	r3, #1
 800085c:	4a63      	ldr	r2, [pc, #396]	@ (80009ec <InputProcess+0x220>)
 800085e:	6013      	str	r3, [r2, #0]
        while (isRightKey() == 1) {
 8000860:	f005 f954 	bl	8005b0c <isRightKey>
 8000864:	4603      	mov	r3, r0
 8000866:	2b01      	cmp	r3, #1
 8000868:	d0f0      	beq.n	800084c <InputProcess+0x80>
 800086a:	e000      	b.n	800086e <InputProcess+0xa2>
        	if (isKeyHold >= KEY_HOLD_TIME) break;
 800086c:	bf00      	nop
        }
    	if (CanMoveRight) tetrominoLocX++;
 800086e:	4b63      	ldr	r3, [pc, #396]	@ (80009fc <InputProcess+0x230>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d004      	beq.n	8000880 <InputProcess+0xb4>
 8000876:	4b60      	ldr	r3, [pc, #384]	@ (80009f8 <InputProcess+0x22c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	3301      	adds	r3, #1
 800087c:	4a5e      	ldr	r2, [pc, #376]	@ (80009f8 <InputProcess+0x22c>)
 800087e:	6013      	str	r3, [r2, #0]
        Refresh();
 8000880:	f7ff ff8e 	bl	80007a0 <Refresh>
        if (isRightKey() == 0) isKeyHold = 0;
 8000884:	f005 f942 	bl	8005b0c <isRightKey>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d102      	bne.n	8000894 <InputProcess+0xc8>
 800088e:	4b57      	ldr	r3, [pc, #348]	@ (80009ec <InputProcess+0x220>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
    }
    if (isDownKey() == 1 && !Pause) // Moves current tetromino down if the 's' key is pressed
 8000894:	f005 f916 	bl	8005ac4 <isDownKey>
 8000898:	4603      	mov	r3, r0
 800089a:	2b01      	cmp	r3, #1
 800089c:	d115      	bne.n	80008ca <InputProcess+0xfe>
 800089e:	4b52      	ldr	r3, [pc, #328]	@ (80009e8 <InputProcess+0x21c>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	f083 0301 	eor.w	r3, r3, #1
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d00e      	beq.n	80008ca <InputProcess+0xfe>
    {
        // while (isDownKey() == 1);
    	if (CanMoveDown) if (tetrominoLocY < 20) tetrominoLocY++;
 80008ac:	4b54      	ldr	r3, [pc, #336]	@ (8000a00 <InputProcess+0x234>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d008      	beq.n	80008c6 <InputProcess+0xfa>
 80008b4:	4b53      	ldr	r3, [pc, #332]	@ (8000a04 <InputProcess+0x238>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b13      	cmp	r3, #19
 80008ba:	dc04      	bgt.n	80008c6 <InputProcess+0xfa>
 80008bc:	4b51      	ldr	r3, [pc, #324]	@ (8000a04 <InputProcess+0x238>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	3301      	adds	r3, #1
 80008c2:	4a50      	ldr	r2, [pc, #320]	@ (8000a04 <InputProcess+0x238>)
 80008c4:	6013      	str	r3, [r2, #0]
        Refresh();
 80008c6:	f7ff ff6b 	bl	80007a0 <Refresh>
    }
    if (isUpKey() == 1 && !Pause) // Change state of a tetromino when 'w' key is pressed
 80008ca:	f005 f8e9 	bl	8005aa0 <isUpKey>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	f040 8087 	bne.w	80009e4 <InputProcess+0x218>
 80008d6:	4b44      	ldr	r3, [pc, #272]	@ (80009e8 <InputProcess+0x21c>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	f083 0301 	eor.w	r3, r3, #1
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d07f      	beq.n	80009e4 <InputProcess+0x218>
    {
        while (isUpKey() == 1);
 80008e4:	bf00      	nop
 80008e6:	f005 f8db 	bl	8005aa0 <isUpKey>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d0fa      	beq.n	80008e6 <InputProcess+0x11a>
    	if (CanRotate)
 80008f0:	4b45      	ldr	r3, [pc, #276]	@ (8000a08 <InputProcess+0x23c>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d073      	beq.n	80009e0 <InputProcess+0x214>
            switch (CurrentState)
 80008f8:	4b44      	ldr	r3, [pc, #272]	@ (8000a0c <InputProcess+0x240>)
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	3b01      	subs	r3, #1
 80008fe:	2b11      	cmp	r3, #17
 8000900:	d86e      	bhi.n	80009e0 <InputProcess+0x214>
 8000902:	a201      	add	r2, pc, #4	@ (adr r2, 8000908 <InputProcess+0x13c>)
 8000904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000908:	08000951 	.word	0x08000951
 800090c:	08000959 	.word	0x08000959
 8000910:	08000961 	.word	0x08000961
 8000914:	08000969 	.word	0x08000969
 8000918:	08000971 	.word	0x08000971
 800091c:	08000979 	.word	0x08000979
 8000920:	08000981 	.word	0x08000981
 8000924:	08000989 	.word	0x08000989
 8000928:	08000991 	.word	0x08000991
 800092c:	08000999 	.word	0x08000999
 8000930:	080009a1 	.word	0x080009a1
 8000934:	080009a9 	.word	0x080009a9
 8000938:	080009b1 	.word	0x080009b1
 800093c:	080009b9 	.word	0x080009b9
 8000940:	080009c1 	.word	0x080009c1
 8000944:	080009c9 	.word	0x080009c9
 8000948:	080009d1 	.word	0x080009d1
 800094c:	080009d9 	.word	0x080009d9
            {
            case 1: { CurrentState = 2; break; }
 8000950:	4b2e      	ldr	r3, [pc, #184]	@ (8000a0c <InputProcess+0x240>)
 8000952:	2202      	movs	r2, #2
 8000954:	801a      	strh	r2, [r3, #0]
 8000956:	e043      	b.n	80009e0 <InputProcess+0x214>
            case 2: { CurrentState = 1; break; }
 8000958:	4b2c      	ldr	r3, [pc, #176]	@ (8000a0c <InputProcess+0x240>)
 800095a:	2201      	movs	r2, #1
 800095c:	801a      	strh	r2, [r3, #0]
 800095e:	e03f      	b.n	80009e0 <InputProcess+0x214>
            case 3: { CurrentState = 4; break; }
 8000960:	4b2a      	ldr	r3, [pc, #168]	@ (8000a0c <InputProcess+0x240>)
 8000962:	2204      	movs	r2, #4
 8000964:	801a      	strh	r2, [r3, #0]
 8000966:	e03b      	b.n	80009e0 <InputProcess+0x214>
            case 4: { CurrentState = 5; break; }
 8000968:	4b28      	ldr	r3, [pc, #160]	@ (8000a0c <InputProcess+0x240>)
 800096a:	2205      	movs	r2, #5
 800096c:	801a      	strh	r2, [r3, #0]
 800096e:	e037      	b.n	80009e0 <InputProcess+0x214>
            case 5: { CurrentState = 6; break; }
 8000970:	4b26      	ldr	r3, [pc, #152]	@ (8000a0c <InputProcess+0x240>)
 8000972:	2206      	movs	r2, #6
 8000974:	801a      	strh	r2, [r3, #0]
 8000976:	e033      	b.n	80009e0 <InputProcess+0x214>
            case 6: { CurrentState = 3; break; }
 8000978:	4b24      	ldr	r3, [pc, #144]	@ (8000a0c <InputProcess+0x240>)
 800097a:	2203      	movs	r2, #3
 800097c:	801a      	strh	r2, [r3, #0]
 800097e:	e02f      	b.n	80009e0 <InputProcess+0x214>
            case 7: { CurrentState = 8; break; }
 8000980:	4b22      	ldr	r3, [pc, #136]	@ (8000a0c <InputProcess+0x240>)
 8000982:	2208      	movs	r2, #8
 8000984:	801a      	strh	r2, [r3, #0]
 8000986:	e02b      	b.n	80009e0 <InputProcess+0x214>
            case 8: { CurrentState = 9; break; }
 8000988:	4b20      	ldr	r3, [pc, #128]	@ (8000a0c <InputProcess+0x240>)
 800098a:	2209      	movs	r2, #9
 800098c:	801a      	strh	r2, [r3, #0]
 800098e:	e027      	b.n	80009e0 <InputProcess+0x214>
            case 9: { CurrentState = 10; break; }
 8000990:	4b1e      	ldr	r3, [pc, #120]	@ (8000a0c <InputProcess+0x240>)
 8000992:	220a      	movs	r2, #10
 8000994:	801a      	strh	r2, [r3, #0]
 8000996:	e023      	b.n	80009e0 <InputProcess+0x214>
            case 10: { CurrentState = 7; break; }
 8000998:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <InputProcess+0x240>)
 800099a:	2207      	movs	r2, #7
 800099c:	801a      	strh	r2, [r3, #0]
 800099e:	e01f      	b.n	80009e0 <InputProcess+0x214>
            case 11: { CurrentState = 12; break; }
 80009a0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a0c <InputProcess+0x240>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	801a      	strh	r2, [r3, #0]
 80009a6:	e01b      	b.n	80009e0 <InputProcess+0x214>
            case 12: { CurrentState = 11; break; }
 80009a8:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <InputProcess+0x240>)
 80009aa:	220b      	movs	r2, #11
 80009ac:	801a      	strh	r2, [r3, #0]
 80009ae:	e017      	b.n	80009e0 <InputProcess+0x214>
            case 13: { CurrentState = 14; break; }
 80009b0:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <InputProcess+0x240>)
 80009b2:	220e      	movs	r2, #14
 80009b4:	801a      	strh	r2, [r3, #0]
 80009b6:	e013      	b.n	80009e0 <InputProcess+0x214>
            case 14: { CurrentState = 15; break; }
 80009b8:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <InputProcess+0x240>)
 80009ba:	220f      	movs	r2, #15
 80009bc:	801a      	strh	r2, [r3, #0]
 80009be:	e00f      	b.n	80009e0 <InputProcess+0x214>
            case 15: { CurrentState = 16; break; }
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <InputProcess+0x240>)
 80009c2:	2210      	movs	r2, #16
 80009c4:	801a      	strh	r2, [r3, #0]
 80009c6:	e00b      	b.n	80009e0 <InputProcess+0x214>
            case 16: { CurrentState = 13; break; }
 80009c8:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <InputProcess+0x240>)
 80009ca:	220d      	movs	r2, #13
 80009cc:	801a      	strh	r2, [r3, #0]
 80009ce:	e007      	b.n	80009e0 <InputProcess+0x214>
            case 17: { CurrentState = 18; break; }
 80009d0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <InputProcess+0x240>)
 80009d2:	2212      	movs	r2, #18
 80009d4:	801a      	strh	r2, [r3, #0]
 80009d6:	e003      	b.n	80009e0 <InputProcess+0x214>
            case 18: { CurrentState = 17; break; }
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <InputProcess+0x240>)
 80009da:	2211      	movs	r2, #17
 80009dc:	801a      	strh	r2, [r3, #0]
 80009de:	bf00      	nop
            }
        Refresh();
 80009e0:	f7ff fede 	bl	80007a0 <Refresh>
    }
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000ff2 	.word	0x20000ff2
 80009ec:	20001280 	.word	0x20001280
 80009f0:	0007a11f 	.word	0x0007a11f
 80009f4:	2000000e 	.word	0x2000000e
 80009f8:	20000fe4 	.word	0x20000fe4
 80009fc:	2000000d 	.word	0x2000000d
 8000a00:	2000000f 	.word	0x2000000f
 8000a04:	20000fe8 	.word	0x20000fe8
 8000a08:	20000010 	.word	0x20000010
 8000a0c:	20000fec 	.word	0x20000fec

08000a10 <TETRIS_main>:

void TETRIS_main() {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
	if (1) {
		// Initialising
		ArrayReset();
 8000a16:	f7ff fd61 	bl	80004dc <ArrayReset>
		Colour(6); // Set default text colour to white
 8000a1a:	2006      	movs	r0, #6
 8000a1c:	f005 f8f8 	bl	8005c10 <Colour>
		NextPiece = Random(18); // Generate the first tetromino
 8000a20:	2012      	movs	r0, #18
 8000a22:	f005 f885 	bl	8005b30 <Random>
 8000a26:	4603      	mov	r3, r0
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	4b8e      	ldr	r3, [pc, #568]	@ (8000c64 <TETRIS_main+0x254>)
 8000a2c:	801a      	strh	r2, [r3, #0]
		Level = 1;
 8000a2e:	4b8e      	ldr	r3, [pc, #568]	@ (8000c68 <TETRIS_main+0x258>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	601a      	str	r2, [r3, #0]
		tetrominoLocX = Random(16) + 2;
 8000a34:	2010      	movs	r0, #16
 8000a36:	f005 f87b 	bl	8005b30 <Random>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	3302      	adds	r3, #2
 8000a3e:	4a8b      	ldr	r2, [pc, #556]	@ (8000c6c <TETRIS_main+0x25c>)
 8000a40:	6013      	str	r3, [r2, #0]
		tetrominoLocY = 1;
 8000a42:	4b8b      	ldr	r3, [pc, #556]	@ (8000c70 <TETRIS_main+0x260>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	601a      	str	r2, [r3, #0]
		colour = Random(5) + 1;
 8000a48:	2005      	movs	r0, #5
 8000a4a:	f005 f871 	bl	8005b30 <Random>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	3301      	adds	r3, #1
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	4b87      	ldr	r3, [pc, #540]	@ (8000c74 <TETRIS_main+0x264>)
 8000a58:	801a      	strh	r2, [r3, #0]
		CurrentState = NextPiece;
 8000a5a:	4b82      	ldr	r3, [pc, #520]	@ (8000c64 <TETRIS_main+0x254>)
 8000a5c:	881a      	ldrh	r2, [r3, #0]
 8000a5e:	4b86      	ldr	r3, [pc, #536]	@ (8000c78 <TETRIS_main+0x268>)
 8000a60:	801a      	strh	r2, [r3, #0]

		BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000a62:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000a66:	f006 f981 	bl	8006d6c <BSP_LCD_Clear>
		khung();
 8000a6a:	f000 f91d 	bl	8000ca8 <khung>

		while (1) // Infinite loop (or game loop, technically)
		{
			InputProcess();
 8000a6e:	f7ff fead 	bl	80007cc <InputProcess>
			// Statement checks whether a new tetromino should be generated
			if (NewTetromino && !Pause)
 8000a72:	4b82      	ldr	r3, [pc, #520]	@ (8000c7c <TETRIS_main+0x26c>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d06e      	beq.n	8000b58 <TETRIS_main+0x148>
 8000a7a:	4b81      	ldr	r3, [pc, #516]	@ (8000c80 <TETRIS_main+0x270>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	f083 0301 	eor.w	r3, r3, #1
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d067      	beq.n	8000b58 <TETRIS_main+0x148>
			{
				tetrominoLocX = Random(16) + 2;
 8000a88:	2010      	movs	r0, #16
 8000a8a:	f005 f851 	bl	8005b30 <Random>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	3302      	adds	r3, #2
 8000a92:	4a76      	ldr	r2, [pc, #472]	@ (8000c6c <TETRIS_main+0x25c>)
 8000a94:	6013      	str	r3, [r2, #0]
				tetrominoLocY = 1;
 8000a96:	4b76      	ldr	r3, [pc, #472]	@ (8000c70 <TETRIS_main+0x260>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	601a      	str	r2, [r3, #0]
				colour = Random(5) + 1;
 8000a9c:	2005      	movs	r0, #5
 8000a9e:	f005 f847 	bl	8005b30 <Random>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	4b72      	ldr	r3, [pc, #456]	@ (8000c74 <TETRIS_main+0x264>)
 8000aac:	801a      	strh	r2, [r3, #0]
				CurrentState = NextPiece;
 8000aae:	4b6d      	ldr	r3, [pc, #436]	@ (8000c64 <TETRIS_main+0x254>)
 8000ab0:	881a      	ldrh	r2, [r3, #0]
 8000ab2:	4b71      	ldr	r3, [pc, #452]	@ (8000c78 <TETRIS_main+0x268>)
 8000ab4:	801a      	strh	r2, [r3, #0]
				NextPiece = Random(18);
 8000ab6:	2012      	movs	r0, #18
 8000ab8:	f005 f83a 	bl	8005b30 <Random>
 8000abc:	4603      	mov	r3, r0
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	4b68      	ldr	r3, [pc, #416]	@ (8000c64 <TETRIS_main+0x254>)
 8000ac2:	801a      	strh	r2, [r3, #0]
				TETRIS_Score += CheckFullRow() * 5;
 8000ac4:	f7ff fe1c 	bl	8000700 <CheckFullRow>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	4613      	mov	r3, r2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	441a      	add	r2, r3
 8000ad0:	4b6c      	ldr	r3, [pc, #432]	@ (8000c84 <TETRIS_main+0x274>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	4a6b      	ldr	r2, [pc, #428]	@ (8000c84 <TETRIS_main+0x274>)
 8000ad8:	6013      	str	r3, [r2, #0]
				NewTetromino = false;
 8000ada:	4b68      	ldr	r3, [pc, #416]	@ (8000c7c <TETRIS_main+0x26c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]

				khung();
 8000ae0:	f000 f8e2 	bl	8000ca8 <khung>
				Refresh();
 8000ae4:	f7ff fe5c 	bl	80007a0 <Refresh>

				// Print score
				TETRIS_PrintScore();
 8000ae8:	f000 f928 	bl	8000d3c <TETRIS_PrintScore>

				// Print next piece
				BSP_LCD_SetFont(&Font12);
 8000aec:	4866      	ldr	r0, [pc, #408]	@ (8000c88 <TETRIS_main+0x278>)
 8000aee:	f006 f923 	bl	8006d38 <BSP_LCD_SetFont>
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000af2:	f04f 30ff 	mov.w	r0, #4294967295
 8000af6:	f006 f8ed 	bl	8006cd4 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000afa:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000afe:	f006 f901 	bl	8006d04 <BSP_LCD_SetBackColor>
				BSP_LCD_DisplayStringAt(150, 15, (uint8_t *) "NEXT PIECE", LEFT_MODE);
 8000b02:	2303      	movs	r3, #3
 8000b04:	4a61      	ldr	r2, [pc, #388]	@ (8000c8c <TETRIS_main+0x27c>)
 8000b06:	210f      	movs	r1, #15
 8000b08:	2096      	movs	r0, #150	@ 0x96
 8000b0a:	f006 f99b 	bl	8006e44 <BSP_LCD_DisplayStringAt>
				PrintNextPiece(30, 5);
 8000b0e:	2105      	movs	r1, #5
 8000b10:	201e      	movs	r0, #30
 8000b12:	f004 f8a1 	bl	8004c58 <PrintNextPiece>

				// Print level

				//Statement increases level
				if (TETRIS_Score % 10 == 0 && TETRIS_Score > 0 && fullrow)
 8000b16:	4b5b      	ldr	r3, [pc, #364]	@ (8000c84 <TETRIS_main+0x274>)
 8000b18:	6819      	ldr	r1, [r3, #0]
 8000b1a:	4b5d      	ldr	r3, [pc, #372]	@ (8000c90 <TETRIS_main+0x280>)
 8000b1c:	fb83 2301 	smull	r2, r3, r3, r1
 8000b20:	109a      	asrs	r2, r3, #2
 8000b22:	17cb      	asrs	r3, r1, #31
 8000b24:	1ad2      	subs	r2, r2, r3
 8000b26:	4613      	mov	r3, r2
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	4413      	add	r3, r2
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	1aca      	subs	r2, r1, r3
 8000b30:	2a00      	cmp	r2, #0
 8000b32:	d111      	bne.n	8000b58 <TETRIS_main+0x148>
 8000b34:	4b53      	ldr	r3, [pc, #332]	@ (8000c84 <TETRIS_main+0x274>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	dd0d      	ble.n	8000b58 <TETRIS_main+0x148>
 8000b3c:	4b55      	ldr	r3, [pc, #340]	@ (8000c94 <TETRIS_main+0x284>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d009      	beq.n	8000b58 <TETRIS_main+0x148>
				{
					Level++;
 8000b44:	4b48      	ldr	r3, [pc, #288]	@ (8000c68 <TETRIS_main+0x258>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	4a47      	ldr	r2, [pc, #284]	@ (8000c68 <TETRIS_main+0x258>)
 8000b4c:	6013      	str	r3, [r2, #0]
					FallingSpeed -= 20;
 8000b4e:	4b52      	ldr	r3, [pc, #328]	@ (8000c98 <TETRIS_main+0x288>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	3b14      	subs	r3, #20
 8000b54:	4a50      	ldr	r2, [pc, #320]	@ (8000c98 <TETRIS_main+0x288>)
 8000b56:	6013      	str	r3, [r2, #0]

			}

			// Statement controls the dropping speed of tetrominoes
			// The bigger the value, the slower the tetrominoes will drop
			if (DelayTime == FallingSpeed && !Pause)
 8000b58:	4b50      	ldr	r3, [pc, #320]	@ (8000c9c <TETRIS_main+0x28c>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b4e      	ldr	r3, [pc, #312]	@ (8000c98 <TETRIS_main+0x288>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d111      	bne.n	8000b88 <TETRIS_main+0x178>
 8000b64:	4b46      	ldr	r3, [pc, #280]	@ (8000c80 <TETRIS_main+0x270>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	f083 0301 	eor.w	r3, r3, #1
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d00a      	beq.n	8000b88 <TETRIS_main+0x178>
			{
				tetrominoLocY++;
 8000b72:	4b3f      	ldr	r3, [pc, #252]	@ (8000c70 <TETRIS_main+0x260>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	3301      	adds	r3, #1
 8000b78:	4a3d      	ldr	r2, [pc, #244]	@ (8000c70 <TETRIS_main+0x260>)
 8000b7a:	6013      	str	r3, [r2, #0]
				DelayTime = 0;
 8000b7c:	4b47      	ldr	r3, [pc, #284]	@ (8000c9c <TETRIS_main+0x28c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]

				Refresh();
 8000b82:	f7ff fe0d 	bl	80007a0 <Refresh>
 8000b86:	e00b      	b.n	8000ba0 <TETRIS_main+0x190>
			}
			else if (!Pause) DelayTime++;
 8000b88:	4b3d      	ldr	r3, [pc, #244]	@ (8000c80 <TETRIS_main+0x270>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	f083 0301 	eor.w	r3, r3, #1
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d004      	beq.n	8000ba0 <TETRIS_main+0x190>
 8000b96:	4b41      	ldr	r3, [pc, #260]	@ (8000c9c <TETRIS_main+0x28c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	4a3f      	ldr	r2, [pc, #252]	@ (8000c9c <TETRIS_main+0x28c>)
 8000b9e:	6013      	str	r3, [r2, #0]

			// Statement ends the current game
			// A.K.A "GAME OVER"
			for (int i = 1; i <= 20; i++)
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	e059      	b.n	8000c5a <TETRIS_main+0x24a>
				if (tetris[i][2] != 0)
 8000ba6:	493e      	ldr	r1, [pc, #248]	@ (8000ca0 <TETRIS_main+0x290>)
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	4613      	mov	r3, r2
 8000bac:	011b      	lsls	r3, r3, #4
 8000bae:	1a9b      	subs	r3, r3, r2
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	440b      	add	r3, r1
 8000bb4:	3308      	adds	r3, #8
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d04b      	beq.n	8000c54 <TETRIS_main+0x244>
				{
					// Print "Game Over"
					BSP_LCD_SetFont(&Font12);
 8000bbc:	4832      	ldr	r0, [pc, #200]	@ (8000c88 <TETRIS_main+0x278>)
 8000bbe:	f006 f8bb 	bl	8006d38 <BSP_LCD_SetFont>
					BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc6:	f006 f885 	bl	8006cd4 <BSP_LCD_SetTextColor>
					BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000bca:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000bce:	f006 f899 	bl	8006d04 <BSP_LCD_SetBackColor>
					BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 35, (uint8_t *)"GAME OVER", LEFT_MODE);
 8000bd2:	f006 f80f 	bl	8006bf4 <BSP_LCD_GetYSize>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	085b      	lsrs	r3, r3, #1
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	3323      	adds	r3, #35	@ 0x23
 8000bde:	b299      	uxth	r1, r3
 8000be0:	2303      	movs	r3, #3
 8000be2:	4a30      	ldr	r2, [pc, #192]	@ (8000ca4 <TETRIS_main+0x294>)
 8000be4:	2000      	movs	r0, #0
 8000be6:	f006 f92d 	bl	8006e44 <BSP_LCD_DisplayStringAt>
					Pause = true;
 8000bea:	4b25      	ldr	r3, [pc, #148]	@ (8000c80 <TETRIS_main+0x270>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	701a      	strb	r2, [r3, #0]
					if (isAnyKeyPressed() == 1) {
 8000bf0:	f004 ffc6 	bl	8005b80 <isAnyKeyPressed>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d12c      	bne.n	8000c54 <TETRIS_main+0x244>
						// Delete "Game Over"
						BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000bfa:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000bfe:	f006 f869 	bl	8006cd4 <BSP_LCD_SetTextColor>
						BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000c02:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000c06:	f006 f87d 	bl	8006d04 <BSP_LCD_SetBackColor>
						BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 35, (uint8_t *)"GAME OVER", LEFT_MODE);
 8000c0a:	f005 fff3 	bl	8006bf4 <BSP_LCD_GetYSize>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	085b      	lsrs	r3, r3, #1
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	3323      	adds	r3, #35	@ 0x23
 8000c16:	b299      	uxth	r1, r3
 8000c18:	2303      	movs	r3, #3
 8000c1a:	4a22      	ldr	r2, [pc, #136]	@ (8000ca4 <TETRIS_main+0x294>)
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f006 f911 	bl	8006e44 <BSP_LCD_DisplayStringAt>
						Pause = false;
 8000c22:	4b17      	ldr	r3, [pc, #92]	@ (8000c80 <TETRIS_main+0x270>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]
						ArrayReset();
 8000c28:	f7ff fc58 	bl	80004dc <ArrayReset>
						PrintArray(1, 1);
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f7ff fc9c 	bl	800056c <PrintArray>
						TETRIS_Score = 0;
 8000c34:	4b13      	ldr	r3, [pc, #76]	@ (8000c84 <TETRIS_main+0x274>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
						Level = 1;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c68 <TETRIS_main+0x258>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	601a      	str	r2, [r3, #0]
						NextPiece = Random(18);
 8000c40:	2012      	movs	r0, #18
 8000c42:	f004 ff75 	bl	8005b30 <Random>
 8000c46:	4603      	mov	r3, r0
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <TETRIS_main+0x254>)
 8000c4c:	801a      	strh	r2, [r3, #0]
						NewTetromino = true;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <TETRIS_main+0x26c>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i <= 20; i++)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3301      	adds	r3, #1
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b14      	cmp	r3, #20
 8000c5e:	dda2      	ble.n	8000ba6 <TETRIS_main+0x196>
			InputProcess();
 8000c60:	e705      	b.n	8000a6e <TETRIS_main+0x5e>
 8000c62:	bf00      	nop
 8000c64:	20000fee 	.word	0x20000fee
 8000c68:	20000004 	.word	0x20000004
 8000c6c:	20000fe4 	.word	0x20000fe4
 8000c70:	20000fe8 	.word	0x20000fe8
 8000c74:	20000ff0 	.word	0x20000ff0
 8000c78:	20000fec 	.word	0x20000fec
 8000c7c:	2000000c 	.word	0x2000000c
 8000c80:	20000ff2 	.word	0x20000ff2
 8000c84:	20000fe0 	.word	0x20000fe0
 8000c88:	200001a0 	.word	0x200001a0
 8000c8c:	0800bbec 	.word	0x0800bbec
 8000c90:	66666667 	.word	0x66666667
 8000c94:	20000ff3 	.word	0x20000ff3
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	200001d0 	.word	0x200001d0
 8000ca4:	0800bbf8 	.word	0x0800bbf8

08000ca8 <khung>:
				}
		}
	}
}

void khung() {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
	for (int i = 0; i < 22; i++) {
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	e00a      	b.n	8000cca <khung+0x22>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f006 f80c 	bl	8006cd4 <BSP_LCD_SetTextColor>
		PrintXY(i, 0);
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	68f8      	ldr	r0, [r7, #12]
 8000cc0:	f004 ff86 	bl	8005bd0 <PrintXY>
	for (int i = 0; i < 22; i++) {
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	2b15      	cmp	r3, #21
 8000cce:	ddf1      	ble.n	8000cb4 <khung+0xc>
	}

	for (int y = 0; y < 22; y++) {
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	e019      	b.n	8000d0a <khung+0x62>
		for (int x = 0; x < 22; x++) {
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	e010      	b.n	8000cfe <khung+0x56>
			if (x == 0 || x == 21) {
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d002      	beq.n	8000ce8 <khung+0x40>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b15      	cmp	r3, #21
 8000ce6:	d107      	bne.n	8000cf8 <khung+0x50>
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f005 fff2 	bl	8006cd4 <BSP_LCD_SetTextColor>
				PrintXY(x, y);
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f004 ff6c 	bl	8005bd0 <PrintXY>
		for (int x = 0; x < 22; x++) {
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b15      	cmp	r3, #21
 8000d02:	ddeb      	ble.n	8000cdc <khung+0x34>
	for (int y = 0; y < 22; y++) {
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	3301      	adds	r3, #1
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	2b15      	cmp	r3, #21
 8000d0e:	dde2      	ble.n	8000cd6 <khung+0x2e>
			}
		}
	}

	for (int i = 0; i < 22; i++) {
 8000d10:	2300      	movs	r3, #0
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	e00a      	b.n	8000d2c <khung+0x84>
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000d16:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1a:	f005 ffdb 	bl	8006cd4 <BSP_LCD_SetTextColor>
			PrintXY(i, 22);
 8000d1e:	2116      	movs	r1, #22
 8000d20:	6838      	ldr	r0, [r7, #0]
 8000d22:	f004 ff55 	bl	8005bd0 <PrintXY>
	for (int i = 0; i < 22; i++) {
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	2b15      	cmp	r3, #21
 8000d30:	ddf1      	ble.n	8000d16 <khung+0x6e>
		}
}
 8000d32:	bf00      	nop
 8000d34:	bf00      	nop
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <TETRIS_PrintScore>:

void TETRIS_PrintScore() {
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b099      	sub	sp, #100	@ 0x64
 8000d40:	af00      	add	r7, sp, #0
	int Digit[20], Score_temp;

	Score_temp = TETRIS_Score;
 8000d42:	4bb5      	ldr	r3, [pc, #724]	@ (8001018 <TETRIS_PrintScore+0x2dc>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	65fb      	str	r3, [r7, #92]	@ 0x5c

	BSP_LCD_SetFont(&Font12);
 8000d48:	48b4      	ldr	r0, [pc, #720]	@ (800101c <TETRIS_PrintScore+0x2e0>)
 8000d4a:	f005 fff5 	bl	8006d38 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d52:	f005 ffbf 	bl	8006cd4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000d56:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000d5a:	f005 ffd3 	bl	8006d04 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 20, (uint8_t *) "SCORE:                ", LEFT_MODE);
 8000d5e:	f005 ff49 	bl	8006bf4 <BSP_LCD_GetYSize>
 8000d62:	4603      	mov	r3, r0
 8000d64:	085b      	lsrs	r3, r3, #1
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	3314      	adds	r3, #20
 8000d6a:	b299      	uxth	r1, r3
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	4aac      	ldr	r2, [pc, #688]	@ (8001020 <TETRIS_PrintScore+0x2e4>)
 8000d70:	2000      	movs	r0, #0
 8000d72:	f006 f867 	bl	8006e44 <BSP_LCD_DisplayStringAt>

	if (Score_temp == 0) {
 8000d76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d10c      	bne.n	8000d96 <TETRIS_PrintScore+0x5a>
		BSP_LCD_DisplayStringAt(49, BSP_LCD_GetYSize() / 2 + 20, (uint8_t *) "0", LEFT_MODE);
 8000d7c:	f005 ff3a 	bl	8006bf4 <BSP_LCD_GetYSize>
 8000d80:	4603      	mov	r3, r0
 8000d82:	085b      	lsrs	r3, r3, #1
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	3314      	adds	r3, #20
 8000d88:	b299      	uxth	r1, r3
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	4aa5      	ldr	r2, [pc, #660]	@ (8001024 <TETRIS_PrintScore+0x2e8>)
 8000d8e:	2031      	movs	r0, #49	@ 0x31
 8000d90:	f006 f858 	bl	8006e44 <BSP_LCD_DisplayStringAt>
				j++;
				break;
			}
		}
	}
}
 8000d94:	e13b      	b.n	800100e <TETRIS_PrintScore+0x2d2>
		int n = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	65bb      	str	r3, [r7, #88]	@ 0x58
		while (Score_temp != 0) {
 8000d9a:	e01c      	b.n	8000dd6 <TETRIS_PrintScore+0x9a>
			Digit[n] = Score_temp % 10;
 8000d9c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8000d9e:	4ba2      	ldr	r3, [pc, #648]	@ (8001028 <TETRIS_PrintScore+0x2ec>)
 8000da0:	fb83 2301 	smull	r2, r3, r3, r1
 8000da4:	109a      	asrs	r2, r3, #2
 8000da6:	17cb      	asrs	r3, r1, #31
 8000da8:	1ad2      	subs	r2, r2, r3
 8000daa:	4613      	mov	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	1aca      	subs	r2, r1, r3
 8000db4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	3360      	adds	r3, #96	@ 0x60
 8000dba:	443b      	add	r3, r7
 8000dbc:	f843 2c60 	str.w	r2, [r3, #-96]
			n++;
 8000dc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	65bb      	str	r3, [r7, #88]	@ 0x58
			Score_temp /= 10;
 8000dc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000dc8:	4a97      	ldr	r2, [pc, #604]	@ (8001028 <TETRIS_PrintScore+0x2ec>)
 8000dca:	fb82 1203 	smull	r1, r2, r2, r3
 8000dce:	1092      	asrs	r2, r2, #2
 8000dd0:	17db      	asrs	r3, r3, #31
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while (Score_temp != 0) {
 8000dd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1df      	bne.n	8000d9c <TETRIS_PrintScore+0x60>
		int j = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	657b      	str	r3, [r7, #84]	@ 0x54
		for (int i = n - 1; i >= 0; i--) {
 8000de0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000de2:	3b01      	subs	r3, #1
 8000de4:	653b      	str	r3, [r7, #80]	@ 0x50
 8000de6:	e10e      	b.n	8001006 <TETRIS_PrintScore+0x2ca>
			switch (Digit[i]) {
 8000de8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	3360      	adds	r3, #96	@ 0x60
 8000dee:	443b      	add	r3, r7
 8000df0:	f853 3c60 	ldr.w	r3, [r3, #-96]
 8000df4:	2b09      	cmp	r3, #9
 8000df6:	f200 8103 	bhi.w	8001000 <TETRIS_PrintScore+0x2c4>
 8000dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8000e00 <TETRIS_PrintScore+0xc4>)
 8000dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e00:	08000e29 	.word	0x08000e29
 8000e04:	08000e59 	.word	0x08000e59
 8000e08:	08000e89 	.word	0x08000e89
 8000e0c:	08000eb9 	.word	0x08000eb9
 8000e10:	08000ee9 	.word	0x08000ee9
 8000e14:	08000f19 	.word	0x08000f19
 8000e18:	08000f49 	.word	0x08000f49
 8000e1c:	08000f79 	.word	0x08000f79
 8000e20:	08000fa9 	.word	0x08000fa9
 8000e24:	08000fd1 	.word	0x08000fd1
				BSP_LCD_DisplayStringAt(49 + j*7, BSP_LCD_GetYSize() / 2 + 20, (uint8_t *) "0", LEFT_MODE);
 8000e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	00d2      	lsls	r2, r2, #3
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	3331      	adds	r3, #49	@ 0x31
 8000e36:	b29c      	uxth	r4, r3
 8000e38:	f005 fedc 	bl	8006bf4 <BSP_LCD_GetYSize>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	085b      	lsrs	r3, r3, #1
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	3314      	adds	r3, #20
 8000e44:	b299      	uxth	r1, r3
 8000e46:	2303      	movs	r3, #3
 8000e48:	4a76      	ldr	r2, [pc, #472]	@ (8001024 <TETRIS_PrintScore+0x2e8>)
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	f005 fffa 	bl	8006e44 <BSP_LCD_DisplayStringAt>
				j++;
 8000e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e52:	3301      	adds	r3, #1
 8000e54:	657b      	str	r3, [r7, #84]	@ 0x54
				break;
 8000e56:	e0d3      	b.n	8001000 <TETRIS_PrintScore+0x2c4>
				BSP_LCD_DisplayStringAt(49 + j*7, BSP_LCD_GetYSize() / 2 + 20, (uint8_t *) "1", LEFT_MODE);
 8000e58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	00d2      	lsls	r2, r2, #3
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	3331      	adds	r3, #49	@ 0x31
 8000e66:	b29c      	uxth	r4, r3
 8000e68:	f005 fec4 	bl	8006bf4 <BSP_LCD_GetYSize>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	085b      	lsrs	r3, r3, #1
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	3314      	adds	r3, #20
 8000e74:	b299      	uxth	r1, r3
 8000e76:	2303      	movs	r3, #3
 8000e78:	4a6c      	ldr	r2, [pc, #432]	@ (800102c <TETRIS_PrintScore+0x2f0>)
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	f005 ffe2 	bl	8006e44 <BSP_LCD_DisplayStringAt>
				j++;
 8000e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e82:	3301      	adds	r3, #1
 8000e84:	657b      	str	r3, [r7, #84]	@ 0x54
				break;
 8000e86:	e0bb      	b.n	8001000 <TETRIS_PrintScore+0x2c4>
				BSP_LCD_DisplayStringAt(49 + j*7, BSP_LCD_GetYSize() / 2 + 20, (uint8_t *) "2", LEFT_MODE);
 8000e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	00d2      	lsls	r2, r2, #3
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	3331      	adds	r3, #49	@ 0x31
 8000e96:	b29c      	uxth	r4, r3
 8000e98:	f005 feac 	bl	8006bf4 <BSP_LCD_GetYSize>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	085b      	lsrs	r3, r3, #1
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	3314      	adds	r3, #20
 8000ea4:	b299      	uxth	r1, r3
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	4a61      	ldr	r2, [pc, #388]	@ (8001030 <TETRIS_PrintScore+0x2f4>)
 8000eaa:	4620      	mov	r0, r4
 8000eac:	f005 ffca 	bl	8006e44 <BSP_LCD_DisplayStringAt>
				j++;
 8000eb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	657b      	str	r3, [r7, #84]	@ 0x54
				break;
 8000eb6:	e0a3      	b.n	8001000 <TETRIS_PrintScore+0x2c4>
				BSP_LCD_DisplayStringAt(49 + j*7, BSP_LCD_GetYSize() / 2 + 20, (uint8_t *) "3", LEFT_MODE);
 8000eb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	00d2      	lsls	r2, r2, #3
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	3331      	adds	r3, #49	@ 0x31
 8000ec6:	b29c      	uxth	r4, r3
 8000ec8:	f005 fe94 	bl	8006bf4 <BSP_LCD_GetYSize>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	085b      	lsrs	r3, r3, #1
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	3314      	adds	r3, #20
 8000ed4:	b299      	uxth	r1, r3
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	4a56      	ldr	r2, [pc, #344]	@ (8001034 <TETRIS_PrintScore+0x2f8>)
 8000eda:	4620      	mov	r0, r4
 8000edc:	f005 ffb2 	bl	8006e44 <BSP_LCD_DisplayStringAt>
				j++;
 8000ee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	657b      	str	r3, [r7, #84]	@ 0x54
				break;
 8000ee6:	e08b      	b.n	8001000 <TETRIS_PrintScore+0x2c4>
				BSP_LCD_DisplayStringAt(49 + j*7, BSP_LCD_GetYSize() / 2 + 20, (uint8_t *) "4", LEFT_MODE);
 8000ee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	461a      	mov	r2, r3
 8000eee:	00d2      	lsls	r2, r2, #3
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	3331      	adds	r3, #49	@ 0x31
 8000ef6:	b29c      	uxth	r4, r3
 8000ef8:	f005 fe7c 	bl	8006bf4 <BSP_LCD_GetYSize>
 8000efc:	4603      	mov	r3, r0
 8000efe:	085b      	lsrs	r3, r3, #1
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	3314      	adds	r3, #20
 8000f04:	b299      	uxth	r1, r3
 8000f06:	2303      	movs	r3, #3
 8000f08:	4a4b      	ldr	r2, [pc, #300]	@ (8001038 <TETRIS_PrintScore+0x2fc>)
 8000f0a:	4620      	mov	r0, r4
 8000f0c:	f005 ff9a 	bl	8006e44 <BSP_LCD_DisplayStringAt>
				j++;
 8000f10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f12:	3301      	adds	r3, #1
 8000f14:	657b      	str	r3, [r7, #84]	@ 0x54
				break;
 8000f16:	e073      	b.n	8001000 <TETRIS_PrintScore+0x2c4>
				BSP_LCD_DisplayStringAt(49 + j*7, BSP_LCD_GetYSize() / 2 + 20, (uint8_t *) "5", LEFT_MODE);
 8000f18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	00d2      	lsls	r2, r2, #3
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	3331      	adds	r3, #49	@ 0x31
 8000f26:	b29c      	uxth	r4, r3
 8000f28:	f005 fe64 	bl	8006bf4 <BSP_LCD_GetYSize>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	085b      	lsrs	r3, r3, #1
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	3314      	adds	r3, #20
 8000f34:	b299      	uxth	r1, r3
 8000f36:	2303      	movs	r3, #3
 8000f38:	4a40      	ldr	r2, [pc, #256]	@ (800103c <TETRIS_PrintScore+0x300>)
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	f005 ff82 	bl	8006e44 <BSP_LCD_DisplayStringAt>
				j++;
 8000f40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f42:	3301      	adds	r3, #1
 8000f44:	657b      	str	r3, [r7, #84]	@ 0x54
				break;
 8000f46:	e05b      	b.n	8001000 <TETRIS_PrintScore+0x2c4>
				BSP_LCD_DisplayStringAt(49 + j*7, BSP_LCD_GetYSize() / 2 + 20, (uint8_t *) "6", LEFT_MODE);
 8000f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	00d2      	lsls	r2, r2, #3
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	3331      	adds	r3, #49	@ 0x31
 8000f56:	b29c      	uxth	r4, r3
 8000f58:	f005 fe4c 	bl	8006bf4 <BSP_LCD_GetYSize>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	085b      	lsrs	r3, r3, #1
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	3314      	adds	r3, #20
 8000f64:	b299      	uxth	r1, r3
 8000f66:	2303      	movs	r3, #3
 8000f68:	4a35      	ldr	r2, [pc, #212]	@ (8001040 <TETRIS_PrintScore+0x304>)
 8000f6a:	4620      	mov	r0, r4
 8000f6c:	f005 ff6a 	bl	8006e44 <BSP_LCD_DisplayStringAt>
				j++;
 8000f70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f72:	3301      	adds	r3, #1
 8000f74:	657b      	str	r3, [r7, #84]	@ 0x54
				break;
 8000f76:	e043      	b.n	8001000 <TETRIS_PrintScore+0x2c4>
				BSP_LCD_DisplayStringAt(49 + j*7, BSP_LCD_GetYSize() / 2 + 20, (uint8_t *) "7", LEFT_MODE);
 8000f78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	00d2      	lsls	r2, r2, #3
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	3331      	adds	r3, #49	@ 0x31
 8000f86:	b29c      	uxth	r4, r3
 8000f88:	f005 fe34 	bl	8006bf4 <BSP_LCD_GetYSize>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	085b      	lsrs	r3, r3, #1
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	3314      	adds	r3, #20
 8000f94:	b299      	uxth	r1, r3
 8000f96:	2303      	movs	r3, #3
 8000f98:	4a2a      	ldr	r2, [pc, #168]	@ (8001044 <TETRIS_PrintScore+0x308>)
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	f005 ff52 	bl	8006e44 <BSP_LCD_DisplayStringAt>
				j++;
 8000fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	657b      	str	r3, [r7, #84]	@ 0x54
				break;
 8000fa6:	e02b      	b.n	8001000 <TETRIS_PrintScore+0x2c4>
				BSP_LCD_DisplayStringAt(49 + j, BSP_LCD_GetYSize() / 2 + 20, (uint8_t *) "8", LEFT_MODE);
 8000fa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	3331      	adds	r3, #49	@ 0x31
 8000fae:	b29c      	uxth	r4, r3
 8000fb0:	f005 fe20 	bl	8006bf4 <BSP_LCD_GetYSize>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	085b      	lsrs	r3, r3, #1
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	3314      	adds	r3, #20
 8000fbc:	b299      	uxth	r1, r3
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	4a21      	ldr	r2, [pc, #132]	@ (8001048 <TETRIS_PrintScore+0x30c>)
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f005 ff3e 	bl	8006e44 <BSP_LCD_DisplayStringAt>
				j++;
 8000fc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fca:	3301      	adds	r3, #1
 8000fcc:	657b      	str	r3, [r7, #84]	@ 0x54
				break;
 8000fce:	e017      	b.n	8001000 <TETRIS_PrintScore+0x2c4>
				BSP_LCD_DisplayStringAt(49 + j*7, BSP_LCD_GetYSize() / 2 + 20, (uint8_t *) "9", LEFT_MODE);
 8000fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	00d2      	lsls	r2, r2, #3
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	3331      	adds	r3, #49	@ 0x31
 8000fde:	b29c      	uxth	r4, r3
 8000fe0:	f005 fe08 	bl	8006bf4 <BSP_LCD_GetYSize>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	085b      	lsrs	r3, r3, #1
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	3314      	adds	r3, #20
 8000fec:	b299      	uxth	r1, r3
 8000fee:	2303      	movs	r3, #3
 8000ff0:	4a16      	ldr	r2, [pc, #88]	@ (800104c <TETRIS_PrintScore+0x310>)
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	f005 ff26 	bl	8006e44 <BSP_LCD_DisplayStringAt>
				j++;
 8000ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	657b      	str	r3, [r7, #84]	@ 0x54
				break;
 8000ffe:	bf00      	nop
		for (int i = n - 1; i >= 0; i--) {
 8001000:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001002:	3b01      	subs	r3, #1
 8001004:	653b      	str	r3, [r7, #80]	@ 0x50
 8001006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001008:	2b00      	cmp	r3, #0
 800100a:	f6bf aeed 	bge.w	8000de8 <TETRIS_PrintScore+0xac>
}
 800100e:	bf00      	nop
 8001010:	3764      	adds	r7, #100	@ 0x64
 8001012:	46bd      	mov	sp, r7
 8001014:	bd90      	pop	{r4, r7, pc}
 8001016:	bf00      	nop
 8001018:	20000fe0 	.word	0x20000fe0
 800101c:	200001a0 	.word	0x200001a0
 8001020:	0800bc04 	.word	0x0800bc04
 8001024:	0800bc1c 	.word	0x0800bc1c
 8001028:	66666667 	.word	0x66666667
 800102c:	0800bc20 	.word	0x0800bc20
 8001030:	0800bc24 	.word	0x0800bc24
 8001034:	0800bc28 	.word	0x0800bc28
 8001038:	0800bc2c 	.word	0x0800bc2c
 800103c:	0800bc30 	.word	0x0800bc30
 8001040:	0800bc34 	.word	0x0800bc34
 8001044:	0800bc38 	.word	0x0800bc38
 8001048:	0800bc3c 	.word	0x0800bc3c
 800104c:	0800bc40 	.word	0x0800bc40

08001050 <BlockI1>:
#include "TETRIS.h"

// Functions that draw Tetrominoes

void BlockI1(int x, int y)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
	// Print the block on the screen
	PrintXY(x + 1, y + 1);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	1c5a      	adds	r2, r3, #1
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	4619      	mov	r1, r3
 8001064:	4610      	mov	r0, r2
 8001066:	f004 fdb3 	bl	8005bd0 <PrintXY>
	PrintXY(x, y + 1);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	4619      	mov	r1, r3
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f004 fdad 	bl	8005bd0 <PrintXY>
	PrintXY(x + 2, y + 1);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	1c9a      	adds	r2, r3, #2
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	4619      	mov	r1, r3
 8001080:	4610      	mov	r0, r2
 8001082:	f004 fda5 	bl	8005bd0 <PrintXY>
	PrintXY(x + 3, y + 1);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	1cda      	adds	r2, r3, #3
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	4619      	mov	r1, r3
 8001090:	4610      	mov	r0, r2
 8001092:	f004 fd9d 	bl	8005bd0 <PrintXY>

	CurrentState = 1;
 8001096:	4b91      	ldr	r3, [pc, #580]	@ (80012dc <BlockI1+0x28c>)
 8001098:	2201      	movs	r2, #1
 800109a:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 20 ||
 800109c:	4b90      	ldr	r3, [pc, #576]	@ (80012e0 <BlockI1+0x290>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b13      	cmp	r3, #19
 80010a2:	dc3e      	bgt.n	8001122 <BlockI1+0xd2>
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0 ||
 80010a4:	4b8f      	ldr	r3, [pc, #572]	@ (80012e4 <BlockI1+0x294>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b8d      	ldr	r3, [pc, #564]	@ (80012e0 <BlockI1+0x290>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	1c99      	adds	r1, r3, #2
 80010ae:	488e      	ldr	r0, [pc, #568]	@ (80012e8 <BlockI1+0x298>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	011b      	lsls	r3, r3, #4
 80010b4:	1a9b      	subs	r3, r3, r2
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	440b      	add	r3, r1
 80010ba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 20 ||
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d12f      	bne.n	8001122 <BlockI1+0xd2>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 80010c2:	4b88      	ldr	r3, [pc, #544]	@ (80012e4 <BlockI1+0x294>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	1c5a      	adds	r2, r3, #1
 80010c8:	4b85      	ldr	r3, [pc, #532]	@ (80012e0 <BlockI1+0x290>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	1c99      	adds	r1, r3, #2
 80010ce:	4886      	ldr	r0, [pc, #536]	@ (80012e8 <BlockI1+0x298>)
 80010d0:	4613      	mov	r3, r2
 80010d2:	011b      	lsls	r3, r3, #4
 80010d4:	1a9b      	subs	r3, r3, r2
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	440b      	add	r3, r1
 80010da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0 ||
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d11f      	bne.n	8001122 <BlockI1+0xd2>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] != 0 ||
 80010e2:	4b80      	ldr	r3, [pc, #512]	@ (80012e4 <BlockI1+0x294>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	1c9a      	adds	r2, r3, #2
 80010e8:	4b7d      	ldr	r3, [pc, #500]	@ (80012e0 <BlockI1+0x290>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	1c99      	adds	r1, r3, #2
 80010ee:	487e      	ldr	r0, [pc, #504]	@ (80012e8 <BlockI1+0x298>)
 80010f0:	4613      	mov	r3, r2
 80010f2:	011b      	lsls	r3, r3, #4
 80010f4:	1a9b      	subs	r3, r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	440b      	add	r3, r1
 80010fa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10f      	bne.n	8001122 <BlockI1+0xd2>
		tetris[tetrominoLocX + 3][tetrominoLocY + 2] != 0)
 8001102:	4b78      	ldr	r3, [pc, #480]	@ (80012e4 <BlockI1+0x294>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	1cda      	adds	r2, r3, #3
 8001108:	4b75      	ldr	r3, [pc, #468]	@ (80012e0 <BlockI1+0x290>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	1c99      	adds	r1, r3, #2
 800110e:	4876      	ldr	r0, [pc, #472]	@ (80012e8 <BlockI1+0x298>)
 8001110:	4613      	mov	r3, r2
 8001112:	011b      	lsls	r3, r3, #4
 8001114:	1a9b      	subs	r3, r3, r2
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	440b      	add	r3, r1
 800111a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] != 0 ||
 800111e:	2b00      	cmp	r3, #0
 8001120:	d04f      	beq.n	80011c2 <BlockI1+0x172>
	{
		while (isDownKey() == 1);
 8001122:	bf00      	nop
 8001124:	f004 fcce 	bl	8005ac4 <isDownKey>
 8001128:	4603      	mov	r3, r0
 800112a:	2b01      	cmp	r3, #1
 800112c:	d0fa      	beq.n	8001124 <BlockI1+0xd4>
		NewTetromino = true;
 800112e:	4b6f      	ldr	r3, [pc, #444]	@ (80012ec <BlockI1+0x29c>)
 8001130:	2201      	movs	r2, #1
 8001132:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 8001134:	4b6e      	ldr	r3, [pc, #440]	@ (80012f0 <BlockI1+0x2a0>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 800113a:	4b6e      	ldr	r3, [pc, #440]	@ (80012f4 <BlockI1+0x2a4>)
 800113c:	8818      	ldrh	r0, [r3, #0]
 800113e:	4b69      	ldr	r3, [pc, #420]	@ (80012e4 <BlockI1+0x294>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	4b66      	ldr	r3, [pc, #408]	@ (80012e0 <BlockI1+0x290>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	1c59      	adds	r1, r3, #1
 800114a:	4604      	mov	r4, r0
 800114c:	4866      	ldr	r0, [pc, #408]	@ (80012e8 <BlockI1+0x298>)
 800114e:	4613      	mov	r3, r2
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	1a9b      	subs	r3, r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	440b      	add	r3, r1
 8001158:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] = colour;
 800115c:	4b65      	ldr	r3, [pc, #404]	@ (80012f4 <BlockI1+0x2a4>)
 800115e:	8818      	ldrh	r0, [r3, #0]
 8001160:	4b60      	ldr	r3, [pc, #384]	@ (80012e4 <BlockI1+0x294>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b5e      	ldr	r3, [pc, #376]	@ (80012e0 <BlockI1+0x290>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	1c59      	adds	r1, r3, #1
 800116a:	4604      	mov	r4, r0
 800116c:	485e      	ldr	r0, [pc, #376]	@ (80012e8 <BlockI1+0x298>)
 800116e:	4613      	mov	r3, r2
 8001170:	011b      	lsls	r3, r3, #4
 8001172:	1a9b      	subs	r3, r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	440b      	add	r3, r1
 8001178:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] = colour;
 800117c:	4b5d      	ldr	r3, [pc, #372]	@ (80012f4 <BlockI1+0x2a4>)
 800117e:	8818      	ldrh	r0, [r3, #0]
 8001180:	4b58      	ldr	r3, [pc, #352]	@ (80012e4 <BlockI1+0x294>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	1c9a      	adds	r2, r3, #2
 8001186:	4b56      	ldr	r3, [pc, #344]	@ (80012e0 <BlockI1+0x290>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	1c59      	adds	r1, r3, #1
 800118c:	4604      	mov	r4, r0
 800118e:	4856      	ldr	r0, [pc, #344]	@ (80012e8 <BlockI1+0x298>)
 8001190:	4613      	mov	r3, r2
 8001192:	011b      	lsls	r3, r3, #4
 8001194:	1a9b      	subs	r3, r3, r2
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	440b      	add	r3, r1
 800119a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] = colour;
 800119e:	4b55      	ldr	r3, [pc, #340]	@ (80012f4 <BlockI1+0x2a4>)
 80011a0:	8818      	ldrh	r0, [r3, #0]
 80011a2:	4b50      	ldr	r3, [pc, #320]	@ (80012e4 <BlockI1+0x294>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	1cda      	adds	r2, r3, #3
 80011a8:	4b4d      	ldr	r3, [pc, #308]	@ (80012e0 <BlockI1+0x290>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	1c59      	adds	r1, r3, #1
 80011ae:	4604      	mov	r4, r0
 80011b0:	484d      	ldr	r0, [pc, #308]	@ (80012e8 <BlockI1+0x298>)
 80011b2:	4613      	mov	r3, r2
 80011b4:	011b      	lsls	r3, r3, #4
 80011b6:	1a9b      	subs	r3, r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	440b      	add	r3, r1
 80011bc:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 80011c0:	e002      	b.n	80011c8 <BlockI1+0x178>
	}
	else CanMoveDown = true;
 80011c2:	4b4b      	ldr	r3, [pc, #300]	@ (80012f0 <BlockI1+0x2a0>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	701a      	strb	r2, [r3, #0]

	// Statement checks whether the tetromino could move left
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0		&&
 80011c8:	4b46      	ldr	r3, [pc, #280]	@ (80012e4 <BlockI1+0x294>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b44      	ldr	r3, [pc, #272]	@ (80012e0 <BlockI1+0x290>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	1c59      	adds	r1, r3, #1
 80011d2:	4845      	ldr	r0, [pc, #276]	@ (80012e8 <BlockI1+0x298>)
 80011d4:	4613      	mov	r3, r2
 80011d6:	011b      	lsls	r3, r3, #4
 80011d8:	1a9b      	subs	r3, r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	440b      	add	r3, r1
 80011de:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d133      	bne.n	800124e <BlockI1+0x1fe>
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 	&&
 80011e6:	4b3f      	ldr	r3, [pc, #252]	@ (80012e4 <BlockI1+0x294>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	1e5a      	subs	r2, r3, #1
 80011ec:	4b3c      	ldr	r3, [pc, #240]	@ (80012e0 <BlockI1+0x290>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	1c59      	adds	r1, r3, #1
 80011f2:	483d      	ldr	r0, [pc, #244]	@ (80012e8 <BlockI1+0x298>)
 80011f4:	4613      	mov	r3, r2
 80011f6:	011b      	lsls	r3, r3, #4
 80011f8:	1a9b      	subs	r3, r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	440b      	add	r3, r1
 80011fe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0		&&
 8001202:	2b00      	cmp	r3, #0
 8001204:	d123      	bne.n	800124e <BlockI1+0x1fe>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 	&&
 8001206:	4b37      	ldr	r3, [pc, #220]	@ (80012e4 <BlockI1+0x294>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	1c5a      	adds	r2, r3, #1
 800120c:	4b34      	ldr	r3, [pc, #208]	@ (80012e0 <BlockI1+0x290>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	1c59      	adds	r1, r3, #1
 8001212:	4835      	ldr	r0, [pc, #212]	@ (80012e8 <BlockI1+0x298>)
 8001214:	4613      	mov	r3, r2
 8001216:	011b      	lsls	r3, r3, #4
 8001218:	1a9b      	subs	r3, r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	440b      	add	r3, r1
 800121e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 	&&
 8001222:	2b00      	cmp	r3, #0
 8001224:	d113      	bne.n	800124e <BlockI1+0x1fe>
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0
 8001226:	4b2f      	ldr	r3, [pc, #188]	@ (80012e4 <BlockI1+0x294>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	1c9a      	adds	r2, r3, #2
 800122c:	4b2c      	ldr	r3, [pc, #176]	@ (80012e0 <BlockI1+0x290>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	1c59      	adds	r1, r3, #1
 8001232:	482d      	ldr	r0, [pc, #180]	@ (80012e8 <BlockI1+0x298>)
 8001234:	4613      	mov	r3, r2
 8001236:	011b      	lsls	r3, r3, #4
 8001238:	1a9b      	subs	r3, r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	440b      	add	r3, r1
 800123e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 	&&
 8001242:	2b00      	cmp	r3, #0
 8001244:	d103      	bne.n	800124e <BlockI1+0x1fe>
	)
		CanMoveLeft = true;
 8001246:	4b2c      	ldr	r3, [pc, #176]	@ (80012f8 <BlockI1+0x2a8>)
 8001248:	2201      	movs	r2, #1
 800124a:	701a      	strb	r2, [r3, #0]
 800124c:	e002      	b.n	8001254 <BlockI1+0x204>
	else CanMoveLeft = false;
 800124e:	4b2a      	ldr	r3, [pc, #168]	@ (80012f8 <BlockI1+0x2a8>)
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]

	//Statement checks whether the tetromino could move right
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0	&&
 8001254:	4b23      	ldr	r3, [pc, #140]	@ (80012e4 <BlockI1+0x294>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	1c9a      	adds	r2, r3, #2
 800125a:	4b21      	ldr	r3, [pc, #132]	@ (80012e0 <BlockI1+0x290>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	1c59      	adds	r1, r3, #1
 8001260:	4821      	ldr	r0, [pc, #132]	@ (80012e8 <BlockI1+0x298>)
 8001262:	4613      	mov	r3, r2
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	1a9b      	subs	r3, r3, r2
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	440b      	add	r3, r1
 800126c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d145      	bne.n	8001300 <BlockI1+0x2b0>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 	&&
 8001274:	4b1b      	ldr	r3, [pc, #108]	@ (80012e4 <BlockI1+0x294>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	1c5a      	adds	r2, r3, #1
 800127a:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <BlockI1+0x290>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	1c59      	adds	r1, r3, #1
 8001280:	4819      	ldr	r0, [pc, #100]	@ (80012e8 <BlockI1+0x298>)
 8001282:	4613      	mov	r3, r2
 8001284:	011b      	lsls	r3, r3, #4
 8001286:	1a9b      	subs	r3, r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	440b      	add	r3, r1
 800128c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0	&&
 8001290:	2b00      	cmp	r3, #0
 8001292:	d135      	bne.n	8001300 <BlockI1+0x2b0>
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 	&&
 8001294:	4b13      	ldr	r3, [pc, #76]	@ (80012e4 <BlockI1+0x294>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	1cda      	adds	r2, r3, #3
 800129a:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <BlockI1+0x290>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	1c59      	adds	r1, r3, #1
 80012a0:	4811      	ldr	r0, [pc, #68]	@ (80012e8 <BlockI1+0x298>)
 80012a2:	4613      	mov	r3, r2
 80012a4:	011b      	lsls	r3, r3, #4
 80012a6:	1a9b      	subs	r3, r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	440b      	add	r3, r1
 80012ac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 	&&
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d125      	bne.n	8001300 <BlockI1+0x2b0>
		tetris[tetrominoLocX + 4][tetrominoLocY + 1] == 0
 80012b4:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <BlockI1+0x294>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	1d1a      	adds	r2, r3, #4
 80012ba:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <BlockI1+0x290>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	1c59      	adds	r1, r3, #1
 80012c0:	4809      	ldr	r0, [pc, #36]	@ (80012e8 <BlockI1+0x298>)
 80012c2:	4613      	mov	r3, r2
 80012c4:	011b      	lsls	r3, r3, #4
 80012c6:	1a9b      	subs	r3, r3, r2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	440b      	add	r3, r1
 80012cc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 	&&
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d115      	bne.n	8001300 <BlockI1+0x2b0>
	)
		CanMoveRight = true;
 80012d4:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <BlockI1+0x2ac>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
 80012da:	e014      	b.n	8001306 <BlockI1+0x2b6>
 80012dc:	20000fec 	.word	0x20000fec
 80012e0:	20000fe8 	.word	0x20000fe8
 80012e4:	20000fe4 	.word	0x20000fe4
 80012e8:	200001d0 	.word	0x200001d0
 80012ec:	2000000c 	.word	0x2000000c
 80012f0:	2000000f 	.word	0x2000000f
 80012f4:	20000ff0 	.word	0x20000ff0
 80012f8:	2000000e 	.word	0x2000000e
 80012fc:	2000000d 	.word	0x2000000d
	else CanMoveRight = false;
 8001300:	4b26      	ldr	r3, [pc, #152]	@ (800139c <BlockI1+0x34c>)
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]

	//Statement checks whether the tetromino could rotate (or switch state technically)
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8001306:	4b26      	ldr	r3, [pc, #152]	@ (80013a0 <BlockI1+0x350>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	4b25      	ldr	r3, [pc, #148]	@ (80013a4 <BlockI1+0x354>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	1c59      	adds	r1, r3, #1
 8001312:	4825      	ldr	r0, [pc, #148]	@ (80013a8 <BlockI1+0x358>)
 8001314:	4613      	mov	r3, r2
 8001316:	011b      	lsls	r3, r3, #4
 8001318:	1a9b      	subs	r3, r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	440b      	add	r3, r1
 800131e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d132      	bne.n	800138c <BlockI1+0x33c>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 8001326:	4b1e      	ldr	r3, [pc, #120]	@ (80013a0 <BlockI1+0x350>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	1c5a      	adds	r2, r3, #1
 800132c:	4b1d      	ldr	r3, [pc, #116]	@ (80013a4 <BlockI1+0x354>)
 800132e:	6819      	ldr	r1, [r3, #0]
 8001330:	481d      	ldr	r0, [pc, #116]	@ (80013a8 <BlockI1+0x358>)
 8001332:	4613      	mov	r3, r2
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	1a9b      	subs	r3, r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	440b      	add	r3, r1
 800133c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8001340:	2b00      	cmp	r3, #0
 8001342:	d123      	bne.n	800138c <BlockI1+0x33c>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 8001344:	4b16      	ldr	r3, [pc, #88]	@ (80013a0 <BlockI1+0x350>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	1c5a      	adds	r2, r3, #1
 800134a:	4b16      	ldr	r3, [pc, #88]	@ (80013a4 <BlockI1+0x354>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	1c99      	adds	r1, r3, #2
 8001350:	4815      	ldr	r0, [pc, #84]	@ (80013a8 <BlockI1+0x358>)
 8001352:	4613      	mov	r3, r2
 8001354:	011b      	lsls	r3, r3, #4
 8001356:	1a9b      	subs	r3, r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	440b      	add	r3, r1
 800135c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 8001360:	2b00      	cmp	r3, #0
 8001362:	d113      	bne.n	800138c <BlockI1+0x33c>
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] == 0)
 8001364:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <BlockI1+0x350>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	1c5a      	adds	r2, r3, #1
 800136a:	4b0e      	ldr	r3, [pc, #56]	@ (80013a4 <BlockI1+0x354>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	1cd9      	adds	r1, r3, #3
 8001370:	480d      	ldr	r0, [pc, #52]	@ (80013a8 <BlockI1+0x358>)
 8001372:	4613      	mov	r3, r2
 8001374:	011b      	lsls	r3, r3, #4
 8001376:	1a9b      	subs	r3, r3, r2
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	440b      	add	r3, r1
 800137c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 8001380:	2b00      	cmp	r3, #0
 8001382:	d103      	bne.n	800138c <BlockI1+0x33c>
		CanRotate = true;
 8001384:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <BlockI1+0x35c>)
 8001386:	2201      	movs	r2, #1
 8001388:	701a      	strb	r2, [r3, #0]
 800138a:	e003      	b.n	8001394 <BlockI1+0x344>
	else CanRotate = false;
 800138c:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <BlockI1+0x35c>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
	// Print collision points
	//PrintXY(tetrominoLocX, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 3, tetrominoLocY + 2); cout << char(248);
}
 8001392:	bf00      	nop
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	bd90      	pop	{r4, r7, pc}
 800139c:	2000000d 	.word	0x2000000d
 80013a0:	20000fe4 	.word	0x20000fe4
 80013a4:	20000fe8 	.word	0x20000fe8
 80013a8:	200001d0 	.word	0x200001d0
 80013ac:	20000010 	.word	0x20000010

080013b0 <BlockI2>:

void BlockI2(int x, int y)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	1c5a      	adds	r2, r3, #1
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	4619      	mov	r1, r3
 80013c4:	4610      	mov	r0, r2
 80013c6:	f004 fc03 	bl	8005bd0 <PrintXY>
	PrintXY(x + 1, y);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3301      	adds	r3, #1
 80013ce:	6839      	ldr	r1, [r7, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f004 fbfd 	bl	8005bd0 <PrintXY>
	PrintXY(x + 1, y + 2);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	1c5a      	adds	r2, r3, #1
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	3302      	adds	r3, #2
 80013de:	4619      	mov	r1, r3
 80013e0:	4610      	mov	r0, r2
 80013e2:	f004 fbf5 	bl	8005bd0 <PrintXY>
	PrintXY(x + 1, y + 3);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	3303      	adds	r3, #3
 80013ee:	4619      	mov	r1, r3
 80013f0:	4610      	mov	r0, r2
 80013f2:	f004 fbed 	bl	8005bd0 <PrintXY>

	CurrentState = 2;
 80013f6:	4b9e      	ldr	r3, [pc, #632]	@ (8001670 <BlockI2+0x2c0>)
 80013f8:	2202      	movs	r2, #2
 80013fa:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 18 ||
 80013fc:	4b9d      	ldr	r3, [pc, #628]	@ (8001674 <BlockI2+0x2c4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b11      	cmp	r3, #17
 8001402:	dc0f      	bgt.n	8001424 <BlockI2+0x74>
		tetris[tetrominoLocX + 1][tetrominoLocY + 4] != 0)
 8001404:	4b9c      	ldr	r3, [pc, #624]	@ (8001678 <BlockI2+0x2c8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	1c5a      	adds	r2, r3, #1
 800140a:	4b9a      	ldr	r3, [pc, #616]	@ (8001674 <BlockI2+0x2c4>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	1d19      	adds	r1, r3, #4
 8001410:	489a      	ldr	r0, [pc, #616]	@ (800167c <BlockI2+0x2cc>)
 8001412:	4613      	mov	r3, r2
 8001414:	011b      	lsls	r3, r3, #4
 8001416:	1a9b      	subs	r3, r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	440b      	add	r3, r1
 800141c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 18 ||
 8001420:	2b00      	cmp	r3, #0
 8001422:	d04f      	beq.n	80014c4 <BlockI2+0x114>
	{
		while (isDownKey() == 1);
 8001424:	bf00      	nop
 8001426:	f004 fb4d 	bl	8005ac4 <isDownKey>
 800142a:	4603      	mov	r3, r0
 800142c:	2b01      	cmp	r3, #1
 800142e:	d0fa      	beq.n	8001426 <BlockI2+0x76>
		NewTetromino = true;
 8001430:	4b93      	ldr	r3, [pc, #588]	@ (8001680 <BlockI2+0x2d0>)
 8001432:	2201      	movs	r2, #1
 8001434:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 8001436:	4b93      	ldr	r3, [pc, #588]	@ (8001684 <BlockI2+0x2d4>)
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 800143c:	4b92      	ldr	r3, [pc, #584]	@ (8001688 <BlockI2+0x2d8>)
 800143e:	8818      	ldrh	r0, [r3, #0]
 8001440:	4b8d      	ldr	r3, [pc, #564]	@ (8001678 <BlockI2+0x2c8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	1c5a      	adds	r2, r3, #1
 8001446:	4b8b      	ldr	r3, [pc, #556]	@ (8001674 <BlockI2+0x2c4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	1c59      	adds	r1, r3, #1
 800144c:	4604      	mov	r4, r0
 800144e:	488b      	ldr	r0, [pc, #556]	@ (800167c <BlockI2+0x2cc>)
 8001450:	4613      	mov	r3, r2
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	1a9b      	subs	r3, r3, r2
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	440b      	add	r3, r1
 800145a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] = colour;
 800145e:	4b8a      	ldr	r3, [pc, #552]	@ (8001688 <BlockI2+0x2d8>)
 8001460:	8818      	ldrh	r0, [r3, #0]
 8001462:	4b85      	ldr	r3, [pc, #532]	@ (8001678 <BlockI2+0x2c8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	1c5a      	adds	r2, r3, #1
 8001468:	4b82      	ldr	r3, [pc, #520]	@ (8001674 <BlockI2+0x2c4>)
 800146a:	6819      	ldr	r1, [r3, #0]
 800146c:	4604      	mov	r4, r0
 800146e:	4883      	ldr	r0, [pc, #524]	@ (800167c <BlockI2+0x2cc>)
 8001470:	4613      	mov	r3, r2
 8001472:	011b      	lsls	r3, r3, #4
 8001474:	1a9b      	subs	r3, r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	440b      	add	r3, r1
 800147a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] = colour;
 800147e:	4b82      	ldr	r3, [pc, #520]	@ (8001688 <BlockI2+0x2d8>)
 8001480:	8818      	ldrh	r0, [r3, #0]
 8001482:	4b7d      	ldr	r3, [pc, #500]	@ (8001678 <BlockI2+0x2c8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	4b7a      	ldr	r3, [pc, #488]	@ (8001674 <BlockI2+0x2c4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	1c99      	adds	r1, r3, #2
 800148e:	4604      	mov	r4, r0
 8001490:	487a      	ldr	r0, [pc, #488]	@ (800167c <BlockI2+0x2cc>)
 8001492:	4613      	mov	r3, r2
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	1a9b      	subs	r3, r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	440b      	add	r3, r1
 800149c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] = colour;
 80014a0:	4b79      	ldr	r3, [pc, #484]	@ (8001688 <BlockI2+0x2d8>)
 80014a2:	8818      	ldrh	r0, [r3, #0]
 80014a4:	4b74      	ldr	r3, [pc, #464]	@ (8001678 <BlockI2+0x2c8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	1c5a      	adds	r2, r3, #1
 80014aa:	4b72      	ldr	r3, [pc, #456]	@ (8001674 <BlockI2+0x2c4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	1cd9      	adds	r1, r3, #3
 80014b0:	4604      	mov	r4, r0
 80014b2:	4872      	ldr	r0, [pc, #456]	@ (800167c <BlockI2+0x2cc>)
 80014b4:	4613      	mov	r3, r2
 80014b6:	011b      	lsls	r3, r3, #4
 80014b8:	1a9b      	subs	r3, r3, r2
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	440b      	add	r3, r1
 80014be:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 80014c2:	e002      	b.n	80014ca <BlockI2+0x11a>
	}
	else CanMoveDown = true;
 80014c4:	4b6f      	ldr	r3, [pc, #444]	@ (8001684 <BlockI2+0x2d4>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]

	if (	tetris[tetrominoLocX][tetrominoLocY + 1]	== 0	&&
 80014ca:	4b6b      	ldr	r3, [pc, #428]	@ (8001678 <BlockI2+0x2c8>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4b69      	ldr	r3, [pc, #420]	@ (8001674 <BlockI2+0x2c4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	1c59      	adds	r1, r3, #1
 80014d4:	4869      	ldr	r0, [pc, #420]	@ (800167c <BlockI2+0x2cc>)
 80014d6:	4613      	mov	r3, r2
 80014d8:	011b      	lsls	r3, r3, #4
 80014da:	1a9b      	subs	r3, r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	440b      	add	r3, r1
 80014e0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d12f      	bne.n	8001548 <BlockI2+0x198>
			tetris[tetrominoLocX][tetrominoLocY] 		== 0	&&
 80014e8:	4b63      	ldr	r3, [pc, #396]	@ (8001678 <BlockI2+0x2c8>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b61      	ldr	r3, [pc, #388]	@ (8001674 <BlockI2+0x2c4>)
 80014ee:	6819      	ldr	r1, [r3, #0]
 80014f0:	4862      	ldr	r0, [pc, #392]	@ (800167c <BlockI2+0x2cc>)
 80014f2:	4613      	mov	r3, r2
 80014f4:	011b      	lsls	r3, r3, #4
 80014f6:	1a9b      	subs	r3, r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	440b      	add	r3, r1
 80014fc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (	tetris[tetrominoLocX][tetrominoLocY + 1]	== 0	&&
 8001500:	2b00      	cmp	r3, #0
 8001502:	d121      	bne.n	8001548 <BlockI2+0x198>
			tetris[tetrominoLocX][tetrominoLocY + 2]	== 0	&&
 8001504:	4b5c      	ldr	r3, [pc, #368]	@ (8001678 <BlockI2+0x2c8>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b5a      	ldr	r3, [pc, #360]	@ (8001674 <BlockI2+0x2c4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	1c99      	adds	r1, r3, #2
 800150e:	485b      	ldr	r0, [pc, #364]	@ (800167c <BlockI2+0x2cc>)
 8001510:	4613      	mov	r3, r2
 8001512:	011b      	lsls	r3, r3, #4
 8001514:	1a9b      	subs	r3, r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	440b      	add	r3, r1
 800151a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
			tetris[tetrominoLocX][tetrominoLocY] 		== 0	&&
 800151e:	2b00      	cmp	r3, #0
 8001520:	d112      	bne.n	8001548 <BlockI2+0x198>
			tetris[tetrominoLocX][tetrominoLocY + 3]	== 0
 8001522:	4b55      	ldr	r3, [pc, #340]	@ (8001678 <BlockI2+0x2c8>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	4b53      	ldr	r3, [pc, #332]	@ (8001674 <BlockI2+0x2c4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	1cd9      	adds	r1, r3, #3
 800152c:	4853      	ldr	r0, [pc, #332]	@ (800167c <BlockI2+0x2cc>)
 800152e:	4613      	mov	r3, r2
 8001530:	011b      	lsls	r3, r3, #4
 8001532:	1a9b      	subs	r3, r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	440b      	add	r3, r1
 8001538:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
			tetris[tetrominoLocX][tetrominoLocY + 2]	== 0	&&
 800153c:	2b00      	cmp	r3, #0
 800153e:	d103      	bne.n	8001548 <BlockI2+0x198>
		)
		CanMoveLeft = true;
 8001540:	4b52      	ldr	r3, [pc, #328]	@ (800168c <BlockI2+0x2dc>)
 8001542:	2201      	movs	r2, #1
 8001544:	701a      	strb	r2, [r3, #0]
 8001546:	e002      	b.n	800154e <BlockI2+0x19e>
	else CanMoveLeft = false;
 8001548:	4b50      	ldr	r3, [pc, #320]	@ (800168c <BlockI2+0x2dc>)
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]

	if (	tetris[tetrominoLocX + 2][tetrominoLocY + 1]	== 0	&&
 800154e:	4b4a      	ldr	r3, [pc, #296]	@ (8001678 <BlockI2+0x2c8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	1c9a      	adds	r2, r3, #2
 8001554:	4b47      	ldr	r3, [pc, #284]	@ (8001674 <BlockI2+0x2c4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	1c59      	adds	r1, r3, #1
 800155a:	4848      	ldr	r0, [pc, #288]	@ (800167c <BlockI2+0x2cc>)
 800155c:	4613      	mov	r3, r2
 800155e:	011b      	lsls	r3, r3, #4
 8001560:	1a9b      	subs	r3, r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	440b      	add	r3, r1
 8001566:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d132      	bne.n	80015d4 <BlockI2+0x224>
			tetris[tetrominoLocX + 2][tetrominoLocY] 		== 0	&&
 800156e:	4b42      	ldr	r3, [pc, #264]	@ (8001678 <BlockI2+0x2c8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	1c9a      	adds	r2, r3, #2
 8001574:	4b3f      	ldr	r3, [pc, #252]	@ (8001674 <BlockI2+0x2c4>)
 8001576:	6819      	ldr	r1, [r3, #0]
 8001578:	4840      	ldr	r0, [pc, #256]	@ (800167c <BlockI2+0x2cc>)
 800157a:	4613      	mov	r3, r2
 800157c:	011b      	lsls	r3, r3, #4
 800157e:	1a9b      	subs	r3, r3, r2
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	440b      	add	r3, r1
 8001584:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (	tetris[tetrominoLocX + 2][tetrominoLocY + 1]	== 0	&&
 8001588:	2b00      	cmp	r3, #0
 800158a:	d123      	bne.n	80015d4 <BlockI2+0x224>
			tetris[tetrominoLocX + 2][tetrominoLocY + 2]	== 0	&&
 800158c:	4b3a      	ldr	r3, [pc, #232]	@ (8001678 <BlockI2+0x2c8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	1c9a      	adds	r2, r3, #2
 8001592:	4b38      	ldr	r3, [pc, #224]	@ (8001674 <BlockI2+0x2c4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	1c99      	adds	r1, r3, #2
 8001598:	4838      	ldr	r0, [pc, #224]	@ (800167c <BlockI2+0x2cc>)
 800159a:	4613      	mov	r3, r2
 800159c:	011b      	lsls	r3, r3, #4
 800159e:	1a9b      	subs	r3, r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	440b      	add	r3, r1
 80015a4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
			tetris[tetrominoLocX + 2][tetrominoLocY] 		== 0	&&
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d113      	bne.n	80015d4 <BlockI2+0x224>
			tetris[tetrominoLocX + 2][tetrominoLocY + 3]	== 0
 80015ac:	4b32      	ldr	r3, [pc, #200]	@ (8001678 <BlockI2+0x2c8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	1c9a      	adds	r2, r3, #2
 80015b2:	4b30      	ldr	r3, [pc, #192]	@ (8001674 <BlockI2+0x2c4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	1cd9      	adds	r1, r3, #3
 80015b8:	4830      	ldr	r0, [pc, #192]	@ (800167c <BlockI2+0x2cc>)
 80015ba:	4613      	mov	r3, r2
 80015bc:	011b      	lsls	r3, r3, #4
 80015be:	1a9b      	subs	r3, r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	440b      	add	r3, r1
 80015c4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
			tetris[tetrominoLocX + 2][tetrominoLocY + 2]	== 0	&&
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d103      	bne.n	80015d4 <BlockI2+0x224>
		)
		CanMoveRight = true;
 80015cc:	4b30      	ldr	r3, [pc, #192]	@ (8001690 <BlockI2+0x2e0>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	701a      	strb	r2, [r3, #0]
 80015d2:	e002      	b.n	80015da <BlockI2+0x22a>
	else CanMoveRight = false;
 80015d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001690 <BlockI2+0x2e0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80015da:	4b27      	ldr	r3, [pc, #156]	@ (8001678 <BlockI2+0x2c8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	4b24      	ldr	r3, [pc, #144]	@ (8001674 <BlockI2+0x2c4>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	1c59      	adds	r1, r3, #1
 80015e6:	4825      	ldr	r0, [pc, #148]	@ (800167c <BlockI2+0x2cc>)
 80015e8:	4613      	mov	r3, r2
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	440b      	add	r3, r1
 80015f2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d132      	bne.n	8001660 <BlockI2+0x2b0>
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 80015fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001678 <BlockI2+0x2c8>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001674 <BlockI2+0x2c4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	1c59      	adds	r1, r3, #1
 8001604:	481d      	ldr	r0, [pc, #116]	@ (800167c <BlockI2+0x2cc>)
 8001606:	4613      	mov	r3, r2
 8001608:	011b      	lsls	r3, r3, #4
 800160a:	1a9b      	subs	r3, r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	440b      	add	r3, r1
 8001610:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8001614:	2b00      	cmp	r3, #0
 8001616:	d123      	bne.n	8001660 <BlockI2+0x2b0>
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8001618:	4b17      	ldr	r3, [pc, #92]	@ (8001678 <BlockI2+0x2c8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	1c9a      	adds	r2, r3, #2
 800161e:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <BlockI2+0x2c4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	1c59      	adds	r1, r3, #1
 8001624:	4815      	ldr	r0, [pc, #84]	@ (800167c <BlockI2+0x2cc>)
 8001626:	4613      	mov	r3, r2
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	1a9b      	subs	r3, r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	440b      	add	r3, r1
 8001630:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8001634:	2b00      	cmp	r3, #0
 8001636:	d113      	bne.n	8001660 <BlockI2+0x2b0>
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0)
 8001638:	4b0f      	ldr	r3, [pc, #60]	@ (8001678 <BlockI2+0x2c8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	1cda      	adds	r2, r3, #3
 800163e:	4b0d      	ldr	r3, [pc, #52]	@ (8001674 <BlockI2+0x2c4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	1c59      	adds	r1, r3, #1
 8001644:	480d      	ldr	r0, [pc, #52]	@ (800167c <BlockI2+0x2cc>)
 8001646:	4613      	mov	r3, r2
 8001648:	011b      	lsls	r3, r3, #4
 800164a:	1a9b      	subs	r3, r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	440b      	add	r3, r1
 8001650:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8001654:	2b00      	cmp	r3, #0
 8001656:	d103      	bne.n	8001660 <BlockI2+0x2b0>
		CanRotate = true;
 8001658:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <BlockI2+0x2e4>)
 800165a:	2201      	movs	r2, #1
 800165c:	701a      	strb	r2, [r3, #0]
 800165e:	e003      	b.n	8001668 <BlockI2+0x2b8>
	else CanRotate = false;
 8001660:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <BlockI2+0x2e4>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX + 1, tetrominoLocY - 1); cout << char(248);
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 4); cout << char(248);
}
 8001666:	bf00      	nop
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	bd90      	pop	{r4, r7, pc}
 8001670:	20000fec 	.word	0x20000fec
 8001674:	20000fe8 	.word	0x20000fe8
 8001678:	20000fe4 	.word	0x20000fe4
 800167c:	200001d0 	.word	0x200001d0
 8001680:	2000000c 	.word	0x2000000c
 8001684:	2000000f 	.word	0x2000000f
 8001688:	20000ff0 	.word	0x20000ff0
 800168c:	2000000e 	.word	0x2000000e
 8001690:	2000000d 	.word	0x2000000d
 8001694:	20000010 	.word	0x20000010

08001698 <BlockJ1>:

void BlockJ1(int x, int y)
{
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	3301      	adds	r3, #1
 80016aa:	4619      	mov	r1, r3
 80016ac:	4610      	mov	r0, r2
 80016ae:	f004 fa8f 	bl	8005bd0 <PrintXY>
	PrintXY(x, y + 1);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	3301      	adds	r3, #1
 80016b6:	4619      	mov	r1, r3
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f004 fa89 	bl	8005bd0 <PrintXY>
	PrintXY(x + 2, y + 2);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	1c9a      	adds	r2, r3, #2
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	3302      	adds	r3, #2
 80016c6:	4619      	mov	r1, r3
 80016c8:	4610      	mov	r0, r2
 80016ca:	f004 fa81 	bl	8005bd0 <PrintXY>
	PrintXY(x + 2, y + 1);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	1c9a      	adds	r2, r3, #2
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	3301      	adds	r3, #1
 80016d6:	4619      	mov	r1, r3
 80016d8:	4610      	mov	r0, r2
 80016da:	f004 fa79 	bl	8005bd0 <PrintXY>

	CurrentState = 3;
 80016de:	4bb0      	ldr	r3, [pc, #704]	@ (80019a0 <BlockJ1+0x308>)
 80016e0:	2203      	movs	r2, #3
 80016e2:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 80016e4:	4baf      	ldr	r3, [pc, #700]	@ (80019a4 <BlockJ1+0x30c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b12      	cmp	r3, #18
 80016ea:	dc2e      	bgt.n	800174a <BlockJ1+0xb2>
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0 ||
 80016ec:	4bae      	ldr	r3, [pc, #696]	@ (80019a8 <BlockJ1+0x310>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4bac      	ldr	r3, [pc, #688]	@ (80019a4 <BlockJ1+0x30c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	1c99      	adds	r1, r3, #2
 80016f6:	48ad      	ldr	r0, [pc, #692]	@ (80019ac <BlockJ1+0x314>)
 80016f8:	4613      	mov	r3, r2
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	1a9b      	subs	r3, r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	440b      	add	r3, r1
 8001702:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 8001706:	2b00      	cmp	r3, #0
 8001708:	d11f      	bne.n	800174a <BlockJ1+0xb2>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 800170a:	4ba7      	ldr	r3, [pc, #668]	@ (80019a8 <BlockJ1+0x310>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	4ba4      	ldr	r3, [pc, #656]	@ (80019a4 <BlockJ1+0x30c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	1c99      	adds	r1, r3, #2
 8001716:	48a5      	ldr	r0, [pc, #660]	@ (80019ac <BlockJ1+0x314>)
 8001718:	4613      	mov	r3, r2
 800171a:	011b      	lsls	r3, r3, #4
 800171c:	1a9b      	subs	r3, r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	440b      	add	r3, r1
 8001722:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0 ||
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10f      	bne.n	800174a <BlockJ1+0xb2>
		tetris[tetrominoLocX + 2][tetrominoLocY + 3] != 0)
 800172a:	4b9f      	ldr	r3, [pc, #636]	@ (80019a8 <BlockJ1+0x310>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	1c9a      	adds	r2, r3, #2
 8001730:	4b9c      	ldr	r3, [pc, #624]	@ (80019a4 <BlockJ1+0x30c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	1cd9      	adds	r1, r3, #3
 8001736:	489d      	ldr	r0, [pc, #628]	@ (80019ac <BlockJ1+0x314>)
 8001738:	4613      	mov	r3, r2
 800173a:	011b      	lsls	r3, r3, #4
 800173c:	1a9b      	subs	r3, r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	440b      	add	r3, r1
 8001742:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 8001746:	2b00      	cmp	r3, #0
 8001748:	d04f      	beq.n	80017ea <BlockJ1+0x152>
	{
		while (isDownKey() == 1);
 800174a:	bf00      	nop
 800174c:	f004 f9ba 	bl	8005ac4 <isDownKey>
 8001750:	4603      	mov	r3, r0
 8001752:	2b01      	cmp	r3, #1
 8001754:	d0fa      	beq.n	800174c <BlockJ1+0xb4>
		NewTetromino = true;
 8001756:	4b96      	ldr	r3, [pc, #600]	@ (80019b0 <BlockJ1+0x318>)
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 800175c:	4b95      	ldr	r3, [pc, #596]	@ (80019b4 <BlockJ1+0x31c>)
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 8001762:	4b95      	ldr	r3, [pc, #596]	@ (80019b8 <BlockJ1+0x320>)
 8001764:	8818      	ldrh	r0, [r3, #0]
 8001766:	4b90      	ldr	r3, [pc, #576]	@ (80019a8 <BlockJ1+0x310>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	4b8d      	ldr	r3, [pc, #564]	@ (80019a4 <BlockJ1+0x30c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	1c59      	adds	r1, r3, #1
 8001772:	4604      	mov	r4, r0
 8001774:	488d      	ldr	r0, [pc, #564]	@ (80019ac <BlockJ1+0x314>)
 8001776:	4613      	mov	r3, r2
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	1a9b      	subs	r3, r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	440b      	add	r3, r1
 8001780:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] = colour;
 8001784:	4b8c      	ldr	r3, [pc, #560]	@ (80019b8 <BlockJ1+0x320>)
 8001786:	8818      	ldrh	r0, [r3, #0]
 8001788:	4b87      	ldr	r3, [pc, #540]	@ (80019a8 <BlockJ1+0x310>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b85      	ldr	r3, [pc, #532]	@ (80019a4 <BlockJ1+0x30c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	1c59      	adds	r1, r3, #1
 8001792:	4604      	mov	r4, r0
 8001794:	4885      	ldr	r0, [pc, #532]	@ (80019ac <BlockJ1+0x314>)
 8001796:	4613      	mov	r3, r2
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	1a9b      	subs	r3, r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	440b      	add	r3, r1
 80017a0:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] = colour;
 80017a4:	4b84      	ldr	r3, [pc, #528]	@ (80019b8 <BlockJ1+0x320>)
 80017a6:	8818      	ldrh	r0, [r3, #0]
 80017a8:	4b7f      	ldr	r3, [pc, #508]	@ (80019a8 <BlockJ1+0x310>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	1c9a      	adds	r2, r3, #2
 80017ae:	4b7d      	ldr	r3, [pc, #500]	@ (80019a4 <BlockJ1+0x30c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	1c59      	adds	r1, r3, #1
 80017b4:	4604      	mov	r4, r0
 80017b6:	487d      	ldr	r0, [pc, #500]	@ (80019ac <BlockJ1+0x314>)
 80017b8:	4613      	mov	r3, r2
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	1a9b      	subs	r3, r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	440b      	add	r3, r1
 80017c2:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] = colour;
 80017c6:	4b7c      	ldr	r3, [pc, #496]	@ (80019b8 <BlockJ1+0x320>)
 80017c8:	8818      	ldrh	r0, [r3, #0]
 80017ca:	4b77      	ldr	r3, [pc, #476]	@ (80019a8 <BlockJ1+0x310>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	1c9a      	adds	r2, r3, #2
 80017d0:	4b74      	ldr	r3, [pc, #464]	@ (80019a4 <BlockJ1+0x30c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	1c99      	adds	r1, r3, #2
 80017d6:	4604      	mov	r4, r0
 80017d8:	4874      	ldr	r0, [pc, #464]	@ (80019ac <BlockJ1+0x314>)
 80017da:	4613      	mov	r3, r2
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	1a9b      	subs	r3, r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	440b      	add	r3, r1
 80017e4:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 80017e8:	e002      	b.n	80017f0 <BlockJ1+0x158>
	}
	else CanMoveDown = true;
 80017ea:	4b72      	ldr	r3, [pc, #456]	@ (80019b4 <BlockJ1+0x31c>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0		&&
 80017f0:	4b6d      	ldr	r3, [pc, #436]	@ (80019a8 <BlockJ1+0x310>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b6b      	ldr	r3, [pc, #428]	@ (80019a4 <BlockJ1+0x30c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	1c59      	adds	r1, r3, #1
 80017fa:	486c      	ldr	r0, [pc, #432]	@ (80019ac <BlockJ1+0x314>)
 80017fc:	4613      	mov	r3, r2
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	1a9b      	subs	r3, r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	440b      	add	r3, r1
 8001806:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d133      	bne.n	8001876 <BlockJ1+0x1de>
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 	&&
 800180e:	4b66      	ldr	r3, [pc, #408]	@ (80019a8 <BlockJ1+0x310>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	1e5a      	subs	r2, r3, #1
 8001814:	4b63      	ldr	r3, [pc, #396]	@ (80019a4 <BlockJ1+0x30c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	1c59      	adds	r1, r3, #1
 800181a:	4864      	ldr	r0, [pc, #400]	@ (80019ac <BlockJ1+0x314>)
 800181c:	4613      	mov	r3, r2
 800181e:	011b      	lsls	r3, r3, #4
 8001820:	1a9b      	subs	r3, r3, r2
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	440b      	add	r3, r1
 8001826:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0		&&
 800182a:	2b00      	cmp	r3, #0
 800182c:	d123      	bne.n	8001876 <BlockJ1+0x1de>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0	&&
 800182e:	4b5e      	ldr	r3, [pc, #376]	@ (80019a8 <BlockJ1+0x310>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	1c5a      	adds	r2, r3, #1
 8001834:	4b5b      	ldr	r3, [pc, #364]	@ (80019a4 <BlockJ1+0x30c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	1c59      	adds	r1, r3, #1
 800183a:	485c      	ldr	r0, [pc, #368]	@ (80019ac <BlockJ1+0x314>)
 800183c:	4613      	mov	r3, r2
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	1a9b      	subs	r3, r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	440b      	add	r3, r1
 8001846:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 	&&
 800184a:	2b00      	cmp	r3, #0
 800184c:	d113      	bne.n	8001876 <BlockJ1+0x1de>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0
 800184e:	4b56      	ldr	r3, [pc, #344]	@ (80019a8 <BlockJ1+0x310>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	1c5a      	adds	r2, r3, #1
 8001854:	4b53      	ldr	r3, [pc, #332]	@ (80019a4 <BlockJ1+0x30c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	1c99      	adds	r1, r3, #2
 800185a:	4854      	ldr	r0, [pc, #336]	@ (80019ac <BlockJ1+0x314>)
 800185c:	4613      	mov	r3, r2
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	1a9b      	subs	r3, r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	440b      	add	r3, r1
 8001866:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0	&&
 800186a:	2b00      	cmp	r3, #0
 800186c:	d103      	bne.n	8001876 <BlockJ1+0x1de>
	)
		CanMoveLeft = true;
 800186e:	4b53      	ldr	r3, [pc, #332]	@ (80019bc <BlockJ1+0x324>)
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]
 8001874:	e002      	b.n	800187c <BlockJ1+0x1e4>
	else CanMoveLeft = false;
 8001876:	4b51      	ldr	r3, [pc, #324]	@ (80019bc <BlockJ1+0x324>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0	&&
 800187c:	4b4a      	ldr	r3, [pc, #296]	@ (80019a8 <BlockJ1+0x310>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	1c9a      	adds	r2, r3, #2
 8001882:	4b48      	ldr	r3, [pc, #288]	@ (80019a4 <BlockJ1+0x30c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	1c59      	adds	r1, r3, #1
 8001888:	4848      	ldr	r0, [pc, #288]	@ (80019ac <BlockJ1+0x314>)
 800188a:	4613      	mov	r3, r2
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	1a9b      	subs	r3, r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	440b      	add	r3, r1
 8001894:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d133      	bne.n	8001904 <BlockJ1+0x26c>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 	&&
 800189c:	4b42      	ldr	r3, [pc, #264]	@ (80019a8 <BlockJ1+0x310>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	1c5a      	adds	r2, r3, #1
 80018a2:	4b40      	ldr	r3, [pc, #256]	@ (80019a4 <BlockJ1+0x30c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	1c59      	adds	r1, r3, #1
 80018a8:	4840      	ldr	r0, [pc, #256]	@ (80019ac <BlockJ1+0x314>)
 80018aa:	4613      	mov	r3, r2
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	1a9b      	subs	r3, r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	440b      	add	r3, r1
 80018b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0	&&
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d123      	bne.n	8001904 <BlockJ1+0x26c>
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0	&&
 80018bc:	4b3a      	ldr	r3, [pc, #232]	@ (80019a8 <BlockJ1+0x310>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	1cda      	adds	r2, r3, #3
 80018c2:	4b38      	ldr	r3, [pc, #224]	@ (80019a4 <BlockJ1+0x30c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	1c59      	adds	r1, r3, #1
 80018c8:	4838      	ldr	r0, [pc, #224]	@ (80019ac <BlockJ1+0x314>)
 80018ca:	4613      	mov	r3, r2
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	1a9b      	subs	r3, r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	440b      	add	r3, r1
 80018d4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 	&&
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d113      	bne.n	8001904 <BlockJ1+0x26c>
		tetris[tetrominoLocX + 3][tetrominoLocY + 2] == 0
 80018dc:	4b32      	ldr	r3, [pc, #200]	@ (80019a8 <BlockJ1+0x310>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	1cda      	adds	r2, r3, #3
 80018e2:	4b30      	ldr	r3, [pc, #192]	@ (80019a4 <BlockJ1+0x30c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	1c99      	adds	r1, r3, #2
 80018e8:	4830      	ldr	r0, [pc, #192]	@ (80019ac <BlockJ1+0x314>)
 80018ea:	4613      	mov	r3, r2
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	1a9b      	subs	r3, r3, r2
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	440b      	add	r3, r1
 80018f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0	&&
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d103      	bne.n	8001904 <BlockJ1+0x26c>
	)
		CanMoveRight = true;
 80018fc:	4b30      	ldr	r3, [pc, #192]	@ (80019c0 <BlockJ1+0x328>)
 80018fe:	2201      	movs	r2, #1
 8001900:	701a      	strb	r2, [r3, #0]
 8001902:	e002      	b.n	800190a <BlockJ1+0x272>
	else CanMoveRight = false;
 8001904:	4b2e      	ldr	r3, [pc, #184]	@ (80019c0 <BlockJ1+0x328>)
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 800190a:	4b27      	ldr	r3, [pc, #156]	@ (80019a8 <BlockJ1+0x310>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	4b24      	ldr	r3, [pc, #144]	@ (80019a4 <BlockJ1+0x30c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	1c59      	adds	r1, r3, #1
 8001916:	4825      	ldr	r0, [pc, #148]	@ (80019ac <BlockJ1+0x314>)
 8001918:	4613      	mov	r3, r2
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	1a9b      	subs	r3, r3, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	440b      	add	r3, r1
 8001922:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d131      	bne.n	800198e <BlockJ1+0x2f6>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 800192a:	4b1f      	ldr	r3, [pc, #124]	@ (80019a8 <BlockJ1+0x310>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	4b1c      	ldr	r3, [pc, #112]	@ (80019a4 <BlockJ1+0x30c>)
 8001932:	6819      	ldr	r1, [r3, #0]
 8001934:	481d      	ldr	r0, [pc, #116]	@ (80019ac <BlockJ1+0x314>)
 8001936:	4613      	mov	r3, r2
 8001938:	011b      	lsls	r3, r3, #4
 800193a:	1a9b      	subs	r3, r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	440b      	add	r3, r1
 8001940:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8001944:	2b00      	cmp	r3, #0
 8001946:	d122      	bne.n	800198e <BlockJ1+0x2f6>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 8001948:	4b17      	ldr	r3, [pc, #92]	@ (80019a8 <BlockJ1+0x310>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	1c5a      	adds	r2, r3, #1
 800194e:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <BlockJ1+0x30c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	1c99      	adds	r1, r3, #2
 8001954:	4815      	ldr	r0, [pc, #84]	@ (80019ac <BlockJ1+0x314>)
 8001956:	4613      	mov	r3, r2
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	1a9b      	subs	r3, r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	440b      	add	r3, r1
 8001960:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 8001964:	2b00      	cmp	r3, #0
 8001966:	d112      	bne.n	800198e <BlockJ1+0x2f6>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0)
 8001968:	4b0f      	ldr	r3, [pc, #60]	@ (80019a8 <BlockJ1+0x310>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <BlockJ1+0x30c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	1c99      	adds	r1, r3, #2
 8001972:	480e      	ldr	r0, [pc, #56]	@ (80019ac <BlockJ1+0x314>)
 8001974:	4613      	mov	r3, r2
 8001976:	011b      	lsls	r3, r3, #4
 8001978:	1a9b      	subs	r3, r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	440b      	add	r3, r1
 800197e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 8001982:	2b00      	cmp	r3, #0
 8001984:	d103      	bne.n	800198e <BlockJ1+0x2f6>
		CanRotate = true;
 8001986:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <BlockJ1+0x32c>)
 8001988:	2201      	movs	r2, #1
 800198a:	701a      	strb	r2, [r3, #0]
 800198c:	e003      	b.n	8001996 <BlockJ1+0x2fe>
	else CanRotate = false;
 800198e:	4b0d      	ldr	r3, [pc, #52]	@ (80019c4 <BlockJ1+0x32c>)
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 3); cout << char(248);
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	bd90      	pop	{r4, r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000fec 	.word	0x20000fec
 80019a4:	20000fe8 	.word	0x20000fe8
 80019a8:	20000fe4 	.word	0x20000fe4
 80019ac:	200001d0 	.word	0x200001d0
 80019b0:	2000000c 	.word	0x2000000c
 80019b4:	2000000f 	.word	0x2000000f
 80019b8:	20000ff0 	.word	0x20000ff0
 80019bc:	2000000e 	.word	0x2000000e
 80019c0:	2000000d 	.word	0x2000000d
 80019c4:	20000010 	.word	0x20000010

080019c8 <BlockJ2>:

void BlockJ2(int x, int y)
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	3301      	adds	r3, #1
 80019da:	4619      	mov	r1, r3
 80019dc:	4610      	mov	r0, r2
 80019de:	f004 f8f7 	bl	8005bd0 <PrintXY>
	PrintXY(x + 1, y);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3301      	adds	r3, #1
 80019e6:	6839      	ldr	r1, [r7, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f004 f8f1 	bl	8005bd0 <PrintXY>
	PrintXY(x + 1, y + 2);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	1c5a      	adds	r2, r3, #1
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	3302      	adds	r3, #2
 80019f6:	4619      	mov	r1, r3
 80019f8:	4610      	mov	r0, r2
 80019fa:	f004 f8e9 	bl	8005bd0 <PrintXY>
	PrintXY(x, y + 2);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	3302      	adds	r3, #2
 8001a02:	4619      	mov	r1, r3
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f004 f8e3 	bl	8005bd0 <PrintXY>

	CurrentState = 4;
 8001a0a:	4ba5      	ldr	r3, [pc, #660]	@ (8001ca0 <BlockJ2+0x2d8>)
 8001a0c:	2204      	movs	r2, #4
 8001a0e:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 8001a10:	4ba4      	ldr	r3, [pc, #656]	@ (8001ca4 <BlockJ2+0x2dc>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b12      	cmp	r3, #18
 8001a16:	dc1e      	bgt.n	8001a56 <BlockJ2+0x8e>
		tetris[tetrominoLocX][tetrominoLocY + 3] != 0 ||
 8001a18:	4ba3      	ldr	r3, [pc, #652]	@ (8001ca8 <BlockJ2+0x2e0>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4ba1      	ldr	r3, [pc, #644]	@ (8001ca4 <BlockJ2+0x2dc>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	1cd9      	adds	r1, r3, #3
 8001a22:	48a2      	ldr	r0, [pc, #648]	@ (8001cac <BlockJ2+0x2e4>)
 8001a24:	4613      	mov	r3, r2
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	1a9b      	subs	r3, r3, r2
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	440b      	add	r3, r1
 8001a2e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10f      	bne.n	8001a56 <BlockJ2+0x8e>
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0)
 8001a36:	4b9c      	ldr	r3, [pc, #624]	@ (8001ca8 <BlockJ2+0x2e0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	4b99      	ldr	r3, [pc, #612]	@ (8001ca4 <BlockJ2+0x2dc>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	1cd9      	adds	r1, r3, #3
 8001a42:	489a      	ldr	r0, [pc, #616]	@ (8001cac <BlockJ2+0x2e4>)
 8001a44:	4613      	mov	r3, r2
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	1a9b      	subs	r3, r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	440b      	add	r3, r1
 8001a4e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 3] != 0 ||
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d04e      	beq.n	8001af4 <BlockJ2+0x12c>
	{
		while (isDownKey() == 1);
 8001a56:	bf00      	nop
 8001a58:	f004 f834 	bl	8005ac4 <isDownKey>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d0fa      	beq.n	8001a58 <BlockJ2+0x90>
		NewTetromino = true;
 8001a62:	4b93      	ldr	r3, [pc, #588]	@ (8001cb0 <BlockJ2+0x2e8>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 8001a68:	4b92      	ldr	r3, [pc, #584]	@ (8001cb4 <BlockJ2+0x2ec>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 8001a6e:	4b92      	ldr	r3, [pc, #584]	@ (8001cb8 <BlockJ2+0x2f0>)
 8001a70:	8818      	ldrh	r0, [r3, #0]
 8001a72:	4b8d      	ldr	r3, [pc, #564]	@ (8001ca8 <BlockJ2+0x2e0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	4b8a      	ldr	r3, [pc, #552]	@ (8001ca4 <BlockJ2+0x2dc>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	1c59      	adds	r1, r3, #1
 8001a7e:	4604      	mov	r4, r0
 8001a80:	488a      	ldr	r0, [pc, #552]	@ (8001cac <BlockJ2+0x2e4>)
 8001a82:	4613      	mov	r3, r2
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	1a9b      	subs	r3, r3, r2
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] = colour;
 8001a90:	4b89      	ldr	r3, [pc, #548]	@ (8001cb8 <BlockJ2+0x2f0>)
 8001a92:	8818      	ldrh	r0, [r3, #0]
 8001a94:	4b84      	ldr	r3, [pc, #528]	@ (8001ca8 <BlockJ2+0x2e0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	4b82      	ldr	r3, [pc, #520]	@ (8001ca4 <BlockJ2+0x2dc>)
 8001a9c:	6819      	ldr	r1, [r3, #0]
 8001a9e:	4604      	mov	r4, r0
 8001aa0:	4882      	ldr	r0, [pc, #520]	@ (8001cac <BlockJ2+0x2e4>)
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	011b      	lsls	r3, r3, #4
 8001aa6:	1a9b      	subs	r3, r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	440b      	add	r3, r1
 8001aac:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] = colour;
 8001ab0:	4b81      	ldr	r3, [pc, #516]	@ (8001cb8 <BlockJ2+0x2f0>)
 8001ab2:	8818      	ldrh	r0, [r3, #0]
 8001ab4:	4b7c      	ldr	r3, [pc, #496]	@ (8001ca8 <BlockJ2+0x2e0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	4b7a      	ldr	r3, [pc, #488]	@ (8001ca4 <BlockJ2+0x2dc>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	1c99      	adds	r1, r3, #2
 8001ac0:	4604      	mov	r4, r0
 8001ac2:	487a      	ldr	r0, [pc, #488]	@ (8001cac <BlockJ2+0x2e4>)
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	011b      	lsls	r3, r3, #4
 8001ac8:	1a9b      	subs	r3, r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	440b      	add	r3, r1
 8001ace:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] = colour;
 8001ad2:	4b79      	ldr	r3, [pc, #484]	@ (8001cb8 <BlockJ2+0x2f0>)
 8001ad4:	8818      	ldrh	r0, [r3, #0]
 8001ad6:	4b74      	ldr	r3, [pc, #464]	@ (8001ca8 <BlockJ2+0x2e0>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	4b72      	ldr	r3, [pc, #456]	@ (8001ca4 <BlockJ2+0x2dc>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	1c99      	adds	r1, r3, #2
 8001ae0:	4604      	mov	r4, r0
 8001ae2:	4872      	ldr	r0, [pc, #456]	@ (8001cac <BlockJ2+0x2e4>)
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	1a9b      	subs	r3, r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	440b      	add	r3, r1
 8001aee:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8001af2:	e002      	b.n	8001afa <BlockJ2+0x132>
	}
	else CanMoveDown = true;
 8001af4:	4b6f      	ldr	r3, [pc, #444]	@ (8001cb4 <BlockJ2+0x2ec>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8001afa:	4b6b      	ldr	r3, [pc, #428]	@ (8001ca8 <BlockJ2+0x2e0>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4b69      	ldr	r3, [pc, #420]	@ (8001ca4 <BlockJ2+0x2dc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	1c59      	adds	r1, r3, #1
 8001b04:	4869      	ldr	r0, [pc, #420]	@ (8001cac <BlockJ2+0x2e4>)
 8001b06:	4613      	mov	r3, r2
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	1a9b      	subs	r3, r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	440b      	add	r3, r1
 8001b10:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d130      	bne.n	8001b7a <BlockJ2+0x1b2>
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 8001b18:	4b63      	ldr	r3, [pc, #396]	@ (8001ca8 <BlockJ2+0x2e0>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b61      	ldr	r3, [pc, #388]	@ (8001ca4 <BlockJ2+0x2dc>)
 8001b1e:	6819      	ldr	r1, [r3, #0]
 8001b20:	4862      	ldr	r0, [pc, #392]	@ (8001cac <BlockJ2+0x2e4>)
 8001b22:	4613      	mov	r3, r2
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	1a9b      	subs	r3, r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d122      	bne.n	8001b7a <BlockJ2+0x1b2>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 8001b34:	4b5c      	ldr	r3, [pc, #368]	@ (8001ca8 <BlockJ2+0x2e0>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b5a      	ldr	r3, [pc, #360]	@ (8001ca4 <BlockJ2+0x2dc>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	1c99      	adds	r1, r3, #2
 8001b3e:	485b      	ldr	r0, [pc, #364]	@ (8001cac <BlockJ2+0x2e4>)
 8001b40:	4613      	mov	r3, r2
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	1a9b      	subs	r3, r3, r2
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	440b      	add	r3, r1
 8001b4a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d113      	bne.n	8001b7a <BlockJ2+0x1b2>
		tetris[tetrominoLocX - 1][tetrominoLocY + 2] == 0
 8001b52:	4b55      	ldr	r3, [pc, #340]	@ (8001ca8 <BlockJ2+0x2e0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	1e5a      	subs	r2, r3, #1
 8001b58:	4b52      	ldr	r3, [pc, #328]	@ (8001ca4 <BlockJ2+0x2dc>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	1c99      	adds	r1, r3, #2
 8001b5e:	4853      	ldr	r0, [pc, #332]	@ (8001cac <BlockJ2+0x2e4>)
 8001b60:	4613      	mov	r3, r2
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	440b      	add	r3, r1
 8001b6a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d103      	bne.n	8001b7a <BlockJ2+0x1b2>
	)
		CanMoveLeft = true;
 8001b72:	4b52      	ldr	r3, [pc, #328]	@ (8001cbc <BlockJ2+0x2f4>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	701a      	strb	r2, [r3, #0]
 8001b78:	e002      	b.n	8001b80 <BlockJ2+0x1b8>
	else CanMoveLeft = false;
 8001b7a:	4b50      	ldr	r3, [pc, #320]	@ (8001cbc <BlockJ2+0x2f4>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8001b80:	4b49      	ldr	r3, [pc, #292]	@ (8001ca8 <BlockJ2+0x2e0>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	1c9a      	adds	r2, r3, #2
 8001b86:	4b47      	ldr	r3, [pc, #284]	@ (8001ca4 <BlockJ2+0x2dc>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	1c59      	adds	r1, r3, #1
 8001b8c:	4847      	ldr	r0, [pc, #284]	@ (8001cac <BlockJ2+0x2e4>)
 8001b8e:	4613      	mov	r3, r2
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	1a9b      	subs	r3, r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	440b      	add	r3, r1
 8001b98:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d132      	bne.n	8001c06 <BlockJ2+0x23e>
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 8001ba0:	4b41      	ldr	r3, [pc, #260]	@ (8001ca8 <BlockJ2+0x2e0>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	1c9a      	adds	r2, r3, #2
 8001ba6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ca4 <BlockJ2+0x2dc>)
 8001ba8:	6819      	ldr	r1, [r3, #0]
 8001baa:	4840      	ldr	r0, [pc, #256]	@ (8001cac <BlockJ2+0x2e4>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	011b      	lsls	r3, r3, #4
 8001bb0:	1a9b      	subs	r3, r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	440b      	add	r3, r1
 8001bb6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d123      	bne.n	8001c06 <BlockJ2+0x23e>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 8001bbe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ca8 <BlockJ2+0x2e0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	1c9a      	adds	r2, r3, #2
 8001bc4:	4b37      	ldr	r3, [pc, #220]	@ (8001ca4 <BlockJ2+0x2dc>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	1c99      	adds	r1, r3, #2
 8001bca:	4838      	ldr	r0, [pc, #224]	@ (8001cac <BlockJ2+0x2e4>)
 8001bcc:	4613      	mov	r3, r2
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	1a9b      	subs	r3, r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	440b      	add	r3, r1
 8001bd6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d113      	bne.n	8001c06 <BlockJ2+0x23e>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0
 8001bde:	4b32      	ldr	r3, [pc, #200]	@ (8001ca8 <BlockJ2+0x2e0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca4 <BlockJ2+0x2dc>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	1c99      	adds	r1, r3, #2
 8001bea:	4830      	ldr	r0, [pc, #192]	@ (8001cac <BlockJ2+0x2e4>)
 8001bec:	4613      	mov	r3, r2
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	1a9b      	subs	r3, r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	440b      	add	r3, r1
 8001bf6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d103      	bne.n	8001c06 <BlockJ2+0x23e>
	)
		CanMoveRight = true;
 8001bfe:	4b30      	ldr	r3, [pc, #192]	@ (8001cc0 <BlockJ2+0x2f8>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	701a      	strb	r2, [r3, #0]
 8001c04:	e002      	b.n	8001c0c <BlockJ2+0x244>
	else CanMoveRight = false;
 8001c06:	4b2e      	ldr	r3, [pc, #184]	@ (8001cc0 <BlockJ2+0x2f8>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8001c0c:	4b26      	ldr	r3, [pc, #152]	@ (8001ca8 <BlockJ2+0x2e0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	4b24      	ldr	r3, [pc, #144]	@ (8001ca4 <BlockJ2+0x2dc>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	1c59      	adds	r1, r3, #1
 8001c18:	4824      	ldr	r0, [pc, #144]	@ (8001cac <BlockJ2+0x2e4>)
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	1a9b      	subs	r3, r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	440b      	add	r3, r1
 8001c24:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d130      	bne.n	8001c8e <BlockJ2+0x2c6>
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca8 <BlockJ2+0x2e0>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca4 <BlockJ2+0x2dc>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	1c59      	adds	r1, r3, #1
 8001c36:	481d      	ldr	r0, [pc, #116]	@ (8001cac <BlockJ2+0x2e4>)
 8001c38:	4613      	mov	r3, r2
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	1a9b      	subs	r3, r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	440b      	add	r3, r1
 8001c42:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d121      	bne.n	8001c8e <BlockJ2+0x2c6>
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 8001c4a:	4b17      	ldr	r3, [pc, #92]	@ (8001ca8 <BlockJ2+0x2e0>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ca4 <BlockJ2+0x2dc>)
 8001c50:	6819      	ldr	r1, [r3, #0]
 8001c52:	4816      	ldr	r0, [pc, #88]	@ (8001cac <BlockJ2+0x2e4>)
 8001c54:	4613      	mov	r3, r2
 8001c56:	011b      	lsls	r3, r3, #4
 8001c58:	1a9b      	subs	r3, r3, r2
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	440b      	add	r3, r1
 8001c5e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d113      	bne.n	8001c8e <BlockJ2+0x2c6>
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0)
 8001c66:	4b10      	ldr	r3, [pc, #64]	@ (8001ca8 <BlockJ2+0x2e0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	1c9a      	adds	r2, r3, #2
 8001c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca4 <BlockJ2+0x2dc>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	1c59      	adds	r1, r3, #1
 8001c72:	480e      	ldr	r0, [pc, #56]	@ (8001cac <BlockJ2+0x2e4>)
 8001c74:	4613      	mov	r3, r2
 8001c76:	011b      	lsls	r3, r3, #4
 8001c78:	1a9b      	subs	r3, r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	440b      	add	r3, r1
 8001c7e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d103      	bne.n	8001c8e <BlockJ2+0x2c6>
		CanRotate = true;
 8001c86:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc4 <BlockJ2+0x2fc>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
 8001c8c:	e003      	b.n	8001c96 <BlockJ2+0x2ce>
	else CanRotate = false;
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc4 <BlockJ2+0x2fc>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX, tetrominoLocY + 3); cout << char(248);
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 3); cout << char(248);
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd90      	pop	{r4, r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000fec 	.word	0x20000fec
 8001ca4:	20000fe8 	.word	0x20000fe8
 8001ca8:	20000fe4 	.word	0x20000fe4
 8001cac:	200001d0 	.word	0x200001d0
 8001cb0:	2000000c 	.word	0x2000000c
 8001cb4:	2000000f 	.word	0x2000000f
 8001cb8:	20000ff0 	.word	0x20000ff0
 8001cbc:	2000000e 	.word	0x2000000e
 8001cc0:	2000000d 	.word	0x2000000d
 8001cc4:	20000010 	.word	0x20000010

08001cc8 <BlockJ3>:

void BlockJ3(int x, int y)
{
 8001cc8:	b590      	push	{r4, r7, lr}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4610      	mov	r0, r2
 8001cde:	f003 ff77 	bl	8005bd0 <PrintXY>
	PrintXY(x, y + 1);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f003 ff71 	bl	8005bd0 <PrintXY>
	PrintXY(x, y);
 8001cee:	6839      	ldr	r1, [r7, #0]
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f003 ff6d 	bl	8005bd0 <PrintXY>
	PrintXY(x + 2, y + 1);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	1c9a      	adds	r2, r3, #2
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4610      	mov	r0, r2
 8001d02:	f003 ff65 	bl	8005bd0 <PrintXY>

	CurrentState = 5;
 8001d06:	4bae      	ldr	r3, [pc, #696]	@ (8001fc0 <BlockJ3+0x2f8>)
 8001d08:	2205      	movs	r2, #5
 8001d0a:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 20 ||
 8001d0c:	4bad      	ldr	r3, [pc, #692]	@ (8001fc4 <BlockJ3+0x2fc>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b13      	cmp	r3, #19
 8001d12:	dc2e      	bgt.n	8001d72 <BlockJ3+0xaa>
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0 ||
 8001d14:	4bac      	ldr	r3, [pc, #688]	@ (8001fc8 <BlockJ3+0x300>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4baa      	ldr	r3, [pc, #680]	@ (8001fc4 <BlockJ3+0x2fc>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	1c99      	adds	r1, r3, #2
 8001d1e:	48ab      	ldr	r0, [pc, #684]	@ (8001fcc <BlockJ3+0x304>)
 8001d20:	4613      	mov	r3, r2
 8001d22:	011b      	lsls	r3, r3, #4
 8001d24:	1a9b      	subs	r3, r3, r2
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	440b      	add	r3, r1
 8001d2a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 20 ||
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d11f      	bne.n	8001d72 <BlockJ3+0xaa>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 8001d32:	4ba5      	ldr	r3, [pc, #660]	@ (8001fc8 <BlockJ3+0x300>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	4ba2      	ldr	r3, [pc, #648]	@ (8001fc4 <BlockJ3+0x2fc>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	1c99      	adds	r1, r3, #2
 8001d3e:	48a3      	ldr	r0, [pc, #652]	@ (8001fcc <BlockJ3+0x304>)
 8001d40:	4613      	mov	r3, r2
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	1a9b      	subs	r3, r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	440b      	add	r3, r1
 8001d4a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0 ||
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10f      	bne.n	8001d72 <BlockJ3+0xaa>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] != 0)
 8001d52:	4b9d      	ldr	r3, [pc, #628]	@ (8001fc8 <BlockJ3+0x300>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	1c9a      	adds	r2, r3, #2
 8001d58:	4b9a      	ldr	r3, [pc, #616]	@ (8001fc4 <BlockJ3+0x2fc>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	1c99      	adds	r1, r3, #2
 8001d5e:	489b      	ldr	r0, [pc, #620]	@ (8001fcc <BlockJ3+0x304>)
 8001d60:	4613      	mov	r3, r2
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	1a9b      	subs	r3, r3, r2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	440b      	add	r3, r1
 8001d6a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d04d      	beq.n	8001e0e <BlockJ3+0x146>
	{
		while (isDownKey() == 1);
 8001d72:	bf00      	nop
 8001d74:	f003 fea6 	bl	8005ac4 <isDownKey>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d0fa      	beq.n	8001d74 <BlockJ3+0xac>
		NewTetromino = true;
 8001d7e:	4b94      	ldr	r3, [pc, #592]	@ (8001fd0 <BlockJ3+0x308>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 8001d84:	4b93      	ldr	r3, [pc, #588]	@ (8001fd4 <BlockJ3+0x30c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 8001d8a:	4b93      	ldr	r3, [pc, #588]	@ (8001fd8 <BlockJ3+0x310>)
 8001d8c:	8818      	ldrh	r0, [r3, #0]
 8001d8e:	4b8e      	ldr	r3, [pc, #568]	@ (8001fc8 <BlockJ3+0x300>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	4b8b      	ldr	r3, [pc, #556]	@ (8001fc4 <BlockJ3+0x2fc>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	1c59      	adds	r1, r3, #1
 8001d9a:	4604      	mov	r4, r0
 8001d9c:	488b      	ldr	r0, [pc, #556]	@ (8001fcc <BlockJ3+0x304>)
 8001d9e:	4613      	mov	r3, r2
 8001da0:	011b      	lsls	r3, r3, #4
 8001da2:	1a9b      	subs	r3, r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	440b      	add	r3, r1
 8001da8:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] = colour;
 8001dac:	4b8a      	ldr	r3, [pc, #552]	@ (8001fd8 <BlockJ3+0x310>)
 8001dae:	8818      	ldrh	r0, [r3, #0]
 8001db0:	4b85      	ldr	r3, [pc, #532]	@ (8001fc8 <BlockJ3+0x300>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b83      	ldr	r3, [pc, #524]	@ (8001fc4 <BlockJ3+0x2fc>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	1c59      	adds	r1, r3, #1
 8001dba:	4604      	mov	r4, r0
 8001dbc:	4883      	ldr	r0, [pc, #524]	@ (8001fcc <BlockJ3+0x304>)
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	1a9b      	subs	r3, r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY] = colour;
 8001dcc:	4b82      	ldr	r3, [pc, #520]	@ (8001fd8 <BlockJ3+0x310>)
 8001dce:	8818      	ldrh	r0, [r3, #0]
 8001dd0:	4b7d      	ldr	r3, [pc, #500]	@ (8001fc8 <BlockJ3+0x300>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b7b      	ldr	r3, [pc, #492]	@ (8001fc4 <BlockJ3+0x2fc>)
 8001dd6:	6819      	ldr	r1, [r3, #0]
 8001dd8:	4604      	mov	r4, r0
 8001dda:	487c      	ldr	r0, [pc, #496]	@ (8001fcc <BlockJ3+0x304>)
 8001ddc:	4613      	mov	r3, r2
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	440b      	add	r3, r1
 8001de6:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] = colour;
 8001dea:	4b7b      	ldr	r3, [pc, #492]	@ (8001fd8 <BlockJ3+0x310>)
 8001dec:	8818      	ldrh	r0, [r3, #0]
 8001dee:	4b76      	ldr	r3, [pc, #472]	@ (8001fc8 <BlockJ3+0x300>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	1c9a      	adds	r2, r3, #2
 8001df4:	4b73      	ldr	r3, [pc, #460]	@ (8001fc4 <BlockJ3+0x2fc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	1c59      	adds	r1, r3, #1
 8001dfa:	4604      	mov	r4, r0
 8001dfc:	4873      	ldr	r0, [pc, #460]	@ (8001fcc <BlockJ3+0x304>)
 8001dfe:	4613      	mov	r3, r2
 8001e00:	011b      	lsls	r3, r3, #4
 8001e02:	1a9b      	subs	r3, r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	440b      	add	r3, r1
 8001e08:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8001e0c:	e002      	b.n	8001e14 <BlockJ3+0x14c>
	}
	else CanMoveDown = true;
 8001e0e:	4b71      	ldr	r3, [pc, #452]	@ (8001fd4 <BlockJ3+0x30c>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8001e14:	4b6c      	ldr	r3, [pc, #432]	@ (8001fc8 <BlockJ3+0x300>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4b6a      	ldr	r3, [pc, #424]	@ (8001fc4 <BlockJ3+0x2fc>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	1c59      	adds	r1, r3, #1
 8001e1e:	486b      	ldr	r0, [pc, #428]	@ (8001fcc <BlockJ3+0x304>)
 8001e20:	4613      	mov	r3, r2
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	1a9b      	subs	r3, r3, r2
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	440b      	add	r3, r1
 8001e2a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d132      	bne.n	8001e98 <BlockJ3+0x1d0>
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 8001e32:	4b65      	ldr	r3, [pc, #404]	@ (8001fc8 <BlockJ3+0x300>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	1e5a      	subs	r2, r3, #1
 8001e38:	4b62      	ldr	r3, [pc, #392]	@ (8001fc4 <BlockJ3+0x2fc>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	1c59      	adds	r1, r3, #1
 8001e3e:	4863      	ldr	r0, [pc, #396]	@ (8001fcc <BlockJ3+0x304>)
 8001e40:	4613      	mov	r3, r2
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	1a9b      	subs	r3, r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	440b      	add	r3, r1
 8001e4a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d122      	bne.n	8001e98 <BlockJ3+0x1d0>
		tetris[tetrominoLocX - 1][tetrominoLocY] == 0 &&
 8001e52:	4b5d      	ldr	r3, [pc, #372]	@ (8001fc8 <BlockJ3+0x300>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	1e5a      	subs	r2, r3, #1
 8001e58:	4b5a      	ldr	r3, [pc, #360]	@ (8001fc4 <BlockJ3+0x2fc>)
 8001e5a:	6819      	ldr	r1, [r3, #0]
 8001e5c:	485b      	ldr	r0, [pc, #364]	@ (8001fcc <BlockJ3+0x304>)
 8001e5e:	4613      	mov	r3, r2
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	440b      	add	r3, r1
 8001e68:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d113      	bne.n	8001e98 <BlockJ3+0x1d0>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0
 8001e70:	4b55      	ldr	r3, [pc, #340]	@ (8001fc8 <BlockJ3+0x300>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	1c5a      	adds	r2, r3, #1
 8001e76:	4b53      	ldr	r3, [pc, #332]	@ (8001fc4 <BlockJ3+0x2fc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	1c59      	adds	r1, r3, #1
 8001e7c:	4853      	ldr	r0, [pc, #332]	@ (8001fcc <BlockJ3+0x304>)
 8001e7e:	4613      	mov	r3, r2
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	1a9b      	subs	r3, r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	440b      	add	r3, r1
 8001e88:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX - 1][tetrominoLocY] == 0 &&
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d103      	bne.n	8001e98 <BlockJ3+0x1d0>
	)
		CanMoveLeft = true;
 8001e90:	4b52      	ldr	r3, [pc, #328]	@ (8001fdc <BlockJ3+0x314>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	701a      	strb	r2, [r3, #0]
 8001e96:	e002      	b.n	8001e9e <BlockJ3+0x1d6>
	else CanMoveLeft = false;
 8001e98:	4b50      	ldr	r3, [pc, #320]	@ (8001fdc <BlockJ3+0x314>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8001e9e:	4b4a      	ldr	r3, [pc, #296]	@ (8001fc8 <BlockJ3+0x300>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	1c9a      	adds	r2, r3, #2
 8001ea4:	4b47      	ldr	r3, [pc, #284]	@ (8001fc4 <BlockJ3+0x2fc>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	1c59      	adds	r1, r3, #1
 8001eaa:	4848      	ldr	r0, [pc, #288]	@ (8001fcc <BlockJ3+0x304>)
 8001eac:	4613      	mov	r3, r2
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	1a9b      	subs	r3, r3, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	440b      	add	r3, r1
 8001eb6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d132      	bne.n	8001f24 <BlockJ3+0x25c>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8001ebe:	4b42      	ldr	r3, [pc, #264]	@ (8001fc8 <BlockJ3+0x300>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	4b3f      	ldr	r3, [pc, #252]	@ (8001fc4 <BlockJ3+0x2fc>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	1c59      	adds	r1, r3, #1
 8001eca:	4840      	ldr	r0, [pc, #256]	@ (8001fcc <BlockJ3+0x304>)
 8001ecc:	4613      	mov	r3, r2
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	1a9b      	subs	r3, r3, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	440b      	add	r3, r1
 8001ed6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d122      	bne.n	8001f24 <BlockJ3+0x25c>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 8001ede:	4b3a      	ldr	r3, [pc, #232]	@ (8001fc8 <BlockJ3+0x300>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	1c5a      	adds	r2, r3, #1
 8001ee4:	4b37      	ldr	r3, [pc, #220]	@ (8001fc4 <BlockJ3+0x2fc>)
 8001ee6:	6819      	ldr	r1, [r3, #0]
 8001ee8:	4838      	ldr	r0, [pc, #224]	@ (8001fcc <BlockJ3+0x304>)
 8001eea:	4613      	mov	r3, r2
 8001eec:	011b      	lsls	r3, r3, #4
 8001eee:	1a9b      	subs	r3, r3, r2
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d113      	bne.n	8001f24 <BlockJ3+0x25c>
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0
 8001efc:	4b32      	ldr	r3, [pc, #200]	@ (8001fc8 <BlockJ3+0x300>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	1cda      	adds	r2, r3, #3
 8001f02:	4b30      	ldr	r3, [pc, #192]	@ (8001fc4 <BlockJ3+0x2fc>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	1c59      	adds	r1, r3, #1
 8001f08:	4830      	ldr	r0, [pc, #192]	@ (8001fcc <BlockJ3+0x304>)
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	011b      	lsls	r3, r3, #4
 8001f0e:	1a9b      	subs	r3, r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	440b      	add	r3, r1
 8001f14:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d103      	bne.n	8001f24 <BlockJ3+0x25c>
	)
		CanMoveRight = true;
 8001f1c:	4b30      	ldr	r3, [pc, #192]	@ (8001fe0 <BlockJ3+0x318>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	701a      	strb	r2, [r3, #0]
 8001f22:	e002      	b.n	8001f2a <BlockJ3+0x262>
	else CanMoveRight = false;
 8001f24:	4b2e      	ldr	r3, [pc, #184]	@ (8001fe0 <BlockJ3+0x318>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8001f2a:	4b27      	ldr	r3, [pc, #156]	@ (8001fc8 <BlockJ3+0x300>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	1c5a      	adds	r2, r3, #1
 8001f30:	4b24      	ldr	r3, [pc, #144]	@ (8001fc4 <BlockJ3+0x2fc>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	1c59      	adds	r1, r3, #1
 8001f36:	4825      	ldr	r0, [pc, #148]	@ (8001fcc <BlockJ3+0x304>)
 8001f38:	4613      	mov	r3, r2
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	1a9b      	subs	r3, r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	440b      	add	r3, r1
 8001f42:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d131      	bne.n	8001fae <BlockJ3+0x2e6>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 8001f4a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc8 <BlockJ3+0x300>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc4 <BlockJ3+0x2fc>)
 8001f52:	6819      	ldr	r1, [r3, #0]
 8001f54:	481d      	ldr	r0, [pc, #116]	@ (8001fcc <BlockJ3+0x304>)
 8001f56:	4613      	mov	r3, r2
 8001f58:	011b      	lsls	r3, r3, #4
 8001f5a:	1a9b      	subs	r3, r3, r2
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	440b      	add	r3, r1
 8001f60:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d122      	bne.n	8001fae <BlockJ3+0x2e6>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 8001f68:	4b17      	ldr	r3, [pc, #92]	@ (8001fc8 <BlockJ3+0x300>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	4b15      	ldr	r3, [pc, #84]	@ (8001fc4 <BlockJ3+0x2fc>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	1c99      	adds	r1, r3, #2
 8001f74:	4815      	ldr	r0, [pc, #84]	@ (8001fcc <BlockJ3+0x304>)
 8001f76:	4613      	mov	r3, r2
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	1a9b      	subs	r3, r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	440b      	add	r3, r1
 8001f80:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d112      	bne.n	8001fae <BlockJ3+0x2e6>
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0)
 8001f88:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc8 <BlockJ3+0x300>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	1c9a      	adds	r2, r3, #2
 8001f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc4 <BlockJ3+0x2fc>)
 8001f90:	6819      	ldr	r1, [r3, #0]
 8001f92:	480e      	ldr	r0, [pc, #56]	@ (8001fcc <BlockJ3+0x304>)
 8001f94:	4613      	mov	r3, r2
 8001f96:	011b      	lsls	r3, r3, #4
 8001f98:	1a9b      	subs	r3, r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	440b      	add	r3, r1
 8001f9e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d103      	bne.n	8001fae <BlockJ3+0x2e6>
		CanRotate = true;
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe4 <BlockJ3+0x31c>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
 8001fac:	e003      	b.n	8001fb6 <BlockJ3+0x2ee>
	else CanRotate = false;
 8001fae:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe4 <BlockJ3+0x31c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 2); cout << char(248);
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd90      	pop	{r4, r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000fec 	.word	0x20000fec
 8001fc4:	20000fe8 	.word	0x20000fe8
 8001fc8:	20000fe4 	.word	0x20000fe4
 8001fcc:	200001d0 	.word	0x200001d0
 8001fd0:	2000000c 	.word	0x2000000c
 8001fd4:	2000000f 	.word	0x2000000f
 8001fd8:	20000ff0 	.word	0x20000ff0
 8001fdc:	2000000e 	.word	0x2000000e
 8001fe0:	2000000d 	.word	0x2000000d
 8001fe4:	20000010 	.word	0x20000010

08001fe8 <BlockJ4>:

void BlockJ4(int x, int y)
{
 8001fe8:	b590      	push	{r4, r7, lr}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	f003 fde7 	bl	8005bd0 <PrintXY>
	PrintXY(x + 1, y);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3301      	adds	r3, #1
 8002006:	6839      	ldr	r1, [r7, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f003 fde1 	bl	8005bd0 <PrintXY>
	PrintXY(x + 2, y);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3302      	adds	r3, #2
 8002012:	6839      	ldr	r1, [r7, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f003 fddb 	bl	8005bd0 <PrintXY>
	PrintXY(x + 1, y + 2);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	3302      	adds	r3, #2
 8002022:	4619      	mov	r1, r3
 8002024:	4610      	mov	r0, r2
 8002026:	f003 fdd3 	bl	8005bd0 <PrintXY>

	CurrentState = 6;
 800202a:	4ba5      	ldr	r3, [pc, #660]	@ (80022c0 <BlockJ4+0x2d8>)
 800202c:	2206      	movs	r2, #6
 800202e:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 8002030:	4ba4      	ldr	r3, [pc, #656]	@ (80022c4 <BlockJ4+0x2dc>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b12      	cmp	r3, #18
 8002036:	dc1f      	bgt.n	8002078 <BlockJ4+0x90>
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 8002038:	4ba3      	ldr	r3, [pc, #652]	@ (80022c8 <BlockJ4+0x2e0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	4ba1      	ldr	r3, [pc, #644]	@ (80022c4 <BlockJ4+0x2dc>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	1cd9      	adds	r1, r3, #3
 8002044:	48a1      	ldr	r0, [pc, #644]	@ (80022cc <BlockJ4+0x2e4>)
 8002046:	4613      	mov	r3, r2
 8002048:	011b      	lsls	r3, r3, #4
 800204a:	1a9b      	subs	r3, r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	440b      	add	r3, r1
 8002050:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10f      	bne.n	8002078 <BlockJ4+0x90>
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] != 0)
 8002058:	4b9b      	ldr	r3, [pc, #620]	@ (80022c8 <BlockJ4+0x2e0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	1c9a      	adds	r2, r3, #2
 800205e:	4b99      	ldr	r3, [pc, #612]	@ (80022c4 <BlockJ4+0x2dc>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	1c59      	adds	r1, r3, #1
 8002064:	4899      	ldr	r0, [pc, #612]	@ (80022cc <BlockJ4+0x2e4>)
 8002066:	4613      	mov	r3, r2
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	1a9b      	subs	r3, r3, r2
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	440b      	add	r3, r1
 8002070:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 8002074:	2b00      	cmp	r3, #0
 8002076:	d04e      	beq.n	8002116 <BlockJ4+0x12e>
	{
		while (isDownKey() == 1);
 8002078:	bf00      	nop
 800207a:	f003 fd23 	bl	8005ac4 <isDownKey>
 800207e:	4603      	mov	r3, r0
 8002080:	2b01      	cmp	r3, #1
 8002082:	d0fa      	beq.n	800207a <BlockJ4+0x92>
		NewTetromino = true;
 8002084:	4b92      	ldr	r3, [pc, #584]	@ (80022d0 <BlockJ4+0x2e8>)
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 800208a:	4b92      	ldr	r3, [pc, #584]	@ (80022d4 <BlockJ4+0x2ec>)
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 8002090:	4b91      	ldr	r3, [pc, #580]	@ (80022d8 <BlockJ4+0x2f0>)
 8002092:	8818      	ldrh	r0, [r3, #0]
 8002094:	4b8c      	ldr	r3, [pc, #560]	@ (80022c8 <BlockJ4+0x2e0>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	1c5a      	adds	r2, r3, #1
 800209a:	4b8a      	ldr	r3, [pc, #552]	@ (80022c4 <BlockJ4+0x2dc>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	1c59      	adds	r1, r3, #1
 80020a0:	4604      	mov	r4, r0
 80020a2:	488a      	ldr	r0, [pc, #552]	@ (80022cc <BlockJ4+0x2e4>)
 80020a4:	4613      	mov	r3, r2
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	440b      	add	r3, r1
 80020ae:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] = colour;
 80020b2:	4b89      	ldr	r3, [pc, #548]	@ (80022d8 <BlockJ4+0x2f0>)
 80020b4:	8818      	ldrh	r0, [r3, #0]
 80020b6:	4b84      	ldr	r3, [pc, #528]	@ (80022c8 <BlockJ4+0x2e0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	1c5a      	adds	r2, r3, #1
 80020bc:	4b81      	ldr	r3, [pc, #516]	@ (80022c4 <BlockJ4+0x2dc>)
 80020be:	6819      	ldr	r1, [r3, #0]
 80020c0:	4604      	mov	r4, r0
 80020c2:	4882      	ldr	r0, [pc, #520]	@ (80022cc <BlockJ4+0x2e4>)
 80020c4:	4613      	mov	r3, r2
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	1a9b      	subs	r3, r3, r2
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	440b      	add	r3, r1
 80020ce:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] = colour;
 80020d2:	4b81      	ldr	r3, [pc, #516]	@ (80022d8 <BlockJ4+0x2f0>)
 80020d4:	8818      	ldrh	r0, [r3, #0]
 80020d6:	4b7c      	ldr	r3, [pc, #496]	@ (80022c8 <BlockJ4+0x2e0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	4b79      	ldr	r3, [pc, #484]	@ (80022c4 <BlockJ4+0x2dc>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	1c99      	adds	r1, r3, #2
 80020e2:	4604      	mov	r4, r0
 80020e4:	4879      	ldr	r0, [pc, #484]	@ (80022cc <BlockJ4+0x2e4>)
 80020e6:	4613      	mov	r3, r2
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	440b      	add	r3, r1
 80020f0:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY] = colour;
 80020f4:	4b78      	ldr	r3, [pc, #480]	@ (80022d8 <BlockJ4+0x2f0>)
 80020f6:	8818      	ldrh	r0, [r3, #0]
 80020f8:	4b73      	ldr	r3, [pc, #460]	@ (80022c8 <BlockJ4+0x2e0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	1c9a      	adds	r2, r3, #2
 80020fe:	4b71      	ldr	r3, [pc, #452]	@ (80022c4 <BlockJ4+0x2dc>)
 8002100:	6819      	ldr	r1, [r3, #0]
 8002102:	4604      	mov	r4, r0
 8002104:	4871      	ldr	r0, [pc, #452]	@ (80022cc <BlockJ4+0x2e4>)
 8002106:	4613      	mov	r3, r2
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	440b      	add	r3, r1
 8002110:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8002114:	e002      	b.n	800211c <BlockJ4+0x134>
	}
	else CanMoveDown = true;
 8002116:	4b6f      	ldr	r3, [pc, #444]	@ (80022d4 <BlockJ4+0x2ec>)
 8002118:	2201      	movs	r2, #1
 800211a:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 800211c:	4b6a      	ldr	r3, [pc, #424]	@ (80022c8 <BlockJ4+0x2e0>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b68      	ldr	r3, [pc, #416]	@ (80022c4 <BlockJ4+0x2dc>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	1c59      	adds	r1, r3, #1
 8002126:	4869      	ldr	r0, [pc, #420]	@ (80022cc <BlockJ4+0x2e4>)
 8002128:	4613      	mov	r3, r2
 800212a:	011b      	lsls	r3, r3, #4
 800212c:	1a9b      	subs	r3, r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	440b      	add	r3, r1
 8002132:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d12f      	bne.n	800219a <BlockJ4+0x1b2>
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 800213a:	4b63      	ldr	r3, [pc, #396]	@ (80022c8 <BlockJ4+0x2e0>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	4b61      	ldr	r3, [pc, #388]	@ (80022c4 <BlockJ4+0x2dc>)
 8002140:	6819      	ldr	r1, [r3, #0]
 8002142:	4862      	ldr	r0, [pc, #392]	@ (80022cc <BlockJ4+0x2e4>)
 8002144:	4613      	mov	r3, r2
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	1a9b      	subs	r3, r3, r2
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	440b      	add	r3, r1
 800214e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8002152:	2b00      	cmp	r3, #0
 8002154:	d121      	bne.n	800219a <BlockJ4+0x1b2>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 8002156:	4b5c      	ldr	r3, [pc, #368]	@ (80022c8 <BlockJ4+0x2e0>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4b5a      	ldr	r3, [pc, #360]	@ (80022c4 <BlockJ4+0x2dc>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	1c99      	adds	r1, r3, #2
 8002160:	485a      	ldr	r0, [pc, #360]	@ (80022cc <BlockJ4+0x2e4>)
 8002162:	4613      	mov	r3, r2
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	440b      	add	r3, r1
 800216c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 8002170:	2b00      	cmp	r3, #0
 8002172:	d112      	bne.n	800219a <BlockJ4+0x1b2>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0
 8002174:	4b54      	ldr	r3, [pc, #336]	@ (80022c8 <BlockJ4+0x2e0>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	4b52      	ldr	r3, [pc, #328]	@ (80022c4 <BlockJ4+0x2dc>)
 800217c:	6819      	ldr	r1, [r3, #0]
 800217e:	4853      	ldr	r0, [pc, #332]	@ (80022cc <BlockJ4+0x2e4>)
 8002180:	4613      	mov	r3, r2
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	1a9b      	subs	r3, r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	440b      	add	r3, r1
 800218a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 800218e:	2b00      	cmp	r3, #0
 8002190:	d103      	bne.n	800219a <BlockJ4+0x1b2>
	)
		CanMoveLeft = true;
 8002192:	4b52      	ldr	r3, [pc, #328]	@ (80022dc <BlockJ4+0x2f4>)
 8002194:	2201      	movs	r2, #1
 8002196:	701a      	strb	r2, [r3, #0]
 8002198:	e002      	b.n	80021a0 <BlockJ4+0x1b8>
	else CanMoveLeft = false;
 800219a:	4b50      	ldr	r3, [pc, #320]	@ (80022dc <BlockJ4+0x2f4>)
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80021a0:	4b49      	ldr	r3, [pc, #292]	@ (80022c8 <BlockJ4+0x2e0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	1c9a      	adds	r2, r3, #2
 80021a6:	4b47      	ldr	r3, [pc, #284]	@ (80022c4 <BlockJ4+0x2dc>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	1c59      	adds	r1, r3, #1
 80021ac:	4847      	ldr	r0, [pc, #284]	@ (80022cc <BlockJ4+0x2e4>)
 80021ae:	4613      	mov	r3, r2
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	1a9b      	subs	r3, r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	440b      	add	r3, r1
 80021b8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d131      	bne.n	8002224 <BlockJ4+0x23c>
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 80021c0:	4b41      	ldr	r3, [pc, #260]	@ (80022c8 <BlockJ4+0x2e0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	1c9a      	adds	r2, r3, #2
 80021c6:	4b3f      	ldr	r3, [pc, #252]	@ (80022c4 <BlockJ4+0x2dc>)
 80021c8:	6819      	ldr	r1, [r3, #0]
 80021ca:	4840      	ldr	r0, [pc, #256]	@ (80022cc <BlockJ4+0x2e4>)
 80021cc:	4613      	mov	r3, r2
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	440b      	add	r3, r1
 80021d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d122      	bne.n	8002224 <BlockJ4+0x23c>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 80021de:	4b3a      	ldr	r3, [pc, #232]	@ (80022c8 <BlockJ4+0x2e0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	1c9a      	adds	r2, r3, #2
 80021e4:	4b37      	ldr	r3, [pc, #220]	@ (80022c4 <BlockJ4+0x2dc>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	1c99      	adds	r1, r3, #2
 80021ea:	4838      	ldr	r0, [pc, #224]	@ (80022cc <BlockJ4+0x2e4>)
 80021ec:	4613      	mov	r3, r2
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	440b      	add	r3, r1
 80021f6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d112      	bne.n	8002224 <BlockJ4+0x23c>
		tetris[tetrominoLocX + 3][tetrominoLocY] == 0
 80021fe:	4b32      	ldr	r3, [pc, #200]	@ (80022c8 <BlockJ4+0x2e0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	1cda      	adds	r2, r3, #3
 8002204:	4b2f      	ldr	r3, [pc, #188]	@ (80022c4 <BlockJ4+0x2dc>)
 8002206:	6819      	ldr	r1, [r3, #0]
 8002208:	4830      	ldr	r0, [pc, #192]	@ (80022cc <BlockJ4+0x2e4>)
 800220a:	4613      	mov	r3, r2
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	1a9b      	subs	r3, r3, r2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	440b      	add	r3, r1
 8002214:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 8002218:	2b00      	cmp	r3, #0
 800221a:	d103      	bne.n	8002224 <BlockJ4+0x23c>
	)
		CanMoveRight = true;
 800221c:	4b30      	ldr	r3, [pc, #192]	@ (80022e0 <BlockJ4+0x2f8>)
 800221e:	2201      	movs	r2, #1
 8002220:	701a      	strb	r2, [r3, #0]
 8002222:	e002      	b.n	800222a <BlockJ4+0x242>
	else CanMoveRight = false;
 8002224:	4b2e      	ldr	r3, [pc, #184]	@ (80022e0 <BlockJ4+0x2f8>)
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 800222a:	4b27      	ldr	r3, [pc, #156]	@ (80022c8 <BlockJ4+0x2e0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	4b24      	ldr	r3, [pc, #144]	@ (80022c4 <BlockJ4+0x2dc>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	1c59      	adds	r1, r3, #1
 8002236:	4825      	ldr	r0, [pc, #148]	@ (80022cc <BlockJ4+0x2e4>)
 8002238:	4613      	mov	r3, r2
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	1a9b      	subs	r3, r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	440b      	add	r3, r1
 8002242:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d132      	bne.n	80022b0 <BlockJ4+0x2c8>
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 800224a:	4b1f      	ldr	r3, [pc, #124]	@ (80022c8 <BlockJ4+0x2e0>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	4b1d      	ldr	r3, [pc, #116]	@ (80022c4 <BlockJ4+0x2dc>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	1c59      	adds	r1, r3, #1
 8002254:	481d      	ldr	r0, [pc, #116]	@ (80022cc <BlockJ4+0x2e4>)
 8002256:	4613      	mov	r3, r2
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	1a9b      	subs	r3, r3, r2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	440b      	add	r3, r1
 8002260:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8002264:	2b00      	cmp	r3, #0
 8002266:	d123      	bne.n	80022b0 <BlockJ4+0x2c8>
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8002268:	4b17      	ldr	r3, [pc, #92]	@ (80022c8 <BlockJ4+0x2e0>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	1c9a      	adds	r2, r3, #2
 800226e:	4b15      	ldr	r3, [pc, #84]	@ (80022c4 <BlockJ4+0x2dc>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	1c59      	adds	r1, r3, #1
 8002274:	4815      	ldr	r0, [pc, #84]	@ (80022cc <BlockJ4+0x2e4>)
 8002276:	4613      	mov	r3, r2
 8002278:	011b      	lsls	r3, r3, #4
 800227a:	1a9b      	subs	r3, r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	440b      	add	r3, r1
 8002280:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8002284:	2b00      	cmp	r3, #0
 8002286:	d113      	bne.n	80022b0 <BlockJ4+0x2c8>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0)
 8002288:	4b0f      	ldr	r3, [pc, #60]	@ (80022c8 <BlockJ4+0x2e0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	1c9a      	adds	r2, r3, #2
 800228e:	4b0d      	ldr	r3, [pc, #52]	@ (80022c4 <BlockJ4+0x2dc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	1c99      	adds	r1, r3, #2
 8002294:	480d      	ldr	r0, [pc, #52]	@ (80022cc <BlockJ4+0x2e4>)
 8002296:	4613      	mov	r3, r2
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	1a9b      	subs	r3, r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	440b      	add	r3, r1
 80022a0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d103      	bne.n	80022b0 <BlockJ4+0x2c8>
		CanRotate = true;
 80022a8:	4b0e      	ldr	r3, [pc, #56]	@ (80022e4 <BlockJ4+0x2fc>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	701a      	strb	r2, [r3, #0]
 80022ae:	e003      	b.n	80022b8 <BlockJ4+0x2d0>
	else CanRotate = false;
 80022b0:	4b0c      	ldr	r3, [pc, #48]	@ (80022e4 <BlockJ4+0x2fc>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 3); cout << char(248);
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 1); cout << char(248);
}
 80022b6:	bf00      	nop
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd90      	pop	{r4, r7, pc}
 80022c0:	20000fec 	.word	0x20000fec
 80022c4:	20000fe8 	.word	0x20000fe8
 80022c8:	20000fe4 	.word	0x20000fe4
 80022cc:	200001d0 	.word	0x200001d0
 80022d0:	2000000c 	.word	0x2000000c
 80022d4:	2000000f 	.word	0x2000000f
 80022d8:	20000ff0 	.word	0x20000ff0
 80022dc:	2000000e 	.word	0x2000000e
 80022e0:	2000000d 	.word	0x2000000d
 80022e4:	20000010 	.word	0x20000010

080022e8 <BlockL1>:

void BlockL1(int x, int y)
{
 80022e8:	b590      	push	{r4, r7, lr}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	3301      	adds	r3, #1
 80022fa:	4619      	mov	r1, r3
 80022fc:	4610      	mov	r0, r2
 80022fe:	f003 fc67 	bl	8005bd0 <PrintXY>
	PrintXY(x, y + 1);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	3301      	adds	r3, #1
 8002306:	4619      	mov	r1, r3
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f003 fc61 	bl	8005bd0 <PrintXY>
	PrintXY(x + 2, y + 1);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	1c9a      	adds	r2, r3, #2
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	3301      	adds	r3, #1
 8002316:	4619      	mov	r1, r3
 8002318:	4610      	mov	r0, r2
 800231a:	f003 fc59 	bl	8005bd0 <PrintXY>
	PrintXY(x, y + 2);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	3302      	adds	r3, #2
 8002322:	4619      	mov	r1, r3
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f003 fc53 	bl	8005bd0 <PrintXY>

	CurrentState = 7;
 800232a:	4bb0      	ldr	r3, [pc, #704]	@ (80025ec <BlockL1+0x304>)
 800232c:	2207      	movs	r2, #7
 800232e:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 8002330:	4baf      	ldr	r3, [pc, #700]	@ (80025f0 <BlockL1+0x308>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b12      	cmp	r3, #18
 8002336:	dc2e      	bgt.n	8002396 <BlockL1+0xae>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 8002338:	4bae      	ldr	r3, [pc, #696]	@ (80025f4 <BlockL1+0x30c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	4bac      	ldr	r3, [pc, #688]	@ (80025f0 <BlockL1+0x308>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	1c99      	adds	r1, r3, #2
 8002344:	48ac      	ldr	r0, [pc, #688]	@ (80025f8 <BlockL1+0x310>)
 8002346:	4613      	mov	r3, r2
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	440b      	add	r3, r1
 8002350:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 8002354:	2b00      	cmp	r3, #0
 8002356:	d11e      	bne.n	8002396 <BlockL1+0xae>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] != 0 ||
 8002358:	4ba6      	ldr	r3, [pc, #664]	@ (80025f4 <BlockL1+0x30c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	1c9a      	adds	r2, r3, #2
 800235e:	4ba4      	ldr	r3, [pc, #656]	@ (80025f0 <BlockL1+0x308>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	1c99      	adds	r1, r3, #2
 8002364:	48a4      	ldr	r0, [pc, #656]	@ (80025f8 <BlockL1+0x310>)
 8002366:	4613      	mov	r3, r2
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	440b      	add	r3, r1
 8002370:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10e      	bne.n	8002396 <BlockL1+0xae>
		tetris[tetrominoLocX][tetrominoLocY + 3] != 0)
 8002378:	4b9e      	ldr	r3, [pc, #632]	@ (80025f4 <BlockL1+0x30c>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b9c      	ldr	r3, [pc, #624]	@ (80025f0 <BlockL1+0x308>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	1cd9      	adds	r1, r3, #3
 8002382:	489d      	ldr	r0, [pc, #628]	@ (80025f8 <BlockL1+0x310>)
 8002384:	4613      	mov	r3, r2
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	440b      	add	r3, r1
 800238e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] != 0 ||
 8002392:	2b00      	cmp	r3, #0
 8002394:	d04e      	beq.n	8002434 <BlockL1+0x14c>
	{
		while (isDownKey() == 1);
 8002396:	bf00      	nop
 8002398:	f003 fb94 	bl	8005ac4 <isDownKey>
 800239c:	4603      	mov	r3, r0
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d0fa      	beq.n	8002398 <BlockL1+0xb0>
		NewTetromino = true;
 80023a2:	4b96      	ldr	r3, [pc, #600]	@ (80025fc <BlockL1+0x314>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 80023a8:	4b95      	ldr	r3, [pc, #596]	@ (8002600 <BlockL1+0x318>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 80023ae:	4b95      	ldr	r3, [pc, #596]	@ (8002604 <BlockL1+0x31c>)
 80023b0:	8818      	ldrh	r0, [r3, #0]
 80023b2:	4b90      	ldr	r3, [pc, #576]	@ (80025f4 <BlockL1+0x30c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	4b8d      	ldr	r3, [pc, #564]	@ (80025f0 <BlockL1+0x308>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	1c59      	adds	r1, r3, #1
 80023be:	4604      	mov	r4, r0
 80023c0:	488d      	ldr	r0, [pc, #564]	@ (80025f8 <BlockL1+0x310>)
 80023c2:	4613      	mov	r3, r2
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	1a9b      	subs	r3, r3, r2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	440b      	add	r3, r1
 80023cc:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] = colour;
 80023d0:	4b8c      	ldr	r3, [pc, #560]	@ (8002604 <BlockL1+0x31c>)
 80023d2:	8818      	ldrh	r0, [r3, #0]
 80023d4:	4b87      	ldr	r3, [pc, #540]	@ (80025f4 <BlockL1+0x30c>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b85      	ldr	r3, [pc, #532]	@ (80025f0 <BlockL1+0x308>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	1c59      	adds	r1, r3, #1
 80023de:	4604      	mov	r4, r0
 80023e0:	4885      	ldr	r0, [pc, #532]	@ (80025f8 <BlockL1+0x310>)
 80023e2:	4613      	mov	r3, r2
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	1a9b      	subs	r3, r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	440b      	add	r3, r1
 80023ec:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] = colour;
 80023f0:	4b84      	ldr	r3, [pc, #528]	@ (8002604 <BlockL1+0x31c>)
 80023f2:	8818      	ldrh	r0, [r3, #0]
 80023f4:	4b7f      	ldr	r3, [pc, #508]	@ (80025f4 <BlockL1+0x30c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	1c9a      	adds	r2, r3, #2
 80023fa:	4b7d      	ldr	r3, [pc, #500]	@ (80025f0 <BlockL1+0x308>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	1c59      	adds	r1, r3, #1
 8002400:	4604      	mov	r4, r0
 8002402:	487d      	ldr	r0, [pc, #500]	@ (80025f8 <BlockL1+0x310>)
 8002404:	4613      	mov	r3, r2
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	1a9b      	subs	r3, r3, r2
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	440b      	add	r3, r1
 800240e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] = colour;
 8002412:	4b7c      	ldr	r3, [pc, #496]	@ (8002604 <BlockL1+0x31c>)
 8002414:	8818      	ldrh	r0, [r3, #0]
 8002416:	4b77      	ldr	r3, [pc, #476]	@ (80025f4 <BlockL1+0x30c>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	4b75      	ldr	r3, [pc, #468]	@ (80025f0 <BlockL1+0x308>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	1c99      	adds	r1, r3, #2
 8002420:	4604      	mov	r4, r0
 8002422:	4875      	ldr	r0, [pc, #468]	@ (80025f8 <BlockL1+0x310>)
 8002424:	4613      	mov	r3, r2
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	440b      	add	r3, r1
 800242e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8002432:	e002      	b.n	800243a <BlockL1+0x152>
	}
	else CanMoveDown = true;
 8002434:	4b72      	ldr	r3, [pc, #456]	@ (8002600 <BlockL1+0x318>)
 8002436:	2201      	movs	r2, #1
 8002438:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 800243a:	4b6e      	ldr	r3, [pc, #440]	@ (80025f4 <BlockL1+0x30c>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	4b6c      	ldr	r3, [pc, #432]	@ (80025f0 <BlockL1+0x308>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	1c59      	adds	r1, r3, #1
 8002444:	486c      	ldr	r0, [pc, #432]	@ (80025f8 <BlockL1+0x310>)
 8002446:	4613      	mov	r3, r2
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	1a9b      	subs	r3, r3, r2
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	440b      	add	r3, r1
 8002450:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d133      	bne.n	80024c0 <BlockL1+0x1d8>
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 8002458:	4b66      	ldr	r3, [pc, #408]	@ (80025f4 <BlockL1+0x30c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	1e5a      	subs	r2, r3, #1
 800245e:	4b64      	ldr	r3, [pc, #400]	@ (80025f0 <BlockL1+0x308>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	1c59      	adds	r1, r3, #1
 8002464:	4864      	ldr	r0, [pc, #400]	@ (80025f8 <BlockL1+0x310>)
 8002466:	4613      	mov	r3, r2
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	1a9b      	subs	r3, r3, r2
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	440b      	add	r3, r1
 8002470:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8002474:	2b00      	cmp	r3, #0
 8002476:	d123      	bne.n	80024c0 <BlockL1+0x1d8>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8002478:	4b5e      	ldr	r3, [pc, #376]	@ (80025f4 <BlockL1+0x30c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	4b5c      	ldr	r3, [pc, #368]	@ (80025f0 <BlockL1+0x308>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	1c59      	adds	r1, r3, #1
 8002484:	485c      	ldr	r0, [pc, #368]	@ (80025f8 <BlockL1+0x310>)
 8002486:	4613      	mov	r3, r2
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	440b      	add	r3, r1
 8002490:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 8002494:	2b00      	cmp	r3, #0
 8002496:	d113      	bne.n	80024c0 <BlockL1+0x1d8>
		tetris[tetrominoLocX - 1][tetrominoLocY + 2] == 0
 8002498:	4b56      	ldr	r3, [pc, #344]	@ (80025f4 <BlockL1+0x30c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	1e5a      	subs	r2, r3, #1
 800249e:	4b54      	ldr	r3, [pc, #336]	@ (80025f0 <BlockL1+0x308>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	1c99      	adds	r1, r3, #2
 80024a4:	4854      	ldr	r0, [pc, #336]	@ (80025f8 <BlockL1+0x310>)
 80024a6:	4613      	mov	r3, r2
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	1a9b      	subs	r3, r3, r2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	440b      	add	r3, r1
 80024b0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d103      	bne.n	80024c0 <BlockL1+0x1d8>
	)
		CanMoveLeft = true;
 80024b8:	4b53      	ldr	r3, [pc, #332]	@ (8002608 <BlockL1+0x320>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
 80024be:	e002      	b.n	80024c6 <BlockL1+0x1de>
	else CanMoveLeft = false;
 80024c0:	4b51      	ldr	r3, [pc, #324]	@ (8002608 <BlockL1+0x320>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80024c6:	4b4b      	ldr	r3, [pc, #300]	@ (80025f4 <BlockL1+0x30c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	1c9a      	adds	r2, r3, #2
 80024cc:	4b48      	ldr	r3, [pc, #288]	@ (80025f0 <BlockL1+0x308>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	1c59      	adds	r1, r3, #1
 80024d2:	4849      	ldr	r0, [pc, #292]	@ (80025f8 <BlockL1+0x310>)
 80024d4:	4613      	mov	r3, r2
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	440b      	add	r3, r1
 80024de:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d133      	bne.n	800254e <BlockL1+0x266>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80024e6:	4b43      	ldr	r3, [pc, #268]	@ (80025f4 <BlockL1+0x30c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	4b40      	ldr	r3, [pc, #256]	@ (80025f0 <BlockL1+0x308>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	1c59      	adds	r1, r3, #1
 80024f2:	4841      	ldr	r0, [pc, #260]	@ (80025f8 <BlockL1+0x310>)
 80024f4:	4613      	mov	r3, r2
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	440b      	add	r3, r1
 80024fe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8002502:	2b00      	cmp	r3, #0
 8002504:	d123      	bne.n	800254e <BlockL1+0x266>
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 8002506:	4b3b      	ldr	r3, [pc, #236]	@ (80025f4 <BlockL1+0x30c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	1cda      	adds	r2, r3, #3
 800250c:	4b38      	ldr	r3, [pc, #224]	@ (80025f0 <BlockL1+0x308>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	1c59      	adds	r1, r3, #1
 8002512:	4839      	ldr	r0, [pc, #228]	@ (80025f8 <BlockL1+0x310>)
 8002514:	4613      	mov	r3, r2
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	440b      	add	r3, r1
 800251e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8002522:	2b00      	cmp	r3, #0
 8002524:	d113      	bne.n	800254e <BlockL1+0x266>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0
 8002526:	4b33      	ldr	r3, [pc, #204]	@ (80025f4 <BlockL1+0x30c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	4b30      	ldr	r3, [pc, #192]	@ (80025f0 <BlockL1+0x308>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	1c99      	adds	r1, r3, #2
 8002532:	4831      	ldr	r0, [pc, #196]	@ (80025f8 <BlockL1+0x310>)
 8002534:	4613      	mov	r3, r2
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	440b      	add	r3, r1
 800253e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 8002542:	2b00      	cmp	r3, #0
 8002544:	d103      	bne.n	800254e <BlockL1+0x266>
	)
		CanMoveRight = true;
 8002546:	4b31      	ldr	r3, [pc, #196]	@ (800260c <BlockL1+0x324>)
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
 800254c:	e002      	b.n	8002554 <BlockL1+0x26c>
	else CanMoveRight = false;
 800254e:	4b2f      	ldr	r3, [pc, #188]	@ (800260c <BlockL1+0x324>)
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8002554:	4b27      	ldr	r3, [pc, #156]	@ (80025f4 <BlockL1+0x30c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	4b25      	ldr	r3, [pc, #148]	@ (80025f0 <BlockL1+0x308>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	1c59      	adds	r1, r3, #1
 8002560:	4825      	ldr	r0, [pc, #148]	@ (80025f8 <BlockL1+0x310>)
 8002562:	4613      	mov	r3, r2
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	1a9b      	subs	r3, r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	440b      	add	r3, r1
 800256c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d132      	bne.n	80025da <BlockL1+0x2f2>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 8002574:	4b1f      	ldr	r3, [pc, #124]	@ (80025f4 <BlockL1+0x30c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	1c5a      	adds	r2, r3, #1
 800257a:	4b1d      	ldr	r3, [pc, #116]	@ (80025f0 <BlockL1+0x308>)
 800257c:	6819      	ldr	r1, [r3, #0]
 800257e:	481e      	ldr	r0, [pc, #120]	@ (80025f8 <BlockL1+0x310>)
 8002580:	4613      	mov	r3, r2
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	440b      	add	r3, r1
 800258a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 800258e:	2b00      	cmp	r3, #0
 8002590:	d123      	bne.n	80025da <BlockL1+0x2f2>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 8002592:	4b18      	ldr	r3, [pc, #96]	@ (80025f4 <BlockL1+0x30c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	4b15      	ldr	r3, [pc, #84]	@ (80025f0 <BlockL1+0x308>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	1c99      	adds	r1, r3, #2
 800259e:	4816      	ldr	r0, [pc, #88]	@ (80025f8 <BlockL1+0x310>)
 80025a0:	4613      	mov	r3, r2
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	440b      	add	r3, r1
 80025aa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d113      	bne.n	80025da <BlockL1+0x2f2>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0)
 80025b2:	4b10      	ldr	r3, [pc, #64]	@ (80025f4 <BlockL1+0x30c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	1c9a      	adds	r2, r3, #2
 80025b8:	4b0d      	ldr	r3, [pc, #52]	@ (80025f0 <BlockL1+0x308>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	1c99      	adds	r1, r3, #2
 80025be:	480e      	ldr	r0, [pc, #56]	@ (80025f8 <BlockL1+0x310>)
 80025c0:	4613      	mov	r3, r2
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	440b      	add	r3, r1
 80025ca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d103      	bne.n	80025da <BlockL1+0x2f2>
		CanRotate = true;
 80025d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002610 <BlockL1+0x328>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	701a      	strb	r2, [r3, #0]
 80025d8:	e003      	b.n	80025e2 <BlockL1+0x2fa>
	else CanRotate = false;
 80025da:	4b0d      	ldr	r3, [pc, #52]	@ (8002610 <BlockL1+0x328>)
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX, tetrominoLocY + 3); cout << char(248);
}
 80025e0:	bf00      	nop
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd90      	pop	{r4, r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20000fec 	.word	0x20000fec
 80025f0:	20000fe8 	.word	0x20000fe8
 80025f4:	20000fe4 	.word	0x20000fe4
 80025f8:	200001d0 	.word	0x200001d0
 80025fc:	2000000c 	.word	0x2000000c
 8002600:	2000000f 	.word	0x2000000f
 8002604:	20000ff0 	.word	0x20000ff0
 8002608:	2000000e 	.word	0x2000000e
 800260c:	2000000d 	.word	0x2000000d
 8002610:	20000010 	.word	0x20000010

08002614 <BlockL2>:

void BlockL2(int x, int y)
{
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	3301      	adds	r3, #1
 8002626:	4619      	mov	r1, r3
 8002628:	4610      	mov	r0, r2
 800262a:	f003 fad1 	bl	8005bd0 <PrintXY>
	PrintXY(x + 1, y);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3301      	adds	r3, #1
 8002632:	6839      	ldr	r1, [r7, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f003 facb 	bl	8005bd0 <PrintXY>
	PrintXY(x + 1, y + 2);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	3302      	adds	r3, #2
 8002642:	4619      	mov	r1, r3
 8002644:	4610      	mov	r0, r2
 8002646:	f003 fac3 	bl	8005bd0 <PrintXY>
	PrintXY(x + 2, y + 2);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	1c9a      	adds	r2, r3, #2
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	3302      	adds	r3, #2
 8002652:	4619      	mov	r1, r3
 8002654:	4610      	mov	r0, r2
 8002656:	f003 fabb 	bl	8005bd0 <PrintXY>

	CurrentState = 8;
 800265a:	4ba6      	ldr	r3, [pc, #664]	@ (80028f4 <BlockL2+0x2e0>)
 800265c:	2208      	movs	r2, #8
 800265e:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 8002660:	4ba5      	ldr	r3, [pc, #660]	@ (80028f8 <BlockL2+0x2e4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b12      	cmp	r3, #18
 8002666:	dc1f      	bgt.n	80026a8 <BlockL2+0x94>
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 8002668:	4ba4      	ldr	r3, [pc, #656]	@ (80028fc <BlockL2+0x2e8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	4ba2      	ldr	r3, [pc, #648]	@ (80028f8 <BlockL2+0x2e4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	1cd9      	adds	r1, r3, #3
 8002674:	48a2      	ldr	r0, [pc, #648]	@ (8002900 <BlockL2+0x2ec>)
 8002676:	4613      	mov	r3, r2
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	1a9b      	subs	r3, r3, r2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	440b      	add	r3, r1
 8002680:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10f      	bne.n	80026a8 <BlockL2+0x94>
		tetris[tetrominoLocX + 2][tetrominoLocY + 3] != 0)
 8002688:	4b9c      	ldr	r3, [pc, #624]	@ (80028fc <BlockL2+0x2e8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	1c9a      	adds	r2, r3, #2
 800268e:	4b9a      	ldr	r3, [pc, #616]	@ (80028f8 <BlockL2+0x2e4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	1cd9      	adds	r1, r3, #3
 8002694:	489a      	ldr	r0, [pc, #616]	@ (8002900 <BlockL2+0x2ec>)
 8002696:	4613      	mov	r3, r2
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	1a9b      	subs	r3, r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	440b      	add	r3, r1
 80026a0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d04f      	beq.n	8002748 <BlockL2+0x134>
	{
		while (isDownKey() == 1);
 80026a8:	bf00      	nop
 80026aa:	f003 fa0b 	bl	8005ac4 <isDownKey>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d0fa      	beq.n	80026aa <BlockL2+0x96>
		NewTetromino = true;
 80026b4:	4b93      	ldr	r3, [pc, #588]	@ (8002904 <BlockL2+0x2f0>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 80026ba:	4b93      	ldr	r3, [pc, #588]	@ (8002908 <BlockL2+0x2f4>)
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 80026c0:	4b92      	ldr	r3, [pc, #584]	@ (800290c <BlockL2+0x2f8>)
 80026c2:	8818      	ldrh	r0, [r3, #0]
 80026c4:	4b8d      	ldr	r3, [pc, #564]	@ (80028fc <BlockL2+0x2e8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	4b8b      	ldr	r3, [pc, #556]	@ (80028f8 <BlockL2+0x2e4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	1c59      	adds	r1, r3, #1
 80026d0:	4604      	mov	r4, r0
 80026d2:	488b      	ldr	r0, [pc, #556]	@ (8002900 <BlockL2+0x2ec>)
 80026d4:	4613      	mov	r3, r2
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	440b      	add	r3, r1
 80026de:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] = colour;
 80026e2:	4b8a      	ldr	r3, [pc, #552]	@ (800290c <BlockL2+0x2f8>)
 80026e4:	8818      	ldrh	r0, [r3, #0]
 80026e6:	4b85      	ldr	r3, [pc, #532]	@ (80028fc <BlockL2+0x2e8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	4b82      	ldr	r3, [pc, #520]	@ (80028f8 <BlockL2+0x2e4>)
 80026ee:	6819      	ldr	r1, [r3, #0]
 80026f0:	4604      	mov	r4, r0
 80026f2:	4883      	ldr	r0, [pc, #524]	@ (8002900 <BlockL2+0x2ec>)
 80026f4:	4613      	mov	r3, r2
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	1a9b      	subs	r3, r3, r2
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	440b      	add	r3, r1
 80026fe:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] = colour;
 8002702:	4b82      	ldr	r3, [pc, #520]	@ (800290c <BlockL2+0x2f8>)
 8002704:	8818      	ldrh	r0, [r3, #0]
 8002706:	4b7d      	ldr	r3, [pc, #500]	@ (80028fc <BlockL2+0x2e8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	4b7a      	ldr	r3, [pc, #488]	@ (80028f8 <BlockL2+0x2e4>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	1c99      	adds	r1, r3, #2
 8002712:	4604      	mov	r4, r0
 8002714:	487a      	ldr	r0, [pc, #488]	@ (8002900 <BlockL2+0x2ec>)
 8002716:	4613      	mov	r3, r2
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	1a9b      	subs	r3, r3, r2
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	440b      	add	r3, r1
 8002720:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] = colour;
 8002724:	4b79      	ldr	r3, [pc, #484]	@ (800290c <BlockL2+0x2f8>)
 8002726:	8818      	ldrh	r0, [r3, #0]
 8002728:	4b74      	ldr	r3, [pc, #464]	@ (80028fc <BlockL2+0x2e8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	1c9a      	adds	r2, r3, #2
 800272e:	4b72      	ldr	r3, [pc, #456]	@ (80028f8 <BlockL2+0x2e4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	1c99      	adds	r1, r3, #2
 8002734:	4604      	mov	r4, r0
 8002736:	4872      	ldr	r0, [pc, #456]	@ (8002900 <BlockL2+0x2ec>)
 8002738:	4613      	mov	r3, r2
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	1a9b      	subs	r3, r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	440b      	add	r3, r1
 8002742:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8002746:	e002      	b.n	800274e <BlockL2+0x13a>
	}
	else CanMoveDown = true;
 8002748:	4b6f      	ldr	r3, [pc, #444]	@ (8002908 <BlockL2+0x2f4>)
 800274a:	2201      	movs	r2, #1
 800274c:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 800274e:	4b6b      	ldr	r3, [pc, #428]	@ (80028fc <BlockL2+0x2e8>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	4b69      	ldr	r3, [pc, #420]	@ (80028f8 <BlockL2+0x2e4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	1c59      	adds	r1, r3, #1
 8002758:	4869      	ldr	r0, [pc, #420]	@ (8002900 <BlockL2+0x2ec>)
 800275a:	4613      	mov	r3, r2
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	1a9b      	subs	r3, r3, r2
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	440b      	add	r3, r1
 8002764:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d130      	bne.n	80027ce <BlockL2+0x1ba>
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 800276c:	4b63      	ldr	r3, [pc, #396]	@ (80028fc <BlockL2+0x2e8>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4b61      	ldr	r3, [pc, #388]	@ (80028f8 <BlockL2+0x2e4>)
 8002772:	6819      	ldr	r1, [r3, #0]
 8002774:	4862      	ldr	r0, [pc, #392]	@ (8002900 <BlockL2+0x2ec>)
 8002776:	4613      	mov	r3, r2
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	1a9b      	subs	r3, r3, r2
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	440b      	add	r3, r1
 8002780:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8002784:	2b00      	cmp	r3, #0
 8002786:	d122      	bne.n	80027ce <BlockL2+0x1ba>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 8002788:	4b5c      	ldr	r3, [pc, #368]	@ (80028fc <BlockL2+0x2e8>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b5a      	ldr	r3, [pc, #360]	@ (80028f8 <BlockL2+0x2e4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	1c99      	adds	r1, r3, #2
 8002792:	485b      	ldr	r0, [pc, #364]	@ (8002900 <BlockL2+0x2ec>)
 8002794:	4613      	mov	r3, r2
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	1a9b      	subs	r3, r3, r2
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	440b      	add	r3, r1
 800279e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d113      	bne.n	80027ce <BlockL2+0x1ba>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0
 80027a6:	4b55      	ldr	r3, [pc, #340]	@ (80028fc <BlockL2+0x2e8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	4b52      	ldr	r3, [pc, #328]	@ (80028f8 <BlockL2+0x2e4>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	1c99      	adds	r1, r3, #2
 80027b2:	4853      	ldr	r0, [pc, #332]	@ (8002900 <BlockL2+0x2ec>)
 80027b4:	4613      	mov	r3, r2
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	440b      	add	r3, r1
 80027be:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d103      	bne.n	80027ce <BlockL2+0x1ba>
	)
		CanMoveLeft = true;
 80027c6:	4b52      	ldr	r3, [pc, #328]	@ (8002910 <BlockL2+0x2fc>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	701a      	strb	r2, [r3, #0]
 80027cc:	e002      	b.n	80027d4 <BlockL2+0x1c0>
	else CanMoveLeft = false;
 80027ce:	4b50      	ldr	r3, [pc, #320]	@ (8002910 <BlockL2+0x2fc>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80027d4:	4b49      	ldr	r3, [pc, #292]	@ (80028fc <BlockL2+0x2e8>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	1c9a      	adds	r2, r3, #2
 80027da:	4b47      	ldr	r3, [pc, #284]	@ (80028f8 <BlockL2+0x2e4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	1c59      	adds	r1, r3, #1
 80027e0:	4847      	ldr	r0, [pc, #284]	@ (8002900 <BlockL2+0x2ec>)
 80027e2:	4613      	mov	r3, r2
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	440b      	add	r3, r1
 80027ec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d132      	bne.n	800285a <BlockL2+0x246>
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 80027f4:	4b41      	ldr	r3, [pc, #260]	@ (80028fc <BlockL2+0x2e8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	1c9a      	adds	r2, r3, #2
 80027fa:	4b3f      	ldr	r3, [pc, #252]	@ (80028f8 <BlockL2+0x2e4>)
 80027fc:	6819      	ldr	r1, [r3, #0]
 80027fe:	4840      	ldr	r0, [pc, #256]	@ (8002900 <BlockL2+0x2ec>)
 8002800:	4613      	mov	r3, r2
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	440b      	add	r3, r1
 800280a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 800280e:	2b00      	cmp	r3, #0
 8002810:	d123      	bne.n	800285a <BlockL2+0x246>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 8002812:	4b3a      	ldr	r3, [pc, #232]	@ (80028fc <BlockL2+0x2e8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	1c9a      	adds	r2, r3, #2
 8002818:	4b37      	ldr	r3, [pc, #220]	@ (80028f8 <BlockL2+0x2e4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	1c99      	adds	r1, r3, #2
 800281e:	4838      	ldr	r0, [pc, #224]	@ (8002900 <BlockL2+0x2ec>)
 8002820:	4613      	mov	r3, r2
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	1a9b      	subs	r3, r3, r2
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	440b      	add	r3, r1
 800282a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 800282e:	2b00      	cmp	r3, #0
 8002830:	d113      	bne.n	800285a <BlockL2+0x246>
		tetris[tetrominoLocX + 3][tetrominoLocY + 2] == 0
 8002832:	4b32      	ldr	r3, [pc, #200]	@ (80028fc <BlockL2+0x2e8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	1cda      	adds	r2, r3, #3
 8002838:	4b2f      	ldr	r3, [pc, #188]	@ (80028f8 <BlockL2+0x2e4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	1c99      	adds	r1, r3, #2
 800283e:	4830      	ldr	r0, [pc, #192]	@ (8002900 <BlockL2+0x2ec>)
 8002840:	4613      	mov	r3, r2
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	1a9b      	subs	r3, r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	440b      	add	r3, r1
 800284a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 800284e:	2b00      	cmp	r3, #0
 8002850:	d103      	bne.n	800285a <BlockL2+0x246>
	)
		CanMoveRight = true;
 8002852:	4b30      	ldr	r3, [pc, #192]	@ (8002914 <BlockL2+0x300>)
 8002854:	2201      	movs	r2, #1
 8002856:	701a      	strb	r2, [r3, #0]
 8002858:	e002      	b.n	8002860 <BlockL2+0x24c>
	else CanMoveRight = false;
 800285a:	4b2e      	ldr	r3, [pc, #184]	@ (8002914 <BlockL2+0x300>)
 800285c:	2200      	movs	r2, #0
 800285e:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8002860:	4b26      	ldr	r3, [pc, #152]	@ (80028fc <BlockL2+0x2e8>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	4b24      	ldr	r3, [pc, #144]	@ (80028f8 <BlockL2+0x2e4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	1c59      	adds	r1, r3, #1
 800286c:	4824      	ldr	r0, [pc, #144]	@ (8002900 <BlockL2+0x2ec>)
 800286e:	4613      	mov	r3, r2
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	1a9b      	subs	r3, r3, r2
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	440b      	add	r3, r1
 8002878:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d131      	bne.n	80028e4 <BlockL2+0x2d0>
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8002880:	4b1e      	ldr	r3, [pc, #120]	@ (80028fc <BlockL2+0x2e8>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	4b1c      	ldr	r3, [pc, #112]	@ (80028f8 <BlockL2+0x2e4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	1c59      	adds	r1, r3, #1
 800288a:	481d      	ldr	r0, [pc, #116]	@ (8002900 <BlockL2+0x2ec>)
 800288c:	4613      	mov	r3, r2
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	440b      	add	r3, r1
 8002896:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 800289a:	2b00      	cmp	r3, #0
 800289c:	d122      	bne.n	80028e4 <BlockL2+0x2d0>
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 800289e:	4b17      	ldr	r3, [pc, #92]	@ (80028fc <BlockL2+0x2e8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	1c9a      	adds	r2, r3, #2
 80028a4:	4b14      	ldr	r3, [pc, #80]	@ (80028f8 <BlockL2+0x2e4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	1c59      	adds	r1, r3, #1
 80028aa:	4815      	ldr	r0, [pc, #84]	@ (8002900 <BlockL2+0x2ec>)
 80028ac:	4613      	mov	r3, r2
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	440b      	add	r3, r1
 80028b6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d112      	bne.n	80028e4 <BlockL2+0x2d0>
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0)
 80028be:	4b0f      	ldr	r3, [pc, #60]	@ (80028fc <BlockL2+0x2e8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	1c9a      	adds	r2, r3, #2
 80028c4:	4b0c      	ldr	r3, [pc, #48]	@ (80028f8 <BlockL2+0x2e4>)
 80028c6:	6819      	ldr	r1, [r3, #0]
 80028c8:	480d      	ldr	r0, [pc, #52]	@ (8002900 <BlockL2+0x2ec>)
 80028ca:	4613      	mov	r3, r2
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	1a9b      	subs	r3, r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	440b      	add	r3, r1
 80028d4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d103      	bne.n	80028e4 <BlockL2+0x2d0>
		CanRotate = true;
 80028dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002918 <BlockL2+0x304>)
 80028de:	2201      	movs	r2, #1
 80028e0:	701a      	strb	r2, [r3, #0]
 80028e2:	e003      	b.n	80028ec <BlockL2+0x2d8>
	else CanRotate = false;
 80028e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002918 <BlockL2+0x304>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 3); cout << char(248);
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 3); cout << char(248);
}
 80028ea:	bf00      	nop
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd90      	pop	{r4, r7, pc}
 80028f4:	20000fec 	.word	0x20000fec
 80028f8:	20000fe8 	.word	0x20000fe8
 80028fc:	20000fe4 	.word	0x20000fe4
 8002900:	200001d0 	.word	0x200001d0
 8002904:	2000000c 	.word	0x2000000c
 8002908:	2000000f 	.word	0x2000000f
 800290c:	20000ff0 	.word	0x20000ff0
 8002910:	2000000e 	.word	0x2000000e
 8002914:	2000000d 	.word	0x2000000d
 8002918:	20000010 	.word	0x20000010

0800291c <BlockL3>:

void BlockL3(int x, int y)
{
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	3301      	adds	r3, #1
 800292e:	4619      	mov	r1, r3
 8002930:	4610      	mov	r0, r2
 8002932:	f003 f94d 	bl	8005bd0 <PrintXY>
	PrintXY(x, y + 1);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	3301      	adds	r3, #1
 800293a:	4619      	mov	r1, r3
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f003 f947 	bl	8005bd0 <PrintXY>
	PrintXY(x + 2, y + 1);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	1c9a      	adds	r2, r3, #2
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	3301      	adds	r3, #1
 800294a:	4619      	mov	r1, r3
 800294c:	4610      	mov	r0, r2
 800294e:	f003 f93f 	bl	8005bd0 <PrintXY>
	PrintXY(x + 2, y);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3302      	adds	r3, #2
 8002956:	6839      	ldr	r1, [r7, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f003 f939 	bl	8005bd0 <PrintXY>

	CurrentState = 9;
 800295e:	4bae      	ldr	r3, [pc, #696]	@ (8002c18 <BlockL3+0x2fc>)
 8002960:	2209      	movs	r2, #9
 8002962:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 20 ||
 8002964:	4bad      	ldr	r3, [pc, #692]	@ (8002c1c <BlockL3+0x300>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b13      	cmp	r3, #19
 800296a:	dc2e      	bgt.n	80029ca <BlockL3+0xae>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 800296c:	4bac      	ldr	r3, [pc, #688]	@ (8002c20 <BlockL3+0x304>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	4baa      	ldr	r3, [pc, #680]	@ (8002c1c <BlockL3+0x300>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	1c99      	adds	r1, r3, #2
 8002978:	48aa      	ldr	r0, [pc, #680]	@ (8002c24 <BlockL3+0x308>)
 800297a:	4613      	mov	r3, r2
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	1a9b      	subs	r3, r3, r2
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	440b      	add	r3, r1
 8002984:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 20 ||
 8002988:	2b00      	cmp	r3, #0
 800298a:	d11e      	bne.n	80029ca <BlockL3+0xae>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] != 0 ||
 800298c:	4ba4      	ldr	r3, [pc, #656]	@ (8002c20 <BlockL3+0x304>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	1c9a      	adds	r2, r3, #2
 8002992:	4ba2      	ldr	r3, [pc, #648]	@ (8002c1c <BlockL3+0x300>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	1c99      	adds	r1, r3, #2
 8002998:	48a2      	ldr	r0, [pc, #648]	@ (8002c24 <BlockL3+0x308>)
 800299a:	4613      	mov	r3, r2
 800299c:	011b      	lsls	r3, r3, #4
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	440b      	add	r3, r1
 80029a4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10e      	bne.n	80029ca <BlockL3+0xae>
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0)
 80029ac:	4b9c      	ldr	r3, [pc, #624]	@ (8002c20 <BlockL3+0x304>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4b9a      	ldr	r3, [pc, #616]	@ (8002c1c <BlockL3+0x300>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	1c99      	adds	r1, r3, #2
 80029b6:	489b      	ldr	r0, [pc, #620]	@ (8002c24 <BlockL3+0x308>)
 80029b8:	4613      	mov	r3, r2
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	440b      	add	r3, r1
 80029c2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] != 0 ||
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d04e      	beq.n	8002a68 <BlockL3+0x14c>
	{
		while (isDownKey() == 1);
 80029ca:	bf00      	nop
 80029cc:	f003 f87a 	bl	8005ac4 <isDownKey>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d0fa      	beq.n	80029cc <BlockL3+0xb0>
		NewTetromino = true;
 80029d6:	4b94      	ldr	r3, [pc, #592]	@ (8002c28 <BlockL3+0x30c>)
 80029d8:	2201      	movs	r2, #1
 80029da:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 80029dc:	4b93      	ldr	r3, [pc, #588]	@ (8002c2c <BlockL3+0x310>)
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 80029e2:	4b93      	ldr	r3, [pc, #588]	@ (8002c30 <BlockL3+0x314>)
 80029e4:	8818      	ldrh	r0, [r3, #0]
 80029e6:	4b8e      	ldr	r3, [pc, #568]	@ (8002c20 <BlockL3+0x304>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	4b8b      	ldr	r3, [pc, #556]	@ (8002c1c <BlockL3+0x300>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	1c59      	adds	r1, r3, #1
 80029f2:	4604      	mov	r4, r0
 80029f4:	488b      	ldr	r0, [pc, #556]	@ (8002c24 <BlockL3+0x308>)
 80029f6:	4613      	mov	r3, r2
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	440b      	add	r3, r1
 8002a00:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] = colour;
 8002a04:	4b8a      	ldr	r3, [pc, #552]	@ (8002c30 <BlockL3+0x314>)
 8002a06:	8818      	ldrh	r0, [r3, #0]
 8002a08:	4b85      	ldr	r3, [pc, #532]	@ (8002c20 <BlockL3+0x304>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4b83      	ldr	r3, [pc, #524]	@ (8002c1c <BlockL3+0x300>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	1c59      	adds	r1, r3, #1
 8002a12:	4604      	mov	r4, r0
 8002a14:	4883      	ldr	r0, [pc, #524]	@ (8002c24 <BlockL3+0x308>)
 8002a16:	4613      	mov	r3, r2
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	1a9b      	subs	r3, r3, r2
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	440b      	add	r3, r1
 8002a20:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] = colour;
 8002a24:	4b82      	ldr	r3, [pc, #520]	@ (8002c30 <BlockL3+0x314>)
 8002a26:	8818      	ldrh	r0, [r3, #0]
 8002a28:	4b7d      	ldr	r3, [pc, #500]	@ (8002c20 <BlockL3+0x304>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	1c9a      	adds	r2, r3, #2
 8002a2e:	4b7b      	ldr	r3, [pc, #492]	@ (8002c1c <BlockL3+0x300>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	1c59      	adds	r1, r3, #1
 8002a34:	4604      	mov	r4, r0
 8002a36:	487b      	ldr	r0, [pc, #492]	@ (8002c24 <BlockL3+0x308>)
 8002a38:	4613      	mov	r3, r2
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	1a9b      	subs	r3, r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	440b      	add	r3, r1
 8002a42:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY] = colour;
 8002a46:	4b7a      	ldr	r3, [pc, #488]	@ (8002c30 <BlockL3+0x314>)
 8002a48:	8818      	ldrh	r0, [r3, #0]
 8002a4a:	4b75      	ldr	r3, [pc, #468]	@ (8002c20 <BlockL3+0x304>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	1c9a      	adds	r2, r3, #2
 8002a50:	4b72      	ldr	r3, [pc, #456]	@ (8002c1c <BlockL3+0x300>)
 8002a52:	6819      	ldr	r1, [r3, #0]
 8002a54:	4604      	mov	r4, r0
 8002a56:	4873      	ldr	r0, [pc, #460]	@ (8002c24 <BlockL3+0x308>)
 8002a58:	4613      	mov	r3, r2
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	440b      	add	r3, r1
 8002a62:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8002a66:	e002      	b.n	8002a6e <BlockL3+0x152>
	}
	else CanMoveDown = true;
 8002a68:	4b70      	ldr	r3, [pc, #448]	@ (8002c2c <BlockL3+0x310>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8002a6e:	4b6c      	ldr	r3, [pc, #432]	@ (8002c20 <BlockL3+0x304>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	4b6a      	ldr	r3, [pc, #424]	@ (8002c1c <BlockL3+0x300>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	1c59      	adds	r1, r3, #1
 8002a78:	486a      	ldr	r0, [pc, #424]	@ (8002c24 <BlockL3+0x308>)
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	1a9b      	subs	r3, r3, r2
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	440b      	add	r3, r1
 8002a84:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d132      	bne.n	8002af2 <BlockL3+0x1d6>
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 8002a8c:	4b64      	ldr	r3, [pc, #400]	@ (8002c20 <BlockL3+0x304>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	1e5a      	subs	r2, r3, #1
 8002a92:	4b62      	ldr	r3, [pc, #392]	@ (8002c1c <BlockL3+0x300>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	1c59      	adds	r1, r3, #1
 8002a98:	4862      	ldr	r0, [pc, #392]	@ (8002c24 <BlockL3+0x308>)
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	1a9b      	subs	r3, r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	440b      	add	r3, r1
 8002aa4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d122      	bne.n	8002af2 <BlockL3+0x1d6>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8002aac:	4b5c      	ldr	r3, [pc, #368]	@ (8002c20 <BlockL3+0x304>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	4b5a      	ldr	r3, [pc, #360]	@ (8002c1c <BlockL3+0x300>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	1c59      	adds	r1, r3, #1
 8002ab8:	485a      	ldr	r0, [pc, #360]	@ (8002c24 <BlockL3+0x308>)
 8002aba:	4613      	mov	r3, r2
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	1a9b      	subs	r3, r3, r2
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	440b      	add	r3, r1
 8002ac4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d112      	bne.n	8002af2 <BlockL3+0x1d6>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0
 8002acc:	4b54      	ldr	r3, [pc, #336]	@ (8002c20 <BlockL3+0x304>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	4b52      	ldr	r3, [pc, #328]	@ (8002c1c <BlockL3+0x300>)
 8002ad4:	6819      	ldr	r1, [r3, #0]
 8002ad6:	4853      	ldr	r0, [pc, #332]	@ (8002c24 <BlockL3+0x308>)
 8002ad8:	4613      	mov	r3, r2
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	440b      	add	r3, r1
 8002ae2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d103      	bne.n	8002af2 <BlockL3+0x1d6>
	)
		CanMoveLeft = true;
 8002aea:	4b52      	ldr	r3, [pc, #328]	@ (8002c34 <BlockL3+0x318>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	e002      	b.n	8002af8 <BlockL3+0x1dc>
	else CanMoveLeft = false;
 8002af2:	4b50      	ldr	r3, [pc, #320]	@ (8002c34 <BlockL3+0x318>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8002af8:	4b49      	ldr	r3, [pc, #292]	@ (8002c20 <BlockL3+0x304>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	1c9a      	adds	r2, r3, #2
 8002afe:	4b47      	ldr	r3, [pc, #284]	@ (8002c1c <BlockL3+0x300>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	1c59      	adds	r1, r3, #1
 8002b04:	4847      	ldr	r0, [pc, #284]	@ (8002c24 <BlockL3+0x308>)
 8002b06:	4613      	mov	r3, r2
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	440b      	add	r3, r1
 8002b10:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d132      	bne.n	8002b7e <BlockL3+0x262>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8002b18:	4b41      	ldr	r3, [pc, #260]	@ (8002c20 <BlockL3+0x304>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c1c <BlockL3+0x300>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	1c59      	adds	r1, r3, #1
 8002b24:	483f      	ldr	r0, [pc, #252]	@ (8002c24 <BlockL3+0x308>)
 8002b26:	4613      	mov	r3, r2
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	440b      	add	r3, r1
 8002b30:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d122      	bne.n	8002b7e <BlockL3+0x262>
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 8002b38:	4b39      	ldr	r3, [pc, #228]	@ (8002c20 <BlockL3+0x304>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	1cda      	adds	r2, r3, #3
 8002b3e:	4b37      	ldr	r3, [pc, #220]	@ (8002c1c <BlockL3+0x300>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	1c59      	adds	r1, r3, #1
 8002b44:	4837      	ldr	r0, [pc, #220]	@ (8002c24 <BlockL3+0x308>)
 8002b46:	4613      	mov	r3, r2
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	1a9b      	subs	r3, r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	440b      	add	r3, r1
 8002b50:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d112      	bne.n	8002b7e <BlockL3+0x262>
		tetris[tetrominoLocX + 3][tetrominoLocY] == 0
 8002b58:	4b31      	ldr	r3, [pc, #196]	@ (8002c20 <BlockL3+0x304>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	1cda      	adds	r2, r3, #3
 8002b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8002c1c <BlockL3+0x300>)
 8002b60:	6819      	ldr	r1, [r3, #0]
 8002b62:	4830      	ldr	r0, [pc, #192]	@ (8002c24 <BlockL3+0x308>)
 8002b64:	4613      	mov	r3, r2
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	1a9b      	subs	r3, r3, r2
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	440b      	add	r3, r1
 8002b6e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d103      	bne.n	8002b7e <BlockL3+0x262>
	)
		CanMoveRight = true;
 8002b76:	4b30      	ldr	r3, [pc, #192]	@ (8002c38 <BlockL3+0x31c>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	701a      	strb	r2, [r3, #0]
 8002b7c:	e002      	b.n	8002b84 <BlockL3+0x268>
	else CanMoveRight = false;
 8002b7e:	4b2e      	ldr	r3, [pc, #184]	@ (8002c38 <BlockL3+0x31c>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8002b84:	4b26      	ldr	r3, [pc, #152]	@ (8002c20 <BlockL3+0x304>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	4b24      	ldr	r3, [pc, #144]	@ (8002c1c <BlockL3+0x300>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	1c59      	adds	r1, r3, #1
 8002b90:	4824      	ldr	r0, [pc, #144]	@ (8002c24 <BlockL3+0x308>)
 8002b92:	4613      	mov	r3, r2
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	1a9b      	subs	r3, r3, r2
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	440b      	add	r3, r1
 8002b9c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d130      	bne.n	8002c06 <BlockL3+0x2ea>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 8002ba4:	4b1e      	ldr	r3, [pc, #120]	@ (8002c20 <BlockL3+0x304>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	4b1c      	ldr	r3, [pc, #112]	@ (8002c1c <BlockL3+0x300>)
 8002bac:	6819      	ldr	r1, [r3, #0]
 8002bae:	481d      	ldr	r0, [pc, #116]	@ (8002c24 <BlockL3+0x308>)
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	1a9b      	subs	r3, r3, r2
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	440b      	add	r3, r1
 8002bba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d121      	bne.n	8002c06 <BlockL3+0x2ea>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 8002bc2:	4b17      	ldr	r3, [pc, #92]	@ (8002c20 <BlockL3+0x304>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	4b14      	ldr	r3, [pc, #80]	@ (8002c1c <BlockL3+0x300>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	1c99      	adds	r1, r3, #2
 8002bce:	4815      	ldr	r0, [pc, #84]	@ (8002c24 <BlockL3+0x308>)
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	1a9b      	subs	r3, r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	440b      	add	r3, r1
 8002bda:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d111      	bne.n	8002c06 <BlockL3+0x2ea>
		tetris[tetrominoLocX][tetrominoLocY] == 0)
 8002be2:	4b0f      	ldr	r3, [pc, #60]	@ (8002c20 <BlockL3+0x304>)
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c1c <BlockL3+0x300>)
 8002be8:	6819      	ldr	r1, [r3, #0]
 8002bea:	480e      	ldr	r0, [pc, #56]	@ (8002c24 <BlockL3+0x308>)
 8002bec:	4613      	mov	r3, r2
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	1a9b      	subs	r3, r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	440b      	add	r3, r1
 8002bf6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d103      	bne.n	8002c06 <BlockL3+0x2ea>
		CanRotate = true;
 8002bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8002c3c <BlockL3+0x320>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	e003      	b.n	8002c0e <BlockL3+0x2f2>
	else CanRotate = false;
 8002c06:	4b0d      	ldr	r3, [pc, #52]	@ (8002c3c <BlockL3+0x320>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX, tetrominoLocY + 2); cout << char(248);
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd90      	pop	{r4, r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000fec 	.word	0x20000fec
 8002c1c:	20000fe8 	.word	0x20000fe8
 8002c20:	20000fe4 	.word	0x20000fe4
 8002c24:	200001d0 	.word	0x200001d0
 8002c28:	2000000c 	.word	0x2000000c
 8002c2c:	2000000f 	.word	0x2000000f
 8002c30:	20000ff0 	.word	0x20000ff0
 8002c34:	2000000e 	.word	0x2000000e
 8002c38:	2000000d 	.word	0x2000000d
 8002c3c:	20000010 	.word	0x20000010

08002c40 <BlockL4>:

void BlockL4(int x, int y)
{
 8002c40:	b590      	push	{r4, r7, lr}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	3301      	adds	r3, #1
 8002c52:	4619      	mov	r1, r3
 8002c54:	4610      	mov	r0, r2
 8002c56:	f002 ffbb 	bl	8005bd0 <PrintXY>
	PrintXY(x + 1, y);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	6839      	ldr	r1, [r7, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f002 ffb5 	bl	8005bd0 <PrintXY>
	PrintXY(x + 1, y + 2);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	1c5a      	adds	r2, r3, #1
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	3302      	adds	r3, #2
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4610      	mov	r0, r2
 8002c72:	f002 ffad 	bl	8005bd0 <PrintXY>
	PrintXY(x, y);
 8002c76:	6839      	ldr	r1, [r7, #0]
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f002 ffa9 	bl	8005bd0 <PrintXY>

	CurrentState = 10;
 8002c7e:	4ba4      	ldr	r3, [pc, #656]	@ (8002f10 <BlockL4+0x2d0>)
 8002c80:	220a      	movs	r2, #10
 8002c82:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 8002c84:	4ba3      	ldr	r3, [pc, #652]	@ (8002f14 <BlockL4+0x2d4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b12      	cmp	r3, #18
 8002c8a:	dc1e      	bgt.n	8002cca <BlockL4+0x8a>
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 8002c8c:	4ba2      	ldr	r3, [pc, #648]	@ (8002f18 <BlockL4+0x2d8>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	4ba0      	ldr	r3, [pc, #640]	@ (8002f14 <BlockL4+0x2d4>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	1cd9      	adds	r1, r3, #3
 8002c98:	48a0      	ldr	r0, [pc, #640]	@ (8002f1c <BlockL4+0x2dc>)
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	440b      	add	r3, r1
 8002ca4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10e      	bne.n	8002cca <BlockL4+0x8a>
		tetris[tetrominoLocX][tetrominoLocY + 1] != 0)
 8002cac:	4b9a      	ldr	r3, [pc, #616]	@ (8002f18 <BlockL4+0x2d8>)
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	4b98      	ldr	r3, [pc, #608]	@ (8002f14 <BlockL4+0x2d4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	1c59      	adds	r1, r3, #1
 8002cb6:	4899      	ldr	r0, [pc, #612]	@ (8002f1c <BlockL4+0x2dc>)
 8002cb8:	4613      	mov	r3, r2
 8002cba:	011b      	lsls	r3, r3, #4
 8002cbc:	1a9b      	subs	r3, r3, r2
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	440b      	add	r3, r1
 8002cc2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d04d      	beq.n	8002d66 <BlockL4+0x126>
	{
		while (isDownKey() == 1);
 8002cca:	bf00      	nop
 8002ccc:	f002 fefa 	bl	8005ac4 <isDownKey>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d0fa      	beq.n	8002ccc <BlockL4+0x8c>
		NewTetromino = true;
 8002cd6:	4b92      	ldr	r3, [pc, #584]	@ (8002f20 <BlockL4+0x2e0>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 8002cdc:	4b91      	ldr	r3, [pc, #580]	@ (8002f24 <BlockL4+0x2e4>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 8002ce2:	4b91      	ldr	r3, [pc, #580]	@ (8002f28 <BlockL4+0x2e8>)
 8002ce4:	8818      	ldrh	r0, [r3, #0]
 8002ce6:	4b8c      	ldr	r3, [pc, #560]	@ (8002f18 <BlockL4+0x2d8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	4b89      	ldr	r3, [pc, #548]	@ (8002f14 <BlockL4+0x2d4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	1c59      	adds	r1, r3, #1
 8002cf2:	4604      	mov	r4, r0
 8002cf4:	4889      	ldr	r0, [pc, #548]	@ (8002f1c <BlockL4+0x2dc>)
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	1a9b      	subs	r3, r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	440b      	add	r3, r1
 8002d00:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] = colour;
 8002d04:	4b88      	ldr	r3, [pc, #544]	@ (8002f28 <BlockL4+0x2e8>)
 8002d06:	8818      	ldrh	r0, [r3, #0]
 8002d08:	4b83      	ldr	r3, [pc, #524]	@ (8002f18 <BlockL4+0x2d8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	4b81      	ldr	r3, [pc, #516]	@ (8002f14 <BlockL4+0x2d4>)
 8002d10:	6819      	ldr	r1, [r3, #0]
 8002d12:	4604      	mov	r4, r0
 8002d14:	4881      	ldr	r0, [pc, #516]	@ (8002f1c <BlockL4+0x2dc>)
 8002d16:	4613      	mov	r3, r2
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	1a9b      	subs	r3, r3, r2
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	440b      	add	r3, r1
 8002d20:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] = colour;
 8002d24:	4b80      	ldr	r3, [pc, #512]	@ (8002f28 <BlockL4+0x2e8>)
 8002d26:	8818      	ldrh	r0, [r3, #0]
 8002d28:	4b7b      	ldr	r3, [pc, #492]	@ (8002f18 <BlockL4+0x2d8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	4b79      	ldr	r3, [pc, #484]	@ (8002f14 <BlockL4+0x2d4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	1c99      	adds	r1, r3, #2
 8002d34:	4604      	mov	r4, r0
 8002d36:	4879      	ldr	r0, [pc, #484]	@ (8002f1c <BlockL4+0x2dc>)
 8002d38:	4613      	mov	r3, r2
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	440b      	add	r3, r1
 8002d42:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY] = colour;
 8002d46:	4b78      	ldr	r3, [pc, #480]	@ (8002f28 <BlockL4+0x2e8>)
 8002d48:	8818      	ldrh	r0, [r3, #0]
 8002d4a:	4b73      	ldr	r3, [pc, #460]	@ (8002f18 <BlockL4+0x2d8>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	4b71      	ldr	r3, [pc, #452]	@ (8002f14 <BlockL4+0x2d4>)
 8002d50:	6819      	ldr	r1, [r3, #0]
 8002d52:	4604      	mov	r4, r0
 8002d54:	4871      	ldr	r0, [pc, #452]	@ (8002f1c <BlockL4+0x2dc>)
 8002d56:	4613      	mov	r3, r2
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	1a9b      	subs	r3, r3, r2
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	440b      	add	r3, r1
 8002d60:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8002d64:	e002      	b.n	8002d6c <BlockL4+0x12c>
	}
	else CanMoveDown = true;
 8002d66:	4b6f      	ldr	r3, [pc, #444]	@ (8002f24 <BlockL4+0x2e4>)
 8002d68:	2201      	movs	r2, #1
 8002d6a:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8002d6c:	4b6a      	ldr	r3, [pc, #424]	@ (8002f18 <BlockL4+0x2d8>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	4b68      	ldr	r3, [pc, #416]	@ (8002f14 <BlockL4+0x2d4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	1c59      	adds	r1, r3, #1
 8002d76:	4869      	ldr	r0, [pc, #420]	@ (8002f1c <BlockL4+0x2dc>)
 8002d78:	4613      	mov	r3, r2
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	1a9b      	subs	r3, r3, r2
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	440b      	add	r3, r1
 8002d82:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d12f      	bne.n	8002dea <BlockL4+0x1aa>
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 8002d8a:	4b63      	ldr	r3, [pc, #396]	@ (8002f18 <BlockL4+0x2d8>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	4b61      	ldr	r3, [pc, #388]	@ (8002f14 <BlockL4+0x2d4>)
 8002d90:	6819      	ldr	r1, [r3, #0]
 8002d92:	4862      	ldr	r0, [pc, #392]	@ (8002f1c <BlockL4+0x2dc>)
 8002d94:	4613      	mov	r3, r2
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	1a9b      	subs	r3, r3, r2
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	440b      	add	r3, r1
 8002d9e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d121      	bne.n	8002dea <BlockL4+0x1aa>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 8002da6:	4b5c      	ldr	r3, [pc, #368]	@ (8002f18 <BlockL4+0x2d8>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	4b5a      	ldr	r3, [pc, #360]	@ (8002f14 <BlockL4+0x2d4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	1c99      	adds	r1, r3, #2
 8002db0:	485a      	ldr	r0, [pc, #360]	@ (8002f1c <BlockL4+0x2dc>)
 8002db2:	4613      	mov	r3, r2
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	440b      	add	r3, r1
 8002dbc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d112      	bne.n	8002dea <BlockL4+0x1aa>
		tetris[tetrominoLocX - 1][tetrominoLocY] == 0
 8002dc4:	4b54      	ldr	r3, [pc, #336]	@ (8002f18 <BlockL4+0x2d8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	1e5a      	subs	r2, r3, #1
 8002dca:	4b52      	ldr	r3, [pc, #328]	@ (8002f14 <BlockL4+0x2d4>)
 8002dcc:	6819      	ldr	r1, [r3, #0]
 8002dce:	4853      	ldr	r0, [pc, #332]	@ (8002f1c <BlockL4+0x2dc>)
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	440b      	add	r3, r1
 8002dda:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d103      	bne.n	8002dea <BlockL4+0x1aa>
	)
		CanMoveLeft = true;
 8002de2:	4b52      	ldr	r3, [pc, #328]	@ (8002f2c <BlockL4+0x2ec>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	701a      	strb	r2, [r3, #0]
 8002de8:	e002      	b.n	8002df0 <BlockL4+0x1b0>
	else CanMoveLeft = false;
 8002dea:	4b50      	ldr	r3, [pc, #320]	@ (8002f2c <BlockL4+0x2ec>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8002df0:	4b49      	ldr	r3, [pc, #292]	@ (8002f18 <BlockL4+0x2d8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	1c9a      	adds	r2, r3, #2
 8002df6:	4b47      	ldr	r3, [pc, #284]	@ (8002f14 <BlockL4+0x2d4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	1c59      	adds	r1, r3, #1
 8002dfc:	4847      	ldr	r0, [pc, #284]	@ (8002f1c <BlockL4+0x2dc>)
 8002dfe:	4613      	mov	r3, r2
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	1a9b      	subs	r3, r3, r2
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	440b      	add	r3, r1
 8002e08:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d131      	bne.n	8002e74 <BlockL4+0x234>
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 8002e10:	4b41      	ldr	r3, [pc, #260]	@ (8002f18 <BlockL4+0x2d8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	1c9a      	adds	r2, r3, #2
 8002e16:	4b3f      	ldr	r3, [pc, #252]	@ (8002f14 <BlockL4+0x2d4>)
 8002e18:	6819      	ldr	r1, [r3, #0]
 8002e1a:	4840      	ldr	r0, [pc, #256]	@ (8002f1c <BlockL4+0x2dc>)
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	440b      	add	r3, r1
 8002e26:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d122      	bne.n	8002e74 <BlockL4+0x234>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 8002e2e:	4b3a      	ldr	r3, [pc, #232]	@ (8002f18 <BlockL4+0x2d8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	1c9a      	adds	r2, r3, #2
 8002e34:	4b37      	ldr	r3, [pc, #220]	@ (8002f14 <BlockL4+0x2d4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	1c99      	adds	r1, r3, #2
 8002e3a:	4838      	ldr	r0, [pc, #224]	@ (8002f1c <BlockL4+0x2dc>)
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	1a9b      	subs	r3, r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	440b      	add	r3, r1
 8002e46:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d112      	bne.n	8002e74 <BlockL4+0x234>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0
 8002e4e:	4b32      	ldr	r3, [pc, #200]	@ (8002f18 <BlockL4+0x2d8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	4b2f      	ldr	r3, [pc, #188]	@ (8002f14 <BlockL4+0x2d4>)
 8002e56:	6819      	ldr	r1, [r3, #0]
 8002e58:	4830      	ldr	r0, [pc, #192]	@ (8002f1c <BlockL4+0x2dc>)
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	1a9b      	subs	r3, r3, r2
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	440b      	add	r3, r1
 8002e64:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d103      	bne.n	8002e74 <BlockL4+0x234>
	)
		CanMoveRight = true;
 8002e6c:	4b30      	ldr	r3, [pc, #192]	@ (8002f30 <BlockL4+0x2f0>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	701a      	strb	r2, [r3, #0]
 8002e72:	e002      	b.n	8002e7a <BlockL4+0x23a>
	else CanMoveRight = false;
 8002e74:	4b2e      	ldr	r3, [pc, #184]	@ (8002f30 <BlockL4+0x2f0>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8002e7a:	4b27      	ldr	r3, [pc, #156]	@ (8002f18 <BlockL4+0x2d8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	4b24      	ldr	r3, [pc, #144]	@ (8002f14 <BlockL4+0x2d4>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	1c59      	adds	r1, r3, #1
 8002e86:	4825      	ldr	r0, [pc, #148]	@ (8002f1c <BlockL4+0x2dc>)
 8002e88:	4613      	mov	r3, r2
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	1a9b      	subs	r3, r3, r2
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	440b      	add	r3, r1
 8002e92:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d131      	bne.n	8002efe <BlockL4+0x2be>
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8002e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8002f18 <BlockL4+0x2d8>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8002f14 <BlockL4+0x2d4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	1c59      	adds	r1, r3, #1
 8002ea4:	481d      	ldr	r0, [pc, #116]	@ (8002f1c <BlockL4+0x2dc>)
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	440b      	add	r3, r1
 8002eb0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d122      	bne.n	8002efe <BlockL4+0x2be>
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8002eb8:	4b17      	ldr	r3, [pc, #92]	@ (8002f18 <BlockL4+0x2d8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	1c9a      	adds	r2, r3, #2
 8002ebe:	4b15      	ldr	r3, [pc, #84]	@ (8002f14 <BlockL4+0x2d4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	1c59      	adds	r1, r3, #1
 8002ec4:	4815      	ldr	r0, [pc, #84]	@ (8002f1c <BlockL4+0x2dc>)
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	1a9b      	subs	r3, r3, r2
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	440b      	add	r3, r1
 8002ed0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d112      	bne.n	8002efe <BlockL4+0x2be>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0)
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f18 <BlockL4+0x2d8>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	4b0d      	ldr	r3, [pc, #52]	@ (8002f14 <BlockL4+0x2d4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	1c99      	adds	r1, r3, #2
 8002ee2:	480e      	ldr	r0, [pc, #56]	@ (8002f1c <BlockL4+0x2dc>)
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	1a9b      	subs	r3, r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	440b      	add	r3, r1
 8002eee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d103      	bne.n	8002efe <BlockL4+0x2be>
		CanRotate = true;
 8002ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8002f34 <BlockL4+0x2f4>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	701a      	strb	r2, [r3, #0]
 8002efc:	e003      	b.n	8002f06 <BlockL4+0x2c6>
	else CanRotate = false;
 8002efe:	4b0d      	ldr	r3, [pc, #52]	@ (8002f34 <BlockL4+0x2f4>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 3); cout << char(248);
	//PrintXY(tetrominoLocX, tetrominoLocY + 1); cout << char(248);
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd90      	pop	{r4, r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000fec 	.word	0x20000fec
 8002f14:	20000fe8 	.word	0x20000fe8
 8002f18:	20000fe4 	.word	0x20000fe4
 8002f1c:	200001d0 	.word	0x200001d0
 8002f20:	2000000c 	.word	0x2000000c
 8002f24:	2000000f 	.word	0x2000000f
 8002f28:	20000ff0 	.word	0x20000ff0
 8002f2c:	2000000e 	.word	0x2000000e
 8002f30:	2000000d 	.word	0x2000000d
 8002f34:	20000010 	.word	0x20000010

08002f38 <BlockO>:

void BlockO(int x, int y)
{
 8002f38:	b590      	push	{r4, r7, lr}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4610      	mov	r0, r2
 8002f4e:	f002 fe3f 	bl	8005bd0 <PrintXY>
	PrintXY(x + 2, y + 1);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	1c9a      	adds	r2, r3, #2
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	f002 fe37 	bl	8005bd0 <PrintXY>
	PrintXY(x + 1, y + 2);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	3302      	adds	r3, #2
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	f002 fe2f 	bl	8005bd0 <PrintXY>
	PrintXY(x + 2, y + 2);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	1c9a      	adds	r2, r3, #2
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	3302      	adds	r3, #2
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	f002 fe27 	bl	8005bd0 <PrintXY>

	CurrentState = 0;
 8002f82:	4b87      	ldr	r3, [pc, #540]	@ (80031a0 <BlockO+0x268>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 8002f88:	4b86      	ldr	r3, [pc, #536]	@ (80031a4 <BlockO+0x26c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b12      	cmp	r3, #18
 8002f8e:	dc1f      	bgt.n	8002fd0 <BlockO+0x98>
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 8002f90:	4b85      	ldr	r3, [pc, #532]	@ (80031a8 <BlockO+0x270>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	4b83      	ldr	r3, [pc, #524]	@ (80031a4 <BlockO+0x26c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	1cd9      	adds	r1, r3, #3
 8002f9c:	4883      	ldr	r0, [pc, #524]	@ (80031ac <BlockO+0x274>)
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	1a9b      	subs	r3, r3, r2
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	440b      	add	r3, r1
 8002fa8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10f      	bne.n	8002fd0 <BlockO+0x98>
		tetris[tetrominoLocX + 2][tetrominoLocY + 3] != 0)
 8002fb0:	4b7d      	ldr	r3, [pc, #500]	@ (80031a8 <BlockO+0x270>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	1c9a      	adds	r2, r3, #2
 8002fb6:	4b7b      	ldr	r3, [pc, #492]	@ (80031a4 <BlockO+0x26c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	1cd9      	adds	r1, r3, #3
 8002fbc:	487b      	ldr	r0, [pc, #492]	@ (80031ac <BlockO+0x274>)
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	440b      	add	r3, r1
 8002fc8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d050      	beq.n	8003072 <BlockO+0x13a>
	{
		while (isDownKey() == 1);
 8002fd0:	bf00      	nop
 8002fd2:	f002 fd77 	bl	8005ac4 <isDownKey>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d0fa      	beq.n	8002fd2 <BlockO+0x9a>
		NewTetromino = true;
 8002fdc:	4b74      	ldr	r3, [pc, #464]	@ (80031b0 <BlockO+0x278>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 8002fe2:	4b74      	ldr	r3, [pc, #464]	@ (80031b4 <BlockO+0x27c>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 8002fe8:	4b73      	ldr	r3, [pc, #460]	@ (80031b8 <BlockO+0x280>)
 8002fea:	8818      	ldrh	r0, [r3, #0]
 8002fec:	4b6e      	ldr	r3, [pc, #440]	@ (80031a8 <BlockO+0x270>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	4b6c      	ldr	r3, [pc, #432]	@ (80031a4 <BlockO+0x26c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	1c59      	adds	r1, r3, #1
 8002ff8:	4604      	mov	r4, r0
 8002ffa:	486c      	ldr	r0, [pc, #432]	@ (80031ac <BlockO+0x274>)
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	440b      	add	r3, r1
 8003006:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] = colour;
 800300a:	4b6b      	ldr	r3, [pc, #428]	@ (80031b8 <BlockO+0x280>)
 800300c:	8818      	ldrh	r0, [r3, #0]
 800300e:	4b66      	ldr	r3, [pc, #408]	@ (80031a8 <BlockO+0x270>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	1c9a      	adds	r2, r3, #2
 8003014:	4b63      	ldr	r3, [pc, #396]	@ (80031a4 <BlockO+0x26c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	1c59      	adds	r1, r3, #1
 800301a:	4604      	mov	r4, r0
 800301c:	4863      	ldr	r0, [pc, #396]	@ (80031ac <BlockO+0x274>)
 800301e:	4613      	mov	r3, r2
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	1a9b      	subs	r3, r3, r2
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	440b      	add	r3, r1
 8003028:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] = colour;
 800302c:	4b62      	ldr	r3, [pc, #392]	@ (80031b8 <BlockO+0x280>)
 800302e:	8818      	ldrh	r0, [r3, #0]
 8003030:	4b5d      	ldr	r3, [pc, #372]	@ (80031a8 <BlockO+0x270>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	4b5b      	ldr	r3, [pc, #364]	@ (80031a4 <BlockO+0x26c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	1c99      	adds	r1, r3, #2
 800303c:	4604      	mov	r4, r0
 800303e:	485b      	ldr	r0, [pc, #364]	@ (80031ac <BlockO+0x274>)
 8003040:	4613      	mov	r3, r2
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	440b      	add	r3, r1
 800304a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] = colour;
 800304e:	4b5a      	ldr	r3, [pc, #360]	@ (80031b8 <BlockO+0x280>)
 8003050:	8818      	ldrh	r0, [r3, #0]
 8003052:	4b55      	ldr	r3, [pc, #340]	@ (80031a8 <BlockO+0x270>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	1c9a      	adds	r2, r3, #2
 8003058:	4b52      	ldr	r3, [pc, #328]	@ (80031a4 <BlockO+0x26c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	1c99      	adds	r1, r3, #2
 800305e:	4604      	mov	r4, r0
 8003060:	4852      	ldr	r0, [pc, #328]	@ (80031ac <BlockO+0x274>)
 8003062:	4613      	mov	r3, r2
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	1a9b      	subs	r3, r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	440b      	add	r3, r1
 800306c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8003070:	e002      	b.n	8003078 <BlockO+0x140>
	}
	else CanMoveDown = true;
 8003072:	4b50      	ldr	r3, [pc, #320]	@ (80031b4 <BlockO+0x27c>)
 8003074:	2201      	movs	r2, #1
 8003076:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8003078:	4b4b      	ldr	r3, [pc, #300]	@ (80031a8 <BlockO+0x270>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4b49      	ldr	r3, [pc, #292]	@ (80031a4 <BlockO+0x26c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	1c59      	adds	r1, r3, #1
 8003082:	484a      	ldr	r0, [pc, #296]	@ (80031ac <BlockO+0x274>)
 8003084:	4613      	mov	r3, r2
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	440b      	add	r3, r1
 800308e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d132      	bne.n	80030fc <BlockO+0x1c4>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8003096:	4b44      	ldr	r3, [pc, #272]	@ (80031a8 <BlockO+0x270>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	4b41      	ldr	r3, [pc, #260]	@ (80031a4 <BlockO+0x26c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	1c59      	adds	r1, r3, #1
 80030a2:	4842      	ldr	r0, [pc, #264]	@ (80031ac <BlockO+0x274>)
 80030a4:	4613      	mov	r3, r2
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	1a9b      	subs	r3, r3, r2
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	440b      	add	r3, r1
 80030ae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d122      	bne.n	80030fc <BlockO+0x1c4>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 80030b6:	4b3c      	ldr	r3, [pc, #240]	@ (80031a8 <BlockO+0x270>)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	4b3a      	ldr	r3, [pc, #232]	@ (80031a4 <BlockO+0x26c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	1c99      	adds	r1, r3, #2
 80030c0:	483a      	ldr	r0, [pc, #232]	@ (80031ac <BlockO+0x274>)
 80030c2:	4613      	mov	r3, r2
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	1a9b      	subs	r3, r3, r2
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	440b      	add	r3, r1
 80030cc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d113      	bne.n	80030fc <BlockO+0x1c4>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0
 80030d4:	4b34      	ldr	r3, [pc, #208]	@ (80031a8 <BlockO+0x270>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	4b32      	ldr	r3, [pc, #200]	@ (80031a4 <BlockO+0x26c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	1c99      	adds	r1, r3, #2
 80030e0:	4832      	ldr	r0, [pc, #200]	@ (80031ac <BlockO+0x274>)
 80030e2:	4613      	mov	r3, r2
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	440b      	add	r3, r1
 80030ec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d103      	bne.n	80030fc <BlockO+0x1c4>
	)
		CanMoveLeft = true;
 80030f4:	4b31      	ldr	r3, [pc, #196]	@ (80031bc <BlockO+0x284>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]
 80030fa:	e002      	b.n	8003102 <BlockO+0x1ca>
	else CanMoveLeft = false;
 80030fc:	4b2f      	ldr	r3, [pc, #188]	@ (80031bc <BlockO+0x284>)
 80030fe:	2200      	movs	r2, #0
 8003100:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8003102:	4b29      	ldr	r3, [pc, #164]	@ (80031a8 <BlockO+0x270>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	1c9a      	adds	r2, r3, #2
 8003108:	4b26      	ldr	r3, [pc, #152]	@ (80031a4 <BlockO+0x26c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	1c59      	adds	r1, r3, #1
 800310e:	4827      	ldr	r0, [pc, #156]	@ (80031ac <BlockO+0x274>)
 8003110:	4613      	mov	r3, r2
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	440b      	add	r3, r1
 800311a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d133      	bne.n	800318a <BlockO+0x252>
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 8003122:	4b21      	ldr	r3, [pc, #132]	@ (80031a8 <BlockO+0x270>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	1cda      	adds	r2, r3, #3
 8003128:	4b1e      	ldr	r3, [pc, #120]	@ (80031a4 <BlockO+0x26c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	1c59      	adds	r1, r3, #1
 800312e:	481f      	ldr	r0, [pc, #124]	@ (80031ac <BlockO+0x274>)
 8003130:	4613      	mov	r3, r2
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	440b      	add	r3, r1
 800313a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 800313e:	2b00      	cmp	r3, #0
 8003140:	d123      	bne.n	800318a <BlockO+0x252>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 8003142:	4b19      	ldr	r3, [pc, #100]	@ (80031a8 <BlockO+0x270>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	1c9a      	adds	r2, r3, #2
 8003148:	4b16      	ldr	r3, [pc, #88]	@ (80031a4 <BlockO+0x26c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	1c99      	adds	r1, r3, #2
 800314e:	4817      	ldr	r0, [pc, #92]	@ (80031ac <BlockO+0x274>)
 8003150:	4613      	mov	r3, r2
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	440b      	add	r3, r1
 800315a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 800315e:	2b00      	cmp	r3, #0
 8003160:	d113      	bne.n	800318a <BlockO+0x252>
		tetris[tetrominoLocX + 3][tetrominoLocY + 2] == 0
 8003162:	4b11      	ldr	r3, [pc, #68]	@ (80031a8 <BlockO+0x270>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	1cda      	adds	r2, r3, #3
 8003168:	4b0e      	ldr	r3, [pc, #56]	@ (80031a4 <BlockO+0x26c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	1c99      	adds	r1, r3, #2
 800316e:	480f      	ldr	r0, [pc, #60]	@ (80031ac <BlockO+0x274>)
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	440b      	add	r3, r1
 800317a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 800317e:	2b00      	cmp	r3, #0
 8003180:	d103      	bne.n	800318a <BlockO+0x252>
	)
		CanMoveRight = true;
 8003182:	4b0f      	ldr	r3, [pc, #60]	@ (80031c0 <BlockO+0x288>)
 8003184:	2201      	movs	r2, #1
 8003186:	701a      	strb	r2, [r3, #0]
 8003188:	e002      	b.n	8003190 <BlockO+0x258>
	else CanMoveRight = false;
 800318a:	4b0d      	ldr	r3, [pc, #52]	@ (80031c0 <BlockO+0x288>)
 800318c:	2200      	movs	r2, #0
 800318e:	701a      	strb	r2, [r3, #0]

	CanRotate = true;
 8003190:	4b0c      	ldr	r3, [pc, #48]	@ (80031c4 <BlockO+0x28c>)
 8003192:	2201      	movs	r2, #1
 8003194:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 3); cout << char(248);
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 3); cout << char(248);
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	bd90      	pop	{r4, r7, pc}
 800319e:	bf00      	nop
 80031a0:	20000fec 	.word	0x20000fec
 80031a4:	20000fe8 	.word	0x20000fe8
 80031a8:	20000fe4 	.word	0x20000fe4
 80031ac:	200001d0 	.word	0x200001d0
 80031b0:	2000000c 	.word	0x2000000c
 80031b4:	2000000f 	.word	0x2000000f
 80031b8:	20000ff0 	.word	0x20000ff0
 80031bc:	2000000e 	.word	0x2000000e
 80031c0:	2000000d 	.word	0x2000000d
 80031c4:	20000010 	.word	0x20000010

080031c8 <BlockS1>:

void BlockS1(int x, int y)
{
 80031c8:	b590      	push	{r4, r7, lr}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	3301      	adds	r3, #1
 80031da:	4619      	mov	r1, r3
 80031dc:	4610      	mov	r0, r2
 80031de:	f002 fcf7 	bl	8005bd0 <PrintXY>
	PrintXY(x + 2, y + 1);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	1c9a      	adds	r2, r3, #2
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	3301      	adds	r3, #1
 80031ea:	4619      	mov	r1, r3
 80031ec:	4610      	mov	r0, r2
 80031ee:	f002 fcef 	bl	8005bd0 <PrintXY>
	PrintXY(x + 1, y + 2);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	3302      	adds	r3, #2
 80031fa:	4619      	mov	r1, r3
 80031fc:	4610      	mov	r0, r2
 80031fe:	f002 fce7 	bl	8005bd0 <PrintXY>
	PrintXY(x, y + 2);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	3302      	adds	r3, #2
 8003206:	4619      	mov	r1, r3
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f002 fce1 	bl	8005bd0 <PrintXY>

	CurrentState = 11;
 800320e:	4bb0      	ldr	r3, [pc, #704]	@ (80034d0 <BlockS1+0x308>)
 8003210:	220b      	movs	r2, #11
 8003212:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 8003214:	4baf      	ldr	r3, [pc, #700]	@ (80034d4 <BlockS1+0x30c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b12      	cmp	r3, #18
 800321a:	dc2e      	bgt.n	800327a <BlockS1+0xb2>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] != 0 ||
 800321c:	4bae      	ldr	r3, [pc, #696]	@ (80034d8 <BlockS1+0x310>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	1c9a      	adds	r2, r3, #2
 8003222:	4bac      	ldr	r3, [pc, #688]	@ (80034d4 <BlockS1+0x30c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	1c99      	adds	r1, r3, #2
 8003228:	48ac      	ldr	r0, [pc, #688]	@ (80034dc <BlockS1+0x314>)
 800322a:	4613      	mov	r3, r2
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	1a9b      	subs	r3, r3, r2
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	440b      	add	r3, r1
 8003234:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 8003238:	2b00      	cmp	r3, #0
 800323a:	d11e      	bne.n	800327a <BlockS1+0xb2>
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 800323c:	4ba6      	ldr	r3, [pc, #664]	@ (80034d8 <BlockS1+0x310>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	4ba4      	ldr	r3, [pc, #656]	@ (80034d4 <BlockS1+0x30c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	1cd9      	adds	r1, r3, #3
 8003248:	48a4      	ldr	r0, [pc, #656]	@ (80034dc <BlockS1+0x314>)
 800324a:	4613      	mov	r3, r2
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	1a9b      	subs	r3, r3, r2
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	440b      	add	r3, r1
 8003254:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] != 0 ||
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10e      	bne.n	800327a <BlockS1+0xb2>
		tetris[tetrominoLocX][tetrominoLocY + 3] != 0)
 800325c:	4b9e      	ldr	r3, [pc, #632]	@ (80034d8 <BlockS1+0x310>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	4b9c      	ldr	r3, [pc, #624]	@ (80034d4 <BlockS1+0x30c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	1cd9      	adds	r1, r3, #3
 8003266:	489d      	ldr	r0, [pc, #628]	@ (80034dc <BlockS1+0x314>)
 8003268:	4613      	mov	r3, r2
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	440b      	add	r3, r1
 8003272:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 8003276:	2b00      	cmp	r3, #0
 8003278:	d04f      	beq.n	800331a <BlockS1+0x152>
	{
		while (isDownKey() == 1);
 800327a:	bf00      	nop
 800327c:	f002 fc22 	bl	8005ac4 <isDownKey>
 8003280:	4603      	mov	r3, r0
 8003282:	2b01      	cmp	r3, #1
 8003284:	d0fa      	beq.n	800327c <BlockS1+0xb4>
		NewTetromino = true;
 8003286:	4b96      	ldr	r3, [pc, #600]	@ (80034e0 <BlockS1+0x318>)
 8003288:	2201      	movs	r2, #1
 800328a:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 800328c:	4b95      	ldr	r3, [pc, #596]	@ (80034e4 <BlockS1+0x31c>)
 800328e:	2200      	movs	r2, #0
 8003290:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 8003292:	4b95      	ldr	r3, [pc, #596]	@ (80034e8 <BlockS1+0x320>)
 8003294:	8818      	ldrh	r0, [r3, #0]
 8003296:	4b90      	ldr	r3, [pc, #576]	@ (80034d8 <BlockS1+0x310>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	4b8d      	ldr	r3, [pc, #564]	@ (80034d4 <BlockS1+0x30c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	1c59      	adds	r1, r3, #1
 80032a2:	4604      	mov	r4, r0
 80032a4:	488d      	ldr	r0, [pc, #564]	@ (80034dc <BlockS1+0x314>)
 80032a6:	4613      	mov	r3, r2
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	440b      	add	r3, r1
 80032b0:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] = colour;
 80032b4:	4b8c      	ldr	r3, [pc, #560]	@ (80034e8 <BlockS1+0x320>)
 80032b6:	8818      	ldrh	r0, [r3, #0]
 80032b8:	4b87      	ldr	r3, [pc, #540]	@ (80034d8 <BlockS1+0x310>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	1c9a      	adds	r2, r3, #2
 80032be:	4b85      	ldr	r3, [pc, #532]	@ (80034d4 <BlockS1+0x30c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	1c59      	adds	r1, r3, #1
 80032c4:	4604      	mov	r4, r0
 80032c6:	4885      	ldr	r0, [pc, #532]	@ (80034dc <BlockS1+0x314>)
 80032c8:	4613      	mov	r3, r2
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	440b      	add	r3, r1
 80032d2:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] = colour;
 80032d6:	4b84      	ldr	r3, [pc, #528]	@ (80034e8 <BlockS1+0x320>)
 80032d8:	8818      	ldrh	r0, [r3, #0]
 80032da:	4b7f      	ldr	r3, [pc, #508]	@ (80034d8 <BlockS1+0x310>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	1c5a      	adds	r2, r3, #1
 80032e0:	4b7c      	ldr	r3, [pc, #496]	@ (80034d4 <BlockS1+0x30c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	1c99      	adds	r1, r3, #2
 80032e6:	4604      	mov	r4, r0
 80032e8:	487c      	ldr	r0, [pc, #496]	@ (80034dc <BlockS1+0x314>)
 80032ea:	4613      	mov	r3, r2
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	440b      	add	r3, r1
 80032f4:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] = colour;
 80032f8:	4b7b      	ldr	r3, [pc, #492]	@ (80034e8 <BlockS1+0x320>)
 80032fa:	8818      	ldrh	r0, [r3, #0]
 80032fc:	4b76      	ldr	r3, [pc, #472]	@ (80034d8 <BlockS1+0x310>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b74      	ldr	r3, [pc, #464]	@ (80034d4 <BlockS1+0x30c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	1c99      	adds	r1, r3, #2
 8003306:	4604      	mov	r4, r0
 8003308:	4874      	ldr	r0, [pc, #464]	@ (80034dc <BlockS1+0x314>)
 800330a:	4613      	mov	r3, r2
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	1a9b      	subs	r3, r3, r2
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	440b      	add	r3, r1
 8003314:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8003318:	e002      	b.n	8003320 <BlockS1+0x158>
	}
	else CanMoveDown = true;
 800331a:	4b72      	ldr	r3, [pc, #456]	@ (80034e4 <BlockS1+0x31c>)
 800331c:	2201      	movs	r2, #1
 800331e:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8003320:	4b6d      	ldr	r3, [pc, #436]	@ (80034d8 <BlockS1+0x310>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	4b6b      	ldr	r3, [pc, #428]	@ (80034d4 <BlockS1+0x30c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	1c59      	adds	r1, r3, #1
 800332a:	486c      	ldr	r0, [pc, #432]	@ (80034dc <BlockS1+0x314>)
 800332c:	4613      	mov	r3, r2
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	440b      	add	r3, r1
 8003336:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d132      	bne.n	80033a4 <BlockS1+0x1dc>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 800333e:	4b66      	ldr	r3, [pc, #408]	@ (80034d8 <BlockS1+0x310>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	4b63      	ldr	r3, [pc, #396]	@ (80034d4 <BlockS1+0x30c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	1c59      	adds	r1, r3, #1
 800334a:	4864      	ldr	r0, [pc, #400]	@ (80034dc <BlockS1+0x314>)
 800334c:	4613      	mov	r3, r2
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	1a9b      	subs	r3, r3, r2
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	440b      	add	r3, r1
 8003356:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 800335a:	2b00      	cmp	r3, #0
 800335c:	d122      	bne.n	80033a4 <BlockS1+0x1dc>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 800335e:	4b5e      	ldr	r3, [pc, #376]	@ (80034d8 <BlockS1+0x310>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	4b5c      	ldr	r3, [pc, #368]	@ (80034d4 <BlockS1+0x30c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	1c99      	adds	r1, r3, #2
 8003368:	485c      	ldr	r0, [pc, #368]	@ (80034dc <BlockS1+0x314>)
 800336a:	4613      	mov	r3, r2
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	1a9b      	subs	r3, r3, r2
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	440b      	add	r3, r1
 8003374:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8003378:	2b00      	cmp	r3, #0
 800337a:	d113      	bne.n	80033a4 <BlockS1+0x1dc>
		tetris[tetrominoLocX - 1][tetrominoLocY + 2] == 0
 800337c:	4b56      	ldr	r3, [pc, #344]	@ (80034d8 <BlockS1+0x310>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	1e5a      	subs	r2, r3, #1
 8003382:	4b54      	ldr	r3, [pc, #336]	@ (80034d4 <BlockS1+0x30c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	1c99      	adds	r1, r3, #2
 8003388:	4854      	ldr	r0, [pc, #336]	@ (80034dc <BlockS1+0x314>)
 800338a:	4613      	mov	r3, r2
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	1a9b      	subs	r3, r3, r2
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	440b      	add	r3, r1
 8003394:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 8003398:	2b00      	cmp	r3, #0
 800339a:	d103      	bne.n	80033a4 <BlockS1+0x1dc>
	)
		CanMoveLeft = true;
 800339c:	4b53      	ldr	r3, [pc, #332]	@ (80034ec <BlockS1+0x324>)
 800339e:	2201      	movs	r2, #1
 80033a0:	701a      	strb	r2, [r3, #0]
 80033a2:	e002      	b.n	80033aa <BlockS1+0x1e2>
	else CanMoveLeft = false;
 80033a4:	4b51      	ldr	r3, [pc, #324]	@ (80034ec <BlockS1+0x324>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80033aa:	4b4b      	ldr	r3, [pc, #300]	@ (80034d8 <BlockS1+0x310>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	1c9a      	adds	r2, r3, #2
 80033b0:	4b48      	ldr	r3, [pc, #288]	@ (80034d4 <BlockS1+0x30c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	1c59      	adds	r1, r3, #1
 80033b6:	4849      	ldr	r0, [pc, #292]	@ (80034dc <BlockS1+0x314>)
 80033b8:	4613      	mov	r3, r2
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	440b      	add	r3, r1
 80033c2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d133      	bne.n	8003432 <BlockS1+0x26a>
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 80033ca:	4b43      	ldr	r3, [pc, #268]	@ (80034d8 <BlockS1+0x310>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	1cda      	adds	r2, r3, #3
 80033d0:	4b40      	ldr	r3, [pc, #256]	@ (80034d4 <BlockS1+0x30c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	1c59      	adds	r1, r3, #1
 80033d6:	4841      	ldr	r0, [pc, #260]	@ (80034dc <BlockS1+0x314>)
 80033d8:	4613      	mov	r3, r2
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	440b      	add	r3, r1
 80033e2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d123      	bne.n	8003432 <BlockS1+0x26a>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 80033ea:	4b3b      	ldr	r3, [pc, #236]	@ (80034d8 <BlockS1+0x310>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	1c9a      	adds	r2, r3, #2
 80033f0:	4b38      	ldr	r3, [pc, #224]	@ (80034d4 <BlockS1+0x30c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	1c99      	adds	r1, r3, #2
 80033f6:	4839      	ldr	r0, [pc, #228]	@ (80034dc <BlockS1+0x314>)
 80033f8:	4613      	mov	r3, r2
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	1a9b      	subs	r3, r3, r2
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	440b      	add	r3, r1
 8003402:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 8003406:	2b00      	cmp	r3, #0
 8003408:	d113      	bne.n	8003432 <BlockS1+0x26a>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0
 800340a:	4b33      	ldr	r3, [pc, #204]	@ (80034d8 <BlockS1+0x310>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	4b30      	ldr	r3, [pc, #192]	@ (80034d4 <BlockS1+0x30c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	1c99      	adds	r1, r3, #2
 8003416:	4831      	ldr	r0, [pc, #196]	@ (80034dc <BlockS1+0x314>)
 8003418:	4613      	mov	r3, r2
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	440b      	add	r3, r1
 8003422:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 8003426:	2b00      	cmp	r3, #0
 8003428:	d103      	bne.n	8003432 <BlockS1+0x26a>
	)
		CanMoveRight = true;
 800342a:	4b31      	ldr	r3, [pc, #196]	@ (80034f0 <BlockS1+0x328>)
 800342c:	2201      	movs	r2, #1
 800342e:	701a      	strb	r2, [r3, #0]
 8003430:	e002      	b.n	8003438 <BlockS1+0x270>
	else CanMoveRight = false;
 8003432:	4b2f      	ldr	r3, [pc, #188]	@ (80034f0 <BlockS1+0x328>)
 8003434:	2200      	movs	r2, #0
 8003436:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8003438:	4b27      	ldr	r3, [pc, #156]	@ (80034d8 <BlockS1+0x310>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	4b25      	ldr	r3, [pc, #148]	@ (80034d4 <BlockS1+0x30c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	1c59      	adds	r1, r3, #1
 8003444:	4825      	ldr	r0, [pc, #148]	@ (80034dc <BlockS1+0x314>)
 8003446:	4613      	mov	r3, r2
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	1a9b      	subs	r3, r3, r2
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	440b      	add	r3, r1
 8003450:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d132      	bne.n	80034be <BlockS1+0x2f6>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 8003458:	4b1f      	ldr	r3, [pc, #124]	@ (80034d8 <BlockS1+0x310>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	4b1d      	ldr	r3, [pc, #116]	@ (80034d4 <BlockS1+0x30c>)
 8003460:	6819      	ldr	r1, [r3, #0]
 8003462:	481e      	ldr	r0, [pc, #120]	@ (80034dc <BlockS1+0x314>)
 8003464:	4613      	mov	r3, r2
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	440b      	add	r3, r1
 800346e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8003472:	2b00      	cmp	r3, #0
 8003474:	d123      	bne.n	80034be <BlockS1+0x2f6>
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8003476:	4b18      	ldr	r3, [pc, #96]	@ (80034d8 <BlockS1+0x310>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	1c9a      	adds	r2, r3, #2
 800347c:	4b15      	ldr	r3, [pc, #84]	@ (80034d4 <BlockS1+0x30c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	1c59      	adds	r1, r3, #1
 8003482:	4816      	ldr	r0, [pc, #88]	@ (80034dc <BlockS1+0x314>)
 8003484:	4613      	mov	r3, r2
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	1a9b      	subs	r3, r3, r2
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	440b      	add	r3, r1
 800348e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 8003492:	2b00      	cmp	r3, #0
 8003494:	d113      	bne.n	80034be <BlockS1+0x2f6>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0)
 8003496:	4b10      	ldr	r3, [pc, #64]	@ (80034d8 <BlockS1+0x310>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	1c9a      	adds	r2, r3, #2
 800349c:	4b0d      	ldr	r3, [pc, #52]	@ (80034d4 <BlockS1+0x30c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	1c99      	adds	r1, r3, #2
 80034a2:	480e      	ldr	r0, [pc, #56]	@ (80034dc <BlockS1+0x314>)
 80034a4:	4613      	mov	r3, r2
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	440b      	add	r3, r1
 80034ae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d103      	bne.n	80034be <BlockS1+0x2f6>
		CanRotate = true;
 80034b6:	4b0f      	ldr	r3, [pc, #60]	@ (80034f4 <BlockS1+0x32c>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	701a      	strb	r2, [r3, #0]
 80034bc:	e003      	b.n	80034c6 <BlockS1+0x2fe>
	else CanRotate = false;
 80034be:	4b0d      	ldr	r3, [pc, #52]	@ (80034f4 <BlockS1+0x32c>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 3); cout << char(248);
	//PrintXY(tetrominoLocX, tetrominoLocY + 3); cout << char(248);
}
 80034c4:	bf00      	nop
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd90      	pop	{r4, r7, pc}
 80034ce:	bf00      	nop
 80034d0:	20000fec 	.word	0x20000fec
 80034d4:	20000fe8 	.word	0x20000fe8
 80034d8:	20000fe4 	.word	0x20000fe4
 80034dc:	200001d0 	.word	0x200001d0
 80034e0:	2000000c 	.word	0x2000000c
 80034e4:	2000000f 	.word	0x2000000f
 80034e8:	20000ff0 	.word	0x20000ff0
 80034ec:	2000000e 	.word	0x2000000e
 80034f0:	2000000d 	.word	0x2000000d
 80034f4:	20000010 	.word	0x20000010

080034f8 <BlockS2>:

void BlockS2(int x, int y)
{
 80034f8:	b590      	push	{r4, r7, lr}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	3301      	adds	r3, #1
 800350a:	4619      	mov	r1, r3
 800350c:	4610      	mov	r0, r2
 800350e:	f002 fb5f 	bl	8005bd0 <PrintXY>
	PrintXY(x + 1, y);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	3301      	adds	r3, #1
 8003516:	6839      	ldr	r1, [r7, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f002 fb59 	bl	8005bd0 <PrintXY>
	PrintXY(x + 2, y + 1);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	1c9a      	adds	r2, r3, #2
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	3301      	adds	r3, #1
 8003526:	4619      	mov	r1, r3
 8003528:	4610      	mov	r0, r2
 800352a:	f002 fb51 	bl	8005bd0 <PrintXY>
	PrintXY(x + 2, y + 2);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	1c9a      	adds	r2, r3, #2
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	3302      	adds	r3, #2
 8003536:	4619      	mov	r1, r3
 8003538:	4610      	mov	r0, r2
 800353a:	f002 fb49 	bl	8005bd0 <PrintXY>

	CurrentState = 12;
 800353e:	4ba7      	ldr	r3, [pc, #668]	@ (80037dc <BlockS2+0x2e4>)
 8003540:	220c      	movs	r2, #12
 8003542:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 8003544:	4ba6      	ldr	r3, [pc, #664]	@ (80037e0 <BlockS2+0x2e8>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b12      	cmp	r3, #18
 800354a:	dc1f      	bgt.n	800358c <BlockS2+0x94>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 800354c:	4ba5      	ldr	r3, [pc, #660]	@ (80037e4 <BlockS2+0x2ec>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	4ba3      	ldr	r3, [pc, #652]	@ (80037e0 <BlockS2+0x2e8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	1c99      	adds	r1, r3, #2
 8003558:	48a3      	ldr	r0, [pc, #652]	@ (80037e8 <BlockS2+0x2f0>)
 800355a:	4613      	mov	r3, r2
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	1a9b      	subs	r3, r3, r2
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	440b      	add	r3, r1
 8003564:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10f      	bne.n	800358c <BlockS2+0x94>
		tetris[tetrominoLocX + 2][tetrominoLocY + 3] != 0)
 800356c:	4b9d      	ldr	r3, [pc, #628]	@ (80037e4 <BlockS2+0x2ec>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	1c9a      	adds	r2, r3, #2
 8003572:	4b9b      	ldr	r3, [pc, #620]	@ (80037e0 <BlockS2+0x2e8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	1cd9      	adds	r1, r3, #3
 8003578:	489b      	ldr	r0, [pc, #620]	@ (80037e8 <BlockS2+0x2f0>)
 800357a:	4613      	mov	r3, r2
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	1a9b      	subs	r3, r3, r2
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	440b      	add	r3, r1
 8003584:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 8003588:	2b00      	cmp	r3, #0
 800358a:	d04f      	beq.n	800362c <BlockS2+0x134>
	{
		while (isDownKey() == 1);
 800358c:	bf00      	nop
 800358e:	f002 fa99 	bl	8005ac4 <isDownKey>
 8003592:	4603      	mov	r3, r0
 8003594:	2b01      	cmp	r3, #1
 8003596:	d0fa      	beq.n	800358e <BlockS2+0x96>
		NewTetromino = true;
 8003598:	4b94      	ldr	r3, [pc, #592]	@ (80037ec <BlockS2+0x2f4>)
 800359a:	2201      	movs	r2, #1
 800359c:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 800359e:	4b94      	ldr	r3, [pc, #592]	@ (80037f0 <BlockS2+0x2f8>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 80035a4:	4b93      	ldr	r3, [pc, #588]	@ (80037f4 <BlockS2+0x2fc>)
 80035a6:	8818      	ldrh	r0, [r3, #0]
 80035a8:	4b8e      	ldr	r3, [pc, #568]	@ (80037e4 <BlockS2+0x2ec>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	4b8c      	ldr	r3, [pc, #560]	@ (80037e0 <BlockS2+0x2e8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	1c59      	adds	r1, r3, #1
 80035b4:	4604      	mov	r4, r0
 80035b6:	488c      	ldr	r0, [pc, #560]	@ (80037e8 <BlockS2+0x2f0>)
 80035b8:	4613      	mov	r3, r2
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	1a9b      	subs	r3, r3, r2
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	440b      	add	r3, r1
 80035c2:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] = colour;
 80035c6:	4b8b      	ldr	r3, [pc, #556]	@ (80037f4 <BlockS2+0x2fc>)
 80035c8:	8818      	ldrh	r0, [r3, #0]
 80035ca:	4b86      	ldr	r3, [pc, #536]	@ (80037e4 <BlockS2+0x2ec>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	4b83      	ldr	r3, [pc, #524]	@ (80037e0 <BlockS2+0x2e8>)
 80035d2:	6819      	ldr	r1, [r3, #0]
 80035d4:	4604      	mov	r4, r0
 80035d6:	4884      	ldr	r0, [pc, #528]	@ (80037e8 <BlockS2+0x2f0>)
 80035d8:	4613      	mov	r3, r2
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	440b      	add	r3, r1
 80035e2:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] = colour;
 80035e6:	4b83      	ldr	r3, [pc, #524]	@ (80037f4 <BlockS2+0x2fc>)
 80035e8:	8818      	ldrh	r0, [r3, #0]
 80035ea:	4b7e      	ldr	r3, [pc, #504]	@ (80037e4 <BlockS2+0x2ec>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	1c9a      	adds	r2, r3, #2
 80035f0:	4b7b      	ldr	r3, [pc, #492]	@ (80037e0 <BlockS2+0x2e8>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	1c59      	adds	r1, r3, #1
 80035f6:	4604      	mov	r4, r0
 80035f8:	487b      	ldr	r0, [pc, #492]	@ (80037e8 <BlockS2+0x2f0>)
 80035fa:	4613      	mov	r3, r2
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	1a9b      	subs	r3, r3, r2
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	440b      	add	r3, r1
 8003604:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] = colour;
 8003608:	4b7a      	ldr	r3, [pc, #488]	@ (80037f4 <BlockS2+0x2fc>)
 800360a:	8818      	ldrh	r0, [r3, #0]
 800360c:	4b75      	ldr	r3, [pc, #468]	@ (80037e4 <BlockS2+0x2ec>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	1c9a      	adds	r2, r3, #2
 8003612:	4b73      	ldr	r3, [pc, #460]	@ (80037e0 <BlockS2+0x2e8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	1c99      	adds	r1, r3, #2
 8003618:	4604      	mov	r4, r0
 800361a:	4873      	ldr	r0, [pc, #460]	@ (80037e8 <BlockS2+0x2f0>)
 800361c:	4613      	mov	r3, r2
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	440b      	add	r3, r1
 8003626:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 800362a:	e002      	b.n	8003632 <BlockS2+0x13a>
	}
	else CanMoveDown = true;
 800362c:	4b70      	ldr	r3, [pc, #448]	@ (80037f0 <BlockS2+0x2f8>)
 800362e:	2201      	movs	r2, #1
 8003630:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8003632:	4b6c      	ldr	r3, [pc, #432]	@ (80037e4 <BlockS2+0x2ec>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	4b6a      	ldr	r3, [pc, #424]	@ (80037e0 <BlockS2+0x2e8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	1c59      	adds	r1, r3, #1
 800363c:	486a      	ldr	r0, [pc, #424]	@ (80037e8 <BlockS2+0x2f0>)
 800363e:	4613      	mov	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	440b      	add	r3, r1
 8003648:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d131      	bne.n	80036b4 <BlockS2+0x1bc>
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 8003650:	4b64      	ldr	r3, [pc, #400]	@ (80037e4 <BlockS2+0x2ec>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	4b62      	ldr	r3, [pc, #392]	@ (80037e0 <BlockS2+0x2e8>)
 8003656:	6819      	ldr	r1, [r3, #0]
 8003658:	4863      	ldr	r0, [pc, #396]	@ (80037e8 <BlockS2+0x2f0>)
 800365a:	4613      	mov	r3, r2
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	1a9b      	subs	r3, r3, r2
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	440b      	add	r3, r1
 8003664:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8003668:	2b00      	cmp	r3, #0
 800366a:	d123      	bne.n	80036b4 <BlockS2+0x1bc>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 800366c:	4b5d      	ldr	r3, [pc, #372]	@ (80037e4 <BlockS2+0x2ec>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	4b5b      	ldr	r3, [pc, #364]	@ (80037e0 <BlockS2+0x2e8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	1c59      	adds	r1, r3, #1
 8003678:	485b      	ldr	r0, [pc, #364]	@ (80037e8 <BlockS2+0x2f0>)
 800367a:	4613      	mov	r3, r2
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	1a9b      	subs	r3, r3, r2
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	440b      	add	r3, r1
 8003684:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 8003688:	2b00      	cmp	r3, #0
 800368a:	d113      	bne.n	80036b4 <BlockS2+0x1bc>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0
 800368c:	4b55      	ldr	r3, [pc, #340]	@ (80037e4 <BlockS2+0x2ec>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	4b53      	ldr	r3, [pc, #332]	@ (80037e0 <BlockS2+0x2e8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	1c99      	adds	r1, r3, #2
 8003698:	4853      	ldr	r0, [pc, #332]	@ (80037e8 <BlockS2+0x2f0>)
 800369a:	4613      	mov	r3, r2
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	440b      	add	r3, r1
 80036a4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d103      	bne.n	80036b4 <BlockS2+0x1bc>
	)
		CanMoveLeft = true;
 80036ac:	4b52      	ldr	r3, [pc, #328]	@ (80037f8 <BlockS2+0x300>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	701a      	strb	r2, [r3, #0]
 80036b2:	e002      	b.n	80036ba <BlockS2+0x1c2>
	else CanMoveLeft = false;
 80036b4:	4b50      	ldr	r3, [pc, #320]	@ (80037f8 <BlockS2+0x300>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80036ba:	4b4a      	ldr	r3, [pc, #296]	@ (80037e4 <BlockS2+0x2ec>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	1c9a      	adds	r2, r3, #2
 80036c0:	4b47      	ldr	r3, [pc, #284]	@ (80037e0 <BlockS2+0x2e8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	1c59      	adds	r1, r3, #1
 80036c6:	4848      	ldr	r0, [pc, #288]	@ (80037e8 <BlockS2+0x2f0>)
 80036c8:	4613      	mov	r3, r2
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	440b      	add	r3, r1
 80036d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d132      	bne.n	8003740 <BlockS2+0x248>
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 80036da:	4b42      	ldr	r3, [pc, #264]	@ (80037e4 <BlockS2+0x2ec>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	1c9a      	adds	r2, r3, #2
 80036e0:	4b3f      	ldr	r3, [pc, #252]	@ (80037e0 <BlockS2+0x2e8>)
 80036e2:	6819      	ldr	r1, [r3, #0]
 80036e4:	4840      	ldr	r0, [pc, #256]	@ (80037e8 <BlockS2+0x2f0>)
 80036e6:	4613      	mov	r3, r2
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	1a9b      	subs	r3, r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	440b      	add	r3, r1
 80036f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d123      	bne.n	8003740 <BlockS2+0x248>
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 80036f8:	4b3a      	ldr	r3, [pc, #232]	@ (80037e4 <BlockS2+0x2ec>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	1cda      	adds	r2, r3, #3
 80036fe:	4b38      	ldr	r3, [pc, #224]	@ (80037e0 <BlockS2+0x2e8>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	1c59      	adds	r1, r3, #1
 8003704:	4838      	ldr	r0, [pc, #224]	@ (80037e8 <BlockS2+0x2f0>)
 8003706:	4613      	mov	r3, r2
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	1a9b      	subs	r3, r3, r2
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	440b      	add	r3, r1
 8003710:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 8003714:	2b00      	cmp	r3, #0
 8003716:	d113      	bne.n	8003740 <BlockS2+0x248>
		tetris[tetrominoLocX + 3][tetrominoLocY + 2] == 0
 8003718:	4b32      	ldr	r3, [pc, #200]	@ (80037e4 <BlockS2+0x2ec>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	1cda      	adds	r2, r3, #3
 800371e:	4b30      	ldr	r3, [pc, #192]	@ (80037e0 <BlockS2+0x2e8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	1c99      	adds	r1, r3, #2
 8003724:	4830      	ldr	r0, [pc, #192]	@ (80037e8 <BlockS2+0x2f0>)
 8003726:	4613      	mov	r3, r2
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	1a9b      	subs	r3, r3, r2
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	440b      	add	r3, r1
 8003730:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 8003734:	2b00      	cmp	r3, #0
 8003736:	d103      	bne.n	8003740 <BlockS2+0x248>
	)
		CanMoveRight = true;
 8003738:	4b30      	ldr	r3, [pc, #192]	@ (80037fc <BlockS2+0x304>)
 800373a:	2201      	movs	r2, #1
 800373c:	701a      	strb	r2, [r3, #0]
 800373e:	e002      	b.n	8003746 <BlockS2+0x24e>
	else CanMoveRight = false;
 8003740:	4b2e      	ldr	r3, [pc, #184]	@ (80037fc <BlockS2+0x304>)
 8003742:	2200      	movs	r2, #0
 8003744:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8003746:	4b27      	ldr	r3, [pc, #156]	@ (80037e4 <BlockS2+0x2ec>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	4b24      	ldr	r3, [pc, #144]	@ (80037e0 <BlockS2+0x2e8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	1c59      	adds	r1, r3, #1
 8003752:	4825      	ldr	r0, [pc, #148]	@ (80037e8 <BlockS2+0x2f0>)
 8003754:	4613      	mov	r3, r2
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	440b      	add	r3, r1
 800375e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d132      	bne.n	80037cc <BlockS2+0x2d4>
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8003766:	4b1f      	ldr	r3, [pc, #124]	@ (80037e4 <BlockS2+0x2ec>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	1c9a      	adds	r2, r3, #2
 800376c:	4b1c      	ldr	r3, [pc, #112]	@ (80037e0 <BlockS2+0x2e8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	1c59      	adds	r1, r3, #1
 8003772:	481d      	ldr	r0, [pc, #116]	@ (80037e8 <BlockS2+0x2f0>)
 8003774:	4613      	mov	r3, r2
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	1a9b      	subs	r3, r3, r2
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	440b      	add	r3, r1
 800377e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8003782:	2b00      	cmp	r3, #0
 8003784:	d122      	bne.n	80037cc <BlockS2+0x2d4>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 8003786:	4b17      	ldr	r3, [pc, #92]	@ (80037e4 <BlockS2+0x2ec>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	4b14      	ldr	r3, [pc, #80]	@ (80037e0 <BlockS2+0x2e8>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	1c99      	adds	r1, r3, #2
 8003792:	4815      	ldr	r0, [pc, #84]	@ (80037e8 <BlockS2+0x2f0>)
 8003794:	4613      	mov	r3, r2
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	1a9b      	subs	r3, r3, r2
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	440b      	add	r3, r1
 800379e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d112      	bne.n	80037cc <BlockS2+0x2d4>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0)
 80037a6:	4b0f      	ldr	r3, [pc, #60]	@ (80037e4 <BlockS2+0x2ec>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	4b0d      	ldr	r3, [pc, #52]	@ (80037e0 <BlockS2+0x2e8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	1c99      	adds	r1, r3, #2
 80037b0:	480d      	ldr	r0, [pc, #52]	@ (80037e8 <BlockS2+0x2f0>)
 80037b2:	4613      	mov	r3, r2
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	440b      	add	r3, r1
 80037bc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d103      	bne.n	80037cc <BlockS2+0x2d4>
		CanRotate = true;
 80037c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003800 <BlockS2+0x308>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	701a      	strb	r2, [r3, #0]
 80037ca:	e003      	b.n	80037d4 <BlockS2+0x2dc>
	else CanRotate = false;
 80037cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003800 <BlockS2+0x308>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 3); cout << char(248);
}
 80037d2:	bf00      	nop
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd90      	pop	{r4, r7, pc}
 80037dc:	20000fec 	.word	0x20000fec
 80037e0:	20000fe8 	.word	0x20000fe8
 80037e4:	20000fe4 	.word	0x20000fe4
 80037e8:	200001d0 	.word	0x200001d0
 80037ec:	2000000c 	.word	0x2000000c
 80037f0:	2000000f 	.word	0x2000000f
 80037f4:	20000ff0 	.word	0x20000ff0
 80037f8:	2000000e 	.word	0x2000000e
 80037fc:	2000000d 	.word	0x2000000d
 8003800:	20000010 	.word	0x20000010

08003804 <BlockT1>:

void BlockT1(int x, int y)
{
 8003804:	b590      	push	{r4, r7, lr}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	3301      	adds	r3, #1
 8003816:	4619      	mov	r1, r3
 8003818:	4610      	mov	r0, r2
 800381a:	f002 f9d9 	bl	8005bd0 <PrintXY>
	PrintXY(x, y + 1);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	3301      	adds	r3, #1
 8003822:	4619      	mov	r1, r3
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f002 f9d3 	bl	8005bd0 <PrintXY>
	PrintXY(x + 2, y + 1);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	1c9a      	adds	r2, r3, #2
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	3301      	adds	r3, #1
 8003832:	4619      	mov	r1, r3
 8003834:	4610      	mov	r0, r2
 8003836:	f002 f9cb 	bl	8005bd0 <PrintXY>
	PrintXY(x + 1, y + 2);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	3302      	adds	r3, #2
 8003842:	4619      	mov	r1, r3
 8003844:	4610      	mov	r0, r2
 8003846:	f002 f9c3 	bl	8005bd0 <PrintXY>

	CurrentState = 13;
 800384a:	4bb0      	ldr	r3, [pc, #704]	@ (8003b0c <BlockT1+0x308>)
 800384c:	220d      	movs	r2, #13
 800384e:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 8003850:	4baf      	ldr	r3, [pc, #700]	@ (8003b10 <BlockT1+0x30c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2b12      	cmp	r3, #18
 8003856:	dc2e      	bgt.n	80038b6 <BlockT1+0xb2>
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0 ||
 8003858:	4bae      	ldr	r3, [pc, #696]	@ (8003b14 <BlockT1+0x310>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	4bac      	ldr	r3, [pc, #688]	@ (8003b10 <BlockT1+0x30c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	1c99      	adds	r1, r3, #2
 8003862:	48ad      	ldr	r0, [pc, #692]	@ (8003b18 <BlockT1+0x314>)
 8003864:	4613      	mov	r3, r2
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	1a9b      	subs	r3, r3, r2
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	440b      	add	r3, r1
 800386e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 8003872:	2b00      	cmp	r3, #0
 8003874:	d11f      	bne.n	80038b6 <BlockT1+0xb2>
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 8003876:	4ba7      	ldr	r3, [pc, #668]	@ (8003b14 <BlockT1+0x310>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	4ba4      	ldr	r3, [pc, #656]	@ (8003b10 <BlockT1+0x30c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	1cd9      	adds	r1, r3, #3
 8003882:	48a5      	ldr	r0, [pc, #660]	@ (8003b18 <BlockT1+0x314>)
 8003884:	4613      	mov	r3, r2
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	1a9b      	subs	r3, r3, r2
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	440b      	add	r3, r1
 800388e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0 ||
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10f      	bne.n	80038b6 <BlockT1+0xb2>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] != 0)
 8003896:	4b9f      	ldr	r3, [pc, #636]	@ (8003b14 <BlockT1+0x310>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	1c9a      	adds	r2, r3, #2
 800389c:	4b9c      	ldr	r3, [pc, #624]	@ (8003b10 <BlockT1+0x30c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	1c99      	adds	r1, r3, #2
 80038a2:	489d      	ldr	r0, [pc, #628]	@ (8003b18 <BlockT1+0x314>)
 80038a4:	4613      	mov	r3, r2
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	1a9b      	subs	r3, r3, r2
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	440b      	add	r3, r1
 80038ae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d04f      	beq.n	8003956 <BlockT1+0x152>
	{
		while (isDownKey() == 1);
 80038b6:	bf00      	nop
 80038b8:	f002 f904 	bl	8005ac4 <isDownKey>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d0fa      	beq.n	80038b8 <BlockT1+0xb4>
		NewTetromino = true;
 80038c2:	4b96      	ldr	r3, [pc, #600]	@ (8003b1c <BlockT1+0x318>)
 80038c4:	2201      	movs	r2, #1
 80038c6:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 80038c8:	4b95      	ldr	r3, [pc, #596]	@ (8003b20 <BlockT1+0x31c>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 80038ce:	4b95      	ldr	r3, [pc, #596]	@ (8003b24 <BlockT1+0x320>)
 80038d0:	8818      	ldrh	r0, [r3, #0]
 80038d2:	4b90      	ldr	r3, [pc, #576]	@ (8003b14 <BlockT1+0x310>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	4b8d      	ldr	r3, [pc, #564]	@ (8003b10 <BlockT1+0x30c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	1c59      	adds	r1, r3, #1
 80038de:	4604      	mov	r4, r0
 80038e0:	488d      	ldr	r0, [pc, #564]	@ (8003b18 <BlockT1+0x314>)
 80038e2:	4613      	mov	r3, r2
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	1a9b      	subs	r3, r3, r2
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	440b      	add	r3, r1
 80038ec:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] = colour;
 80038f0:	4b8c      	ldr	r3, [pc, #560]	@ (8003b24 <BlockT1+0x320>)
 80038f2:	8818      	ldrh	r0, [r3, #0]
 80038f4:	4b87      	ldr	r3, [pc, #540]	@ (8003b14 <BlockT1+0x310>)
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	4b85      	ldr	r3, [pc, #532]	@ (8003b10 <BlockT1+0x30c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	1c59      	adds	r1, r3, #1
 80038fe:	4604      	mov	r4, r0
 8003900:	4885      	ldr	r0, [pc, #532]	@ (8003b18 <BlockT1+0x314>)
 8003902:	4613      	mov	r3, r2
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	1a9b      	subs	r3, r3, r2
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	440b      	add	r3, r1
 800390c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] = colour;
 8003910:	4b84      	ldr	r3, [pc, #528]	@ (8003b24 <BlockT1+0x320>)
 8003912:	8818      	ldrh	r0, [r3, #0]
 8003914:	4b7f      	ldr	r3, [pc, #508]	@ (8003b14 <BlockT1+0x310>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	1c9a      	adds	r2, r3, #2
 800391a:	4b7d      	ldr	r3, [pc, #500]	@ (8003b10 <BlockT1+0x30c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	1c59      	adds	r1, r3, #1
 8003920:	4604      	mov	r4, r0
 8003922:	487d      	ldr	r0, [pc, #500]	@ (8003b18 <BlockT1+0x314>)
 8003924:	4613      	mov	r3, r2
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	1a9b      	subs	r3, r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	440b      	add	r3, r1
 800392e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] = colour;
 8003932:	4b7c      	ldr	r3, [pc, #496]	@ (8003b24 <BlockT1+0x320>)
 8003934:	8818      	ldrh	r0, [r3, #0]
 8003936:	4b77      	ldr	r3, [pc, #476]	@ (8003b14 <BlockT1+0x310>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	4b74      	ldr	r3, [pc, #464]	@ (8003b10 <BlockT1+0x30c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	1c99      	adds	r1, r3, #2
 8003942:	4604      	mov	r4, r0
 8003944:	4874      	ldr	r0, [pc, #464]	@ (8003b18 <BlockT1+0x314>)
 8003946:	4613      	mov	r3, r2
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	1a9b      	subs	r3, r3, r2
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	440b      	add	r3, r1
 8003950:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8003954:	e002      	b.n	800395c <BlockT1+0x158>
	}
	else CanMoveDown = true;
 8003956:	4b72      	ldr	r3, [pc, #456]	@ (8003b20 <BlockT1+0x31c>)
 8003958:	2201      	movs	r2, #1
 800395a:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 800395c:	4b6d      	ldr	r3, [pc, #436]	@ (8003b14 <BlockT1+0x310>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	4b6b      	ldr	r3, [pc, #428]	@ (8003b10 <BlockT1+0x30c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	1c59      	adds	r1, r3, #1
 8003966:	486c      	ldr	r0, [pc, #432]	@ (8003b18 <BlockT1+0x314>)
 8003968:	4613      	mov	r3, r2
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	440b      	add	r3, r1
 8003972:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d132      	bne.n	80039e0 <BlockT1+0x1dc>
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 800397a:	4b66      	ldr	r3, [pc, #408]	@ (8003b14 <BlockT1+0x310>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	1e5a      	subs	r2, r3, #1
 8003980:	4b63      	ldr	r3, [pc, #396]	@ (8003b10 <BlockT1+0x30c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	1c59      	adds	r1, r3, #1
 8003986:	4864      	ldr	r0, [pc, #400]	@ (8003b18 <BlockT1+0x314>)
 8003988:	4613      	mov	r3, r2
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	1a9b      	subs	r3, r3, r2
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	440b      	add	r3, r1
 8003992:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8003996:	2b00      	cmp	r3, #0
 8003998:	d122      	bne.n	80039e0 <BlockT1+0x1dc>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 800399a:	4b5e      	ldr	r3, [pc, #376]	@ (8003b14 <BlockT1+0x310>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	4b5b      	ldr	r3, [pc, #364]	@ (8003b10 <BlockT1+0x30c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	1c59      	adds	r1, r3, #1
 80039a6:	485c      	ldr	r0, [pc, #368]	@ (8003b18 <BlockT1+0x314>)
 80039a8:	4613      	mov	r3, r2
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	1a9b      	subs	r3, r3, r2
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	440b      	add	r3, r1
 80039b2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d112      	bne.n	80039e0 <BlockT1+0x1dc>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0
 80039ba:	4b56      	ldr	r3, [pc, #344]	@ (8003b14 <BlockT1+0x310>)
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	4b54      	ldr	r3, [pc, #336]	@ (8003b10 <BlockT1+0x30c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	1c99      	adds	r1, r3, #2
 80039c4:	4854      	ldr	r0, [pc, #336]	@ (8003b18 <BlockT1+0x314>)
 80039c6:	4613      	mov	r3, r2
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	1a9b      	subs	r3, r3, r2
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	440b      	add	r3, r1
 80039d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d103      	bne.n	80039e0 <BlockT1+0x1dc>
	)
		CanMoveLeft = true;
 80039d8:	4b53      	ldr	r3, [pc, #332]	@ (8003b28 <BlockT1+0x324>)
 80039da:	2201      	movs	r2, #1
 80039dc:	701a      	strb	r2, [r3, #0]
 80039de:	e002      	b.n	80039e6 <BlockT1+0x1e2>
	else CanMoveLeft = false;
 80039e0:	4b51      	ldr	r3, [pc, #324]	@ (8003b28 <BlockT1+0x324>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80039e6:	4b4b      	ldr	r3, [pc, #300]	@ (8003b14 <BlockT1+0x310>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	1c9a      	adds	r2, r3, #2
 80039ec:	4b48      	ldr	r3, [pc, #288]	@ (8003b10 <BlockT1+0x30c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	1c59      	adds	r1, r3, #1
 80039f2:	4849      	ldr	r0, [pc, #292]	@ (8003b18 <BlockT1+0x314>)
 80039f4:	4613      	mov	r3, r2
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	440b      	add	r3, r1
 80039fe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d133      	bne.n	8003a6e <BlockT1+0x26a>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8003a06:	4b43      	ldr	r3, [pc, #268]	@ (8003b14 <BlockT1+0x310>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	4b40      	ldr	r3, [pc, #256]	@ (8003b10 <BlockT1+0x30c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	1c59      	adds	r1, r3, #1
 8003a12:	4841      	ldr	r0, [pc, #260]	@ (8003b18 <BlockT1+0x314>)
 8003a14:	4613      	mov	r3, r2
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	440b      	add	r3, r1
 8003a1e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d123      	bne.n	8003a6e <BlockT1+0x26a>
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 8003a26:	4b3b      	ldr	r3, [pc, #236]	@ (8003b14 <BlockT1+0x310>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	1cda      	adds	r2, r3, #3
 8003a2c:	4b38      	ldr	r3, [pc, #224]	@ (8003b10 <BlockT1+0x30c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	1c59      	adds	r1, r3, #1
 8003a32:	4839      	ldr	r0, [pc, #228]	@ (8003b18 <BlockT1+0x314>)
 8003a34:	4613      	mov	r3, r2
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	440b      	add	r3, r1
 8003a3e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d113      	bne.n	8003a6e <BlockT1+0x26a>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0
 8003a46:	4b33      	ldr	r3, [pc, #204]	@ (8003b14 <BlockT1+0x310>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	1c9a      	adds	r2, r3, #2
 8003a4c:	4b30      	ldr	r3, [pc, #192]	@ (8003b10 <BlockT1+0x30c>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	1c99      	adds	r1, r3, #2
 8003a52:	4831      	ldr	r0, [pc, #196]	@ (8003b18 <BlockT1+0x314>)
 8003a54:	4613      	mov	r3, r2
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	1a9b      	subs	r3, r3, r2
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	440b      	add	r3, r1
 8003a5e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d103      	bne.n	8003a6e <BlockT1+0x26a>
	)
		CanMoveRight = true;
 8003a66:	4b31      	ldr	r3, [pc, #196]	@ (8003b2c <BlockT1+0x328>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	701a      	strb	r2, [r3, #0]
 8003a6c:	e002      	b.n	8003a74 <BlockT1+0x270>
	else CanMoveRight = false;
 8003a6e:	4b2f      	ldr	r3, [pc, #188]	@ (8003b2c <BlockT1+0x328>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8003a74:	4b27      	ldr	r3, [pc, #156]	@ (8003b14 <BlockT1+0x310>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	4b25      	ldr	r3, [pc, #148]	@ (8003b10 <BlockT1+0x30c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	1c59      	adds	r1, r3, #1
 8003a80:	4825      	ldr	r0, [pc, #148]	@ (8003b18 <BlockT1+0x314>)
 8003a82:	4613      	mov	r3, r2
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	440b      	add	r3, r1
 8003a8c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d132      	bne.n	8003afa <BlockT1+0x2f6>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 8003a94:	4b1f      	ldr	r3, [pc, #124]	@ (8003b14 <BlockT1+0x310>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003b10 <BlockT1+0x30c>)
 8003a9c:	6819      	ldr	r1, [r3, #0]
 8003a9e:	481e      	ldr	r0, [pc, #120]	@ (8003b18 <BlockT1+0x314>)
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	1a9b      	subs	r3, r3, r2
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	440b      	add	r3, r1
 8003aaa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d123      	bne.n	8003afa <BlockT1+0x2f6>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 8003ab2:	4b18      	ldr	r3, [pc, #96]	@ (8003b14 <BlockT1+0x310>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	4b15      	ldr	r3, [pc, #84]	@ (8003b10 <BlockT1+0x30c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	1c99      	adds	r1, r3, #2
 8003abe:	4816      	ldr	r0, [pc, #88]	@ (8003b18 <BlockT1+0x314>)
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	440b      	add	r3, r1
 8003aca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d113      	bne.n	8003afa <BlockT1+0x2f6>
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0)
 8003ad2:	4b10      	ldr	r3, [pc, #64]	@ (8003b14 <BlockT1+0x310>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	1c9a      	adds	r2, r3, #2
 8003ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8003b10 <BlockT1+0x30c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	1c59      	adds	r1, r3, #1
 8003ade:	480e      	ldr	r0, [pc, #56]	@ (8003b18 <BlockT1+0x314>)
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	1a9b      	subs	r3, r3, r2
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	440b      	add	r3, r1
 8003aea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d103      	bne.n	8003afa <BlockT1+0x2f6>
		CanRotate = true;
 8003af2:	4b0f      	ldr	r3, [pc, #60]	@ (8003b30 <BlockT1+0x32c>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	701a      	strb	r2, [r3, #0]
 8003af8:	e003      	b.n	8003b02 <BlockT1+0x2fe>
	else CanRotate = false;
 8003afa:	4b0d      	ldr	r3, [pc, #52]	@ (8003b30 <BlockT1+0x32c>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 3); cout << char(248);
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 2); cout << char(248);
}
 8003b00:	bf00      	nop
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd90      	pop	{r4, r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20000fec 	.word	0x20000fec
 8003b10:	20000fe8 	.word	0x20000fe8
 8003b14:	20000fe4 	.word	0x20000fe4
 8003b18:	200001d0 	.word	0x200001d0
 8003b1c:	2000000c 	.word	0x2000000c
 8003b20:	2000000f 	.word	0x2000000f
 8003b24:	20000ff0 	.word	0x20000ff0
 8003b28:	2000000e 	.word	0x2000000e
 8003b2c:	2000000d 	.word	0x2000000d
 8003b30:	20000010 	.word	0x20000010

08003b34 <BlockT2>:

void BlockT2(int x, int y)
{
 8003b34:	b590      	push	{r4, r7, lr}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	3301      	adds	r3, #1
 8003b46:	4619      	mov	r1, r3
 8003b48:	4610      	mov	r0, r2
 8003b4a:	f002 f841 	bl	8005bd0 <PrintXY>
	PrintXY(x + 1, y);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	3301      	adds	r3, #1
 8003b52:	6839      	ldr	r1, [r7, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f002 f83b 	bl	8005bd0 <PrintXY>
	PrintXY(x + 1, y + 2);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	3302      	adds	r3, #2
 8003b62:	4619      	mov	r1, r3
 8003b64:	4610      	mov	r0, r2
 8003b66:	f002 f833 	bl	8005bd0 <PrintXY>
	PrintXY(x + 2, y + 1);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	1c9a      	adds	r2, r3, #2
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	3301      	adds	r3, #1
 8003b72:	4619      	mov	r1, r3
 8003b74:	4610      	mov	r0, r2
 8003b76:	f002 f82b 	bl	8005bd0 <PrintXY>

	CurrentState = 14;
 8003b7a:	4ba6      	ldr	r3, [pc, #664]	@ (8003e14 <BlockT2+0x2e0>)
 8003b7c:	220e      	movs	r2, #14
 8003b7e:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 8003b80:	4ba5      	ldr	r3, [pc, #660]	@ (8003e18 <BlockT2+0x2e4>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b12      	cmp	r3, #18
 8003b86:	dc1f      	bgt.n	8003bc8 <BlockT2+0x94>
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 8003b88:	4ba4      	ldr	r3, [pc, #656]	@ (8003e1c <BlockT2+0x2e8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	4ba2      	ldr	r3, [pc, #648]	@ (8003e18 <BlockT2+0x2e4>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	1cd9      	adds	r1, r3, #3
 8003b94:	48a2      	ldr	r0, [pc, #648]	@ (8003e20 <BlockT2+0x2ec>)
 8003b96:	4613      	mov	r3, r2
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	1a9b      	subs	r3, r3, r2
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	440b      	add	r3, r1
 8003ba0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10f      	bne.n	8003bc8 <BlockT2+0x94>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] != 0)
 8003ba8:	4b9c      	ldr	r3, [pc, #624]	@ (8003e1c <BlockT2+0x2e8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	1c9a      	adds	r2, r3, #2
 8003bae:	4b9a      	ldr	r3, [pc, #616]	@ (8003e18 <BlockT2+0x2e4>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	1c99      	adds	r1, r3, #2
 8003bb4:	489a      	ldr	r0, [pc, #616]	@ (8003e20 <BlockT2+0x2ec>)
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	1a9b      	subs	r3, r3, r2
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	440b      	add	r3, r1
 8003bc0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d04f      	beq.n	8003c68 <BlockT2+0x134>
	{
		while (isDownKey() == 1);
 8003bc8:	bf00      	nop
 8003bca:	f001 ff7b 	bl	8005ac4 <isDownKey>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d0fa      	beq.n	8003bca <BlockT2+0x96>
		NewTetromino = true;
 8003bd4:	4b93      	ldr	r3, [pc, #588]	@ (8003e24 <BlockT2+0x2f0>)
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 8003bda:	4b93      	ldr	r3, [pc, #588]	@ (8003e28 <BlockT2+0x2f4>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 8003be0:	4b92      	ldr	r3, [pc, #584]	@ (8003e2c <BlockT2+0x2f8>)
 8003be2:	8818      	ldrh	r0, [r3, #0]
 8003be4:	4b8d      	ldr	r3, [pc, #564]	@ (8003e1c <BlockT2+0x2e8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	4b8b      	ldr	r3, [pc, #556]	@ (8003e18 <BlockT2+0x2e4>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	1c59      	adds	r1, r3, #1
 8003bf0:	4604      	mov	r4, r0
 8003bf2:	488b      	ldr	r0, [pc, #556]	@ (8003e20 <BlockT2+0x2ec>)
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	1a9b      	subs	r3, r3, r2
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	440b      	add	r3, r1
 8003bfe:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] = colour;
 8003c02:	4b8a      	ldr	r3, [pc, #552]	@ (8003e2c <BlockT2+0x2f8>)
 8003c04:	8818      	ldrh	r0, [r3, #0]
 8003c06:	4b85      	ldr	r3, [pc, #532]	@ (8003e1c <BlockT2+0x2e8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	4b82      	ldr	r3, [pc, #520]	@ (8003e18 <BlockT2+0x2e4>)
 8003c0e:	6819      	ldr	r1, [r3, #0]
 8003c10:	4604      	mov	r4, r0
 8003c12:	4883      	ldr	r0, [pc, #524]	@ (8003e20 <BlockT2+0x2ec>)
 8003c14:	4613      	mov	r3, r2
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	440b      	add	r3, r1
 8003c1e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] = colour;
 8003c22:	4b82      	ldr	r3, [pc, #520]	@ (8003e2c <BlockT2+0x2f8>)
 8003c24:	8818      	ldrh	r0, [r3, #0]
 8003c26:	4b7d      	ldr	r3, [pc, #500]	@ (8003e1c <BlockT2+0x2e8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	4b7a      	ldr	r3, [pc, #488]	@ (8003e18 <BlockT2+0x2e4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	1c99      	adds	r1, r3, #2
 8003c32:	4604      	mov	r4, r0
 8003c34:	487a      	ldr	r0, [pc, #488]	@ (8003e20 <BlockT2+0x2ec>)
 8003c36:	4613      	mov	r3, r2
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	440b      	add	r3, r1
 8003c40:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] = colour;
 8003c44:	4b79      	ldr	r3, [pc, #484]	@ (8003e2c <BlockT2+0x2f8>)
 8003c46:	8818      	ldrh	r0, [r3, #0]
 8003c48:	4b74      	ldr	r3, [pc, #464]	@ (8003e1c <BlockT2+0x2e8>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	1c9a      	adds	r2, r3, #2
 8003c4e:	4b72      	ldr	r3, [pc, #456]	@ (8003e18 <BlockT2+0x2e4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	1c59      	adds	r1, r3, #1
 8003c54:	4604      	mov	r4, r0
 8003c56:	4872      	ldr	r0, [pc, #456]	@ (8003e20 <BlockT2+0x2ec>)
 8003c58:	4613      	mov	r3, r2
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	1a9b      	subs	r3, r3, r2
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	440b      	add	r3, r1
 8003c62:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8003c66:	e002      	b.n	8003c6e <BlockT2+0x13a>
	}
	else CanMoveDown = true;
 8003c68:	4b6f      	ldr	r3, [pc, #444]	@ (8003e28 <BlockT2+0x2f4>)
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8003c6e:	4b6b      	ldr	r3, [pc, #428]	@ (8003e1c <BlockT2+0x2e8>)
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	4b69      	ldr	r3, [pc, #420]	@ (8003e18 <BlockT2+0x2e4>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	1c59      	adds	r1, r3, #1
 8003c78:	4869      	ldr	r0, [pc, #420]	@ (8003e20 <BlockT2+0x2ec>)
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	440b      	add	r3, r1
 8003c84:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d130      	bne.n	8003cee <BlockT2+0x1ba>
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 8003c8c:	4b63      	ldr	r3, [pc, #396]	@ (8003e1c <BlockT2+0x2e8>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	4b61      	ldr	r3, [pc, #388]	@ (8003e18 <BlockT2+0x2e4>)
 8003c92:	6819      	ldr	r1, [r3, #0]
 8003c94:	4862      	ldr	r0, [pc, #392]	@ (8003e20 <BlockT2+0x2ec>)
 8003c96:	4613      	mov	r3, r2
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	1a9b      	subs	r3, r3, r2
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	440b      	add	r3, r1
 8003ca0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d122      	bne.n	8003cee <BlockT2+0x1ba>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 8003ca8:	4b5c      	ldr	r3, [pc, #368]	@ (8003e1c <BlockT2+0x2e8>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	4b5a      	ldr	r3, [pc, #360]	@ (8003e18 <BlockT2+0x2e4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	1c99      	adds	r1, r3, #2
 8003cb2:	485b      	ldr	r0, [pc, #364]	@ (8003e20 <BlockT2+0x2ec>)
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	440b      	add	r3, r1
 8003cbe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d113      	bne.n	8003cee <BlockT2+0x1ba>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0
 8003cc6:	4b55      	ldr	r3, [pc, #340]	@ (8003e1c <BlockT2+0x2e8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	4b52      	ldr	r3, [pc, #328]	@ (8003e18 <BlockT2+0x2e4>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	1c59      	adds	r1, r3, #1
 8003cd2:	4853      	ldr	r0, [pc, #332]	@ (8003e20 <BlockT2+0x2ec>)
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	1a9b      	subs	r3, r3, r2
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	440b      	add	r3, r1
 8003cde:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d103      	bne.n	8003cee <BlockT2+0x1ba>
	)
		CanMoveLeft = true;
 8003ce6:	4b52      	ldr	r3, [pc, #328]	@ (8003e30 <BlockT2+0x2fc>)
 8003ce8:	2201      	movs	r2, #1
 8003cea:	701a      	strb	r2, [r3, #0]
 8003cec:	e002      	b.n	8003cf4 <BlockT2+0x1c0>
	else CanMoveLeft = false;
 8003cee:	4b50      	ldr	r3, [pc, #320]	@ (8003e30 <BlockT2+0x2fc>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8003cf4:	4b49      	ldr	r3, [pc, #292]	@ (8003e1c <BlockT2+0x2e8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	1c9a      	adds	r2, r3, #2
 8003cfa:	4b47      	ldr	r3, [pc, #284]	@ (8003e18 <BlockT2+0x2e4>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	1c59      	adds	r1, r3, #1
 8003d00:	4847      	ldr	r0, [pc, #284]	@ (8003e20 <BlockT2+0x2ec>)
 8003d02:	4613      	mov	r3, r2
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	440b      	add	r3, r1
 8003d0c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d132      	bne.n	8003d7a <BlockT2+0x246>
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 8003d14:	4b41      	ldr	r3, [pc, #260]	@ (8003e1c <BlockT2+0x2e8>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	1c9a      	adds	r2, r3, #2
 8003d1a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e18 <BlockT2+0x2e4>)
 8003d1c:	6819      	ldr	r1, [r3, #0]
 8003d1e:	4840      	ldr	r0, [pc, #256]	@ (8003e20 <BlockT2+0x2ec>)
 8003d20:	4613      	mov	r3, r2
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	440b      	add	r3, r1
 8003d2a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d123      	bne.n	8003d7a <BlockT2+0x246>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 8003d32:	4b3a      	ldr	r3, [pc, #232]	@ (8003e1c <BlockT2+0x2e8>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	1c9a      	adds	r2, r3, #2
 8003d38:	4b37      	ldr	r3, [pc, #220]	@ (8003e18 <BlockT2+0x2e4>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	1c99      	adds	r1, r3, #2
 8003d3e:	4838      	ldr	r0, [pc, #224]	@ (8003e20 <BlockT2+0x2ec>)
 8003d40:	4613      	mov	r3, r2
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	1a9b      	subs	r3, r3, r2
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	440b      	add	r3, r1
 8003d4a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d113      	bne.n	8003d7a <BlockT2+0x246>
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0
 8003d52:	4b32      	ldr	r3, [pc, #200]	@ (8003e1c <BlockT2+0x2e8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	1cda      	adds	r2, r3, #3
 8003d58:	4b2f      	ldr	r3, [pc, #188]	@ (8003e18 <BlockT2+0x2e4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	1c59      	adds	r1, r3, #1
 8003d5e:	4830      	ldr	r0, [pc, #192]	@ (8003e20 <BlockT2+0x2ec>)
 8003d60:	4613      	mov	r3, r2
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	1a9b      	subs	r3, r3, r2
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	440b      	add	r3, r1
 8003d6a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d103      	bne.n	8003d7a <BlockT2+0x246>
	)
		CanMoveRight = true;
 8003d72:	4b30      	ldr	r3, [pc, #192]	@ (8003e34 <BlockT2+0x300>)
 8003d74:	2201      	movs	r2, #1
 8003d76:	701a      	strb	r2, [r3, #0]
 8003d78:	e002      	b.n	8003d80 <BlockT2+0x24c>
	else CanMoveRight = false;
 8003d7a:	4b2e      	ldr	r3, [pc, #184]	@ (8003e34 <BlockT2+0x300>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8003d80:	4b26      	ldr	r3, [pc, #152]	@ (8003e1c <BlockT2+0x2e8>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	4b24      	ldr	r3, [pc, #144]	@ (8003e18 <BlockT2+0x2e4>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	1c59      	adds	r1, r3, #1
 8003d8c:	4824      	ldr	r0, [pc, #144]	@ (8003e20 <BlockT2+0x2ec>)
 8003d8e:	4613      	mov	r3, r2
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	1a9b      	subs	r3, r3, r2
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	440b      	add	r3, r1
 8003d98:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d131      	bne.n	8003e04 <BlockT2+0x2d0>
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8003da0:	4b1e      	ldr	r3, [pc, #120]	@ (8003e1c <BlockT2+0x2e8>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	4b1c      	ldr	r3, [pc, #112]	@ (8003e18 <BlockT2+0x2e4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	1c59      	adds	r1, r3, #1
 8003daa:	481d      	ldr	r0, [pc, #116]	@ (8003e20 <BlockT2+0x2ec>)
 8003dac:	4613      	mov	r3, r2
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	440b      	add	r3, r1
 8003db6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d122      	bne.n	8003e04 <BlockT2+0x2d0>
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8003dbe:	4b17      	ldr	r3, [pc, #92]	@ (8003e1c <BlockT2+0x2e8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	1c9a      	adds	r2, r3, #2
 8003dc4:	4b14      	ldr	r3, [pc, #80]	@ (8003e18 <BlockT2+0x2e4>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	1c59      	adds	r1, r3, #1
 8003dca:	4815      	ldr	r0, [pc, #84]	@ (8003e20 <BlockT2+0x2ec>)
 8003dcc:	4613      	mov	r3, r2
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	1a9b      	subs	r3, r3, r2
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	440b      	add	r3, r1
 8003dd6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d112      	bne.n	8003e04 <BlockT2+0x2d0>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0)
 8003dde:	4b0f      	ldr	r3, [pc, #60]	@ (8003e1c <BlockT2+0x2e8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e18 <BlockT2+0x2e4>)
 8003de6:	6819      	ldr	r1, [r3, #0]
 8003de8:	480d      	ldr	r0, [pc, #52]	@ (8003e20 <BlockT2+0x2ec>)
 8003dea:	4613      	mov	r3, r2
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	1a9b      	subs	r3, r3, r2
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	440b      	add	r3, r1
 8003df4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d103      	bne.n	8003e04 <BlockT2+0x2d0>
		CanRotate = true;
 8003dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8003e38 <BlockT2+0x304>)
 8003dfe:	2201      	movs	r2, #1
 8003e00:	701a      	strb	r2, [r3, #0]
 8003e02:	e003      	b.n	8003e0c <BlockT2+0x2d8>
	else CanRotate = false;
 8003e04:	4b0c      	ldr	r3, [pc, #48]	@ (8003e38 <BlockT2+0x304>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 3); cout << char(248);
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 2); cout << char(248);
}
 8003e0a:	bf00      	nop
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd90      	pop	{r4, r7, pc}
 8003e14:	20000fec 	.word	0x20000fec
 8003e18:	20000fe8 	.word	0x20000fe8
 8003e1c:	20000fe4 	.word	0x20000fe4
 8003e20:	200001d0 	.word	0x200001d0
 8003e24:	2000000c 	.word	0x2000000c
 8003e28:	2000000f 	.word	0x2000000f
 8003e2c:	20000ff0 	.word	0x20000ff0
 8003e30:	2000000e 	.word	0x2000000e
 8003e34:	2000000d 	.word	0x2000000d
 8003e38:	20000010 	.word	0x20000010

08003e3c <BlockT3>:

void BlockT3(int x, int y)
{
 8003e3c:	b590      	push	{r4, r7, lr}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4610      	mov	r0, r2
 8003e52:	f001 febd 	bl	8005bd0 <PrintXY>
	PrintXY(x, y + 1);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f001 feb7 	bl	8005bd0 <PrintXY>
	PrintXY(x + 1, y);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3301      	adds	r3, #1
 8003e66:	6839      	ldr	r1, [r7, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f001 feb1 	bl	8005bd0 <PrintXY>
	PrintXY(x + 2, y + 1);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	1c9a      	adds	r2, r3, #2
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	3301      	adds	r3, #1
 8003e76:	4619      	mov	r1, r3
 8003e78:	4610      	mov	r0, r2
 8003e7a:	f001 fea9 	bl	8005bd0 <PrintXY>

	CurrentState = 15;
 8003e7e:	4bae      	ldr	r3, [pc, #696]	@ (8004138 <BlockT3+0x2fc>)
 8003e80:	220f      	movs	r2, #15
 8003e82:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 20 ||
 8003e84:	4bad      	ldr	r3, [pc, #692]	@ (800413c <BlockT3+0x300>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2b13      	cmp	r3, #19
 8003e8a:	dc2e      	bgt.n	8003eea <BlockT3+0xae>
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0 ||
 8003e8c:	4bac      	ldr	r3, [pc, #688]	@ (8004140 <BlockT3+0x304>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	4baa      	ldr	r3, [pc, #680]	@ (800413c <BlockT3+0x300>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	1c99      	adds	r1, r3, #2
 8003e96:	48ab      	ldr	r0, [pc, #684]	@ (8004144 <BlockT3+0x308>)
 8003e98:	4613      	mov	r3, r2
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	1a9b      	subs	r3, r3, r2
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	440b      	add	r3, r1
 8003ea2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 20 ||
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d11f      	bne.n	8003eea <BlockT3+0xae>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 8003eaa:	4ba5      	ldr	r3, [pc, #660]	@ (8004140 <BlockT3+0x304>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	4ba2      	ldr	r3, [pc, #648]	@ (800413c <BlockT3+0x300>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	1c99      	adds	r1, r3, #2
 8003eb6:	48a3      	ldr	r0, [pc, #652]	@ (8004144 <BlockT3+0x308>)
 8003eb8:	4613      	mov	r3, r2
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	1a9b      	subs	r3, r3, r2
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	440b      	add	r3, r1
 8003ec2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0 ||
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10f      	bne.n	8003eea <BlockT3+0xae>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] != 0)
 8003eca:	4b9d      	ldr	r3, [pc, #628]	@ (8004140 <BlockT3+0x304>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	1c9a      	adds	r2, r3, #2
 8003ed0:	4b9a      	ldr	r3, [pc, #616]	@ (800413c <BlockT3+0x300>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	1c99      	adds	r1, r3, #2
 8003ed6:	489b      	ldr	r0, [pc, #620]	@ (8004144 <BlockT3+0x308>)
 8003ed8:	4613      	mov	r3, r2
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	1a9b      	subs	r3, r3, r2
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	440b      	add	r3, r1
 8003ee2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d04e      	beq.n	8003f88 <BlockT3+0x14c>
	{
		while (isDownKey() == 1);
 8003eea:	bf00      	nop
 8003eec:	f001 fdea 	bl	8005ac4 <isDownKey>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d0fa      	beq.n	8003eec <BlockT3+0xb0>
		NewTetromino = true;
 8003ef6:	4b94      	ldr	r3, [pc, #592]	@ (8004148 <BlockT3+0x30c>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 8003efc:	4b93      	ldr	r3, [pc, #588]	@ (800414c <BlockT3+0x310>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 8003f02:	4b93      	ldr	r3, [pc, #588]	@ (8004150 <BlockT3+0x314>)
 8003f04:	8818      	ldrh	r0, [r3, #0]
 8003f06:	4b8e      	ldr	r3, [pc, #568]	@ (8004140 <BlockT3+0x304>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	4b8b      	ldr	r3, [pc, #556]	@ (800413c <BlockT3+0x300>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	1c59      	adds	r1, r3, #1
 8003f12:	4604      	mov	r4, r0
 8003f14:	488b      	ldr	r0, [pc, #556]	@ (8004144 <BlockT3+0x308>)
 8003f16:	4613      	mov	r3, r2
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	1a9b      	subs	r3, r3, r2
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	440b      	add	r3, r1
 8003f20:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] = colour;
 8003f24:	4b8a      	ldr	r3, [pc, #552]	@ (8004150 <BlockT3+0x314>)
 8003f26:	8818      	ldrh	r0, [r3, #0]
 8003f28:	4b85      	ldr	r3, [pc, #532]	@ (8004140 <BlockT3+0x304>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	4b83      	ldr	r3, [pc, #524]	@ (800413c <BlockT3+0x300>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	1c59      	adds	r1, r3, #1
 8003f32:	4604      	mov	r4, r0
 8003f34:	4883      	ldr	r0, [pc, #524]	@ (8004144 <BlockT3+0x308>)
 8003f36:	4613      	mov	r3, r2
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	1a9b      	subs	r3, r3, r2
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	440b      	add	r3, r1
 8003f40:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] = colour;
 8003f44:	4b82      	ldr	r3, [pc, #520]	@ (8004150 <BlockT3+0x314>)
 8003f46:	8818      	ldrh	r0, [r3, #0]
 8003f48:	4b7d      	ldr	r3, [pc, #500]	@ (8004140 <BlockT3+0x304>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	1c9a      	adds	r2, r3, #2
 8003f4e:	4b7b      	ldr	r3, [pc, #492]	@ (800413c <BlockT3+0x300>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	1c59      	adds	r1, r3, #1
 8003f54:	4604      	mov	r4, r0
 8003f56:	487b      	ldr	r0, [pc, #492]	@ (8004144 <BlockT3+0x308>)
 8003f58:	4613      	mov	r3, r2
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	1a9b      	subs	r3, r3, r2
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	440b      	add	r3, r1
 8003f62:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] = colour;
 8003f66:	4b7a      	ldr	r3, [pc, #488]	@ (8004150 <BlockT3+0x314>)
 8003f68:	8818      	ldrh	r0, [r3, #0]
 8003f6a:	4b75      	ldr	r3, [pc, #468]	@ (8004140 <BlockT3+0x304>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	4b72      	ldr	r3, [pc, #456]	@ (800413c <BlockT3+0x300>)
 8003f72:	6819      	ldr	r1, [r3, #0]
 8003f74:	4604      	mov	r4, r0
 8003f76:	4873      	ldr	r0, [pc, #460]	@ (8004144 <BlockT3+0x308>)
 8003f78:	4613      	mov	r3, r2
 8003f7a:	011b      	lsls	r3, r3, #4
 8003f7c:	1a9b      	subs	r3, r3, r2
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	440b      	add	r3, r1
 8003f82:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8003f86:	e002      	b.n	8003f8e <BlockT3+0x152>
	}
	else CanMoveDown = true;
 8003f88:	4b70      	ldr	r3, [pc, #448]	@ (800414c <BlockT3+0x310>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8003f8e:	4b6c      	ldr	r3, [pc, #432]	@ (8004140 <BlockT3+0x304>)
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	4b6a      	ldr	r3, [pc, #424]	@ (800413c <BlockT3+0x300>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	1c59      	adds	r1, r3, #1
 8003f98:	486a      	ldr	r0, [pc, #424]	@ (8004144 <BlockT3+0x308>)
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	1a9b      	subs	r3, r3, r2
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	440b      	add	r3, r1
 8003fa4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d131      	bne.n	8004010 <BlockT3+0x1d4>
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 8003fac:	4b64      	ldr	r3, [pc, #400]	@ (8004140 <BlockT3+0x304>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	1e5a      	subs	r2, r3, #1
 8003fb2:	4b62      	ldr	r3, [pc, #392]	@ (800413c <BlockT3+0x300>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	1c59      	adds	r1, r3, #1
 8003fb8:	4862      	ldr	r0, [pc, #392]	@ (8004144 <BlockT3+0x308>)
 8003fba:	4613      	mov	r3, r2
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	440b      	add	r3, r1
 8003fc4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d121      	bne.n	8004010 <BlockT3+0x1d4>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8003fcc:	4b5c      	ldr	r3, [pc, #368]	@ (8004140 <BlockT3+0x304>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	1c5a      	adds	r2, r3, #1
 8003fd2:	4b5a      	ldr	r3, [pc, #360]	@ (800413c <BlockT3+0x300>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	1c59      	adds	r1, r3, #1
 8003fd8:	485a      	ldr	r0, [pc, #360]	@ (8004144 <BlockT3+0x308>)
 8003fda:	4613      	mov	r3, r2
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	1a9b      	subs	r3, r3, r2
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	440b      	add	r3, r1
 8003fe4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d111      	bne.n	8004010 <BlockT3+0x1d4>
		tetris[tetrominoLocX][tetrominoLocY] == 0
 8003fec:	4b54      	ldr	r3, [pc, #336]	@ (8004140 <BlockT3+0x304>)
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	4b52      	ldr	r3, [pc, #328]	@ (800413c <BlockT3+0x300>)
 8003ff2:	6819      	ldr	r1, [r3, #0]
 8003ff4:	4853      	ldr	r0, [pc, #332]	@ (8004144 <BlockT3+0x308>)
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	1a9b      	subs	r3, r3, r2
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	440b      	add	r3, r1
 8004000:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8004004:	2b00      	cmp	r3, #0
 8004006:	d103      	bne.n	8004010 <BlockT3+0x1d4>
	)
		CanMoveLeft = true;
 8004008:	4b52      	ldr	r3, [pc, #328]	@ (8004154 <BlockT3+0x318>)
 800400a:	2201      	movs	r2, #1
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	e002      	b.n	8004016 <BlockT3+0x1da>
	else CanMoveLeft = false;
 8004010:	4b50      	ldr	r3, [pc, #320]	@ (8004154 <BlockT3+0x318>)
 8004012:	2200      	movs	r2, #0
 8004014:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8004016:	4b4a      	ldr	r3, [pc, #296]	@ (8004140 <BlockT3+0x304>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	1c9a      	adds	r2, r3, #2
 800401c:	4b47      	ldr	r3, [pc, #284]	@ (800413c <BlockT3+0x300>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	1c59      	adds	r1, r3, #1
 8004022:	4848      	ldr	r0, [pc, #288]	@ (8004144 <BlockT3+0x308>)
 8004024:	4613      	mov	r3, r2
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	1a9b      	subs	r3, r3, r2
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	440b      	add	r3, r1
 800402e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d132      	bne.n	800409c <BlockT3+0x260>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8004036:	4b42      	ldr	r3, [pc, #264]	@ (8004140 <BlockT3+0x304>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	4b3f      	ldr	r3, [pc, #252]	@ (800413c <BlockT3+0x300>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	1c59      	adds	r1, r3, #1
 8004042:	4840      	ldr	r0, [pc, #256]	@ (8004144 <BlockT3+0x308>)
 8004044:	4613      	mov	r3, r2
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	1a9b      	subs	r3, r3, r2
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	440b      	add	r3, r1
 800404e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8004052:	2b00      	cmp	r3, #0
 8004054:	d122      	bne.n	800409c <BlockT3+0x260>
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 8004056:	4b3a      	ldr	r3, [pc, #232]	@ (8004140 <BlockT3+0x304>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	1cda      	adds	r2, r3, #3
 800405c:	4b37      	ldr	r3, [pc, #220]	@ (800413c <BlockT3+0x300>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	1c59      	adds	r1, r3, #1
 8004062:	4838      	ldr	r0, [pc, #224]	@ (8004144 <BlockT3+0x308>)
 8004064:	4613      	mov	r3, r2
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	1a9b      	subs	r3, r3, r2
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	440b      	add	r3, r1
 800406e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8004072:	2b00      	cmp	r3, #0
 8004074:	d112      	bne.n	800409c <BlockT3+0x260>
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0
 8004076:	4b32      	ldr	r3, [pc, #200]	@ (8004140 <BlockT3+0x304>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	1c9a      	adds	r2, r3, #2
 800407c:	4b2f      	ldr	r3, [pc, #188]	@ (800413c <BlockT3+0x300>)
 800407e:	6819      	ldr	r1, [r3, #0]
 8004080:	4830      	ldr	r0, [pc, #192]	@ (8004144 <BlockT3+0x308>)
 8004082:	4613      	mov	r3, r2
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	1a9b      	subs	r3, r3, r2
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	440b      	add	r3, r1
 800408c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 8004090:	2b00      	cmp	r3, #0
 8004092:	d103      	bne.n	800409c <BlockT3+0x260>
	)
		CanMoveRight = true;
 8004094:	4b30      	ldr	r3, [pc, #192]	@ (8004158 <BlockT3+0x31c>)
 8004096:	2201      	movs	r2, #1
 8004098:	701a      	strb	r2, [r3, #0]
 800409a:	e002      	b.n	80040a2 <BlockT3+0x266>
	else CanMoveRight = false;
 800409c:	4b2e      	ldr	r3, [pc, #184]	@ (8004158 <BlockT3+0x31c>)
 800409e:	2200      	movs	r2, #0
 80040a0:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80040a2:	4b27      	ldr	r3, [pc, #156]	@ (8004140 <BlockT3+0x304>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	4b24      	ldr	r3, [pc, #144]	@ (800413c <BlockT3+0x300>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	1c59      	adds	r1, r3, #1
 80040ae:	4825      	ldr	r0, [pc, #148]	@ (8004144 <BlockT3+0x308>)
 80040b0:	4613      	mov	r3, r2
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	1a9b      	subs	r3, r3, r2
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	440b      	add	r3, r1
 80040ba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d131      	bne.n	8004126 <BlockT3+0x2ea>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 80040c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004140 <BlockT3+0x304>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	4b1c      	ldr	r3, [pc, #112]	@ (800413c <BlockT3+0x300>)
 80040ca:	6819      	ldr	r1, [r3, #0]
 80040cc:	481d      	ldr	r0, [pc, #116]	@ (8004144 <BlockT3+0x308>)
 80040ce:	4613      	mov	r3, r2
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	1a9b      	subs	r3, r3, r2
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	440b      	add	r3, r1
 80040d8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d122      	bne.n	8004126 <BlockT3+0x2ea>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 80040e0:	4b17      	ldr	r3, [pc, #92]	@ (8004140 <BlockT3+0x304>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	4b15      	ldr	r3, [pc, #84]	@ (800413c <BlockT3+0x300>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	1c99      	adds	r1, r3, #2
 80040ec:	4815      	ldr	r0, [pc, #84]	@ (8004144 <BlockT3+0x308>)
 80040ee:	4613      	mov	r3, r2
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	440b      	add	r3, r1
 80040f8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d112      	bne.n	8004126 <BlockT3+0x2ea>
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0)
 8004100:	4b0f      	ldr	r3, [pc, #60]	@ (8004140 <BlockT3+0x304>)
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	4b0d      	ldr	r3, [pc, #52]	@ (800413c <BlockT3+0x300>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	1c59      	adds	r1, r3, #1
 800410a:	480e      	ldr	r0, [pc, #56]	@ (8004144 <BlockT3+0x308>)
 800410c:	4613      	mov	r3, r2
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	1a9b      	subs	r3, r3, r2
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	440b      	add	r3, r1
 8004116:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 800411a:	2b00      	cmp	r3, #0
 800411c:	d103      	bne.n	8004126 <BlockT3+0x2ea>
		CanRotate = true;
 800411e:	4b0f      	ldr	r3, [pc, #60]	@ (800415c <BlockT3+0x320>)
 8004120:	2201      	movs	r2, #1
 8004122:	701a      	strb	r2, [r3, #0]
 8004124:	e003      	b.n	800412e <BlockT3+0x2f2>
	else CanRotate = false;
 8004126:	4b0d      	ldr	r3, [pc, #52]	@ (800415c <BlockT3+0x320>)
 8004128:	2200      	movs	r2, #0
 800412a:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 2); cout << char(248);
}
 800412c:	bf00      	nop
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	bd90      	pop	{r4, r7, pc}
 8004136:	bf00      	nop
 8004138:	20000fec 	.word	0x20000fec
 800413c:	20000fe8 	.word	0x20000fe8
 8004140:	20000fe4 	.word	0x20000fe4
 8004144:	200001d0 	.word	0x200001d0
 8004148:	2000000c 	.word	0x2000000c
 800414c:	2000000f 	.word	0x2000000f
 8004150:	20000ff0 	.word	0x20000ff0
 8004154:	2000000e 	.word	0x2000000e
 8004158:	2000000d 	.word	0x2000000d
 800415c:	20000010 	.word	0x20000010

08004160 <BlockT4>:

void BlockT4(int x, int y)
{
 8004160:	b590      	push	{r4, r7, lr}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	3301      	adds	r3, #1
 8004172:	4619      	mov	r1, r3
 8004174:	4610      	mov	r0, r2
 8004176:	f001 fd2b 	bl	8005bd0 <PrintXY>
	PrintXY(x + 1, y);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3301      	adds	r3, #1
 800417e:	6839      	ldr	r1, [r7, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f001 fd25 	bl	8005bd0 <PrintXY>
	PrintXY(x + 1, y + 2);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	3302      	adds	r3, #2
 800418e:	4619      	mov	r1, r3
 8004190:	4610      	mov	r0, r2
 8004192:	f001 fd1d 	bl	8005bd0 <PrintXY>
	PrintXY(x, y + 1);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	3301      	adds	r3, #1
 800419a:	4619      	mov	r1, r3
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f001 fd17 	bl	8005bd0 <PrintXY>

	CurrentState = 16;
 80041a2:	4ba6      	ldr	r3, [pc, #664]	@ (800443c <BlockT4+0x2dc>)
 80041a4:	2210      	movs	r2, #16
 80041a6:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 80041a8:	4ba5      	ldr	r3, [pc, #660]	@ (8004440 <BlockT4+0x2e0>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b12      	cmp	r3, #18
 80041ae:	dc1e      	bgt.n	80041ee <BlockT4+0x8e>
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 80041b0:	4ba4      	ldr	r3, [pc, #656]	@ (8004444 <BlockT4+0x2e4>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	4ba2      	ldr	r3, [pc, #648]	@ (8004440 <BlockT4+0x2e0>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	1cd9      	adds	r1, r3, #3
 80041bc:	48a2      	ldr	r0, [pc, #648]	@ (8004448 <BlockT4+0x2e8>)
 80041be:	4613      	mov	r3, r2
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	440b      	add	r3, r1
 80041c8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10e      	bne.n	80041ee <BlockT4+0x8e>
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0)
 80041d0:	4b9c      	ldr	r3, [pc, #624]	@ (8004444 <BlockT4+0x2e4>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	4b9a      	ldr	r3, [pc, #616]	@ (8004440 <BlockT4+0x2e0>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	1c99      	adds	r1, r3, #2
 80041da:	489b      	ldr	r0, [pc, #620]	@ (8004448 <BlockT4+0x2e8>)
 80041dc:	4613      	mov	r3, r2
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	440b      	add	r3, r1
 80041e6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d04e      	beq.n	800428c <BlockT4+0x12c>
	{
		while (isDownKey() == 1);
 80041ee:	bf00      	nop
 80041f0:	f001 fc68 	bl	8005ac4 <isDownKey>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d0fa      	beq.n	80041f0 <BlockT4+0x90>
		NewTetromino = true;
 80041fa:	4b94      	ldr	r3, [pc, #592]	@ (800444c <BlockT4+0x2ec>)
 80041fc:	2201      	movs	r2, #1
 80041fe:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 8004200:	4b93      	ldr	r3, [pc, #588]	@ (8004450 <BlockT4+0x2f0>)
 8004202:	2200      	movs	r2, #0
 8004204:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 8004206:	4b93      	ldr	r3, [pc, #588]	@ (8004454 <BlockT4+0x2f4>)
 8004208:	8818      	ldrh	r0, [r3, #0]
 800420a:	4b8e      	ldr	r3, [pc, #568]	@ (8004444 <BlockT4+0x2e4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	4b8b      	ldr	r3, [pc, #556]	@ (8004440 <BlockT4+0x2e0>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	1c59      	adds	r1, r3, #1
 8004216:	4604      	mov	r4, r0
 8004218:	488b      	ldr	r0, [pc, #556]	@ (8004448 <BlockT4+0x2e8>)
 800421a:	4613      	mov	r3, r2
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	1a9b      	subs	r3, r3, r2
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	440b      	add	r3, r1
 8004224:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] = colour;
 8004228:	4b8a      	ldr	r3, [pc, #552]	@ (8004454 <BlockT4+0x2f4>)
 800422a:	8818      	ldrh	r0, [r3, #0]
 800422c:	4b85      	ldr	r3, [pc, #532]	@ (8004444 <BlockT4+0x2e4>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	4b83      	ldr	r3, [pc, #524]	@ (8004440 <BlockT4+0x2e0>)
 8004234:	6819      	ldr	r1, [r3, #0]
 8004236:	4604      	mov	r4, r0
 8004238:	4883      	ldr	r0, [pc, #524]	@ (8004448 <BlockT4+0x2e8>)
 800423a:	4613      	mov	r3, r2
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	1a9b      	subs	r3, r3, r2
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	440b      	add	r3, r1
 8004244:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] = colour;
 8004248:	4b82      	ldr	r3, [pc, #520]	@ (8004454 <BlockT4+0x2f4>)
 800424a:	8818      	ldrh	r0, [r3, #0]
 800424c:	4b7d      	ldr	r3, [pc, #500]	@ (8004444 <BlockT4+0x2e4>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	4b7b      	ldr	r3, [pc, #492]	@ (8004440 <BlockT4+0x2e0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	1c99      	adds	r1, r3, #2
 8004258:	4604      	mov	r4, r0
 800425a:	487b      	ldr	r0, [pc, #492]	@ (8004448 <BlockT4+0x2e8>)
 800425c:	4613      	mov	r3, r2
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	1a9b      	subs	r3, r3, r2
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	440b      	add	r3, r1
 8004266:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] = colour;
 800426a:	4b7a      	ldr	r3, [pc, #488]	@ (8004454 <BlockT4+0x2f4>)
 800426c:	8818      	ldrh	r0, [r3, #0]
 800426e:	4b75      	ldr	r3, [pc, #468]	@ (8004444 <BlockT4+0x2e4>)
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	4b73      	ldr	r3, [pc, #460]	@ (8004440 <BlockT4+0x2e0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	1c59      	adds	r1, r3, #1
 8004278:	4604      	mov	r4, r0
 800427a:	4873      	ldr	r0, [pc, #460]	@ (8004448 <BlockT4+0x2e8>)
 800427c:	4613      	mov	r3, r2
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	1a9b      	subs	r3, r3, r2
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	440b      	add	r3, r1
 8004286:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 800428a:	e002      	b.n	8004292 <BlockT4+0x132>
	}
	else CanMoveDown = true;
 800428c:	4b70      	ldr	r3, [pc, #448]	@ (8004450 <BlockT4+0x2f0>)
 800428e:	2201      	movs	r2, #1
 8004290:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8004292:	4b6c      	ldr	r3, [pc, #432]	@ (8004444 <BlockT4+0x2e4>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	4b6a      	ldr	r3, [pc, #424]	@ (8004440 <BlockT4+0x2e0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	1c59      	adds	r1, r3, #1
 800429c:	486a      	ldr	r0, [pc, #424]	@ (8004448 <BlockT4+0x2e8>)
 800429e:	4613      	mov	r3, r2
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	1a9b      	subs	r3, r3, r2
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	440b      	add	r3, r1
 80042a8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d130      	bne.n	8004312 <BlockT4+0x1b2>
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 80042b0:	4b64      	ldr	r3, [pc, #400]	@ (8004444 <BlockT4+0x2e4>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	4b62      	ldr	r3, [pc, #392]	@ (8004440 <BlockT4+0x2e0>)
 80042b6:	6819      	ldr	r1, [r3, #0]
 80042b8:	4863      	ldr	r0, [pc, #396]	@ (8004448 <BlockT4+0x2e8>)
 80042ba:	4613      	mov	r3, r2
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	1a9b      	subs	r3, r3, r2
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	440b      	add	r3, r1
 80042c4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d122      	bne.n	8004312 <BlockT4+0x1b2>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 80042cc:	4b5d      	ldr	r3, [pc, #372]	@ (8004444 <BlockT4+0x2e4>)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	4b5b      	ldr	r3, [pc, #364]	@ (8004440 <BlockT4+0x2e0>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	1c99      	adds	r1, r3, #2
 80042d6:	485c      	ldr	r0, [pc, #368]	@ (8004448 <BlockT4+0x2e8>)
 80042d8:	4613      	mov	r3, r2
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	1a9b      	subs	r3, r3, r2
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	440b      	add	r3, r1
 80042e2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d113      	bne.n	8004312 <BlockT4+0x1b2>
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0
 80042ea:	4b56      	ldr	r3, [pc, #344]	@ (8004444 <BlockT4+0x2e4>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	1e5a      	subs	r2, r3, #1
 80042f0:	4b53      	ldr	r3, [pc, #332]	@ (8004440 <BlockT4+0x2e0>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	1c59      	adds	r1, r3, #1
 80042f6:	4854      	ldr	r0, [pc, #336]	@ (8004448 <BlockT4+0x2e8>)
 80042f8:	4613      	mov	r3, r2
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	1a9b      	subs	r3, r3, r2
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	440b      	add	r3, r1
 8004302:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 8004306:	2b00      	cmp	r3, #0
 8004308:	d103      	bne.n	8004312 <BlockT4+0x1b2>
	)
		CanMoveLeft = true;
 800430a:	4b53      	ldr	r3, [pc, #332]	@ (8004458 <BlockT4+0x2f8>)
 800430c:	2201      	movs	r2, #1
 800430e:	701a      	strb	r2, [r3, #0]
 8004310:	e002      	b.n	8004318 <BlockT4+0x1b8>
	else CanMoveLeft = false;
 8004312:	4b51      	ldr	r3, [pc, #324]	@ (8004458 <BlockT4+0x2f8>)
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8004318:	4b4a      	ldr	r3, [pc, #296]	@ (8004444 <BlockT4+0x2e4>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	1c9a      	adds	r2, r3, #2
 800431e:	4b48      	ldr	r3, [pc, #288]	@ (8004440 <BlockT4+0x2e0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	1c59      	adds	r1, r3, #1
 8004324:	4848      	ldr	r0, [pc, #288]	@ (8004448 <BlockT4+0x2e8>)
 8004326:	4613      	mov	r3, r2
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	1a9b      	subs	r3, r3, r2
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	440b      	add	r3, r1
 8004330:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d132      	bne.n	800439e <BlockT4+0x23e>
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 8004338:	4b42      	ldr	r3, [pc, #264]	@ (8004444 <BlockT4+0x2e4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	1c9a      	adds	r2, r3, #2
 800433e:	4b40      	ldr	r3, [pc, #256]	@ (8004440 <BlockT4+0x2e0>)
 8004340:	6819      	ldr	r1, [r3, #0]
 8004342:	4841      	ldr	r0, [pc, #260]	@ (8004448 <BlockT4+0x2e8>)
 8004344:	4613      	mov	r3, r2
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	1a9b      	subs	r3, r3, r2
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	440b      	add	r3, r1
 800434e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8004352:	2b00      	cmp	r3, #0
 8004354:	d123      	bne.n	800439e <BlockT4+0x23e>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 8004356:	4b3b      	ldr	r3, [pc, #236]	@ (8004444 <BlockT4+0x2e4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	1c9a      	adds	r2, r3, #2
 800435c:	4b38      	ldr	r3, [pc, #224]	@ (8004440 <BlockT4+0x2e0>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	1c99      	adds	r1, r3, #2
 8004362:	4839      	ldr	r0, [pc, #228]	@ (8004448 <BlockT4+0x2e8>)
 8004364:	4613      	mov	r3, r2
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	1a9b      	subs	r3, r3, r2
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	440b      	add	r3, r1
 800436e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 8004372:	2b00      	cmp	r3, #0
 8004374:	d113      	bne.n	800439e <BlockT4+0x23e>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0
 8004376:	4b33      	ldr	r3, [pc, #204]	@ (8004444 <BlockT4+0x2e4>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	4b30      	ldr	r3, [pc, #192]	@ (8004440 <BlockT4+0x2e0>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	1c59      	adds	r1, r3, #1
 8004382:	4831      	ldr	r0, [pc, #196]	@ (8004448 <BlockT4+0x2e8>)
 8004384:	4613      	mov	r3, r2
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	1a9b      	subs	r3, r3, r2
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	440b      	add	r3, r1
 800438e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 8004392:	2b00      	cmp	r3, #0
 8004394:	d103      	bne.n	800439e <BlockT4+0x23e>
	)
		CanMoveRight = true;
 8004396:	4b31      	ldr	r3, [pc, #196]	@ (800445c <BlockT4+0x2fc>)
 8004398:	2201      	movs	r2, #1
 800439a:	701a      	strb	r2, [r3, #0]
 800439c:	e002      	b.n	80043a4 <BlockT4+0x244>
	else CanMoveRight = false;
 800439e:	4b2f      	ldr	r3, [pc, #188]	@ (800445c <BlockT4+0x2fc>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80043a4:	4b27      	ldr	r3, [pc, #156]	@ (8004444 <BlockT4+0x2e4>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	4b25      	ldr	r3, [pc, #148]	@ (8004440 <BlockT4+0x2e0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	1c59      	adds	r1, r3, #1
 80043b0:	4825      	ldr	r0, [pc, #148]	@ (8004448 <BlockT4+0x2e8>)
 80043b2:	4613      	mov	r3, r2
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	1a9b      	subs	r3, r3, r2
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	440b      	add	r3, r1
 80043bc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d132      	bne.n	800442a <BlockT4+0x2ca>
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 80043c4:	4b1f      	ldr	r3, [pc, #124]	@ (8004444 <BlockT4+0x2e4>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004440 <BlockT4+0x2e0>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	1c59      	adds	r1, r3, #1
 80043ce:	481e      	ldr	r0, [pc, #120]	@ (8004448 <BlockT4+0x2e8>)
 80043d0:	4613      	mov	r3, r2
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	1a9b      	subs	r3, r3, r2
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	440b      	add	r3, r1
 80043da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d123      	bne.n	800442a <BlockT4+0x2ca>
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80043e2:	4b18      	ldr	r3, [pc, #96]	@ (8004444 <BlockT4+0x2e4>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	1c9a      	adds	r2, r3, #2
 80043e8:	4b15      	ldr	r3, [pc, #84]	@ (8004440 <BlockT4+0x2e0>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	1c59      	adds	r1, r3, #1
 80043ee:	4816      	ldr	r0, [pc, #88]	@ (8004448 <BlockT4+0x2e8>)
 80043f0:	4613      	mov	r3, r2
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	1a9b      	subs	r3, r3, r2
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	440b      	add	r3, r1
 80043fa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d113      	bne.n	800442a <BlockT4+0x2ca>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0)
 8004402:	4b10      	ldr	r3, [pc, #64]	@ (8004444 <BlockT4+0x2e4>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	4b0d      	ldr	r3, [pc, #52]	@ (8004440 <BlockT4+0x2e0>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	1c99      	adds	r1, r3, #2
 800440e:	480e      	ldr	r0, [pc, #56]	@ (8004448 <BlockT4+0x2e8>)
 8004410:	4613      	mov	r3, r2
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	1a9b      	subs	r3, r3, r2
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	440b      	add	r3, r1
 800441a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 800441e:	2b00      	cmp	r3, #0
 8004420:	d103      	bne.n	800442a <BlockT4+0x2ca>
		CanRotate = true;
 8004422:	4b0f      	ldr	r3, [pc, #60]	@ (8004460 <BlockT4+0x300>)
 8004424:	2201      	movs	r2, #1
 8004426:	701a      	strb	r2, [r3, #0]
 8004428:	e003      	b.n	8004432 <BlockT4+0x2d2>
	else CanRotate = false;
 800442a:	4b0d      	ldr	r3, [pc, #52]	@ (8004460 <BlockT4+0x300>)
 800442c:	2200      	movs	r2, #0
 800442e:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 3); cout << char(248);
	//PrintXY(tetrominoLocX, tetrominoLocY + 2); cout << char(248);
}
 8004430:	bf00      	nop
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	bd90      	pop	{r4, r7, pc}
 800443a:	bf00      	nop
 800443c:	20000fec 	.word	0x20000fec
 8004440:	20000fe8 	.word	0x20000fe8
 8004444:	20000fe4 	.word	0x20000fe4
 8004448:	200001d0 	.word	0x200001d0
 800444c:	2000000c 	.word	0x2000000c
 8004450:	2000000f 	.word	0x2000000f
 8004454:	20000ff0 	.word	0x20000ff0
 8004458:	2000000e 	.word	0x2000000e
 800445c:	2000000d 	.word	0x2000000d
 8004460:	20000010 	.word	0x20000010

08004464 <BlockZ1>:

void BlockZ1(int x, int y)
{
 8004464:	b590      	push	{r4, r7, lr}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	3301      	adds	r3, #1
 8004476:	4619      	mov	r1, r3
 8004478:	4610      	mov	r0, r2
 800447a:	f001 fba9 	bl	8005bd0 <PrintXY>
	PrintXY(x, y + 1);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	3301      	adds	r3, #1
 8004482:	4619      	mov	r1, r3
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f001 fba3 	bl	8005bd0 <PrintXY>
	PrintXY(x + 1, y + 2);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	3302      	adds	r3, #2
 8004492:	4619      	mov	r1, r3
 8004494:	4610      	mov	r0, r2
 8004496:	f001 fb9b 	bl	8005bd0 <PrintXY>
	PrintXY(x + 2, y + 2);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	1c9a      	adds	r2, r3, #2
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	3302      	adds	r3, #2
 80044a2:	4619      	mov	r1, r3
 80044a4:	4610      	mov	r0, r2
 80044a6:	f001 fb93 	bl	8005bd0 <PrintXY>

	CurrentState = 17;
 80044aa:	4baf      	ldr	r3, [pc, #700]	@ (8004768 <BlockZ1+0x304>)
 80044ac:	2211      	movs	r2, #17
 80044ae:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 80044b0:	4bae      	ldr	r3, [pc, #696]	@ (800476c <BlockZ1+0x308>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b12      	cmp	r3, #18
 80044b6:	dc2e      	bgt.n	8004516 <BlockZ1+0xb2>
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0 ||
 80044b8:	4bad      	ldr	r3, [pc, #692]	@ (8004770 <BlockZ1+0x30c>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	4bab      	ldr	r3, [pc, #684]	@ (800476c <BlockZ1+0x308>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	1c99      	adds	r1, r3, #2
 80044c2:	48ac      	ldr	r0, [pc, #688]	@ (8004774 <BlockZ1+0x310>)
 80044c4:	4613      	mov	r3, r2
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	1a9b      	subs	r3, r3, r2
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	440b      	add	r3, r1
 80044ce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d11f      	bne.n	8004516 <BlockZ1+0xb2>
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 80044d6:	4ba6      	ldr	r3, [pc, #664]	@ (8004770 <BlockZ1+0x30c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	4ba3      	ldr	r3, [pc, #652]	@ (800476c <BlockZ1+0x308>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	1cd9      	adds	r1, r3, #3
 80044e2:	48a4      	ldr	r0, [pc, #656]	@ (8004774 <BlockZ1+0x310>)
 80044e4:	4613      	mov	r3, r2
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	440b      	add	r3, r1
 80044ee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0 ||
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10f      	bne.n	8004516 <BlockZ1+0xb2>
		tetris[tetrominoLocX + 2][tetrominoLocY + 3] != 0)
 80044f6:	4b9e      	ldr	r3, [pc, #632]	@ (8004770 <BlockZ1+0x30c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	1c9a      	adds	r2, r3, #2
 80044fc:	4b9b      	ldr	r3, [pc, #620]	@ (800476c <BlockZ1+0x308>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	1cd9      	adds	r1, r3, #3
 8004502:	489c      	ldr	r0, [pc, #624]	@ (8004774 <BlockZ1+0x310>)
 8004504:	4613      	mov	r3, r2
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	1a9b      	subs	r3, r3, r2
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	440b      	add	r3, r1
 800450e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 8004512:	2b00      	cmp	r3, #0
 8004514:	d04f      	beq.n	80045b6 <BlockZ1+0x152>
	{
		while (isDownKey() == 1);
 8004516:	bf00      	nop
 8004518:	f001 fad4 	bl	8005ac4 <isDownKey>
 800451c:	4603      	mov	r3, r0
 800451e:	2b01      	cmp	r3, #1
 8004520:	d0fa      	beq.n	8004518 <BlockZ1+0xb4>
		NewTetromino = true;
 8004522:	4b95      	ldr	r3, [pc, #596]	@ (8004778 <BlockZ1+0x314>)
 8004524:	2201      	movs	r2, #1
 8004526:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 8004528:	4b94      	ldr	r3, [pc, #592]	@ (800477c <BlockZ1+0x318>)
 800452a:	2200      	movs	r2, #0
 800452c:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 800452e:	4b94      	ldr	r3, [pc, #592]	@ (8004780 <BlockZ1+0x31c>)
 8004530:	8818      	ldrh	r0, [r3, #0]
 8004532:	4b8f      	ldr	r3, [pc, #572]	@ (8004770 <BlockZ1+0x30c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	1c5a      	adds	r2, r3, #1
 8004538:	4b8c      	ldr	r3, [pc, #560]	@ (800476c <BlockZ1+0x308>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	1c59      	adds	r1, r3, #1
 800453e:	4604      	mov	r4, r0
 8004540:	488c      	ldr	r0, [pc, #560]	@ (8004774 <BlockZ1+0x310>)
 8004542:	4613      	mov	r3, r2
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	1a9b      	subs	r3, r3, r2
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	440b      	add	r3, r1
 800454c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] = colour;
 8004550:	4b8b      	ldr	r3, [pc, #556]	@ (8004780 <BlockZ1+0x31c>)
 8004552:	8818      	ldrh	r0, [r3, #0]
 8004554:	4b86      	ldr	r3, [pc, #536]	@ (8004770 <BlockZ1+0x30c>)
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	4b84      	ldr	r3, [pc, #528]	@ (800476c <BlockZ1+0x308>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	1c59      	adds	r1, r3, #1
 800455e:	4604      	mov	r4, r0
 8004560:	4884      	ldr	r0, [pc, #528]	@ (8004774 <BlockZ1+0x310>)
 8004562:	4613      	mov	r3, r2
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	1a9b      	subs	r3, r3, r2
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	440b      	add	r3, r1
 800456c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] = colour;
 8004570:	4b83      	ldr	r3, [pc, #524]	@ (8004780 <BlockZ1+0x31c>)
 8004572:	8818      	ldrh	r0, [r3, #0]
 8004574:	4b7e      	ldr	r3, [pc, #504]	@ (8004770 <BlockZ1+0x30c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	4b7c      	ldr	r3, [pc, #496]	@ (800476c <BlockZ1+0x308>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	1c99      	adds	r1, r3, #2
 8004580:	4604      	mov	r4, r0
 8004582:	487c      	ldr	r0, [pc, #496]	@ (8004774 <BlockZ1+0x310>)
 8004584:	4613      	mov	r3, r2
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	440b      	add	r3, r1
 800458e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] = colour;
 8004592:	4b7b      	ldr	r3, [pc, #492]	@ (8004780 <BlockZ1+0x31c>)
 8004594:	8818      	ldrh	r0, [r3, #0]
 8004596:	4b76      	ldr	r3, [pc, #472]	@ (8004770 <BlockZ1+0x30c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	1c9a      	adds	r2, r3, #2
 800459c:	4b73      	ldr	r3, [pc, #460]	@ (800476c <BlockZ1+0x308>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	1c99      	adds	r1, r3, #2
 80045a2:	4604      	mov	r4, r0
 80045a4:	4873      	ldr	r0, [pc, #460]	@ (8004774 <BlockZ1+0x310>)
 80045a6:	4613      	mov	r3, r2
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	440b      	add	r3, r1
 80045b0:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 80045b4:	e002      	b.n	80045bc <BlockZ1+0x158>
	}
	else CanMoveDown = true;
 80045b6:	4b71      	ldr	r3, [pc, #452]	@ (800477c <BlockZ1+0x318>)
 80045b8:	2201      	movs	r2, #1
 80045ba:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 80045bc:	4b6c      	ldr	r3, [pc, #432]	@ (8004770 <BlockZ1+0x30c>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	4b6a      	ldr	r3, [pc, #424]	@ (800476c <BlockZ1+0x308>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	1c59      	adds	r1, r3, #1
 80045c6:	486b      	ldr	r0, [pc, #428]	@ (8004774 <BlockZ1+0x310>)
 80045c8:	4613      	mov	r3, r2
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	1a9b      	subs	r3, r3, r2
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	440b      	add	r3, r1
 80045d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d132      	bne.n	8004640 <BlockZ1+0x1dc>
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 80045da:	4b65      	ldr	r3, [pc, #404]	@ (8004770 <BlockZ1+0x30c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	1e5a      	subs	r2, r3, #1
 80045e0:	4b62      	ldr	r3, [pc, #392]	@ (800476c <BlockZ1+0x308>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	1c59      	adds	r1, r3, #1
 80045e6:	4863      	ldr	r0, [pc, #396]	@ (8004774 <BlockZ1+0x310>)
 80045e8:	4613      	mov	r3, r2
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	1a9b      	subs	r3, r3, r2
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	440b      	add	r3, r1
 80045f2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d122      	bne.n	8004640 <BlockZ1+0x1dc>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 80045fa:	4b5d      	ldr	r3, [pc, #372]	@ (8004770 <BlockZ1+0x30c>)
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	4b5b      	ldr	r3, [pc, #364]	@ (800476c <BlockZ1+0x308>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	1c99      	adds	r1, r3, #2
 8004604:	485b      	ldr	r0, [pc, #364]	@ (8004774 <BlockZ1+0x310>)
 8004606:	4613      	mov	r3, r2
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	1a9b      	subs	r3, r3, r2
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	440b      	add	r3, r1
 8004610:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 8004614:	2b00      	cmp	r3, #0
 8004616:	d113      	bne.n	8004640 <BlockZ1+0x1dc>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0
 8004618:	4b55      	ldr	r3, [pc, #340]	@ (8004770 <BlockZ1+0x30c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	4b53      	ldr	r3, [pc, #332]	@ (800476c <BlockZ1+0x308>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	1c99      	adds	r1, r3, #2
 8004624:	4853      	ldr	r0, [pc, #332]	@ (8004774 <BlockZ1+0x310>)
 8004626:	4613      	mov	r3, r2
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	1a9b      	subs	r3, r3, r2
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	440b      	add	r3, r1
 8004630:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 8004634:	2b00      	cmp	r3, #0
 8004636:	d103      	bne.n	8004640 <BlockZ1+0x1dc>
	)
		CanMoveLeft = true;
 8004638:	4b52      	ldr	r3, [pc, #328]	@ (8004784 <BlockZ1+0x320>)
 800463a:	2201      	movs	r2, #1
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	e002      	b.n	8004646 <BlockZ1+0x1e2>
	else CanMoveLeft = false;
 8004640:	4b50      	ldr	r3, [pc, #320]	@ (8004784 <BlockZ1+0x320>)
 8004642:	2200      	movs	r2, #0
 8004644:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8004646:	4b4a      	ldr	r3, [pc, #296]	@ (8004770 <BlockZ1+0x30c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	1c9a      	adds	r2, r3, #2
 800464c:	4b47      	ldr	r3, [pc, #284]	@ (800476c <BlockZ1+0x308>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	1c59      	adds	r1, r3, #1
 8004652:	4848      	ldr	r0, [pc, #288]	@ (8004774 <BlockZ1+0x310>)
 8004654:	4613      	mov	r3, r2
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	440b      	add	r3, r1
 800465e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d133      	bne.n	80046ce <BlockZ1+0x26a>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8004666:	4b42      	ldr	r3, [pc, #264]	@ (8004770 <BlockZ1+0x30c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	4b3f      	ldr	r3, [pc, #252]	@ (800476c <BlockZ1+0x308>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	1c59      	adds	r1, r3, #1
 8004672:	4840      	ldr	r0, [pc, #256]	@ (8004774 <BlockZ1+0x310>)
 8004674:	4613      	mov	r3, r2
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	1a9b      	subs	r3, r3, r2
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	440b      	add	r3, r1
 800467e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8004682:	2b00      	cmp	r3, #0
 8004684:	d123      	bne.n	80046ce <BlockZ1+0x26a>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 8004686:	4b3a      	ldr	r3, [pc, #232]	@ (8004770 <BlockZ1+0x30c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	1c9a      	adds	r2, r3, #2
 800468c:	4b37      	ldr	r3, [pc, #220]	@ (800476c <BlockZ1+0x308>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	1c99      	adds	r1, r3, #2
 8004692:	4838      	ldr	r0, [pc, #224]	@ (8004774 <BlockZ1+0x310>)
 8004694:	4613      	mov	r3, r2
 8004696:	011b      	lsls	r3, r3, #4
 8004698:	1a9b      	subs	r3, r3, r2
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	440b      	add	r3, r1
 800469e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d113      	bne.n	80046ce <BlockZ1+0x26a>
		tetris[tetrominoLocX + 3][tetrominoLocY + 2] == 0
 80046a6:	4b32      	ldr	r3, [pc, #200]	@ (8004770 <BlockZ1+0x30c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	1cda      	adds	r2, r3, #3
 80046ac:	4b2f      	ldr	r3, [pc, #188]	@ (800476c <BlockZ1+0x308>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	1c99      	adds	r1, r3, #2
 80046b2:	4830      	ldr	r0, [pc, #192]	@ (8004774 <BlockZ1+0x310>)
 80046b4:	4613      	mov	r3, r2
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	1a9b      	subs	r3, r3, r2
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	440b      	add	r3, r1
 80046be:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d103      	bne.n	80046ce <BlockZ1+0x26a>
	)
		CanMoveRight = true;
 80046c6:	4b30      	ldr	r3, [pc, #192]	@ (8004788 <BlockZ1+0x324>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	701a      	strb	r2, [r3, #0]
 80046cc:	e002      	b.n	80046d4 <BlockZ1+0x270>
	else CanMoveRight = false;
 80046ce:	4b2e      	ldr	r3, [pc, #184]	@ (8004788 <BlockZ1+0x324>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80046d4:	4b26      	ldr	r3, [pc, #152]	@ (8004770 <BlockZ1+0x30c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	4b24      	ldr	r3, [pc, #144]	@ (800476c <BlockZ1+0x308>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	1c59      	adds	r1, r3, #1
 80046e0:	4824      	ldr	r0, [pc, #144]	@ (8004774 <BlockZ1+0x310>)
 80046e2:	4613      	mov	r3, r2
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	1a9b      	subs	r3, r3, r2
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	440b      	add	r3, r1
 80046ec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d130      	bne.n	8004756 <BlockZ1+0x2f2>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 80046f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004770 <BlockZ1+0x30c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	4b1c      	ldr	r3, [pc, #112]	@ (800476c <BlockZ1+0x308>)
 80046fc:	6819      	ldr	r1, [r3, #0]
 80046fe:	481d      	ldr	r0, [pc, #116]	@ (8004774 <BlockZ1+0x310>)
 8004700:	4613      	mov	r3, r2
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	1a9b      	subs	r3, r3, r2
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	440b      	add	r3, r1
 800470a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 800470e:	2b00      	cmp	r3, #0
 8004710:	d121      	bne.n	8004756 <BlockZ1+0x2f2>
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8004712:	4b17      	ldr	r3, [pc, #92]	@ (8004770 <BlockZ1+0x30c>)
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	4b15      	ldr	r3, [pc, #84]	@ (800476c <BlockZ1+0x308>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	1c59      	adds	r1, r3, #1
 800471c:	4815      	ldr	r0, [pc, #84]	@ (8004774 <BlockZ1+0x310>)
 800471e:	4613      	mov	r3, r2
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	1a9b      	subs	r3, r3, r2
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	440b      	add	r3, r1
 8004728:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 800472c:	2b00      	cmp	r3, #0
 800472e:	d112      	bne.n	8004756 <BlockZ1+0x2f2>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0)
 8004730:	4b0f      	ldr	r3, [pc, #60]	@ (8004770 <BlockZ1+0x30c>)
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	4b0d      	ldr	r3, [pc, #52]	@ (800476c <BlockZ1+0x308>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	1c99      	adds	r1, r3, #2
 800473a:	480e      	ldr	r0, [pc, #56]	@ (8004774 <BlockZ1+0x310>)
 800473c:	4613      	mov	r3, r2
 800473e:	011b      	lsls	r3, r3, #4
 8004740:	1a9b      	subs	r3, r3, r2
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	440b      	add	r3, r1
 8004746:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 800474a:	2b00      	cmp	r3, #0
 800474c:	d103      	bne.n	8004756 <BlockZ1+0x2f2>
		CanRotate = true;
 800474e:	4b0f      	ldr	r3, [pc, #60]	@ (800478c <BlockZ1+0x328>)
 8004750:	2201      	movs	r2, #1
 8004752:	701a      	strb	r2, [r3, #0]
 8004754:	e003      	b.n	800475e <BlockZ1+0x2fa>
	else CanRotate = false;
 8004756:	4b0d      	ldr	r3, [pc, #52]	@ (800478c <BlockZ1+0x328>)
 8004758:	2200      	movs	r2, #0
 800475a:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 3); cout << char(248);
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 3); cout << char(248);
}
 800475c:	bf00      	nop
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	bd90      	pop	{r4, r7, pc}
 8004766:	bf00      	nop
 8004768:	20000fec 	.word	0x20000fec
 800476c:	20000fe8 	.word	0x20000fe8
 8004770:	20000fe4 	.word	0x20000fe4
 8004774:	200001d0 	.word	0x200001d0
 8004778:	2000000c 	.word	0x2000000c
 800477c:	2000000f 	.word	0x2000000f
 8004780:	20000ff0 	.word	0x20000ff0
 8004784:	2000000e 	.word	0x2000000e
 8004788:	2000000d 	.word	0x2000000d
 800478c:	20000010 	.word	0x20000010

08004790 <BlockZ2>:

void BlockZ2(int x, int y)
{
 8004790:	b590      	push	{r4, r7, lr}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	3301      	adds	r3, #1
 80047a2:	4619      	mov	r1, r3
 80047a4:	4610      	mov	r0, r2
 80047a6:	f001 fa13 	bl	8005bd0 <PrintXY>
	PrintXY(x + 1, y);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	3301      	adds	r3, #1
 80047ae:	6839      	ldr	r1, [r7, #0]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f001 fa0d 	bl	8005bd0 <PrintXY>
	PrintXY(x, y + 1);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	3301      	adds	r3, #1
 80047ba:	4619      	mov	r1, r3
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f001 fa07 	bl	8005bd0 <PrintXY>
	PrintXY(x, y + 2);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	3302      	adds	r3, #2
 80047c6:	4619      	mov	r1, r3
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f001 fa01 	bl	8005bd0 <PrintXY>

	CurrentState = 18;
 80047ce:	4ba6      	ldr	r3, [pc, #664]	@ (8004a68 <BlockZ2+0x2d8>)
 80047d0:	2212      	movs	r2, #18
 80047d2:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 80047d4:	4ba5      	ldr	r3, [pc, #660]	@ (8004a6c <BlockZ2+0x2dc>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b12      	cmp	r3, #18
 80047da:	dc1e      	bgt.n	800481a <BlockZ2+0x8a>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 80047dc:	4ba4      	ldr	r3, [pc, #656]	@ (8004a70 <BlockZ2+0x2e0>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	1c5a      	adds	r2, r3, #1
 80047e2:	4ba2      	ldr	r3, [pc, #648]	@ (8004a6c <BlockZ2+0x2dc>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	1c99      	adds	r1, r3, #2
 80047e8:	48a2      	ldr	r0, [pc, #648]	@ (8004a74 <BlockZ2+0x2e4>)
 80047ea:	4613      	mov	r3, r2
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	1a9b      	subs	r3, r3, r2
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	440b      	add	r3, r1
 80047f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10e      	bne.n	800481a <BlockZ2+0x8a>
		tetris[tetrominoLocX][tetrominoLocY + 3] != 0)
 80047fc:	4b9c      	ldr	r3, [pc, #624]	@ (8004a70 <BlockZ2+0x2e0>)
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	4b9a      	ldr	r3, [pc, #616]	@ (8004a6c <BlockZ2+0x2dc>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	1cd9      	adds	r1, r3, #3
 8004806:	489b      	ldr	r0, [pc, #620]	@ (8004a74 <BlockZ2+0x2e4>)
 8004808:	4613      	mov	r3, r2
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	440b      	add	r3, r1
 8004812:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 8004816:	2b00      	cmp	r3, #0
 8004818:	d04d      	beq.n	80048b6 <BlockZ2+0x126>
	{
		while (isDownKey() == 1);
 800481a:	bf00      	nop
 800481c:	f001 f952 	bl	8005ac4 <isDownKey>
 8004820:	4603      	mov	r3, r0
 8004822:	2b01      	cmp	r3, #1
 8004824:	d0fa      	beq.n	800481c <BlockZ2+0x8c>
		NewTetromino = true;
 8004826:	4b94      	ldr	r3, [pc, #592]	@ (8004a78 <BlockZ2+0x2e8>)
 8004828:	2201      	movs	r2, #1
 800482a:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 800482c:	4b93      	ldr	r3, [pc, #588]	@ (8004a7c <BlockZ2+0x2ec>)
 800482e:	2200      	movs	r2, #0
 8004830:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 8004832:	4b93      	ldr	r3, [pc, #588]	@ (8004a80 <BlockZ2+0x2f0>)
 8004834:	8818      	ldrh	r0, [r3, #0]
 8004836:	4b8e      	ldr	r3, [pc, #568]	@ (8004a70 <BlockZ2+0x2e0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	4b8b      	ldr	r3, [pc, #556]	@ (8004a6c <BlockZ2+0x2dc>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	1c59      	adds	r1, r3, #1
 8004842:	4604      	mov	r4, r0
 8004844:	488b      	ldr	r0, [pc, #556]	@ (8004a74 <BlockZ2+0x2e4>)
 8004846:	4613      	mov	r3, r2
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	1a9b      	subs	r3, r3, r2
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	440b      	add	r3, r1
 8004850:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] = colour;
 8004854:	4b8a      	ldr	r3, [pc, #552]	@ (8004a80 <BlockZ2+0x2f0>)
 8004856:	8818      	ldrh	r0, [r3, #0]
 8004858:	4b85      	ldr	r3, [pc, #532]	@ (8004a70 <BlockZ2+0x2e0>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	4b83      	ldr	r3, [pc, #524]	@ (8004a6c <BlockZ2+0x2dc>)
 8004860:	6819      	ldr	r1, [r3, #0]
 8004862:	4604      	mov	r4, r0
 8004864:	4883      	ldr	r0, [pc, #524]	@ (8004a74 <BlockZ2+0x2e4>)
 8004866:	4613      	mov	r3, r2
 8004868:	011b      	lsls	r3, r3, #4
 800486a:	1a9b      	subs	r3, r3, r2
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	440b      	add	r3, r1
 8004870:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] = colour;
 8004874:	4b82      	ldr	r3, [pc, #520]	@ (8004a80 <BlockZ2+0x2f0>)
 8004876:	8818      	ldrh	r0, [r3, #0]
 8004878:	4b7d      	ldr	r3, [pc, #500]	@ (8004a70 <BlockZ2+0x2e0>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	4b7b      	ldr	r3, [pc, #492]	@ (8004a6c <BlockZ2+0x2dc>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	1c59      	adds	r1, r3, #1
 8004882:	4604      	mov	r4, r0
 8004884:	487b      	ldr	r0, [pc, #492]	@ (8004a74 <BlockZ2+0x2e4>)
 8004886:	4613      	mov	r3, r2
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	1a9b      	subs	r3, r3, r2
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	440b      	add	r3, r1
 8004890:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] = colour;
 8004894:	4b7a      	ldr	r3, [pc, #488]	@ (8004a80 <BlockZ2+0x2f0>)
 8004896:	8818      	ldrh	r0, [r3, #0]
 8004898:	4b75      	ldr	r3, [pc, #468]	@ (8004a70 <BlockZ2+0x2e0>)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	4b73      	ldr	r3, [pc, #460]	@ (8004a6c <BlockZ2+0x2dc>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	1c99      	adds	r1, r3, #2
 80048a2:	4604      	mov	r4, r0
 80048a4:	4873      	ldr	r0, [pc, #460]	@ (8004a74 <BlockZ2+0x2e4>)
 80048a6:	4613      	mov	r3, r2
 80048a8:	011b      	lsls	r3, r3, #4
 80048aa:	1a9b      	subs	r3, r3, r2
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	440b      	add	r3, r1
 80048b0:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 80048b4:	e002      	b.n	80048bc <BlockZ2+0x12c>
	}
	else CanMoveDown = true;
 80048b6:	4b71      	ldr	r3, [pc, #452]	@ (8004a7c <BlockZ2+0x2ec>)
 80048b8:	2201      	movs	r2, #1
 80048ba:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 80048bc:	4b6c      	ldr	r3, [pc, #432]	@ (8004a70 <BlockZ2+0x2e0>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	4b6a      	ldr	r3, [pc, #424]	@ (8004a6c <BlockZ2+0x2dc>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	1c59      	adds	r1, r3, #1
 80048c6:	486b      	ldr	r0, [pc, #428]	@ (8004a74 <BlockZ2+0x2e4>)
 80048c8:	4613      	mov	r3, r2
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	1a9b      	subs	r3, r3, r2
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	440b      	add	r3, r1
 80048d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d131      	bne.n	800493e <BlockZ2+0x1ae>
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 80048da:	4b65      	ldr	r3, [pc, #404]	@ (8004a70 <BlockZ2+0x2e0>)
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	4b63      	ldr	r3, [pc, #396]	@ (8004a6c <BlockZ2+0x2dc>)
 80048e0:	6819      	ldr	r1, [r3, #0]
 80048e2:	4864      	ldr	r0, [pc, #400]	@ (8004a74 <BlockZ2+0x2e4>)
 80048e4:	4613      	mov	r3, r2
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	1a9b      	subs	r3, r3, r2
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	440b      	add	r3, r1
 80048ee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d123      	bne.n	800493e <BlockZ2+0x1ae>
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 80048f6:	4b5e      	ldr	r3, [pc, #376]	@ (8004a70 <BlockZ2+0x2e0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	1e5a      	subs	r2, r3, #1
 80048fc:	4b5b      	ldr	r3, [pc, #364]	@ (8004a6c <BlockZ2+0x2dc>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	1c59      	adds	r1, r3, #1
 8004902:	485c      	ldr	r0, [pc, #368]	@ (8004a74 <BlockZ2+0x2e4>)
 8004904:	4613      	mov	r3, r2
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	1a9b      	subs	r3, r3, r2
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	440b      	add	r3, r1
 800490e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 8004912:	2b00      	cmp	r3, #0
 8004914:	d113      	bne.n	800493e <BlockZ2+0x1ae>
		tetris[tetrominoLocX - 1][tetrominoLocY + 2] == 0
 8004916:	4b56      	ldr	r3, [pc, #344]	@ (8004a70 <BlockZ2+0x2e0>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	1e5a      	subs	r2, r3, #1
 800491c:	4b53      	ldr	r3, [pc, #332]	@ (8004a6c <BlockZ2+0x2dc>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	1c99      	adds	r1, r3, #2
 8004922:	4854      	ldr	r0, [pc, #336]	@ (8004a74 <BlockZ2+0x2e4>)
 8004924:	4613      	mov	r3, r2
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	1a9b      	subs	r3, r3, r2
 800492a:	005b      	lsls	r3, r3, #1
 800492c:	440b      	add	r3, r1
 800492e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 8004932:	2b00      	cmp	r3, #0
 8004934:	d103      	bne.n	800493e <BlockZ2+0x1ae>
	)
		CanMoveLeft = true;
 8004936:	4b53      	ldr	r3, [pc, #332]	@ (8004a84 <BlockZ2+0x2f4>)
 8004938:	2201      	movs	r2, #1
 800493a:	701a      	strb	r2, [r3, #0]
 800493c:	e002      	b.n	8004944 <BlockZ2+0x1b4>
	else CanMoveLeft = false;
 800493e:	4b51      	ldr	r3, [pc, #324]	@ (8004a84 <BlockZ2+0x2f4>)
 8004940:	2200      	movs	r2, #0
 8004942:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8004944:	4b4a      	ldr	r3, [pc, #296]	@ (8004a70 <BlockZ2+0x2e0>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	1c9a      	adds	r2, r3, #2
 800494a:	4b48      	ldr	r3, [pc, #288]	@ (8004a6c <BlockZ2+0x2dc>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	1c59      	adds	r1, r3, #1
 8004950:	4848      	ldr	r0, [pc, #288]	@ (8004a74 <BlockZ2+0x2e4>)
 8004952:	4613      	mov	r3, r2
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	1a9b      	subs	r3, r3, r2
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	440b      	add	r3, r1
 800495c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d132      	bne.n	80049ca <BlockZ2+0x23a>
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 8004964:	4b42      	ldr	r3, [pc, #264]	@ (8004a70 <BlockZ2+0x2e0>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	1c9a      	adds	r2, r3, #2
 800496a:	4b40      	ldr	r3, [pc, #256]	@ (8004a6c <BlockZ2+0x2dc>)
 800496c:	6819      	ldr	r1, [r3, #0]
 800496e:	4841      	ldr	r0, [pc, #260]	@ (8004a74 <BlockZ2+0x2e4>)
 8004970:	4613      	mov	r3, r2
 8004972:	011b      	lsls	r3, r3, #4
 8004974:	1a9b      	subs	r3, r3, r2
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	440b      	add	r3, r1
 800497a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 800497e:	2b00      	cmp	r3, #0
 8004980:	d123      	bne.n	80049ca <BlockZ2+0x23a>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8004982:	4b3b      	ldr	r3, [pc, #236]	@ (8004a70 <BlockZ2+0x2e0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	4b38      	ldr	r3, [pc, #224]	@ (8004a6c <BlockZ2+0x2dc>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	1c59      	adds	r1, r3, #1
 800498e:	4839      	ldr	r0, [pc, #228]	@ (8004a74 <BlockZ2+0x2e4>)
 8004990:	4613      	mov	r3, r2
 8004992:	011b      	lsls	r3, r3, #4
 8004994:	1a9b      	subs	r3, r3, r2
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	440b      	add	r3, r1
 800499a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d113      	bne.n	80049ca <BlockZ2+0x23a>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0
 80049a2:	4b33      	ldr	r3, [pc, #204]	@ (8004a70 <BlockZ2+0x2e0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	4b30      	ldr	r3, [pc, #192]	@ (8004a6c <BlockZ2+0x2dc>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	1c99      	adds	r1, r3, #2
 80049ae:	4831      	ldr	r0, [pc, #196]	@ (8004a74 <BlockZ2+0x2e4>)
 80049b0:	4613      	mov	r3, r2
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	1a9b      	subs	r3, r3, r2
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	440b      	add	r3, r1
 80049ba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d103      	bne.n	80049ca <BlockZ2+0x23a>
	)
		CanMoveRight = true;
 80049c2:	4b31      	ldr	r3, [pc, #196]	@ (8004a88 <BlockZ2+0x2f8>)
 80049c4:	2201      	movs	r2, #1
 80049c6:	701a      	strb	r2, [r3, #0]
 80049c8:	e002      	b.n	80049d0 <BlockZ2+0x240>
	else CanMoveRight = false;
 80049ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004a88 <BlockZ2+0x2f8>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80049d0:	4b27      	ldr	r3, [pc, #156]	@ (8004a70 <BlockZ2+0x2e0>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	1c5a      	adds	r2, r3, #1
 80049d6:	4b25      	ldr	r3, [pc, #148]	@ (8004a6c <BlockZ2+0x2dc>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	1c59      	adds	r1, r3, #1
 80049dc:	4825      	ldr	r0, [pc, #148]	@ (8004a74 <BlockZ2+0x2e4>)
 80049de:	4613      	mov	r3, r2
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	440b      	add	r3, r1
 80049e8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d132      	bne.n	8004a56 <BlockZ2+0x2c6>
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 80049f0:	4b1f      	ldr	r3, [pc, #124]	@ (8004a70 <BlockZ2+0x2e0>)
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	4b1d      	ldr	r3, [pc, #116]	@ (8004a6c <BlockZ2+0x2dc>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	1c59      	adds	r1, r3, #1
 80049fa:	481e      	ldr	r0, [pc, #120]	@ (8004a74 <BlockZ2+0x2e4>)
 80049fc:	4613      	mov	r3, r2
 80049fe:	011b      	lsls	r3, r3, #4
 8004a00:	1a9b      	subs	r3, r3, r2
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	440b      	add	r3, r1
 8004a06:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d123      	bne.n	8004a56 <BlockZ2+0x2c6>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 8004a0e:	4b18      	ldr	r3, [pc, #96]	@ (8004a70 <BlockZ2+0x2e0>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	4b15      	ldr	r3, [pc, #84]	@ (8004a6c <BlockZ2+0x2dc>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	1c99      	adds	r1, r3, #2
 8004a1a:	4816      	ldr	r0, [pc, #88]	@ (8004a74 <BlockZ2+0x2e4>)
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	440b      	add	r3, r1
 8004a26:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d113      	bne.n	8004a56 <BlockZ2+0x2c6>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0)
 8004a2e:	4b10      	ldr	r3, [pc, #64]	@ (8004a70 <BlockZ2+0x2e0>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	1c9a      	adds	r2, r3, #2
 8004a34:	4b0d      	ldr	r3, [pc, #52]	@ (8004a6c <BlockZ2+0x2dc>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	1c99      	adds	r1, r3, #2
 8004a3a:	480e      	ldr	r0, [pc, #56]	@ (8004a74 <BlockZ2+0x2e4>)
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	1a9b      	subs	r3, r3, r2
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	440b      	add	r3, r1
 8004a46:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d103      	bne.n	8004a56 <BlockZ2+0x2c6>
		CanRotate = true;
 8004a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8004a8c <BlockZ2+0x2fc>)
 8004a50:	2201      	movs	r2, #1
 8004a52:	701a      	strb	r2, [r3, #0]
 8004a54:	e003      	b.n	8004a5e <BlockZ2+0x2ce>
	else CanRotate = false;
 8004a56:	4b0d      	ldr	r3, [pc, #52]	@ (8004a8c <BlockZ2+0x2fc>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX, tetrominoLocY + 3); cout << char(248);
}
 8004a5c:	bf00      	nop
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd90      	pop	{r4, r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000fec 	.word	0x20000fec
 8004a6c:	20000fe8 	.word	0x20000fe8
 8004a70:	20000fe4 	.word	0x20000fe4
 8004a74:	200001d0 	.word	0x200001d0
 8004a78:	2000000c 	.word	0x2000000c
 8004a7c:	2000000f 	.word	0x2000000f
 8004a80:	20000ff0 	.word	0x20000ff0
 8004a84:	2000000e 	.word	0x2000000e
 8004a88:	2000000d 	.word	0x2000000d
 8004a8c:	20000010 	.word	0x20000010

08004a90 <PrintTetromino>:

void PrintTetromino()
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
	switch (CurrentState)
 8004a94:	4b6d      	ldr	r3, [pc, #436]	@ (8004c4c <PrintTetromino+0x1bc>)
 8004a96:	881b      	ldrh	r3, [r3, #0]
 8004a98:	2b12      	cmp	r3, #18
 8004a9a:	f200 80d4 	bhi.w	8004c46 <PrintTetromino+0x1b6>
 8004a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa4 <PrintTetromino+0x14>)
 8004aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa4:	08004af1 	.word	0x08004af1
 8004aa8:	08004b03 	.word	0x08004b03
 8004aac:	08004b15 	.word	0x08004b15
 8004ab0:	08004b27 	.word	0x08004b27
 8004ab4:	08004b39 	.word	0x08004b39
 8004ab8:	08004b4b 	.word	0x08004b4b
 8004abc:	08004b5d 	.word	0x08004b5d
 8004ac0:	08004b6f 	.word	0x08004b6f
 8004ac4:	08004b81 	.word	0x08004b81
 8004ac8:	08004b93 	.word	0x08004b93
 8004acc:	08004ba5 	.word	0x08004ba5
 8004ad0:	08004bb7 	.word	0x08004bb7
 8004ad4:	08004bc9 	.word	0x08004bc9
 8004ad8:	08004bdb 	.word	0x08004bdb
 8004adc:	08004bed 	.word	0x08004bed
 8004ae0:	08004bff 	.word	0x08004bff
 8004ae4:	08004c11 	.word	0x08004c11
 8004ae8:	08004c23 	.word	0x08004c23
 8004aec:	08004c35 	.word	0x08004c35
	{
	case 0: { BlockO(tetrominoLocX, tetrominoLocY); break; }
 8004af0:	4b57      	ldr	r3, [pc, #348]	@ (8004c50 <PrintTetromino+0x1c0>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a57      	ldr	r2, [pc, #348]	@ (8004c54 <PrintTetromino+0x1c4>)
 8004af6:	6812      	ldr	r2, [r2, #0]
 8004af8:	4611      	mov	r1, r2
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fe fa1c 	bl	8002f38 <BlockO>
 8004b00:	e0a1      	b.n	8004c46 <PrintTetromino+0x1b6>
	case 1: { BlockI1(tetrominoLocX, tetrominoLocY); break; }
 8004b02:	4b53      	ldr	r3, [pc, #332]	@ (8004c50 <PrintTetromino+0x1c0>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a53      	ldr	r2, [pc, #332]	@ (8004c54 <PrintTetromino+0x1c4>)
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	4611      	mov	r1, r2
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7fc fa9f 	bl	8001050 <BlockI1>
 8004b12:	e098      	b.n	8004c46 <PrintTetromino+0x1b6>
	case 2: { BlockI2(tetrominoLocX, tetrominoLocY); break; }
 8004b14:	4b4e      	ldr	r3, [pc, #312]	@ (8004c50 <PrintTetromino+0x1c0>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a4e      	ldr	r2, [pc, #312]	@ (8004c54 <PrintTetromino+0x1c4>)
 8004b1a:	6812      	ldr	r2, [r2, #0]
 8004b1c:	4611      	mov	r1, r2
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fc fc46 	bl	80013b0 <BlockI2>
 8004b24:	e08f      	b.n	8004c46 <PrintTetromino+0x1b6>
	case 3: { BlockJ1(tetrominoLocX, tetrominoLocY); break; }
 8004b26:	4b4a      	ldr	r3, [pc, #296]	@ (8004c50 <PrintTetromino+0x1c0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a4a      	ldr	r2, [pc, #296]	@ (8004c54 <PrintTetromino+0x1c4>)
 8004b2c:	6812      	ldr	r2, [r2, #0]
 8004b2e:	4611      	mov	r1, r2
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fc fdb1 	bl	8001698 <BlockJ1>
 8004b36:	e086      	b.n	8004c46 <PrintTetromino+0x1b6>
	case 4: { BlockJ2(tetrominoLocX, tetrominoLocY); break; }
 8004b38:	4b45      	ldr	r3, [pc, #276]	@ (8004c50 <PrintTetromino+0x1c0>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a45      	ldr	r2, [pc, #276]	@ (8004c54 <PrintTetromino+0x1c4>)
 8004b3e:	6812      	ldr	r2, [r2, #0]
 8004b40:	4611      	mov	r1, r2
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fc ff40 	bl	80019c8 <BlockJ2>
 8004b48:	e07d      	b.n	8004c46 <PrintTetromino+0x1b6>
	case 5: { BlockJ3(tetrominoLocX, tetrominoLocY); break; }
 8004b4a:	4b41      	ldr	r3, [pc, #260]	@ (8004c50 <PrintTetromino+0x1c0>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a41      	ldr	r2, [pc, #260]	@ (8004c54 <PrintTetromino+0x1c4>)
 8004b50:	6812      	ldr	r2, [r2, #0]
 8004b52:	4611      	mov	r1, r2
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fd f8b7 	bl	8001cc8 <BlockJ3>
 8004b5a:	e074      	b.n	8004c46 <PrintTetromino+0x1b6>
	case 6: { BlockJ4(tetrominoLocX, tetrominoLocY); break; }
 8004b5c:	4b3c      	ldr	r3, [pc, #240]	@ (8004c50 <PrintTetromino+0x1c0>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a3c      	ldr	r2, [pc, #240]	@ (8004c54 <PrintTetromino+0x1c4>)
 8004b62:	6812      	ldr	r2, [r2, #0]
 8004b64:	4611      	mov	r1, r2
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fd fa3e 	bl	8001fe8 <BlockJ4>
 8004b6c:	e06b      	b.n	8004c46 <PrintTetromino+0x1b6>
	case 7: { BlockL1(tetrominoLocX, tetrominoLocY); break; }
 8004b6e:	4b38      	ldr	r3, [pc, #224]	@ (8004c50 <PrintTetromino+0x1c0>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a38      	ldr	r2, [pc, #224]	@ (8004c54 <PrintTetromino+0x1c4>)
 8004b74:	6812      	ldr	r2, [r2, #0]
 8004b76:	4611      	mov	r1, r2
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7fd fbb5 	bl	80022e8 <BlockL1>
 8004b7e:	e062      	b.n	8004c46 <PrintTetromino+0x1b6>
	case 8: { BlockL2(tetrominoLocX, tetrominoLocY); break; }
 8004b80:	4b33      	ldr	r3, [pc, #204]	@ (8004c50 <PrintTetromino+0x1c0>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a33      	ldr	r2, [pc, #204]	@ (8004c54 <PrintTetromino+0x1c4>)
 8004b86:	6812      	ldr	r2, [r2, #0]
 8004b88:	4611      	mov	r1, r2
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fd fd42 	bl	8002614 <BlockL2>
 8004b90:	e059      	b.n	8004c46 <PrintTetromino+0x1b6>
	case 9: { BlockL3(tetrominoLocX, tetrominoLocY); break; }
 8004b92:	4b2f      	ldr	r3, [pc, #188]	@ (8004c50 <PrintTetromino+0x1c0>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a2f      	ldr	r2, [pc, #188]	@ (8004c54 <PrintTetromino+0x1c4>)
 8004b98:	6812      	ldr	r2, [r2, #0]
 8004b9a:	4611      	mov	r1, r2
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fd febd 	bl	800291c <BlockL3>
 8004ba2:	e050      	b.n	8004c46 <PrintTetromino+0x1b6>
	case 10: { BlockL4(tetrominoLocX, tetrominoLocY); break; }
 8004ba4:	4b2a      	ldr	r3, [pc, #168]	@ (8004c50 <PrintTetromino+0x1c0>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a2a      	ldr	r2, [pc, #168]	@ (8004c54 <PrintTetromino+0x1c4>)
 8004baa:	6812      	ldr	r2, [r2, #0]
 8004bac:	4611      	mov	r1, r2
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fe f846 	bl	8002c40 <BlockL4>
 8004bb4:	e047      	b.n	8004c46 <PrintTetromino+0x1b6>
	case 11: { BlockS1(tetrominoLocX, tetrominoLocY); break; }
 8004bb6:	4b26      	ldr	r3, [pc, #152]	@ (8004c50 <PrintTetromino+0x1c0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a26      	ldr	r2, [pc, #152]	@ (8004c54 <PrintTetromino+0x1c4>)
 8004bbc:	6812      	ldr	r2, [r2, #0]
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fe fb01 	bl	80031c8 <BlockS1>
 8004bc6:	e03e      	b.n	8004c46 <PrintTetromino+0x1b6>
	case 12: { BlockS2(tetrominoLocX, tetrominoLocY); break; }
 8004bc8:	4b21      	ldr	r3, [pc, #132]	@ (8004c50 <PrintTetromino+0x1c0>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a21      	ldr	r2, [pc, #132]	@ (8004c54 <PrintTetromino+0x1c4>)
 8004bce:	6812      	ldr	r2, [r2, #0]
 8004bd0:	4611      	mov	r1, r2
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fe fc90 	bl	80034f8 <BlockS2>
 8004bd8:	e035      	b.n	8004c46 <PrintTetromino+0x1b6>
	case 13: { BlockT1(tetrominoLocX, tetrominoLocY); break; }
 8004bda:	4b1d      	ldr	r3, [pc, #116]	@ (8004c50 <PrintTetromino+0x1c0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a1d      	ldr	r2, [pc, #116]	@ (8004c54 <PrintTetromino+0x1c4>)
 8004be0:	6812      	ldr	r2, [r2, #0]
 8004be2:	4611      	mov	r1, r2
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7fe fe0d 	bl	8003804 <BlockT1>
 8004bea:	e02c      	b.n	8004c46 <PrintTetromino+0x1b6>
	case 14: { BlockT2(tetrominoLocX, tetrominoLocY); break; }
 8004bec:	4b18      	ldr	r3, [pc, #96]	@ (8004c50 <PrintTetromino+0x1c0>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a18      	ldr	r2, [pc, #96]	@ (8004c54 <PrintTetromino+0x1c4>)
 8004bf2:	6812      	ldr	r2, [r2, #0]
 8004bf4:	4611      	mov	r1, r2
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fe ff9c 	bl	8003b34 <BlockT2>
 8004bfc:	e023      	b.n	8004c46 <PrintTetromino+0x1b6>
	case 15: { BlockT3(tetrominoLocX, tetrominoLocY); break; }
 8004bfe:	4b14      	ldr	r3, [pc, #80]	@ (8004c50 <PrintTetromino+0x1c0>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a14      	ldr	r2, [pc, #80]	@ (8004c54 <PrintTetromino+0x1c4>)
 8004c04:	6812      	ldr	r2, [r2, #0]
 8004c06:	4611      	mov	r1, r2
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff f917 	bl	8003e3c <BlockT3>
 8004c0e:	e01a      	b.n	8004c46 <PrintTetromino+0x1b6>
	case 16: { BlockT4(tetrominoLocX, tetrominoLocY); break; }
 8004c10:	4b0f      	ldr	r3, [pc, #60]	@ (8004c50 <PrintTetromino+0x1c0>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a0f      	ldr	r2, [pc, #60]	@ (8004c54 <PrintTetromino+0x1c4>)
 8004c16:	6812      	ldr	r2, [r2, #0]
 8004c18:	4611      	mov	r1, r2
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff faa0 	bl	8004160 <BlockT4>
 8004c20:	e011      	b.n	8004c46 <PrintTetromino+0x1b6>
	case 17: { BlockZ1(tetrominoLocX, tetrominoLocY); break; }
 8004c22:	4b0b      	ldr	r3, [pc, #44]	@ (8004c50 <PrintTetromino+0x1c0>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a0b      	ldr	r2, [pc, #44]	@ (8004c54 <PrintTetromino+0x1c4>)
 8004c28:	6812      	ldr	r2, [r2, #0]
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff fc19 	bl	8004464 <BlockZ1>
 8004c32:	e008      	b.n	8004c46 <PrintTetromino+0x1b6>
	case 18: { BlockZ2(tetrominoLocX, tetrominoLocY); break; }
 8004c34:	4b06      	ldr	r3, [pc, #24]	@ (8004c50 <PrintTetromino+0x1c0>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a06      	ldr	r2, [pc, #24]	@ (8004c54 <PrintTetromino+0x1c4>)
 8004c3a:	6812      	ldr	r2, [r2, #0]
 8004c3c:	4611      	mov	r1, r2
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7ff fda6 	bl	8004790 <BlockZ2>
 8004c44:	bf00      	nop
	}
}
 8004c46:	bf00      	nop
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20000fec 	.word	0x20000fec
 8004c50:	20000fe4 	.word	0x20000fe4
 8004c54:	20000fe8 	.word	0x20000fe8

08004c58 <PrintNextPiece>:

void PrintNextPiece(int x, int y)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
	// Delete previous printed NEXT PIECE
	Colour(0);
 8004c62:	2000      	movs	r0, #0
 8004c64:	f000 ffd4 	bl	8005c10 <Colour>
	PrintXY(29, 4); PrintXY(30, 4); PrintXY(31, 4); PrintXY(32, 4); PrintXY(33, 4);
 8004c68:	2104      	movs	r1, #4
 8004c6a:	201d      	movs	r0, #29
 8004c6c:	f000 ffb0 	bl	8005bd0 <PrintXY>
 8004c70:	2104      	movs	r1, #4
 8004c72:	201e      	movs	r0, #30
 8004c74:	f000 ffac 	bl	8005bd0 <PrintXY>
 8004c78:	2104      	movs	r1, #4
 8004c7a:	201f      	movs	r0, #31
 8004c7c:	f000 ffa8 	bl	8005bd0 <PrintXY>
 8004c80:	2104      	movs	r1, #4
 8004c82:	2020      	movs	r0, #32
 8004c84:	f000 ffa4 	bl	8005bd0 <PrintXY>
 8004c88:	2104      	movs	r1, #4
 8004c8a:	2021      	movs	r0, #33	@ 0x21
 8004c8c:	f000 ffa0 	bl	8005bd0 <PrintXY>
	PrintXY(29, 5); PrintXY(30, 5); PrintXY(31,5); PrintXY(32, 5); PrintXY(33, 5);
 8004c90:	2105      	movs	r1, #5
 8004c92:	201d      	movs	r0, #29
 8004c94:	f000 ff9c 	bl	8005bd0 <PrintXY>
 8004c98:	2105      	movs	r1, #5
 8004c9a:	201e      	movs	r0, #30
 8004c9c:	f000 ff98 	bl	8005bd0 <PrintXY>
 8004ca0:	2105      	movs	r1, #5
 8004ca2:	201f      	movs	r0, #31
 8004ca4:	f000 ff94 	bl	8005bd0 <PrintXY>
 8004ca8:	2105      	movs	r1, #5
 8004caa:	2020      	movs	r0, #32
 8004cac:	f000 ff90 	bl	8005bd0 <PrintXY>
 8004cb0:	2105      	movs	r1, #5
 8004cb2:	2021      	movs	r0, #33	@ 0x21
 8004cb4:	f000 ff8c 	bl	8005bd0 <PrintXY>
	PrintXY(29, 6); PrintXY(30, 6); PrintXY(31, 6); PrintXY(32, 6); PrintXY(33, 6);
 8004cb8:	2106      	movs	r1, #6
 8004cba:	201d      	movs	r0, #29
 8004cbc:	f000 ff88 	bl	8005bd0 <PrintXY>
 8004cc0:	2106      	movs	r1, #6
 8004cc2:	201e      	movs	r0, #30
 8004cc4:	f000 ff84 	bl	8005bd0 <PrintXY>
 8004cc8:	2106      	movs	r1, #6
 8004cca:	201f      	movs	r0, #31
 8004ccc:	f000 ff80 	bl	8005bd0 <PrintXY>
 8004cd0:	2106      	movs	r1, #6
 8004cd2:	2020      	movs	r0, #32
 8004cd4:	f000 ff7c 	bl	8005bd0 <PrintXY>
 8004cd8:	2106      	movs	r1, #6
 8004cda:	2021      	movs	r0, #33	@ 0x21
 8004cdc:	f000 ff78 	bl	8005bd0 <PrintXY>
	PrintXY(29, 7); PrintXY(30, 7); PrintXY(31, 7); PrintXY(32, 7); PrintXY(33, 7);
 8004ce0:	2107      	movs	r1, #7
 8004ce2:	201d      	movs	r0, #29
 8004ce4:	f000 ff74 	bl	8005bd0 <PrintXY>
 8004ce8:	2107      	movs	r1, #7
 8004cea:	201e      	movs	r0, #30
 8004cec:	f000 ff70 	bl	8005bd0 <PrintXY>
 8004cf0:	2107      	movs	r1, #7
 8004cf2:	201f      	movs	r0, #31
 8004cf4:	f000 ff6c 	bl	8005bd0 <PrintXY>
 8004cf8:	2107      	movs	r1, #7
 8004cfa:	2020      	movs	r0, #32
 8004cfc:	f000 ff68 	bl	8005bd0 <PrintXY>
 8004d00:	2107      	movs	r1, #7
 8004d02:	2021      	movs	r0, #33	@ 0x21
 8004d04:	f000 ff64 	bl	8005bd0 <PrintXY>
	PrintXY(29, 8); PrintXY(30, 8); PrintXY(31, 8); PrintXY(32, 8); PrintXY(33, 8);
 8004d08:	2108      	movs	r1, #8
 8004d0a:	201d      	movs	r0, #29
 8004d0c:	f000 ff60 	bl	8005bd0 <PrintXY>
 8004d10:	2108      	movs	r1, #8
 8004d12:	201e      	movs	r0, #30
 8004d14:	f000 ff5c 	bl	8005bd0 <PrintXY>
 8004d18:	2108      	movs	r1, #8
 8004d1a:	201f      	movs	r0, #31
 8004d1c:	f000 ff58 	bl	8005bd0 <PrintXY>
 8004d20:	2108      	movs	r1, #8
 8004d22:	2020      	movs	r0, #32
 8004d24:	f000 ff54 	bl	8005bd0 <PrintXY>
 8004d28:	2108      	movs	r1, #8
 8004d2a:	2021      	movs	r0, #33	@ 0x21
 8004d2c:	f000 ff50 	bl	8005bd0 <PrintXY>
	Colour(6);
 8004d30:	2006      	movs	r0, #6
 8004d32:	f000 ff6d 	bl	8005c10 <Colour>

	switch (NextPiece)
 8004d36:	4bbb      	ldr	r3, [pc, #748]	@ (8005024 <PrintNextPiece+0x3cc>)
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	2b12      	cmp	r3, #18
 8004d3c:	f200 8264 	bhi.w	8005208 <PrintNextPiece+0x5b0>
 8004d40:	a201      	add	r2, pc, #4	@ (adr r2, 8004d48 <PrintNextPiece+0xf0>)
 8004d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d46:	bf00      	nop
 8004d48:	08004d95 	.word	0x08004d95
 8004d4c:	08004dd7 	.word	0x08004dd7
 8004d50:	08004e15 	.word	0x08004e15
 8004d54:	08004e53 	.word	0x08004e53
 8004d58:	08004e91 	.word	0x08004e91
 8004d5c:	08004ecb 	.word	0x08004ecb
 8004d60:	08004f01 	.word	0x08004f01
 8004d64:	08004f3b 	.word	0x08004f3b
 8004d68:	08004f75 	.word	0x08004f75
 8004d6c:	08004fb3 	.word	0x08004fb3
 8004d70:	08004fed 	.word	0x08004fed
 8004d74:	08005029 	.word	0x08005029
 8004d78:	08005067 	.word	0x08005067
 8004d7c:	080050a5 	.word	0x080050a5
 8004d80:	080050e3 	.word	0x080050e3
 8004d84:	08005121 	.word	0x08005121
 8004d88:	0800515b 	.word	0x0800515b
 8004d8c:	08005195 	.word	0x08005195
 8004d90:	080051d3 	.word	0x080051d3
	{
	case 0:
	{
		PrintXY(x + 1, y + 1);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	4610      	mov	r0, r2
 8004da0:	f000 ff16 	bl	8005bd0 <PrintXY>
		PrintXY(x + 2, y + 1);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	1c9a      	adds	r2, r3, #2
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	3301      	adds	r3, #1
 8004dac:	4619      	mov	r1, r3
 8004dae:	4610      	mov	r0, r2
 8004db0:	f000 ff0e 	bl	8005bd0 <PrintXY>
		PrintXY(x + 1, y + 2);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	3302      	adds	r3, #2
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	f000 ff06 	bl	8005bd0 <PrintXY>
		PrintXY(x + 2, y + 2);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	1c9a      	adds	r2, r3, #2
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	3302      	adds	r3, #2
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4610      	mov	r0, r2
 8004dd0:	f000 fefe 	bl	8005bd0 <PrintXY>
		break;
 8004dd4:	e218      	b.n	8005208 <PrintNextPiece+0x5b0>
	}
	case 1:
	{
		PrintXY(x + 1, y + 1);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	4619      	mov	r1, r3
 8004de0:	4610      	mov	r0, r2
 8004de2:	f000 fef5 	bl	8005bd0 <PrintXY>
		PrintXY(x, y + 1);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	3301      	adds	r3, #1
 8004dea:	4619      	mov	r1, r3
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 feef 	bl	8005bd0 <PrintXY>
		PrintXY(x + 2, y + 1);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	1c9a      	adds	r2, r3, #2
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	f000 fee7 	bl	8005bd0 <PrintXY>
		PrintXY(x + 3, y + 1);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	1cda      	adds	r2, r3, #3
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4610      	mov	r0, r2
 8004e0e:	f000 fedf 	bl	8005bd0 <PrintXY>
		break;
 8004e12:	e1f9      	b.n	8005208 <PrintNextPiece+0x5b0>
	}
	case 2:
	{
		PrintXY(x + 1, y + 1);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4610      	mov	r0, r2
 8004e20:	f000 fed6 	bl	8005bd0 <PrintXY>
		PrintXY(x + 1, y);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3301      	adds	r3, #1
 8004e28:	6839      	ldr	r1, [r7, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 fed0 	bl	8005bd0 <PrintXY>
		PrintXY(x + 1, y + 2);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	3302      	adds	r3, #2
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	f000 fec8 	bl	8005bd0 <PrintXY>
		PrintXY(x + 1, y + 3);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	3303      	adds	r3, #3
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4610      	mov	r0, r2
 8004e4c:	f000 fec0 	bl	8005bd0 <PrintXY>
		break;
 8004e50:	e1da      	b.n	8005208 <PrintNextPiece+0x5b0>
	}
	case 3:
	{
		PrintXY(x + 1, y + 1);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	f000 feb7 	bl	8005bd0 <PrintXY>
		PrintXY(x, y + 1);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	3301      	adds	r3, #1
 8004e66:	4619      	mov	r1, r3
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 feb1 	bl	8005bd0 <PrintXY>
		PrintXY(x + 2, y + 2);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	1c9a      	adds	r2, r3, #2
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	3302      	adds	r3, #2
 8004e76:	4619      	mov	r1, r3
 8004e78:	4610      	mov	r0, r2
 8004e7a:	f000 fea9 	bl	8005bd0 <PrintXY>
		PrintXY(x + 2, y + 1);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	1c9a      	adds	r2, r3, #2
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	3301      	adds	r3, #1
 8004e86:	4619      	mov	r1, r3
 8004e88:	4610      	mov	r0, r2
 8004e8a:	f000 fea1 	bl	8005bd0 <PrintXY>
		break;
 8004e8e:	e1bb      	b.n	8005208 <PrintNextPiece+0x5b0>
	}
	case 4:
	{
		PrintXY(x + 1, y + 1);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	3301      	adds	r3, #1
 8004e98:	4619      	mov	r1, r3
 8004e9a:	4610      	mov	r0, r2
 8004e9c:	f000 fe98 	bl	8005bd0 <PrintXY>
		PrintXY(x + 1, y);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	6839      	ldr	r1, [r7, #0]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fe92 	bl	8005bd0 <PrintXY>
		PrintXY(x + 1, y + 2);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	3302      	adds	r3, #2
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	f000 fe8a 	bl	8005bd0 <PrintXY>
		PrintXY(x, y + 2);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	3302      	adds	r3, #2
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fe84 	bl	8005bd0 <PrintXY>
		break;
 8004ec8:	e19e      	b.n	8005208 <PrintNextPiece+0x5b0>
	}
	case 5:
	{
		PrintXY(x + 1, y + 1);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	f000 fe7b 	bl	8005bd0 <PrintXY>
		PrintXY(x, y + 1);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	3301      	adds	r3, #1
 8004ede:	4619      	mov	r1, r3
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fe75 	bl	8005bd0 <PrintXY>
		PrintXY(x, y);
 8004ee6:	6839      	ldr	r1, [r7, #0]
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 fe71 	bl	8005bd0 <PrintXY>
		PrintXY(x + 2, y + 1);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	1c9a      	adds	r2, r3, #2
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	4610      	mov	r0, r2
 8004efa:	f000 fe69 	bl	8005bd0 <PrintXY>
		break;
 8004efe:	e183      	b.n	8005208 <PrintNextPiece+0x5b0>
	}
	case 6:
	{
		PrintXY(x + 1, y + 1);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	3301      	adds	r3, #1
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	f000 fe60 	bl	8005bd0 <PrintXY>
		PrintXY(x + 1, y);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3301      	adds	r3, #1
 8004f14:	6839      	ldr	r1, [r7, #0]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 fe5a 	bl	8005bd0 <PrintXY>
		PrintXY(x + 2, y);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3302      	adds	r3, #2
 8004f20:	6839      	ldr	r1, [r7, #0]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fe54 	bl	8005bd0 <PrintXY>
		PrintXY(x + 1, y + 2);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	3302      	adds	r3, #2
 8004f30:	4619      	mov	r1, r3
 8004f32:	4610      	mov	r0, r2
 8004f34:	f000 fe4c 	bl	8005bd0 <PrintXY>
		break;
 8004f38:	e166      	b.n	8005208 <PrintNextPiece+0x5b0>
	}
	case 7:
	{
		PrintXY(x + 1, y + 1);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	3301      	adds	r3, #1
 8004f42:	4619      	mov	r1, r3
 8004f44:	4610      	mov	r0, r2
 8004f46:	f000 fe43 	bl	8005bd0 <PrintXY>
		PrintXY(x, y + 1);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	4619      	mov	r1, r3
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 fe3d 	bl	8005bd0 <PrintXY>
		PrintXY(x + 2, y + 1);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	1c9a      	adds	r2, r3, #2
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	4619      	mov	r1, r3
 8004f60:	4610      	mov	r0, r2
 8004f62:	f000 fe35 	bl	8005bd0 <PrintXY>
		PrintXY(x, y + 2);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	3302      	adds	r3, #2
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fe2f 	bl	8005bd0 <PrintXY>
		break;
 8004f72:	e149      	b.n	8005208 <PrintNextPiece+0x5b0>
	}
	case 8:
	{
		PrintXY(x + 1, y + 1);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4610      	mov	r0, r2
 8004f80:	f000 fe26 	bl	8005bd0 <PrintXY>
		PrintXY(x + 1, y);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3301      	adds	r3, #1
 8004f88:	6839      	ldr	r1, [r7, #0]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 fe20 	bl	8005bd0 <PrintXY>
		PrintXY(x + 1, y + 2);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	3302      	adds	r3, #2
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	f000 fe18 	bl	8005bd0 <PrintXY>
		PrintXY(x + 2, y + 2);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	1c9a      	adds	r2, r3, #2
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	3302      	adds	r3, #2
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4610      	mov	r0, r2
 8004fac:	f000 fe10 	bl	8005bd0 <PrintXY>
		break;
 8004fb0:	e12a      	b.n	8005208 <PrintNextPiece+0x5b0>
	}
	case 9:
	{
		PrintXY(x + 1, y + 1);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	f000 fe07 	bl	8005bd0 <PrintXY>
		PrintXY(x, y + 1);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 fe01 	bl	8005bd0 <PrintXY>
		PrintXY(x + 2, y + 1);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	1c9a      	adds	r2, r3, #2
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	4610      	mov	r0, r2
 8004fda:	f000 fdf9 	bl	8005bd0 <PrintXY>
		PrintXY(x + 2, y);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3302      	adds	r3, #2
 8004fe2:	6839      	ldr	r1, [r7, #0]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 fdf3 	bl	8005bd0 <PrintXY>
		break;
 8004fea:	e10d      	b.n	8005208 <PrintNextPiece+0x5b0>
	}
	case 10:
	{
		PrintXY(x + 1, y + 1);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	f000 fdea 	bl	8005bd0 <PrintXY>
		PrintXY(x + 1, y);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3301      	adds	r3, #1
 8005000:	6839      	ldr	r1, [r7, #0]
 8005002:	4618      	mov	r0, r3
 8005004:	f000 fde4 	bl	8005bd0 <PrintXY>
		PrintXY(x + 1, y + 2);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	3302      	adds	r3, #2
 8005010:	4619      	mov	r1, r3
 8005012:	4610      	mov	r0, r2
 8005014:	f000 fddc 	bl	8005bd0 <PrintXY>
		PrintXY(x, y);
 8005018:	6839      	ldr	r1, [r7, #0]
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fdd8 	bl	8005bd0 <PrintXY>
		break;
 8005020:	e0f2      	b.n	8005208 <PrintNextPiece+0x5b0>
 8005022:	bf00      	nop
 8005024:	20000fee 	.word	0x20000fee
	}
	case 11:
	{
		PrintXY(x + 1, y + 1);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	3301      	adds	r3, #1
 8005030:	4619      	mov	r1, r3
 8005032:	4610      	mov	r0, r2
 8005034:	f000 fdcc 	bl	8005bd0 <PrintXY>
		PrintXY(x + 2, y + 1);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	1c9a      	adds	r2, r3, #2
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	3301      	adds	r3, #1
 8005040:	4619      	mov	r1, r3
 8005042:	4610      	mov	r0, r2
 8005044:	f000 fdc4 	bl	8005bd0 <PrintXY>
		PrintXY(x + 1, y + 2);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	3302      	adds	r3, #2
 8005050:	4619      	mov	r1, r3
 8005052:	4610      	mov	r0, r2
 8005054:	f000 fdbc 	bl	8005bd0 <PrintXY>
		PrintXY(x, y + 2);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	3302      	adds	r3, #2
 800505c:	4619      	mov	r1, r3
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fdb6 	bl	8005bd0 <PrintXY>
		break;
 8005064:	e0d0      	b.n	8005208 <PrintNextPiece+0x5b0>
	}
	case 12:
	{
		PrintXY(x + 1, y + 1);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	3301      	adds	r3, #1
 800506e:	4619      	mov	r1, r3
 8005070:	4610      	mov	r0, r2
 8005072:	f000 fdad 	bl	8005bd0 <PrintXY>
		PrintXY(x + 1, y);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	3301      	adds	r3, #1
 800507a:	6839      	ldr	r1, [r7, #0]
 800507c:	4618      	mov	r0, r3
 800507e:	f000 fda7 	bl	8005bd0 <PrintXY>
		PrintXY(x + 2, y + 1);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	1c9a      	adds	r2, r3, #2
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	3301      	adds	r3, #1
 800508a:	4619      	mov	r1, r3
 800508c:	4610      	mov	r0, r2
 800508e:	f000 fd9f 	bl	8005bd0 <PrintXY>
		PrintXY(x + 2, y + 2);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	1c9a      	adds	r2, r3, #2
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	3302      	adds	r3, #2
 800509a:	4619      	mov	r1, r3
 800509c:	4610      	mov	r0, r2
 800509e:	f000 fd97 	bl	8005bd0 <PrintXY>
		break;
 80050a2:	e0b1      	b.n	8005208 <PrintNextPiece+0x5b0>
	}
	case 13:
	{
		PrintXY(x + 1, y + 1);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	1c5a      	adds	r2, r3, #1
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	3301      	adds	r3, #1
 80050ac:	4619      	mov	r1, r3
 80050ae:	4610      	mov	r0, r2
 80050b0:	f000 fd8e 	bl	8005bd0 <PrintXY>
		PrintXY(x, y + 1);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	3301      	adds	r3, #1
 80050b8:	4619      	mov	r1, r3
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fd88 	bl	8005bd0 <PrintXY>
		PrintXY(x + 2, y + 1);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	1c9a      	adds	r2, r3, #2
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	3301      	adds	r3, #1
 80050c8:	4619      	mov	r1, r3
 80050ca:	4610      	mov	r0, r2
 80050cc:	f000 fd80 	bl	8005bd0 <PrintXY>
		PrintXY(x + 1, y + 2);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	3302      	adds	r3, #2
 80050d8:	4619      	mov	r1, r3
 80050da:	4610      	mov	r0, r2
 80050dc:	f000 fd78 	bl	8005bd0 <PrintXY>
		break;
 80050e0:	e092      	b.n	8005208 <PrintNextPiece+0x5b0>
	}
	case 14:
	{
		PrintXY(x + 1, y + 1);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	3301      	adds	r3, #1
 80050ea:	4619      	mov	r1, r3
 80050ec:	4610      	mov	r0, r2
 80050ee:	f000 fd6f 	bl	8005bd0 <PrintXY>
		PrintXY(x + 1, y);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3301      	adds	r3, #1
 80050f6:	6839      	ldr	r1, [r7, #0]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 fd69 	bl	8005bd0 <PrintXY>
		PrintXY(x + 1, y + 2);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	1c5a      	adds	r2, r3, #1
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	3302      	adds	r3, #2
 8005106:	4619      	mov	r1, r3
 8005108:	4610      	mov	r0, r2
 800510a:	f000 fd61 	bl	8005bd0 <PrintXY>
		PrintXY(x + 2, y + 1);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	1c9a      	adds	r2, r3, #2
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	3301      	adds	r3, #1
 8005116:	4619      	mov	r1, r3
 8005118:	4610      	mov	r0, r2
 800511a:	f000 fd59 	bl	8005bd0 <PrintXY>
		break;
 800511e:	e073      	b.n	8005208 <PrintNextPiece+0x5b0>
	}
	case 15:
	{
		PrintXY(x + 1, y + 1);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	3301      	adds	r3, #1
 8005128:	4619      	mov	r1, r3
 800512a:	4610      	mov	r0, r2
 800512c:	f000 fd50 	bl	8005bd0 <PrintXY>
		PrintXY(x, y + 1);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	3301      	adds	r3, #1
 8005134:	4619      	mov	r1, r3
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 fd4a 	bl	8005bd0 <PrintXY>
		PrintXY(x + 1, y);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3301      	adds	r3, #1
 8005140:	6839      	ldr	r1, [r7, #0]
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fd44 	bl	8005bd0 <PrintXY>
		PrintXY(x + 2, y + 1);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	1c9a      	adds	r2, r3, #2
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	3301      	adds	r3, #1
 8005150:	4619      	mov	r1, r3
 8005152:	4610      	mov	r0, r2
 8005154:	f000 fd3c 	bl	8005bd0 <PrintXY>
		break;
 8005158:	e056      	b.n	8005208 <PrintNextPiece+0x5b0>
	}
	case 16:
	{
		PrintXY(x + 1, y + 1);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	3301      	adds	r3, #1
 8005162:	4619      	mov	r1, r3
 8005164:	4610      	mov	r0, r2
 8005166:	f000 fd33 	bl	8005bd0 <PrintXY>
		PrintXY(x + 1, y);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	3301      	adds	r3, #1
 800516e:	6839      	ldr	r1, [r7, #0]
 8005170:	4618      	mov	r0, r3
 8005172:	f000 fd2d 	bl	8005bd0 <PrintXY>
		PrintXY(x + 1, y + 2);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	3302      	adds	r3, #2
 800517e:	4619      	mov	r1, r3
 8005180:	4610      	mov	r0, r2
 8005182:	f000 fd25 	bl	8005bd0 <PrintXY>
		PrintXY(x, y + 1);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	3301      	adds	r3, #1
 800518a:	4619      	mov	r1, r3
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 fd1f 	bl	8005bd0 <PrintXY>
		break;
 8005192:	e039      	b.n	8005208 <PrintNextPiece+0x5b0>
	}
	case 17:
	{
		PrintXY(x + 1, y + 1);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	1c5a      	adds	r2, r3, #1
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	3301      	adds	r3, #1
 800519c:	4619      	mov	r1, r3
 800519e:	4610      	mov	r0, r2
 80051a0:	f000 fd16 	bl	8005bd0 <PrintXY>
		PrintXY(x, y + 1);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	3301      	adds	r3, #1
 80051a8:	4619      	mov	r1, r3
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fd10 	bl	8005bd0 <PrintXY>
		PrintXY(x + 1, y + 2);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	3302      	adds	r3, #2
 80051b8:	4619      	mov	r1, r3
 80051ba:	4610      	mov	r0, r2
 80051bc:	f000 fd08 	bl	8005bd0 <PrintXY>
		PrintXY(x + 2, y + 2);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	1c9a      	adds	r2, r3, #2
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	3302      	adds	r3, #2
 80051c8:	4619      	mov	r1, r3
 80051ca:	4610      	mov	r0, r2
 80051cc:	f000 fd00 	bl	8005bd0 <PrintXY>
		break;
 80051d0:	e01a      	b.n	8005208 <PrintNextPiece+0x5b0>
	}
	case 18:
	{
		PrintXY(x + 1, y + 1);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	3301      	adds	r3, #1
 80051da:	4619      	mov	r1, r3
 80051dc:	4610      	mov	r0, r2
 80051de:	f000 fcf7 	bl	8005bd0 <PrintXY>
		PrintXY(x + 1, y);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	3301      	adds	r3, #1
 80051e6:	6839      	ldr	r1, [r7, #0]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 fcf1 	bl	8005bd0 <PrintXY>
		PrintXY(x, y + 1);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	3301      	adds	r3, #1
 80051f2:	4619      	mov	r1, r3
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 fceb 	bl	8005bd0 <PrintXY>
		PrintXY(x, y + 2);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	3302      	adds	r3, #2
 80051fe:	4619      	mov	r1, r3
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fce5 	bl	8005bd0 <PrintXY>
		break;
 8005206:	bf00      	nop
	}
	}
}
 8005208:	bf00      	nop
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <generate_square>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Play one note: freq in Hz, duration in ms
void generate_square(uint16_t *buf, uint32_t N) {
 8005210:	b480      	push	{r7}
 8005212:	b089      	sub	sp, #36	@ 0x24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
    const uint16_t mid = DAC_MAX_VALUE / 2;
 800521a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800521e:	827b      	strh	r3, [r7, #18]
    const int32_t peak = (DAC_MAX_VALUE / 2) - 100;
 8005220:	f240 739b 	movw	r3, #1947	@ 0x79b
 8005224:	60fb      	str	r3, [r7, #12]
    int32_t high = mid + peak;
 8005226:	8a7b      	ldrh	r3, [r7, #18]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	4413      	add	r3, r2
 800522c:	61fb      	str	r3, [r7, #28]
    int32_t low  = mid - peak;
 800522e:	8a7a      	ldrh	r2, [r7, #18]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	61bb      	str	r3, [r7, #24]
    if (high > (int32_t)DAC_MAX_VALUE) high = DAC_MAX_VALUE;
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800523c:	db02      	blt.n	8005244 <generate_square+0x34>
 800523e:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8005242:	61fb      	str	r3, [r7, #28]
    if (low < 0) low = 0;
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	2b00      	cmp	r3, #0
 8005248:	da01      	bge.n	800524e <generate_square+0x3e>
 800524a:	2300      	movs	r3, #0
 800524c:	61bb      	str	r3, [r7, #24]
    for (uint32_t i = 0; i < N; i++) {
 800524e:	2300      	movs	r3, #0
 8005250:	617b      	str	r3, [r7, #20]
 8005252:	e011      	b.n	8005278 <generate_square+0x68>
        buf[i] = (i < (N/2)) ? (uint16_t)high : (uint16_t)low;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	085b      	lsrs	r3, r3, #1
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	429a      	cmp	r2, r3
 800525c:	d202      	bcs.n	8005264 <generate_square+0x54>
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	b29b      	uxth	r3, r3
 8005262:	e001      	b.n	8005268 <generate_square+0x58>
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	b29b      	uxth	r3, r3
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	0052      	lsls	r2, r2, #1
 800526c:	6879      	ldr	r1, [r7, #4]
 800526e:	440a      	add	r2, r1
 8005270:	8013      	strh	r3, [r2, #0]
    for (uint32_t i = 0; i < N; i++) {
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	3301      	adds	r3, #1
 8005276:	617b      	str	r3, [r7, #20]
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	429a      	cmp	r2, r3
 800527e:	d3e9      	bcc.n	8005254 <generate_square+0x44>
    }
}
 8005280:	bf00      	nop
 8005282:	bf00      	nop
 8005284:	3724      	adds	r7, #36	@ 0x24
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
	...

08005290 <play_note>:

void play_note(float freq, uint32_t dur_ms) {
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af02      	add	r7, sp, #8
 8005296:	ed87 0a01 	vstr	s0, [r7, #4]
 800529a:	6038      	str	r0, [r7, #0]
    if (freq <= 0.0f) {
 800529c:	edd7 7a01 	vldr	s15, [r7, #4]
 80052a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80052a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a8:	d807      	bhi.n	80052ba <play_note+0x2a>
        // rest: output mid-level or silence
        HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80052aa:	2100      	movs	r1, #0
 80052ac:	481b      	ldr	r0, [pc, #108]	@ (800531c <play_note+0x8c>)
 80052ae:	f002 fd25 	bl	8007cfc <HAL_DAC_Stop_DMA>
        HAL_Delay(dur_ms);
 80052b2:	6838      	ldr	r0, [r7, #0]
 80052b4:	f002 fb08 	bl	80078c8 <HAL_Delay>
        return;
 80052b8:	e02c      	b.n	8005314 <play_note+0x84>
    }
    // Compute buffer length N ~ SAMPLE_RATE / freq
    uint32_t N = (uint32_t)( (float)SAMPLE_RATE / freq );
 80052ba:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8005320 <play_note+0x90>
 80052be:	ed97 7a01 	vldr	s14, [r7, #4]
 80052c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052ca:	ee17 3a90 	vmov	r3, s15
 80052ce:	60fb      	str	r3, [r7, #12]
    if (N < 2) N = 2;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d801      	bhi.n	80052da <play_note+0x4a>
 80052d6:	2302      	movs	r3, #2
 80052d8:	60fb      	str	r3, [r7, #12]
    if (N > MAX_WAVE_BUF_SIZE) {
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052e0:	d902      	bls.n	80052e8 <play_note+0x58>
        N = MAX_WAVE_BUF_SIZE;
 80052e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052e6:	60fb      	str	r3, [r7, #12]
    }
    // Fill wave_buf with waveform; choose square or sine
    generate_square(wave_buf, N);
 80052e8:	68f9      	ldr	r1, [r7, #12]
 80052ea:	480e      	ldr	r0, [pc, #56]	@ (8005324 <play_note+0x94>)
 80052ec:	f7ff ff90 	bl	8005210 <generate_square>
    // Or: generate_sine(wave_buf, N);

    // Start DAC DMA circular
    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)wave_buf, N, DAC_ALIGN_12B_R);
 80052f0:	2300      	movs	r3, #0
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4a0b      	ldr	r2, [pc, #44]	@ (8005324 <play_note+0x94>)
 80052f8:	2100      	movs	r1, #0
 80052fa:	4808      	ldr	r0, [pc, #32]	@ (800531c <play_note+0x8c>)
 80052fc:	f002 fc3c 	bl	8007b78 <HAL_DAC_Start_DMA>
    // Wait duration
    HAL_Delay(dur_ms);
 8005300:	6838      	ldr	r0, [r7, #0]
 8005302:	f002 fae1 	bl	80078c8 <HAL_Delay>
//    // Stop DMA
    HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8005306:	2100      	movs	r1, #0
 8005308:	4804      	ldr	r0, [pc, #16]	@ (800531c <play_note+0x8c>)
 800530a:	f002 fcf7 	bl	8007cfc <HAL_DAC_Stop_DMA>
    // Short gap between notes
    HAL_Delay(50);
 800530e:	2032      	movs	r0, #50	@ 0x32
 8005310:	f002 fada 	bl	80078c8 <HAL_Delay>
}
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	200011cc 	.word	0x200011cc
 8005320:	45fa0000 	.word	0x45fa0000
 8005324:	20001288 	.word	0x20001288

08005328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800532e:	f002 fa59 	bl	80077e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005332:	f000 f84d 	bl	80053d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialise all configured peripherals */
  MX_GPIO_Init();
 8005336:	f000 fa57 	bl	80057e8 <MX_GPIO_Init>
  MX_LTDC_Init();
 800533a:	f000 f93f 	bl	80055bc <MX_LTDC_Init>
  MX_FMC_Init();
 800533e:	f000 fa05 	bl	800574c <MX_FMC_Init>
  MX_SPI1_Init();
 8005342:	f000 f9cd 	bl	80056e0 <MX_SPI1_Init>
  MX_DMA_Init();
 8005346:	f000 fb61 	bl	8005a0c <MX_DMA_Init>
  MX_DAC_Init();
 800534a:	f000 fb0d 	bl	8005968 <MX_DAC_Init>
  MX_DMA2D_Init();
 800534e:	f000 f8c3 	bl	80054d8 <MX_DMA2D_Init>
  MX_I2C1_Init();
 8005352:	f000 f8f3 	bl	800553c <MX_I2C1_Init>
  MX_RNG_Init();
 8005356:	f000 f9af 	bl	80056b8 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  HAL_RNG_Init(&hrng);
 800535a:	481a      	ldr	r0, [pc, #104]	@ (80053c4 <main+0x9c>)
 800535c:	f005 f910 	bl	800a580 <HAL_RNG_Init>
  MX_DAC_Init();
 8005360:	f000 fb02 	bl	8005968 <MX_DAC_Init>
  MX_TIM6_Init();
 8005364:	f000 fb20 	bl	80059a8 <MX_TIM6_Init>
  HAL_TIM_Base_Start_IT(&htim6);
 8005368:	4817      	ldr	r0, [pc, #92]	@ (80053c8 <main+0xa0>)
 800536a:	f006 f836 	bl	800b3da <HAL_TIM_Base_Start_IT>
  for (size_t i = 0; i < MELODY_LENGTH; i++) {
 800536e:	2300      	movs	r3, #0
 8005370:	607b      	str	r3, [r7, #4]
 8005372:	e012      	b.n	800539a <main+0x72>
      play_note(melody[i].freq, melody[i].dur_ms);
 8005374:	4a15      	ldr	r2, [pc, #84]	@ (80053cc <main+0xa4>)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	00db      	lsls	r3, r3, #3
 800537a:	4413      	add	r3, r2
 800537c:	edd3 7a00 	vldr	s15, [r3]
 8005380:	4a12      	ldr	r2, [pc, #72]	@ (80053cc <main+0xa4>)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	4413      	add	r3, r2
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	4618      	mov	r0, r3
 800538c:	eeb0 0a67 	vmov.f32	s0, s15
 8005390:	f7ff ff7e 	bl	8005290 <play_note>
  for (size_t i = 0; i < MELODY_LENGTH; i++) {
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3301      	adds	r3, #1
 8005398:	607b      	str	r3, [r7, #4]
 800539a:	2228      	movs	r2, #40	@ 0x28
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4293      	cmp	r3, r2
 80053a0:	d3e8      	bcc.n	8005374 <main+0x4c>
  }
  BSP_LCD_Init();
 80053a2:	f001 fbb1 	bl	8006b08 <BSP_LCD_Init>
  BSP_LCD_MspInit();
 80053a6:	f001 fe65 	bl	8007074 <BSP_LCD_MspInit>
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER);
 80053aa:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 80053ae:	2000      	movs	r0, #0
 80053b0:	f001 fc2c 	bl	8006c0c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80053b4:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80053b8:	f001 fcd8 	bl	8006d6c <BSP_LCD_Clear>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  TETRIS_main();
 80053bc:	f7fb fb28 	bl	8000a10 <TETRIS_main>
 80053c0:	e7fc      	b.n	80053bc <main+0x94>
 80053c2:	bf00      	nop
 80053c4:	20001130 	.word	0x20001130
 80053c8:	200011e0 	.word	0x200011e0
 80053cc:	20000018 	.word	0x20000018

080053d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b0a0      	sub	sp, #128	@ 0x80
 80053d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80053d6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80053da:	2230      	movs	r2, #48	@ 0x30
 80053dc:	2100      	movs	r1, #0
 80053de:	4618      	mov	r0, r3
 80053e0:	f006 fbcb 	bl	800bb7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80053e4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	605a      	str	r2, [r3, #4]
 80053ee:	609a      	str	r2, [r3, #8]
 80053f0:	60da      	str	r2, [r3, #12]
 80053f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80053f4:	f107 030c 	add.w	r3, r7, #12
 80053f8:	2230      	movs	r2, #48	@ 0x30
 80053fa:	2100      	movs	r1, #0
 80053fc:	4618      	mov	r0, r3
 80053fe:	f006 fbbc 	bl	800bb7a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005402:	2300      	movs	r3, #0
 8005404:	60bb      	str	r3, [r7, #8]
 8005406:	4b32      	ldr	r3, [pc, #200]	@ (80054d0 <SystemClock_Config+0x100>)
 8005408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540a:	4a31      	ldr	r2, [pc, #196]	@ (80054d0 <SystemClock_Config+0x100>)
 800540c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005410:	6413      	str	r3, [r2, #64]	@ 0x40
 8005412:	4b2f      	ldr	r3, [pc, #188]	@ (80054d0 <SystemClock_Config+0x100>)
 8005414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800541a:	60bb      	str	r3, [r7, #8]
 800541c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800541e:	2300      	movs	r3, #0
 8005420:	607b      	str	r3, [r7, #4]
 8005422:	4b2c      	ldr	r3, [pc, #176]	@ (80054d4 <SystemClock_Config+0x104>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800542a:	4a2a      	ldr	r2, [pc, #168]	@ (80054d4 <SystemClock_Config+0x104>)
 800542c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	4b28      	ldr	r3, [pc, #160]	@ (80054d4 <SystemClock_Config+0x104>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800543a:	607b      	str	r3, [r7, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800543e:	2302      	movs	r3, #2
 8005440:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005442:	2301      	movs	r3, #1
 8005444:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005446:	2310      	movs	r3, #16
 8005448:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800544a:	2302      	movs	r3, #2
 800544c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800544e:	2300      	movs	r3, #0
 8005450:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005452:	2308      	movs	r3, #8
 8005454:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 8005456:	2348      	movs	r3, #72	@ 0x48
 8005458:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800545a:	2302      	movs	r3, #2
 800545c:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800545e:	2303      	movs	r3, #3
 8005460:	67fb      	str	r3, [r7, #124]	@ 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005462:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005466:	4618      	mov	r0, r3
 8005468:	f004 fa50 	bl	800990c <HAL_RCC_OscConfig>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8005472:	f000 fc1f 	bl	8005cb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005476:	230f      	movs	r3, #15
 8005478:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800547a:	2302      	movs	r3, #2
 800547c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800547e:	2300      	movs	r3, #0
 8005480:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005482:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005486:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005488:	2300      	movs	r3, #0
 800548a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800548c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005490:	2102      	movs	r1, #2
 8005492:	4618      	mov	r0, r3
 8005494:	f004 fca8 	bl	8009de8 <HAL_RCC_ClockConfig>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800549e:	f000 fc09 	bl	8005cb4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80054a2:	2308      	movs	r3, #8
 80054a4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80054a6:	2332      	movs	r3, #50	@ 0x32
 80054a8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80054aa:	2302      	movs	r3, #2
 80054ac:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80054ae:	2300      	movs	r3, #0
 80054b0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054b2:	f107 030c 	add.w	r3, r7, #12
 80054b6:	4618      	mov	r0, r3
 80054b8:	f004 fea2 	bl	800a200 <HAL_RCCEx_PeriphCLKConfig>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80054c2:	f000 fbf7 	bl	8005cb4 <Error_Handler>
  }
}
 80054c6:	bf00      	nop
 80054c8:	3780      	adds	r7, #128	@ 0x80
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	40023800 	.word	0x40023800
 80054d4:	40007000 	.word	0x40007000

080054d8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80054dc:	4b15      	ldr	r3, [pc, #84]	@ (8005534 <MX_DMA2D_Init+0x5c>)
 80054de:	4a16      	ldr	r2, [pc, #88]	@ (8005538 <MX_DMA2D_Init+0x60>)
 80054e0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80054e2:	4b14      	ldr	r3, [pc, #80]	@ (8005534 <MX_DMA2D_Init+0x5c>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80054e8:	4b12      	ldr	r3, [pc, #72]	@ (8005534 <MX_DMA2D_Init+0x5c>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80054ee:	4b11      	ldr	r3, [pc, #68]	@ (8005534 <MX_DMA2D_Init+0x5c>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80054f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005534 <MX_DMA2D_Init+0x5c>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80054fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005534 <MX_DMA2D_Init+0x5c>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8005500:	4b0c      	ldr	r3, [pc, #48]	@ (8005534 <MX_DMA2D_Init+0x5c>)
 8005502:	2200      	movs	r2, #0
 8005504:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8005506:	4b0b      	ldr	r3, [pc, #44]	@ (8005534 <MX_DMA2D_Init+0x5c>)
 8005508:	2200      	movs	r2, #0
 800550a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800550c:	4809      	ldr	r0, [pc, #36]	@ (8005534 <MX_DMA2D_Init+0x5c>)
 800550e:	f002 fff7 	bl	8008500 <HAL_DMA2D_Init>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8005518:	f000 fbcc 	bl	8005cb4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800551c:	2101      	movs	r1, #1
 800551e:	4805      	ldr	r0, [pc, #20]	@ (8005534 <MX_DMA2D_Init+0x5c>)
 8005520:	f003 f94c 	bl	80087bc <HAL_DMA2D_ConfigLayer>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800552a:	f000 fbc3 	bl	8005cb4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800552e:	bf00      	nop
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20000ff4 	.word	0x20000ff4
 8005538:	4002b000 	.word	0x4002b000

0800553c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005540:	4b1b      	ldr	r3, [pc, #108]	@ (80055b0 <MX_I2C1_Init+0x74>)
 8005542:	4a1c      	ldr	r2, [pc, #112]	@ (80055b4 <MX_I2C1_Init+0x78>)
 8005544:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005546:	4b1a      	ldr	r3, [pc, #104]	@ (80055b0 <MX_I2C1_Init+0x74>)
 8005548:	4a1b      	ldr	r2, [pc, #108]	@ (80055b8 <MX_I2C1_Init+0x7c>)
 800554a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800554c:	4b18      	ldr	r3, [pc, #96]	@ (80055b0 <MX_I2C1_Init+0x74>)
 800554e:	2200      	movs	r2, #0
 8005550:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005552:	4b17      	ldr	r3, [pc, #92]	@ (80055b0 <MX_I2C1_Init+0x74>)
 8005554:	2200      	movs	r2, #0
 8005556:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005558:	4b15      	ldr	r3, [pc, #84]	@ (80055b0 <MX_I2C1_Init+0x74>)
 800555a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800555e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005560:	4b13      	ldr	r3, [pc, #76]	@ (80055b0 <MX_I2C1_Init+0x74>)
 8005562:	2200      	movs	r2, #0
 8005564:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005566:	4b12      	ldr	r3, [pc, #72]	@ (80055b0 <MX_I2C1_Init+0x74>)
 8005568:	2200      	movs	r2, #0
 800556a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800556c:	4b10      	ldr	r3, [pc, #64]	@ (80055b0 <MX_I2C1_Init+0x74>)
 800556e:	2200      	movs	r2, #0
 8005570:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005572:	4b0f      	ldr	r3, [pc, #60]	@ (80055b0 <MX_I2C1_Init+0x74>)
 8005574:	2200      	movs	r2, #0
 8005576:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005578:	480d      	ldr	r0, [pc, #52]	@ (80055b0 <MX_I2C1_Init+0x74>)
 800557a:	f003 fd37 	bl	8008fec <HAL_I2C_Init>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005584:	f000 fb96 	bl	8005cb4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005588:	2100      	movs	r1, #0
 800558a:	4809      	ldr	r0, [pc, #36]	@ (80055b0 <MX_I2C1_Init+0x74>)
 800558c:	f003 fe72 	bl	8009274 <HAL_I2CEx_ConfigAnalogFilter>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8005596:	f000 fb8d 	bl	8005cb4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800559a:	2100      	movs	r1, #0
 800559c:	4804      	ldr	r0, [pc, #16]	@ (80055b0 <MX_I2C1_Init+0x74>)
 800559e:	f003 fea5 	bl	80092ec <HAL_I2CEx_ConfigDigitalFilter>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80055a8:	f000 fb84 	bl	8005cb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80055ac:	bf00      	nop
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	20001034 	.word	0x20001034
 80055b4:	40005400 	.word	0x40005400
 80055b8:	000186a0 	.word	0x000186a0

080055bc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b08e      	sub	sp, #56	@ 0x38
 80055c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80055c2:	1d3b      	adds	r3, r7, #4
 80055c4:	2234      	movs	r2, #52	@ 0x34
 80055c6:	2100      	movs	r1, #0
 80055c8:	4618      	mov	r0, r3
 80055ca:	f006 fad6 	bl	800bb7a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80055ce:	4b38      	ldr	r3, [pc, #224]	@ (80056b0 <MX_LTDC_Init+0xf4>)
 80055d0:	4a38      	ldr	r2, [pc, #224]	@ (80056b4 <MX_LTDC_Init+0xf8>)
 80055d2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80055d4:	4b36      	ldr	r3, [pc, #216]	@ (80056b0 <MX_LTDC_Init+0xf4>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80055da:	4b35      	ldr	r3, [pc, #212]	@ (80056b0 <MX_LTDC_Init+0xf4>)
 80055dc:	2200      	movs	r2, #0
 80055de:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80055e0:	4b33      	ldr	r3, [pc, #204]	@ (80056b0 <MX_LTDC_Init+0xf4>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80055e6:	4b32      	ldr	r3, [pc, #200]	@ (80056b0 <MX_LTDC_Init+0xf4>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80055ec:	4b30      	ldr	r3, [pc, #192]	@ (80056b0 <MX_LTDC_Init+0xf4>)
 80055ee:	2207      	movs	r2, #7
 80055f0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80055f2:	4b2f      	ldr	r3, [pc, #188]	@ (80056b0 <MX_LTDC_Init+0xf4>)
 80055f4:	2203      	movs	r2, #3
 80055f6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80055f8:	4b2d      	ldr	r3, [pc, #180]	@ (80056b0 <MX_LTDC_Init+0xf4>)
 80055fa:	220e      	movs	r2, #14
 80055fc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80055fe:	4b2c      	ldr	r3, [pc, #176]	@ (80056b0 <MX_LTDC_Init+0xf4>)
 8005600:	2205      	movs	r2, #5
 8005602:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8005604:	4b2a      	ldr	r3, [pc, #168]	@ (80056b0 <MX_LTDC_Init+0xf4>)
 8005606:	f240 228e 	movw	r2, #654	@ 0x28e
 800560a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800560c:	4b28      	ldr	r3, [pc, #160]	@ (80056b0 <MX_LTDC_Init+0xf4>)
 800560e:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8005612:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8005614:	4b26      	ldr	r3, [pc, #152]	@ (80056b0 <MX_LTDC_Init+0xf4>)
 8005616:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800561a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 800561c:	4b24      	ldr	r3, [pc, #144]	@ (80056b0 <MX_LTDC_Init+0xf4>)
 800561e:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8005622:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8005624:	4b22      	ldr	r3, [pc, #136]	@ (80056b0 <MX_LTDC_Init+0xf4>)
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800562c:	4b20      	ldr	r3, [pc, #128]	@ (80056b0 <MX_LTDC_Init+0xf4>)
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8005634:	4b1e      	ldr	r3, [pc, #120]	@ (80056b0 <MX_LTDC_Init+0xf4>)
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800563c:	481c      	ldr	r0, [pc, #112]	@ (80056b0 <MX_LTDC_Init+0xf4>)
 800563e:	f003 fe95 	bl	800936c <HAL_LTDC_Init>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8005648:	f000 fb34 	bl	8005cb4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800564c:	2300      	movs	r3, #0
 800564e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 0;
 8005650:	2300      	movs	r3, #0
 8005652:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8005654:	2300      	movs	r3, #0
 8005656:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 0;
 8005658:	2300      	movs	r3, #0
 800565a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800565c:	2302      	movs	r3, #2
 800565e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8005660:	23ff      	movs	r3, #255	@ 0xff
 8005662:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 255;
 8005664:	23ff      	movs	r3, #255	@ 0xff
 8005666:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8005668:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800566c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800566e:	2307      	movs	r3, #7
 8005670:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8005672:	2300      	movs	r3, #0
 8005674:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 8005676:	2300      	movs	r3, #0
 8005678:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 800567a:	2300      	movs	r3, #0
 800567c:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800567e:	2300      	movs	r3, #0
 8005680:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8005684:	2300      	movs	r3, #0
 8005686:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800568a:	2300      	movs	r3, #0
 800568c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8005690:	1d3b      	adds	r3, r7, #4
 8005692:	2200      	movs	r2, #0
 8005694:	4619      	mov	r1, r3
 8005696:	4806      	ldr	r0, [pc, #24]	@ (80056b0 <MX_LTDC_Init+0xf4>)
 8005698:	f003 ff38 	bl	800950c <HAL_LTDC_ConfigLayer>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <MX_LTDC_Init+0xea>
  {
    Error_Handler();
 80056a2:	f000 fb07 	bl	8005cb4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80056a6:	bf00      	nop
 80056a8:	3738      	adds	r7, #56	@ 0x38
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	20001088 	.word	0x20001088
 80056b4:	40016800 	.word	0x40016800

080056b8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80056bc:	4b06      	ldr	r3, [pc, #24]	@ (80056d8 <MX_RNG_Init+0x20>)
 80056be:	4a07      	ldr	r2, [pc, #28]	@ (80056dc <MX_RNG_Init+0x24>)
 80056c0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80056c2:	4805      	ldr	r0, [pc, #20]	@ (80056d8 <MX_RNG_Init+0x20>)
 80056c4:	f004 ff5c 	bl	800a580 <HAL_RNG_Init>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80056ce:	f000 faf1 	bl	8005cb4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80056d2:	bf00      	nop
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	20001130 	.word	0x20001130
 80056dc:	50060800 	.word	0x50060800

080056e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80056e4:	4b17      	ldr	r3, [pc, #92]	@ (8005744 <MX_SPI1_Init+0x64>)
 80056e6:	4a18      	ldr	r2, [pc, #96]	@ (8005748 <MX_SPI1_Init+0x68>)
 80056e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80056ea:	4b16      	ldr	r3, [pc, #88]	@ (8005744 <MX_SPI1_Init+0x64>)
 80056ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80056f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80056f2:	4b14      	ldr	r3, [pc, #80]	@ (8005744 <MX_SPI1_Init+0x64>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80056f8:	4b12      	ldr	r3, [pc, #72]	@ (8005744 <MX_SPI1_Init+0x64>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80056fe:	4b11      	ldr	r3, [pc, #68]	@ (8005744 <MX_SPI1_Init+0x64>)
 8005700:	2200      	movs	r2, #0
 8005702:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005704:	4b0f      	ldr	r3, [pc, #60]	@ (8005744 <MX_SPI1_Init+0x64>)
 8005706:	2200      	movs	r2, #0
 8005708:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800570a:	4b0e      	ldr	r3, [pc, #56]	@ (8005744 <MX_SPI1_Init+0x64>)
 800570c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005710:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005712:	4b0c      	ldr	r3, [pc, #48]	@ (8005744 <MX_SPI1_Init+0x64>)
 8005714:	2200      	movs	r2, #0
 8005716:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005718:	4b0a      	ldr	r3, [pc, #40]	@ (8005744 <MX_SPI1_Init+0x64>)
 800571a:	2200      	movs	r2, #0
 800571c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800571e:	4b09      	ldr	r3, [pc, #36]	@ (8005744 <MX_SPI1_Init+0x64>)
 8005720:	2200      	movs	r2, #0
 8005722:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005724:	4b07      	ldr	r3, [pc, #28]	@ (8005744 <MX_SPI1_Init+0x64>)
 8005726:	2200      	movs	r2, #0
 8005728:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800572a:	4b06      	ldr	r3, [pc, #24]	@ (8005744 <MX_SPI1_Init+0x64>)
 800572c:	220a      	movs	r2, #10
 800572e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005730:	4804      	ldr	r0, [pc, #16]	@ (8005744 <MX_SPI1_Init+0x64>)
 8005732:	f005 f89d 	bl	800a870 <HAL_SPI_Init>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800573c:	f000 faba 	bl	8005cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005740:	bf00      	nop
 8005742:	bd80      	pop	{r7, pc}
 8005744:	20001140 	.word	0x20001140
 8005748:	40013000 	.word	0x40013000

0800574c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8005752:	1d3b      	adds	r3, r7, #4
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]
 8005758:	605a      	str	r2, [r3, #4]
 800575a:	609a      	str	r2, [r3, #8]
 800575c:	60da      	str	r2, [r3, #12]
 800575e:	611a      	str	r2, [r3, #16]
 8005760:	615a      	str	r2, [r3, #20]
 8005762:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8005764:	4b1e      	ldr	r3, [pc, #120]	@ (80057e0 <MX_FMC_Init+0x94>)
 8005766:	4a1f      	ldr	r2, [pc, #124]	@ (80057e4 <MX_FMC_Init+0x98>)
 8005768:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800576a:	4b1d      	ldr	r3, [pc, #116]	@ (80057e0 <MX_FMC_Init+0x94>)
 800576c:	2200      	movs	r2, #0
 800576e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8005770:	4b1b      	ldr	r3, [pc, #108]	@ (80057e0 <MX_FMC_Init+0x94>)
 8005772:	2200      	movs	r2, #0
 8005774:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8005776:	4b1a      	ldr	r3, [pc, #104]	@ (80057e0 <MX_FMC_Init+0x94>)
 8005778:	2200      	movs	r2, #0
 800577a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_8;
 800577c:	4b18      	ldr	r3, [pc, #96]	@ (80057e0 <MX_FMC_Init+0x94>)
 800577e:	2200      	movs	r2, #0
 8005780:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005782:	4b17      	ldr	r3, [pc, #92]	@ (80057e0 <MX_FMC_Init+0x94>)
 8005784:	2240      	movs	r2, #64	@ 0x40
 8005786:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8005788:	4b15      	ldr	r3, [pc, #84]	@ (80057e0 <MX_FMC_Init+0x94>)
 800578a:	2280      	movs	r2, #128	@ 0x80
 800578c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800578e:	4b14      	ldr	r3, [pc, #80]	@ (80057e0 <MX_FMC_Init+0x94>)
 8005790:	2200      	movs	r2, #0
 8005792:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8005794:	4b12      	ldr	r3, [pc, #72]	@ (80057e0 <MX_FMC_Init+0x94>)
 8005796:	2200      	movs	r2, #0
 8005798:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800579a:	4b11      	ldr	r3, [pc, #68]	@ (80057e0 <MX_FMC_Init+0x94>)
 800579c:	2200      	movs	r2, #0
 800579e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80057a0:	4b0f      	ldr	r3, [pc, #60]	@ (80057e0 <MX_FMC_Init+0x94>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80057a6:	2310      	movs	r3, #16
 80057a8:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80057aa:	2310      	movs	r3, #16
 80057ac:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80057ae:	2310      	movs	r3, #16
 80057b0:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80057b2:	2310      	movs	r3, #16
 80057b4:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80057b6:	2310      	movs	r3, #16
 80057b8:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80057ba:	2310      	movs	r3, #16
 80057bc:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80057be:	2310      	movs	r3, #16
 80057c0:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80057c2:	1d3b      	adds	r3, r7, #4
 80057c4:	4619      	mov	r1, r3
 80057c6:	4806      	ldr	r0, [pc, #24]	@ (80057e0 <MX_FMC_Init+0x94>)
 80057c8:	f004 ffd3 	bl	800a772 <HAL_SDRAM_Init>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80057d2:	f000 fa6f 	bl	8005cb4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80057d6:	bf00      	nop
 80057d8:	3720      	adds	r7, #32
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	20001198 	.word	0x20001198
 80057e4:	a0000140 	.word	0xa0000140

080057e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08c      	sub	sp, #48	@ 0x30
 80057ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057ee:	f107 031c 	add.w	r3, r7, #28
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	605a      	str	r2, [r3, #4]
 80057f8:	609a      	str	r2, [r3, #8]
 80057fa:	60da      	str	r2, [r3, #12]
 80057fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80057fe:	2300      	movs	r3, #0
 8005800:	61bb      	str	r3, [r7, #24]
 8005802:	4b55      	ldr	r3, [pc, #340]	@ (8005958 <MX_GPIO_Init+0x170>)
 8005804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005806:	4a54      	ldr	r2, [pc, #336]	@ (8005958 <MX_GPIO_Init+0x170>)
 8005808:	f043 0320 	orr.w	r3, r3, #32
 800580c:	6313      	str	r3, [r2, #48]	@ 0x30
 800580e:	4b52      	ldr	r3, [pc, #328]	@ (8005958 <MX_GPIO_Init+0x170>)
 8005810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005812:	f003 0320 	and.w	r3, r3, #32
 8005816:	61bb      	str	r3, [r7, #24]
 8005818:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800581a:	2300      	movs	r3, #0
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	4b4e      	ldr	r3, [pc, #312]	@ (8005958 <MX_GPIO_Init+0x170>)
 8005820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005822:	4a4d      	ldr	r2, [pc, #308]	@ (8005958 <MX_GPIO_Init+0x170>)
 8005824:	f043 0304 	orr.w	r3, r3, #4
 8005828:	6313      	str	r3, [r2, #48]	@ 0x30
 800582a:	4b4b      	ldr	r3, [pc, #300]	@ (8005958 <MX_GPIO_Init+0x170>)
 800582c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	617b      	str	r3, [r7, #20]
 8005834:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005836:	2300      	movs	r3, #0
 8005838:	613b      	str	r3, [r7, #16]
 800583a:	4b47      	ldr	r3, [pc, #284]	@ (8005958 <MX_GPIO_Init+0x170>)
 800583c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800583e:	4a46      	ldr	r2, [pc, #280]	@ (8005958 <MX_GPIO_Init+0x170>)
 8005840:	f043 0301 	orr.w	r3, r3, #1
 8005844:	6313      	str	r3, [r2, #48]	@ 0x30
 8005846:	4b44      	ldr	r3, [pc, #272]	@ (8005958 <MX_GPIO_Init+0x170>)
 8005848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	613b      	str	r3, [r7, #16]
 8005850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005852:	2300      	movs	r3, #0
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	4b40      	ldr	r3, [pc, #256]	@ (8005958 <MX_GPIO_Init+0x170>)
 8005858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800585a:	4a3f      	ldr	r2, [pc, #252]	@ (8005958 <MX_GPIO_Init+0x170>)
 800585c:	f043 0302 	orr.w	r3, r3, #2
 8005860:	6313      	str	r3, [r2, #48]	@ 0x30
 8005862:	4b3d      	ldr	r3, [pc, #244]	@ (8005958 <MX_GPIO_Init+0x170>)
 8005864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800586e:	2300      	movs	r3, #0
 8005870:	60bb      	str	r3, [r7, #8]
 8005872:	4b39      	ldr	r3, [pc, #228]	@ (8005958 <MX_GPIO_Init+0x170>)
 8005874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005876:	4a38      	ldr	r2, [pc, #224]	@ (8005958 <MX_GPIO_Init+0x170>)
 8005878:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800587c:	6313      	str	r3, [r2, #48]	@ 0x30
 800587e:	4b36      	ldr	r3, [pc, #216]	@ (8005958 <MX_GPIO_Init+0x170>)
 8005880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005886:	60bb      	str	r3, [r7, #8]
 8005888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800588a:	2300      	movs	r3, #0
 800588c:	607b      	str	r3, [r7, #4]
 800588e:	4b32      	ldr	r3, [pc, #200]	@ (8005958 <MX_GPIO_Init+0x170>)
 8005890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005892:	4a31      	ldr	r2, [pc, #196]	@ (8005958 <MX_GPIO_Init+0x170>)
 8005894:	f043 0310 	orr.w	r3, r3, #16
 8005898:	6313      	str	r3, [r2, #48]	@ 0x30
 800589a:	4b2f      	ldr	r3, [pc, #188]	@ (8005958 <MX_GPIO_Init+0x170>)
 800589c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589e:	f003 0310 	and.w	r3, r3, #16
 80058a2:	607b      	str	r3, [r7, #4]
 80058a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80058a6:	2300      	movs	r3, #0
 80058a8:	603b      	str	r3, [r7, #0]
 80058aa:	4b2b      	ldr	r3, [pc, #172]	@ (8005958 <MX_GPIO_Init+0x170>)
 80058ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ae:	4a2a      	ldr	r2, [pc, #168]	@ (8005958 <MX_GPIO_Init+0x170>)
 80058b0:	f043 0308 	orr.w	r3, r3, #8
 80058b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80058b6:	4b28      	ldr	r3, [pc, #160]	@ (8005958 <MX_GPIO_Init+0x170>)
 80058b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ba:	f003 0308 	and.w	r3, r3, #8
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80058c2:	2301      	movs	r3, #1
 80058c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80058c6:	2300      	movs	r3, #0
 80058c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ca:	2300      	movs	r3, #0
 80058cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058ce:	f107 031c 	add.w	r3, r7, #28
 80058d2:	4619      	mov	r1, r3
 80058d4:	4821      	ldr	r0, [pc, #132]	@ (800595c <MX_GPIO_Init+0x174>)
 80058d6:	f003 f89f 	bl	8008a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80058da:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80058de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80058e0:	2300      	movs	r3, #0
 80058e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80058e4:	2301      	movs	r3, #1
 80058e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058e8:	f107 031c 	add.w	r3, r7, #28
 80058ec:	4619      	mov	r1, r3
 80058ee:	481c      	ldr	r0, [pc, #112]	@ (8005960 <MX_GPIO_Init+0x178>)
 80058f0:	f003 f892 	bl	8008a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8 |GPIO_PIN_9;
 80058f4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80058f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80058fa:	2300      	movs	r3, #0
 80058fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80058fe:	2301      	movs	r3, #1
 8005900:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005902:	f107 031c 	add.w	r3, r7, #28
 8005906:	4619      	mov	r1, r3
 8005908:	4814      	ldr	r0, [pc, #80]	@ (800595c <MX_GPIO_Init+0x174>)
 800590a:	f003 f885 	bl	8008a18 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 800590e:	2200      	movs	r2, #0
 8005910:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005914:	4813      	ldr	r0, [pc, #76]	@ (8005964 <MX_GPIO_Init+0x17c>)
 8005916:	f003 fb4f 	bl	8008fb8 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800591a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800591e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005920:	2301      	movs	r3, #1
 8005922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005924:	2300      	movs	r3, #0
 8005926:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005928:	2300      	movs	r3, #0
 800592a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800592c:	f107 031c 	add.w	r3, r7, #28
 8005930:	4619      	mov	r1, r3
 8005932:	480c      	ldr	r0, [pc, #48]	@ (8005964 <MX_GPIO_Init+0x17c>)
 8005934:	f003 f870 	bl	8008a18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005938:	2310      	movs	r3, #16
 800593a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG; // Critical for DAC output
 800593c:	2303      	movs	r3, #3
 800593e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL; // Pull-up/down resistors are not used for analog inputs/outputs
 8005940:	2300      	movs	r3, #0
 8005942:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005944:	f107 031c 	add.w	r3, r7, #28
 8005948:	4619      	mov	r1, r3
 800594a:	4804      	ldr	r0, [pc, #16]	@ (800595c <MX_GPIO_Init+0x174>)
 800594c:	f003 f864 	bl	8008a18 <HAL_GPIO_Init>

}
 8005950:	bf00      	nop
 8005952:	3730      	adds	r7, #48	@ 0x30
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	40023800 	.word	0x40023800
 800595c:	40020000 	.word	0x40020000
 8005960:	40020400 	.word	0x40020400
 8005964:	40021800 	.word	0x40021800

08005968 <MX_DAC_Init>:

/**
  * @brief  Initialize DAC1 (PA4) channel 1.
  */
static void MX_DAC_Init(void)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
	  DAC_ChannelConfTypeDef sConfig = {0};
 800596e:	463b      	mov	r3, r7
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	605a      	str	r2, [r3, #4]

	  hdac1.Instance = DAC;
 8005976:	4b0a      	ldr	r3, [pc, #40]	@ (80059a0 <MX_DAC_Init+0x38>)
 8005978:	4a0a      	ldr	r2, [pc, #40]	@ (80059a4 <MX_DAC_Init+0x3c>)
 800597a:	601a      	str	r2, [r3, #0]
	  HAL_DAC_Init(&hdac1);
 800597c:	4808      	ldr	r0, [pc, #32]	@ (80059a0 <MX_DAC_Init+0x38>)
 800597e:	f002 f8d8 	bl	8007b32 <HAL_DAC_Init>

	  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO; // DAC triggered by TIM6 TRGO
 8005982:	2304      	movs	r3, #4
 8005984:	603b      	str	r3, [r7, #0]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE; // Enable output buffer for better driving capability
 8005986:	2300      	movs	r3, #0
 8005988:	607b      	str	r3, [r7, #4]
	  HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1);
 800598a:	463b      	mov	r3, r7
 800598c:	2200      	movs	r2, #0
 800598e:	4619      	mov	r1, r3
 8005990:	4803      	ldr	r0, [pc, #12]	@ (80059a0 <MX_DAC_Init+0x38>)
 8005992:	f002 fa1e 	bl	8007dd2 <HAL_DAC_ConfigChannel>
}
 8005996:	bf00      	nop
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	200011cc 	.word	0x200011cc
 80059a4:	40007400 	.word	0x40007400

080059a8 <MX_TIM6_Init>:
/**
  * @brief  Initialize TIM6 to trigger an update interrupt at AUDIO_SAMPLE_RATE.
  *         E.g., for 8kHz: timer clock = 72MHz, prescaler =  (72e6/8e3)-1 = 8999, period = 0.
  */
static void MX_TIM6_Init(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059ae:	463b      	mov	r3, r7
 80059b0:	2200      	movs	r2, #0
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	605a      	str	r2, [r3, #4]

	  htim6.Instance = TIM6;
 80059b6:	4b13      	ldr	r3, [pc, #76]	@ (8005a04 <MX_TIM6_Init+0x5c>)
 80059b8:	4a13      	ldr	r2, [pc, #76]	@ (8005a08 <MX_TIM6_Init+0x60>)
 80059ba:	601a      	str	r2, [r3, #0]
	  // Example: if SystemCoreClock = 16 MHz (HSI), choose Prescaler = 1 -> timer clock = 8 MHz
	  // Period = (8 MHz / SAMPLE_RATE) - 1 = (8000000 / 8000) - 1 = 1000 - 1 = 999
	  htim6.Init.Prescaler = 1;
 80059bc:	4b11      	ldr	r3, [pc, #68]	@ (8005a04 <MX_TIM6_Init+0x5c>)
 80059be:	2201      	movs	r2, #1
 80059c0:	605a      	str	r2, [r3, #4]
	  htim6.Init.Period = 4499;
 80059c2:	4b10      	ldr	r3, [pc, #64]	@ (8005a04 <MX_TIM6_Init+0x5c>)
 80059c4:	f241 1293 	movw	r2, #4499	@ 0x1193
 80059c8:	60da      	str	r2, [r3, #12]
	  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80059ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005a04 <MX_TIM6_Init+0x5c>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80059d0:	480c      	ldr	r0, [pc, #48]	@ (8005a04 <MX_TIM6_Init+0x5c>)
 80059d2:	f005 fcd7 	bl	800b384 <HAL_TIM_Base_Init>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d001      	beq.n	80059e0 <MX_TIM6_Init+0x38>
	  {
	    Error_Handler();
 80059dc:	f000 f96a 	bl	8005cb4 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80059e0:	2320      	movs	r3, #32
 80059e2:	603b      	str	r3, [r7, #0]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059e4:	2300      	movs	r3, #0
 80059e6:	607b      	str	r3, [r7, #4]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80059e8:	463b      	mov	r3, r7
 80059ea:	4619      	mov	r1, r3
 80059ec:	4805      	ldr	r0, [pc, #20]	@ (8005a04 <MX_TIM6_Init+0x5c>)
 80059ee:	f005 fef3 	bl	800b7d8 <HAL_TIMEx_MasterConfigSynchronization>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <MX_TIM6_Init+0x54>
	  {
	    Error_Handler();
 80059f8:	f000 f95c 	bl	8005cb4 <Error_Handler>
	  }
}
 80059fc:	bf00      	nop
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	200011e0 	.word	0x200011e0
 8005a08:	40001000 	.word	0x40001000

08005a0c <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE(); // DAC1 typically uses DMA1
 8005a12:	2300      	movs	r3, #0
 8005a14:	607b      	str	r3, [r7, #4]
 8005a16:	4b1e      	ldr	r3, [pc, #120]	@ (8005a90 <MX_DMA_Init+0x84>)
 8005a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a1a:	4a1d      	ldr	r2, [pc, #116]	@ (8005a90 <MX_DMA_Init+0x84>)
 8005a1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a22:	4b1b      	ldr	r3, [pc, #108]	@ (8005a90 <MX_DMA_Init+0x84>)
 8005a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a2a:	607b      	str	r3, [r7, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request for DAC1 */
  hdma_dac1.Instance = DMA1_Stream5; // Common stream for DAC1, verify with CubeMX
 8005a2e:	4b19      	ldr	r3, [pc, #100]	@ (8005a94 <MX_DMA_Init+0x88>)
 8005a30:	4a19      	ldr	r2, [pc, #100]	@ (8005a98 <MX_DMA_Init+0x8c>)
 8005a32:	601a      	str	r2, [r3, #0]
  hdma_dac1.Init.Channel = DMA_CHANNEL_7; // Common channel for DAC1, verify with CubeMX
 8005a34:	4b17      	ldr	r3, [pc, #92]	@ (8005a94 <MX_DMA_Init+0x88>)
 8005a36:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8005a3a:	605a      	str	r2, [r3, #4]
  hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a3c:	4b15      	ldr	r3, [pc, #84]	@ (8005a94 <MX_DMA_Init+0x88>)
 8005a3e:	2240      	movs	r2, #64	@ 0x40
 8005a40:	609a      	str	r2, [r3, #8]
  hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a42:	4b14      	ldr	r3, [pc, #80]	@ (8005a94 <MX_DMA_Init+0x88>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	60da      	str	r2, [r3, #12]
  hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8005a48:	4b12      	ldr	r3, [pc, #72]	@ (8005a94 <MX_DMA_Init+0x88>)
 8005a4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005a4e:	611a      	str	r2, [r3, #16]
  hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD; // 12-bit DAC, so 16-bit (half-word) data
 8005a50:	4b10      	ldr	r3, [pc, #64]	@ (8005a94 <MX_DMA_Init+0x88>)
 8005a52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a56:	615a      	str	r2, [r3, #20]
  hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005a58:	4b0e      	ldr	r3, [pc, #56]	@ (8005a94 <MX_DMA_Init+0x88>)
 8005a5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005a5e:	619a      	str	r2, [r3, #24]
  hdma_dac1.Init.Mode = DMA_CIRCULAR; // Crucial for continuous audio playback
 8005a60:	4b0c      	ldr	r3, [pc, #48]	@ (8005a94 <MX_DMA_Init+0x88>)
 8005a62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a66:	61da      	str	r2, [r3, #28]
  hdma_dac1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005a68:	4b0a      	ldr	r3, [pc, #40]	@ (8005a94 <MX_DMA_Init+0x88>)
 8005a6a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005a6e:	621a      	str	r2, [r3, #32]
  hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE; // FIFO can be enabled for more complex scenarios
 8005a70:	4b08      	ldr	r3, [pc, #32]	@ (8005a94 <MX_DMA_Init+0x88>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_DMA_Init(&hdma_dac1);
 8005a76:	4807      	ldr	r0, [pc, #28]	@ (8005a94 <MX_DMA_Init+0x88>)
 8005a78:	f002 fa8e 	bl	8007f98 <HAL_DMA_Init>

  /* Link DAC1 to DMA1 Stream5 */
  __HAL_LINKDMA(&hdac1, DMA_Handle1, hdma_dac1); // Correct macro to link DAC to DMA handle
 8005a7c:	4b07      	ldr	r3, [pc, #28]	@ (8005a9c <MX_DMA_Init+0x90>)
 8005a7e:	4a05      	ldr	r2, [pc, #20]	@ (8005a94 <MX_DMA_Init+0x88>)
 8005a80:	609a      	str	r2, [r3, #8]
 8005a82:	4b04      	ldr	r3, [pc, #16]	@ (8005a94 <MX_DMA_Init+0x88>)
 8005a84:	4a05      	ldr	r2, [pc, #20]	@ (8005a9c <MX_DMA_Init+0x90>)
 8005a86:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8005a88:	bf00      	nop
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	40023800 	.word	0x40023800
 8005a94:	20001220 	.word	0x20001220
 8005a98:	40026088 	.word	0x40026088
 8005a9c:	200011cc 	.word	0x200011cc

08005aa0 <isUpKey>:

int isUpKey() {
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET) {
 8005aa4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005aa8:	4805      	ldr	r0, [pc, #20]	@ (8005ac0 <isUpKey+0x20>)
 8005aaa:	f003 fa6d 	bl	8008f88 <HAL_GPIO_ReadPin>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <isUpKey+0x18>
    	return 1;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e000      	b.n	8005aba <isUpKey+0x1a>
    }
    else return 0;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	40020400 	.word	0x40020400

08005ac4 <isDownKey>:

int isDownKey() {
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8005ac8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005acc:	4805      	ldr	r0, [pc, #20]	@ (8005ae4 <isDownKey+0x20>)
 8005ace:	f003 fa5b 	bl	8008f88 <HAL_GPIO_ReadPin>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <isDownKey+0x18>
	    	return 1;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e000      	b.n	8005ade <isDownKey+0x1a>
	}
	    else return 0;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	40020400 	.word	0x40020400

08005ae8 <isLeftKey>:

int isLeftKey() {
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET) {
 8005aec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005af0:	4805      	ldr	r0, [pc, #20]	@ (8005b08 <isLeftKey+0x20>)
 8005af2:	f003 fa49 	bl	8008f88 <HAL_GPIO_ReadPin>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <isLeftKey+0x18>
	    return 1;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e000      	b.n	8005b02 <isLeftKey+0x1a>
	}
	else return 0;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	40020000 	.word	0x40020000

08005b0c <isRightKey>:

int isRightKey() {
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_RESET) {
 8005b10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005b14:	4805      	ldr	r0, [pc, #20]	@ (8005b2c <isRightKey+0x20>)
 8005b16:	f003 fa37 	bl	8008f88 <HAL_GPIO_ReadPin>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <isRightKey+0x18>
    	return 1;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e000      	b.n	8005b26 <isRightKey+0x1a>
	}
	    else return 0;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	40020000 	.word	0x40020000

08005b30 <Random>:

int Random(int n) // Generate a random number
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
	HAL_RNG_Init(&hrng);
 8005b38:	480e      	ldr	r0, [pc, #56]	@ (8005b74 <Random+0x44>)
 8005b3a:	f004 fd21 	bl	800a580 <HAL_RNG_Init>
	HAL_RNG_MspInit(&hrng);
 8005b3e:	480d      	ldr	r0, [pc, #52]	@ (8005b74 <Random+0x44>)
 8005b40:	f000 fa5e 	bl	8006000 <HAL_RNG_MspInit>
	HAL_RNG_GenerateRandomNumber(&hrng, (uint32_t *) seed);
 8005b44:	4b0c      	ldr	r3, [pc, #48]	@ (8005b78 <Random+0x48>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	480a      	ldr	r0, [pc, #40]	@ (8005b74 <Random+0x44>)
 8005b4c:	f004 fd42 	bl	800a5d4 <HAL_RNG_GenerateRandomNumber>
	randomNum = HAL_RNG_GetRandomNumber(&hrng);
 8005b50:	4808      	ldr	r0, [pc, #32]	@ (8005b74 <Random+0x44>)
 8005b52:	f004 fd8e 	bl	800a672 <HAL_RNG_GetRandomNumber>
 8005b56:	4603      	mov	r3, r0
 8005b58:	4a08      	ldr	r2, [pc, #32]	@ (8005b7c <Random+0x4c>)
 8005b5a:	6013      	str	r3, [r2, #0]
	return randomNum % n;
 8005b5c:	4b07      	ldr	r3, [pc, #28]	@ (8005b7c <Random+0x4c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b66:	fb01 f202 	mul.w	r2, r1, r2
 8005b6a:	1a9b      	subs	r3, r3, r2
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	20001130 	.word	0x20001130
 8005b78:	20000014 	.word	0x20000014
 8005b7c:	20001284 	.word	0x20001284

08005b80 <isAnyKeyPressed>:

int isAnyKeyPressed() {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
	if (isUpKey() == 1) return 1;
 8005b84:	f7ff ff8c 	bl	8005aa0 <isUpKey>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d101      	bne.n	8005b92 <isAnyKeyPressed+0x12>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e01c      	b.n	8005bcc <isAnyKeyPressed+0x4c>
	if (isDownKey() == 1) return 1;
 8005b92:	f7ff ff97 	bl	8005ac4 <isDownKey>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d101      	bne.n	8005ba0 <isAnyKeyPressed+0x20>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e015      	b.n	8005bcc <isAnyKeyPressed+0x4c>
	if (isLeftKey() == 1) return 1;
 8005ba0:	f7ff ffa2 	bl	8005ae8 <isLeftKey>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d101      	bne.n	8005bae <isAnyKeyPressed+0x2e>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e00e      	b.n	8005bcc <isAnyKeyPressed+0x4c>
	if (isRightKey() == 1) return 1;
 8005bae:	f7ff ffad 	bl	8005b0c <isRightKey>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d101      	bne.n	8005bbc <isAnyKeyPressed+0x3c>
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e007      	b.n	8005bcc <isAnyKeyPressed+0x4c>
	if (isUSERKey() == 1) return 1;
 8005bbc:	f000 f86a 	bl	8005c94 <isUSERKey>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d101      	bne.n	8005bca <isAnyKeyPressed+0x4a>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e000      	b.n	8005bcc <isAnyKeyPressed+0x4c>
	return 0;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <PrintXY>:

void PrintXY(int x, int y) {
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
	int loc_X, loc_Y;
	loc_X = PIXEL_SPACE + x * (PIXEL_SPACE + PIXEL_SIZE);
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	4413      	add	r3, r2
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	3301      	adds	r3, #1
 8005be6:	60fb      	str	r3, [r7, #12]
	loc_Y = PIXEL_SPACE + y * (PIXEL_SPACE + PIXEL_SIZE);
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	4613      	mov	r3, r2
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	4413      	add	r3, r2
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	60bb      	str	r3, [r7, #8]

	BSP_LCD_FillRect(loc_X, loc_Y, PIXEL_SIZE, PIXEL_SIZE);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	b298      	uxth	r0, r3
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	b299      	uxth	r1, r3
 8005bfe:	2305      	movs	r3, #5
 8005c00:	2205      	movs	r2, #5
 8005c02:	f001 f9dd 	bl	8006fc0 <BSP_LCD_FillRect>
}
 8005c06:	bf00      	nop
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <Colour>:

void Colour(int n) {
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
	// 1 is bright red		2 is bright green		3 is bright blue
	// 4 is magenta			5 is bright yellow		6 is white
	switch (n) {
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b06      	cmp	r3, #6
 8005c1c:	d831      	bhi.n	8005c82 <Colour+0x72>
 8005c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c24 <Colour+0x14>)
 8005c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c24:	08005c41 	.word	0x08005c41
 8005c28:	08005c4b 	.word	0x08005c4b
 8005c2c:	08005c53 	.word	0x08005c53
 8005c30:	08005c5d 	.word	0x08005c5d
 8005c34:	08005c65 	.word	0x08005c65
 8005c38:	08005c6f 	.word	0x08005c6f
 8005c3c:	08005c79 	.word	0x08005c79
	case 0: { BSP_LCD_SetTextColor(LCD_COLOR_BLACK); break; }
 8005c40:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8005c44:	f001 f846 	bl	8006cd4 <BSP_LCD_SetTextColor>
 8005c48:	e01b      	b.n	8005c82 <Colour+0x72>
	case 1: { BSP_LCD_SetTextColor(LCD_COLOR_RED); break; }
 8005c4a:	4810      	ldr	r0, [pc, #64]	@ (8005c8c <Colour+0x7c>)
 8005c4c:	f001 f842 	bl	8006cd4 <BSP_LCD_SetTextColor>
 8005c50:	e017      	b.n	8005c82 <Colour+0x72>
	case 2: { BSP_LCD_SetTextColor(LCD_COLOR_GREEN); break; }
 8005c52:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8005c56:	f001 f83d 	bl	8006cd4 <BSP_LCD_SetTextColor>
 8005c5a:	e012      	b.n	8005c82 <Colour+0x72>
	case 3: { BSP_LCD_SetTextColor(LCD_COLOR_BLUE); break; }
 8005c5c:	480c      	ldr	r0, [pc, #48]	@ (8005c90 <Colour+0x80>)
 8005c5e:	f001 f839 	bl	8006cd4 <BSP_LCD_SetTextColor>
 8005c62:	e00e      	b.n	8005c82 <Colour+0x72>
	case 4: { BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA); break; }
 8005c64:	f46f 407f 	mvn.w	r0, #65280	@ 0xff00
 8005c68:	f001 f834 	bl	8006cd4 <BSP_LCD_SetTextColor>
 8005c6c:	e009      	b.n	8005c82 <Colour+0x72>
	case 5: { BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); break; }
 8005c6e:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 8005c72:	f001 f82f 	bl	8006cd4 <BSP_LCD_SetTextColor>
 8005c76:	e004      	b.n	8005c82 <Colour+0x72>
	case 6: { BSP_LCD_SetTextColor(LCD_COLOR_WHITE); break; }
 8005c78:	f04f 30ff 	mov.w	r0, #4294967295
 8005c7c:	f001 f82a 	bl	8006cd4 <BSP_LCD_SetTextColor>
 8005c80:	bf00      	nop
	}
}
 8005c82:	bf00      	nop
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	ffff0000 	.word	0xffff0000
 8005c90:	ff0000ff 	.word	0xff0000ff

08005c94 <isUSERKey>:

int isUSERKey() {
 8005c94:	b580      	push	{r7, lr}
 8005c96:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) return 1;
 8005c98:	2101      	movs	r1, #1
 8005c9a:	4805      	ldr	r0, [pc, #20]	@ (8005cb0 <isUSERKey+0x1c>)
 8005c9c:	f003 f974 	bl	8008f88 <HAL_GPIO_ReadPin>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d101      	bne.n	8005caa <isUSERKey+0x16>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e000      	b.n	8005cac <isUSERKey+0x18>
	else return 0;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	40020000 	.word	0x40020000

08005cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005cb8:	b672      	cpsid	i
}
 8005cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005cbc:	bf00      	nop
 8005cbe:	e7fd      	b.n	8005cbc <Error_Handler+0x8>

08005cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	607b      	str	r3, [r7, #4]
 8005cca:	4b10      	ldr	r3, [pc, #64]	@ (8005d0c <HAL_MspInit+0x4c>)
 8005ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cce:	4a0f      	ldr	r2, [pc, #60]	@ (8005d0c <HAL_MspInit+0x4c>)
 8005cd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005cd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8005cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8005d0c <HAL_MspInit+0x4c>)
 8005cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cde:	607b      	str	r3, [r7, #4]
 8005ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	603b      	str	r3, [r7, #0]
 8005ce6:	4b09      	ldr	r3, [pc, #36]	@ (8005d0c <HAL_MspInit+0x4c>)
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cea:	4a08      	ldr	r2, [pc, #32]	@ (8005d0c <HAL_MspInit+0x4c>)
 8005cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cf2:	4b06      	ldr	r3, [pc, #24]	@ (8005d0c <HAL_MspInit+0x4c>)
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cfa:	603b      	str	r3, [r7, #0]
 8005cfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	40023800 	.word	0x40023800

08005d10 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a0b      	ldr	r2, [pc, #44]	@ (8005d4c <HAL_DMA2D_MspInit+0x3c>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d10d      	bne.n	8005d3e <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	4b0a      	ldr	r3, [pc, #40]	@ (8005d50 <HAL_DMA2D_MspInit+0x40>)
 8005d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d2a:	4a09      	ldr	r2, [pc, #36]	@ (8005d50 <HAL_DMA2D_MspInit+0x40>)
 8005d2c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d32:	4b07      	ldr	r3, [pc, #28]	@ (8005d50 <HAL_DMA2D_MspInit+0x40>)
 8005d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8005d3e:	bf00      	nop
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	4002b000 	.word	0x4002b000
 8005d50:	40023800 	.word	0x40023800

08005d54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08a      	sub	sp, #40	@ 0x28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d5c:	f107 0314 	add.w	r3, r7, #20
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	605a      	str	r2, [r3, #4]
 8005d66:	609a      	str	r2, [r3, #8]
 8005d68:	60da      	str	r2, [r3, #12]
 8005d6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a19      	ldr	r2, [pc, #100]	@ (8005dd8 <HAL_I2C_MspInit+0x84>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d12b      	bne.n	8005dce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d76:	2300      	movs	r3, #0
 8005d78:	613b      	str	r3, [r7, #16]
 8005d7a:	4b18      	ldr	r3, [pc, #96]	@ (8005ddc <HAL_I2C_MspInit+0x88>)
 8005d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d7e:	4a17      	ldr	r2, [pc, #92]	@ (8005ddc <HAL_I2C_MspInit+0x88>)
 8005d80:	f043 0302 	orr.w	r3, r3, #2
 8005d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d86:	4b15      	ldr	r3, [pc, #84]	@ (8005ddc <HAL_I2C_MspInit+0x88>)
 8005d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	613b      	str	r3, [r7, #16]
 8005d90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005d92:	23c0      	movs	r3, #192	@ 0xc0
 8005d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005d96:	2312      	movs	r3, #18
 8005d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005da2:	2304      	movs	r3, #4
 8005da4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005da6:	f107 0314 	add.w	r3, r7, #20
 8005daa:	4619      	mov	r1, r3
 8005dac:	480c      	ldr	r0, [pc, #48]	@ (8005de0 <HAL_I2C_MspInit+0x8c>)
 8005dae:	f002 fe33 	bl	8008a18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005db2:	2300      	movs	r3, #0
 8005db4:	60fb      	str	r3, [r7, #12]
 8005db6:	4b09      	ldr	r3, [pc, #36]	@ (8005ddc <HAL_I2C_MspInit+0x88>)
 8005db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dba:	4a08      	ldr	r2, [pc, #32]	@ (8005ddc <HAL_I2C_MspInit+0x88>)
 8005dbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005dc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005dc2:	4b06      	ldr	r3, [pc, #24]	@ (8005ddc <HAL_I2C_MspInit+0x88>)
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005dce:	bf00      	nop
 8005dd0:	3728      	adds	r7, #40	@ 0x28
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	40005400 	.word	0x40005400
 8005ddc:	40023800 	.word	0x40023800
 8005de0:	40020400 	.word	0x40020400

08005de4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b08e      	sub	sp, #56	@ 0x38
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005df0:	2200      	movs	r2, #0
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	605a      	str	r2, [r3, #4]
 8005df6:	609a      	str	r2, [r3, #8]
 8005df8:	60da      	str	r2, [r3, #12]
 8005dfa:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a77      	ldr	r2, [pc, #476]	@ (8005fe0 <HAL_LTDC_MspInit+0x1fc>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	f040 80e8 	bne.w	8005fd8 <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005e08:	2300      	movs	r3, #0
 8005e0a:	623b      	str	r3, [r7, #32]
 8005e0c:	4b75      	ldr	r3, [pc, #468]	@ (8005fe4 <HAL_LTDC_MspInit+0x200>)
 8005e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e10:	4a74      	ldr	r2, [pc, #464]	@ (8005fe4 <HAL_LTDC_MspInit+0x200>)
 8005e12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e16:	6453      	str	r3, [r2, #68]	@ 0x44
 8005e18:	4b72      	ldr	r3, [pc, #456]	@ (8005fe4 <HAL_LTDC_MspInit+0x200>)
 8005e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e20:	623b      	str	r3, [r7, #32]
 8005e22:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005e24:	2300      	movs	r3, #0
 8005e26:	61fb      	str	r3, [r7, #28]
 8005e28:	4b6e      	ldr	r3, [pc, #440]	@ (8005fe4 <HAL_LTDC_MspInit+0x200>)
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e2c:	4a6d      	ldr	r2, [pc, #436]	@ (8005fe4 <HAL_LTDC_MspInit+0x200>)
 8005e2e:	f043 0320 	orr.w	r3, r3, #32
 8005e32:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e34:	4b6b      	ldr	r3, [pc, #428]	@ (8005fe4 <HAL_LTDC_MspInit+0x200>)
 8005e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e38:	f003 0320 	and.w	r3, r3, #32
 8005e3c:	61fb      	str	r3, [r7, #28]
 8005e3e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e40:	2300      	movs	r3, #0
 8005e42:	61bb      	str	r3, [r7, #24]
 8005e44:	4b67      	ldr	r3, [pc, #412]	@ (8005fe4 <HAL_LTDC_MspInit+0x200>)
 8005e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e48:	4a66      	ldr	r2, [pc, #408]	@ (8005fe4 <HAL_LTDC_MspInit+0x200>)
 8005e4a:	f043 0301 	orr.w	r3, r3, #1
 8005e4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e50:	4b64      	ldr	r3, [pc, #400]	@ (8005fe4 <HAL_LTDC_MspInit+0x200>)
 8005e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	61bb      	str	r3, [r7, #24]
 8005e5a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	4b60      	ldr	r3, [pc, #384]	@ (8005fe4 <HAL_LTDC_MspInit+0x200>)
 8005e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e64:	4a5f      	ldr	r2, [pc, #380]	@ (8005fe4 <HAL_LTDC_MspInit+0x200>)
 8005e66:	f043 0302 	orr.w	r3, r3, #2
 8005e6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e6c:	4b5d      	ldr	r3, [pc, #372]	@ (8005fe4 <HAL_LTDC_MspInit+0x200>)
 8005e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e70:	f003 0302 	and.w	r3, r3, #2
 8005e74:	617b      	str	r3, [r7, #20]
 8005e76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005e78:	2300      	movs	r3, #0
 8005e7a:	613b      	str	r3, [r7, #16]
 8005e7c:	4b59      	ldr	r3, [pc, #356]	@ (8005fe4 <HAL_LTDC_MspInit+0x200>)
 8005e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e80:	4a58      	ldr	r2, [pc, #352]	@ (8005fe4 <HAL_LTDC_MspInit+0x200>)
 8005e82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e86:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e88:	4b56      	ldr	r3, [pc, #344]	@ (8005fe4 <HAL_LTDC_MspInit+0x200>)
 8005e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e90:	613b      	str	r3, [r7, #16]
 8005e92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e94:	2300      	movs	r3, #0
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	4b52      	ldr	r3, [pc, #328]	@ (8005fe4 <HAL_LTDC_MspInit+0x200>)
 8005e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e9c:	4a51      	ldr	r2, [pc, #324]	@ (8005fe4 <HAL_LTDC_MspInit+0x200>)
 8005e9e:	f043 0304 	orr.w	r3, r3, #4
 8005ea2:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ea4:	4b4f      	ldr	r3, [pc, #316]	@ (8005fe4 <HAL_LTDC_MspInit+0x200>)
 8005ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	60bb      	str	r3, [r7, #8]
 8005eb4:	4b4b      	ldr	r3, [pc, #300]	@ (8005fe4 <HAL_LTDC_MspInit+0x200>)
 8005eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb8:	4a4a      	ldr	r2, [pc, #296]	@ (8005fe4 <HAL_LTDC_MspInit+0x200>)
 8005eba:	f043 0308 	orr.w	r3, r3, #8
 8005ebe:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ec0:	4b48      	ldr	r3, [pc, #288]	@ (8005fe4 <HAL_LTDC_MspInit+0x200>)
 8005ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec4:	f003 0308 	and.w	r3, r3, #8
 8005ec8:	60bb      	str	r3, [r7, #8]
 8005eca:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005ecc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ed0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005eda:	2300      	movs	r3, #0
 8005edc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005ede:	230e      	movs	r3, #14
 8005ee0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005ee2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	483f      	ldr	r0, [pc, #252]	@ (8005fe8 <HAL_LTDC_MspInit+0x204>)
 8005eea:	f002 fd95 	bl	8008a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8005eee:	f641 0358 	movw	r3, #6232	@ 0x1858
 8005ef2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005efc:	2300      	movs	r3, #0
 8005efe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005f00:	230e      	movs	r3, #14
 8005f02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4838      	ldr	r0, [pc, #224]	@ (8005fec <HAL_LTDC_MspInit+0x208>)
 8005f0c:	f002 fd84 	bl	8008a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005f10:	2303      	movs	r3, #3
 8005f12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f14:	2302      	movs	r3, #2
 8005f16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005f20:	2309      	movs	r3, #9
 8005f22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f28:	4619      	mov	r1, r3
 8005f2a:	4831      	ldr	r0, [pc, #196]	@ (8005ff0 <HAL_LTDC_MspInit+0x20c>)
 8005f2c:	f002 fd74 	bl	8008a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8005f30:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8005f34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f36:	2302      	movs	r3, #2
 8005f38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005f42:	230e      	movs	r3, #14
 8005f44:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	4828      	ldr	r0, [pc, #160]	@ (8005ff0 <HAL_LTDC_MspInit+0x20c>)
 8005f4e:	f002 fd63 	bl	8008a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8005f52:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8005f56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f58:	2302      	movs	r3, #2
 8005f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f60:	2300      	movs	r3, #0
 8005f62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005f64:	230e      	movs	r3, #14
 8005f66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005f68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	4821      	ldr	r0, [pc, #132]	@ (8005ff4 <HAL_LTDC_MspInit+0x210>)
 8005f70:	f002 fd52 	bl	8008a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8005f74:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8005f78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f82:	2300      	movs	r3, #0
 8005f84:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005f86:	230e      	movs	r3, #14
 8005f88:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f8e:	4619      	mov	r1, r3
 8005f90:	4819      	ldr	r0, [pc, #100]	@ (8005ff8 <HAL_LTDC_MspInit+0x214>)
 8005f92:	f002 fd41 	bl	8008a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8005f96:	2348      	movs	r3, #72	@ 0x48
 8005f98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005fa6:	230e      	movs	r3, #14
 8005fa8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005faa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fae:	4619      	mov	r1, r3
 8005fb0:	4812      	ldr	r0, [pc, #72]	@ (8005ffc <HAL_LTDC_MspInit+0x218>)
 8005fb2:	f002 fd31 	bl	8008a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8005fb6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005fba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005fc8:	2309      	movs	r3, #9
 8005fca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005fcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4808      	ldr	r0, [pc, #32]	@ (8005ff4 <HAL_LTDC_MspInit+0x210>)
 8005fd4:	f002 fd20 	bl	8008a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8005fd8:	bf00      	nop
 8005fda:	3738      	adds	r7, #56	@ 0x38
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	40016800 	.word	0x40016800
 8005fe4:	40023800 	.word	0x40023800
 8005fe8:	40021400 	.word	0x40021400
 8005fec:	40020000 	.word	0x40020000
 8005ff0:	40020400 	.word	0x40020400
 8005ff4:	40021800 	.word	0x40021800
 8005ff8:	40020800 	.word	0x40020800
 8005ffc:	40020c00 	.word	0x40020c00

08006000 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a0e      	ldr	r2, [pc, #56]	@ (8006048 <HAL_RNG_MspInit+0x48>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d115      	bne.n	800603e <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8006012:	2300      	movs	r3, #0
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	4b0d      	ldr	r3, [pc, #52]	@ (800604c <HAL_RNG_MspInit+0x4c>)
 8006018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800601a:	4a0c      	ldr	r2, [pc, #48]	@ (800604c <HAL_RNG_MspInit+0x4c>)
 800601c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006020:	6353      	str	r3, [r2, #52]	@ 0x34
 8006022:	4b0a      	ldr	r3, [pc, #40]	@ (800604c <HAL_RNG_MspInit+0x4c>)
 8006024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 800602e:	2200      	movs	r2, #0
 8006030:	2100      	movs	r1, #0
 8006032:	2050      	movs	r0, #80	@ 0x50
 8006034:	f001 fd47 	bl	8007ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8006038:	2050      	movs	r0, #80	@ 0x50
 800603a:	f001 fd60 	bl	8007afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800603e:	bf00      	nop
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	50060800 	.word	0x50060800
 800604c:	40023800 	.word	0x40023800

08006050 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b08a      	sub	sp, #40	@ 0x28
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006058:	f107 0314 	add.w	r3, r7, #20
 800605c:	2200      	movs	r2, #0
 800605e:	601a      	str	r2, [r3, #0]
 8006060:	605a      	str	r2, [r3, #4]
 8006062:	609a      	str	r2, [r3, #8]
 8006064:	60da      	str	r2, [r3, #12]
 8006066:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a28      	ldr	r2, [pc, #160]	@ (8006110 <HAL_SPI_MspInit+0xc0>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d149      	bne.n	8006106 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006072:	2300      	movs	r3, #0
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	4b27      	ldr	r3, [pc, #156]	@ (8006114 <HAL_SPI_MspInit+0xc4>)
 8006078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800607a:	4a26      	ldr	r2, [pc, #152]	@ (8006114 <HAL_SPI_MspInit+0xc4>)
 800607c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006080:	6453      	str	r3, [r2, #68]	@ 0x44
 8006082:	4b24      	ldr	r3, [pc, #144]	@ (8006114 <HAL_SPI_MspInit+0xc4>)
 8006084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006086:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800608a:	613b      	str	r3, [r7, #16]
 800608c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800608e:	2300      	movs	r3, #0
 8006090:	60fb      	str	r3, [r7, #12]
 8006092:	4b20      	ldr	r3, [pc, #128]	@ (8006114 <HAL_SPI_MspInit+0xc4>)
 8006094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006096:	4a1f      	ldr	r2, [pc, #124]	@ (8006114 <HAL_SPI_MspInit+0xc4>)
 8006098:	f043 0301 	orr.w	r3, r3, #1
 800609c:	6313      	str	r3, [r2, #48]	@ 0x30
 800609e:	4b1d      	ldr	r3, [pc, #116]	@ (8006114 <HAL_SPI_MspInit+0xc4>)
 80060a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	60fb      	str	r3, [r7, #12]
 80060a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060aa:	2300      	movs	r3, #0
 80060ac:	60bb      	str	r3, [r7, #8]
 80060ae:	4b19      	ldr	r3, [pc, #100]	@ (8006114 <HAL_SPI_MspInit+0xc4>)
 80060b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b2:	4a18      	ldr	r2, [pc, #96]	@ (8006114 <HAL_SPI_MspInit+0xc4>)
 80060b4:	f043 0302 	orr.w	r3, r3, #2
 80060b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80060ba:	4b16      	ldr	r3, [pc, #88]	@ (8006114 <HAL_SPI_MspInit+0xc4>)
 80060bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	60bb      	str	r3, [r7, #8]
 80060c4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80060c6:	23a0      	movs	r3, #160	@ 0xa0
 80060c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060ca:	2302      	movs	r3, #2
 80060cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ce:	2300      	movs	r3, #0
 80060d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060d2:	2303      	movs	r3, #3
 80060d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80060d6:	2305      	movs	r3, #5
 80060d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060da:	f107 0314 	add.w	r3, r7, #20
 80060de:	4619      	mov	r1, r3
 80060e0:	480d      	ldr	r0, [pc, #52]	@ (8006118 <HAL_SPI_MspInit+0xc8>)
 80060e2:	f002 fc99 	bl	8008a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80060e6:	2310      	movs	r3, #16
 80060e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060ea:	2302      	movs	r3, #2
 80060ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ee:	2300      	movs	r3, #0
 80060f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060f2:	2303      	movs	r3, #3
 80060f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80060f6:	2305      	movs	r3, #5
 80060f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060fa:	f107 0314 	add.w	r3, r7, #20
 80060fe:	4619      	mov	r1, r3
 8006100:	4806      	ldr	r0, [pc, #24]	@ (800611c <HAL_SPI_MspInit+0xcc>)
 8006102:	f002 fc89 	bl	8008a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006106:	bf00      	nop
 8006108:	3728      	adds	r7, #40	@ 0x28
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	40013000 	.word	0x40013000
 8006114:	40023800 	.word	0x40023800
 8006118:	40020000 	.word	0x40020000
 800611c:	40020400 	.word	0x40020400

08006120 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a0a      	ldr	r2, [pc, #40]	@ (8006158 <HAL_SPI_MspDeInit+0x38>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d10d      	bne.n	800614e <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8006132:	4b0a      	ldr	r3, [pc, #40]	@ (800615c <HAL_SPI_MspDeInit+0x3c>)
 8006134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006136:	4a09      	ldr	r2, [pc, #36]	@ (800615c <HAL_SPI_MspDeInit+0x3c>)
 8006138:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800613c:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 800613e:	21a0      	movs	r1, #160	@ 0xa0
 8006140:	4807      	ldr	r0, [pc, #28]	@ (8006160 <HAL_SPI_MspDeInit+0x40>)
 8006142:	f002 fe15 	bl	8008d70 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 8006146:	2110      	movs	r1, #16
 8006148:	4806      	ldr	r0, [pc, #24]	@ (8006164 <HAL_SPI_MspDeInit+0x44>)
 800614a:	f002 fe11 	bl	8008d70 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 800614e:	bf00      	nop
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	40013000 	.word	0x40013000
 800615c:	40023800 	.word	0x40023800
 8006160:	40020000 	.word	0x40020000
 8006164:	40020400 	.word	0x40020400

08006168 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800616e:	1d3b      	adds	r3, r7, #4
 8006170:	2200      	movs	r2, #0
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	605a      	str	r2, [r3, #4]
 8006176:	609a      	str	r2, [r3, #8]
 8006178:	60da      	str	r2, [r3, #12]
 800617a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800617c:	4b34      	ldr	r3, [pc, #208]	@ (8006250 <HAL_FMC_MspInit+0xe8>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d160      	bne.n	8006246 <HAL_FMC_MspInit+0xde>
    return;
  }
  FMC_Initialized = 1;
 8006184:	4b32      	ldr	r3, [pc, #200]	@ (8006250 <HAL_FMC_MspInit+0xe8>)
 8006186:	2201      	movs	r2, #1
 8006188:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800618a:	2300      	movs	r3, #0
 800618c:	603b      	str	r3, [r7, #0]
 800618e:	4b31      	ldr	r3, [pc, #196]	@ (8006254 <HAL_FMC_MspInit+0xec>)
 8006190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006192:	4a30      	ldr	r2, [pc, #192]	@ (8006254 <HAL_FMC_MspInit+0xec>)
 8006194:	f043 0301 	orr.w	r3, r3, #1
 8006198:	6393      	str	r3, [r2, #56]	@ 0x38
 800619a:	4b2e      	ldr	r3, [pc, #184]	@ (8006254 <HAL_FMC_MspInit+0xec>)
 800619c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	603b      	str	r3, [r7, #0]
 80061a4:	683b      	ldr	r3, [r7, #0]
  PG8   ------> FMC_SDCLK
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80061a6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80061aa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061ac:	2302      	movs	r3, #2
 80061ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061b0:	2300      	movs	r3, #0
 80061b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061b4:	2303      	movs	r3, #3
 80061b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80061b8:	230c      	movs	r3, #12
 80061ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80061bc:	1d3b      	adds	r3, r7, #4
 80061be:	4619      	mov	r1, r3
 80061c0:	4825      	ldr	r0, [pc, #148]	@ (8006258 <HAL_FMC_MspInit+0xf0>)
 80061c2:	f002 fc29 	bl	8008a18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80061c6:	230d      	movs	r3, #13
 80061c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061ca:	2302      	movs	r3, #2
 80061cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061ce:	2300      	movs	r3, #0
 80061d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061d2:	2303      	movs	r3, #3
 80061d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80061d6:	230c      	movs	r3, #12
 80061d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80061da:	1d3b      	adds	r3, r7, #4
 80061dc:	4619      	mov	r1, r3
 80061de:	481f      	ldr	r0, [pc, #124]	@ (800625c <HAL_FMC_MspInit+0xf4>)
 80061e0:	f002 fc1a 	bl	8008a18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 80061e4:	f248 1331 	movw	r3, #33073	@ 0x8131
 80061e8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061ea:	2302      	movs	r3, #2
 80061ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061ee:	2300      	movs	r3, #0
 80061f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061f2:	2303      	movs	r3, #3
 80061f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80061f6:	230c      	movs	r3, #12
 80061f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80061fa:	1d3b      	adds	r3, r7, #4
 80061fc:	4619      	mov	r1, r3
 80061fe:	4818      	ldr	r0, [pc, #96]	@ (8006260 <HAL_FMC_MspInit+0xf8>)
 8006200:	f002 fc0a 	bl	8008a18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8006204:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8006208:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800620a:	2302      	movs	r3, #2
 800620c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006212:	2303      	movs	r3, #3
 8006214:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006216:	230c      	movs	r3, #12
 8006218:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800621a:	1d3b      	adds	r3, r7, #4
 800621c:	4619      	mov	r1, r3
 800621e:	4811      	ldr	r0, [pc, #68]	@ (8006264 <HAL_FMC_MspInit+0xfc>)
 8006220:	f002 fbfa 	bl	8008a18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 8006224:	f24c 0303 	movw	r3, #49155	@ 0xc003
 8006228:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800622a:	2302      	movs	r3, #2
 800622c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800622e:	2300      	movs	r3, #0
 8006230:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006232:	2303      	movs	r3, #3
 8006234:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006236:	230c      	movs	r3, #12
 8006238:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800623a:	1d3b      	adds	r3, r7, #4
 800623c:	4619      	mov	r1, r3
 800623e:	480a      	ldr	r0, [pc, #40]	@ (8006268 <HAL_FMC_MspInit+0x100>)
 8006240:	f002 fbea 	bl	8008a18 <HAL_GPIO_Init>
 8006244:	e000      	b.n	8006248 <HAL_FMC_MspInit+0xe0>
    return;
 8006246:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20001a88 	.word	0x20001a88
 8006254:	40023800 	.word	0x40023800
 8006258:	40021400 	.word	0x40021400
 800625c:	40020800 	.word	0x40020800
 8006260:	40021800 	.word	0x40021800
 8006264:	40021000 	.word	0x40021000
 8006268:	40020c00 	.word	0x40020c00

0800626c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8006274:	f7ff ff78 	bl	8006168 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8006278:	bf00      	nop
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a0b      	ldr	r2, [pc, #44]	@ (80062bc <HAL_TIM_Base_MspInit+0x3c>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d10d      	bne.n	80062ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006292:	2300      	movs	r3, #0
 8006294:	60fb      	str	r3, [r7, #12]
 8006296:	4b0a      	ldr	r3, [pc, #40]	@ (80062c0 <HAL_TIM_Base_MspInit+0x40>)
 8006298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800629a:	4a09      	ldr	r2, [pc, #36]	@ (80062c0 <HAL_TIM_Base_MspInit+0x40>)
 800629c:	f043 0310 	orr.w	r3, r3, #16
 80062a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80062a2:	4b07      	ldr	r3, [pc, #28]	@ (80062c0 <HAL_TIM_Base_MspInit+0x40>)
 80062a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a6:	f003 0310 	and.w	r3, r3, #16
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */

  }
}
 80062ae:	bf00      	nop
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	40001000 	.word	0x40001000
 80062c0:	40023800 	.word	0x40023800

080062c4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08a      	sub	sp, #40	@ 0x28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062cc:	f107 0314 	add.w	r3, r7, #20
 80062d0:	2200      	movs	r2, #0
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	605a      	str	r2, [r3, #4]
 80062d6:	609a      	str	r2, [r3, #8]
 80062d8:	60da      	str	r2, [r3, #12]
 80062da:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a17      	ldr	r2, [pc, #92]	@ (8006340 <HAL_DAC_MspInit+0x7c>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d127      	bne.n	8006336 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80062e6:	2300      	movs	r3, #0
 80062e8:	613b      	str	r3, [r7, #16]
 80062ea:	4b16      	ldr	r3, [pc, #88]	@ (8006344 <HAL_DAC_MspInit+0x80>)
 80062ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ee:	4a15      	ldr	r2, [pc, #84]	@ (8006344 <HAL_DAC_MspInit+0x80>)
 80062f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80062f6:	4b13      	ldr	r3, [pc, #76]	@ (8006344 <HAL_DAC_MspInit+0x80>)
 80062f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062fe:	613b      	str	r3, [r7, #16]
 8006300:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006302:	2300      	movs	r3, #0
 8006304:	60fb      	str	r3, [r7, #12]
 8006306:	4b0f      	ldr	r3, [pc, #60]	@ (8006344 <HAL_DAC_MspInit+0x80>)
 8006308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800630a:	4a0e      	ldr	r2, [pc, #56]	@ (8006344 <HAL_DAC_MspInit+0x80>)
 800630c:	f043 0301 	orr.w	r3, r3, #1
 8006310:	6313      	str	r3, [r2, #48]	@ 0x30
 8006312:	4b0c      	ldr	r3, [pc, #48]	@ (8006344 <HAL_DAC_MspInit+0x80>)
 8006314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800631e:	2310      	movs	r3, #16
 8006320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006322:	2303      	movs	r3, #3
 8006324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006326:	2300      	movs	r3, #0
 8006328:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800632a:	f107 0314 	add.w	r3, r7, #20
 800632e:	4619      	mov	r1, r3
 8006330:	4805      	ldr	r0, [pc, #20]	@ (8006348 <HAL_DAC_MspInit+0x84>)
 8006332:	f002 fb71 	bl	8008a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */

  }
}
 8006336:	bf00      	nop
 8006338:	3728      	adds	r7, #40	@ 0x28
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	40007400 	.word	0x40007400
 8006344:	40023800 	.word	0x40023800
 8006348:	40020000 	.word	0x40020000

0800634c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800634c:	b480      	push	{r7}
 800634e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006350:	bf00      	nop
 8006352:	e7fd      	b.n	8006350 <NMI_Handler+0x4>

08006354 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006358:	bf00      	nop
 800635a:	e7fd      	b.n	8006358 <HardFault_Handler+0x4>

0800635c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800635c:	b480      	push	{r7}
 800635e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006360:	bf00      	nop
 8006362:	e7fd      	b.n	8006360 <MemManage_Handler+0x4>

08006364 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006364:	b480      	push	{r7}
 8006366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006368:	bf00      	nop
 800636a:	e7fd      	b.n	8006368 <BusFault_Handler+0x4>

0800636c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006370:	bf00      	nop
 8006372:	e7fd      	b.n	8006370 <UsageFault_Handler+0x4>

08006374 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006374:	b480      	push	{r7}
 8006376:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006378:	bf00      	nop
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006382:	b480      	push	{r7}
 8006384:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006386:	bf00      	nop
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006390:	b480      	push	{r7}
 8006392:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006394:	bf00      	nop
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80063a2:	f001 fa71 	bl	8007888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80063a6:	bf00      	nop
 80063a8:	bd80      	pop	{r7, pc}
	...

080063ac <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 80063b0:	4802      	ldr	r0, [pc, #8]	@ (80063bc <HASH_RNG_IRQHandler+0x10>)
 80063b2:	f004 f973 	bl	800a69c <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 80063b6:	bf00      	nop
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	20001130 	.word	0x20001130

080063c0 <TIM6_DAC_IRQHandler>:

/* USER CODE BEGIN 1 */
void TIM6_DAC_IRQHandler(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim6);
 80063c4:	4802      	ldr	r0, [pc, #8]	@ (80063d0 <TIM6_DAC_IRQHandler+0x10>)
 80063c6:	f005 f82c 	bl	800b422 <HAL_TIM_IRQHandler>
}
 80063ca:	bf00      	nop
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	200011e0 	.word	0x200011e0

080063d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80063d4:	b480      	push	{r7}
 80063d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80063d8:	4b08      	ldr	r3, [pc, #32]	@ (80063fc <SystemInit+0x28>)
 80063da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063de:	4a07      	ldr	r2, [pc, #28]	@ (80063fc <SystemInit+0x28>)
 80063e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80063e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80063e8:	4b04      	ldr	r3, [pc, #16]	@ (80063fc <SystemInit+0x28>)
 80063ea:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80063ee:	609a      	str	r2, [r3, #8]
#endif
}
 80063f0:	bf00      	nop
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	e000ed00 	.word	0xe000ed00

08006400 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8006400:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006438 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006404:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006406:	e003      	b.n	8006410 <LoopCopyDataInit>

08006408 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006408:	4b0c      	ldr	r3, [pc, #48]	@ (800643c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800640a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800640c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800640e:	3104      	adds	r1, #4

08006410 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006410:	480b      	ldr	r0, [pc, #44]	@ (8006440 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006412:	4b0c      	ldr	r3, [pc, #48]	@ (8006444 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006414:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006416:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006418:	d3f6      	bcc.n	8006408 <CopyDataInit>
  ldr  r2, =_sbss
 800641a:	4a0b      	ldr	r2, [pc, #44]	@ (8006448 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800641c:	e002      	b.n	8006424 <LoopFillZerobss>

0800641e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800641e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006420:	f842 3b04 	str.w	r3, [r2], #4

08006424 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006424:	4b09      	ldr	r3, [pc, #36]	@ (800644c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006426:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006428:	d3f9      	bcc.n	800641e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800642a:	f7ff ffd3 	bl	80063d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800642e:	f005 fbad 	bl	800bb8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006432:	f7fe ff79 	bl	8005328 <main>
  bx  lr    
 8006436:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8006438:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800643c:	0800dba0 	.word	0x0800dba0
  ldr  r0, =_sdata
 8006440:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006444:	200001b4 	.word	0x200001b4
  ldr  r2, =_sbss
 8006448:	200001b4 	.word	0x200001b4
  ldr  r3, = _ebss
 800644c:	20001ce4 	.word	0x20001ce4

08006450 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006450:	e7fe      	b.n	8006450 <ADC_IRQHandler>

08006452 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8006456:	f000 fa5d 	bl	8006914 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800645a:	20ca      	movs	r0, #202	@ 0xca
 800645c:	f000 f95d 	bl	800671a <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8006460:	20c3      	movs	r0, #195	@ 0xc3
 8006462:	f000 f967 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8006466:	2008      	movs	r0, #8
 8006468:	f000 f964 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 800646c:	2050      	movs	r0, #80	@ 0x50
 800646e:	f000 f961 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8006472:	20cf      	movs	r0, #207	@ 0xcf
 8006474:	f000 f951 	bl	800671a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006478:	2000      	movs	r0, #0
 800647a:	f000 f95b 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800647e:	20c1      	movs	r0, #193	@ 0xc1
 8006480:	f000 f958 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8006484:	2030      	movs	r0, #48	@ 0x30
 8006486:	f000 f955 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800648a:	20ed      	movs	r0, #237	@ 0xed
 800648c:	f000 f945 	bl	800671a <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8006490:	2064      	movs	r0, #100	@ 0x64
 8006492:	f000 f94f 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8006496:	2003      	movs	r0, #3
 8006498:	f000 f94c 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 800649c:	2012      	movs	r0, #18
 800649e:	f000 f949 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80064a2:	2081      	movs	r0, #129	@ 0x81
 80064a4:	f000 f946 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80064a8:	20e8      	movs	r0, #232	@ 0xe8
 80064aa:	f000 f936 	bl	800671a <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80064ae:	2085      	movs	r0, #133	@ 0x85
 80064b0:	f000 f940 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80064b4:	2000      	movs	r0, #0
 80064b6:	f000 f93d 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80064ba:	2078      	movs	r0, #120	@ 0x78
 80064bc:	f000 f93a 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80064c0:	20cb      	movs	r0, #203	@ 0xcb
 80064c2:	f000 f92a 	bl	800671a <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80064c6:	2039      	movs	r0, #57	@ 0x39
 80064c8:	f000 f934 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80064cc:	202c      	movs	r0, #44	@ 0x2c
 80064ce:	f000 f931 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80064d2:	2000      	movs	r0, #0
 80064d4:	f000 f92e 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80064d8:	2034      	movs	r0, #52	@ 0x34
 80064da:	f000 f92b 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80064de:	2002      	movs	r0, #2
 80064e0:	f000 f928 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80064e4:	20f7      	movs	r0, #247	@ 0xf7
 80064e6:	f000 f918 	bl	800671a <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80064ea:	2020      	movs	r0, #32
 80064ec:	f000 f922 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80064f0:	20ea      	movs	r0, #234	@ 0xea
 80064f2:	f000 f912 	bl	800671a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80064f6:	2000      	movs	r0, #0
 80064f8:	f000 f91c 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80064fc:	2000      	movs	r0, #0
 80064fe:	f000 f919 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8006502:	20b1      	movs	r0, #177	@ 0xb1
 8006504:	f000 f909 	bl	800671a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006508:	2000      	movs	r0, #0
 800650a:	f000 f913 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800650e:	201b      	movs	r0, #27
 8006510:	f000 f910 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8006514:	20b6      	movs	r0, #182	@ 0xb6
 8006516:	f000 f900 	bl	800671a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800651a:	200a      	movs	r0, #10
 800651c:	f000 f90a 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8006520:	20a2      	movs	r0, #162	@ 0xa2
 8006522:	f000 f907 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8006526:	20c0      	movs	r0, #192	@ 0xc0
 8006528:	f000 f8f7 	bl	800671a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800652c:	2010      	movs	r0, #16
 800652e:	f000 f901 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8006532:	20c1      	movs	r0, #193	@ 0xc1
 8006534:	f000 f8f1 	bl	800671a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8006538:	2010      	movs	r0, #16
 800653a:	f000 f8fb 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800653e:	20c5      	movs	r0, #197	@ 0xc5
 8006540:	f000 f8eb 	bl	800671a <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8006544:	2045      	movs	r0, #69	@ 0x45
 8006546:	f000 f8f5 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800654a:	2015      	movs	r0, #21
 800654c:	f000 f8f2 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8006550:	20c7      	movs	r0, #199	@ 0xc7
 8006552:	f000 f8e2 	bl	800671a <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8006556:	2090      	movs	r0, #144	@ 0x90
 8006558:	f000 f8ec 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 800655c:	2036      	movs	r0, #54	@ 0x36
 800655e:	f000 f8dc 	bl	800671a <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8006562:	20c8      	movs	r0, #200	@ 0xc8
 8006564:	f000 f8e6 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8006568:	20f2      	movs	r0, #242	@ 0xf2
 800656a:	f000 f8d6 	bl	800671a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800656e:	2000      	movs	r0, #0
 8006570:	f000 f8e0 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8006574:	20b0      	movs	r0, #176	@ 0xb0
 8006576:	f000 f8d0 	bl	800671a <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800657a:	20c2      	movs	r0, #194	@ 0xc2
 800657c:	f000 f8da 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8006580:	20b6      	movs	r0, #182	@ 0xb6
 8006582:	f000 f8ca 	bl	800671a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8006586:	200a      	movs	r0, #10
 8006588:	f000 f8d4 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 800658c:	20a7      	movs	r0, #167	@ 0xa7
 800658e:	f000 f8d1 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8006592:	2027      	movs	r0, #39	@ 0x27
 8006594:	f000 f8ce 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8006598:	2004      	movs	r0, #4
 800659a:	f000 f8cb 	bl	8006734 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800659e:	202a      	movs	r0, #42	@ 0x2a
 80065a0:	f000 f8bb 	bl	800671a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80065a4:	2000      	movs	r0, #0
 80065a6:	f000 f8c5 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80065aa:	2000      	movs	r0, #0
 80065ac:	f000 f8c2 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80065b0:	2000      	movs	r0, #0
 80065b2:	f000 f8bf 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80065b6:	20ef      	movs	r0, #239	@ 0xef
 80065b8:	f000 f8bc 	bl	8006734 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80065bc:	202b      	movs	r0, #43	@ 0x2b
 80065be:	f000 f8ac 	bl	800671a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80065c2:	2000      	movs	r0, #0
 80065c4:	f000 f8b6 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80065c8:	2000      	movs	r0, #0
 80065ca:	f000 f8b3 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80065ce:	2001      	movs	r0, #1
 80065d0:	f000 f8b0 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80065d4:	203f      	movs	r0, #63	@ 0x3f
 80065d6:	f000 f8ad 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80065da:	20f6      	movs	r0, #246	@ 0xf6
 80065dc:	f000 f89d 	bl	800671a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80065e0:	2001      	movs	r0, #1
 80065e2:	f000 f8a7 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80065e6:	2000      	movs	r0, #0
 80065e8:	f000 f8a4 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80065ec:	2006      	movs	r0, #6
 80065ee:	f000 f8a1 	bl	8006734 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80065f2:	202c      	movs	r0, #44	@ 0x2c
 80065f4:	f000 f891 	bl	800671a <ili9341_WriteReg>
  LCD_Delay(200);
 80065f8:	20c8      	movs	r0, #200	@ 0xc8
 80065fa:	f000 fa79 	bl	8006af0 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80065fe:	2026      	movs	r0, #38	@ 0x26
 8006600:	f000 f88b 	bl	800671a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8006604:	2001      	movs	r0, #1
 8006606:	f000 f895 	bl	8006734 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800660a:	20e0      	movs	r0, #224	@ 0xe0
 800660c:	f000 f885 	bl	800671a <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8006610:	200f      	movs	r0, #15
 8006612:	f000 f88f 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8006616:	2029      	movs	r0, #41	@ 0x29
 8006618:	f000 f88c 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 800661c:	2024      	movs	r0, #36	@ 0x24
 800661e:	f000 f889 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8006622:	200c      	movs	r0, #12
 8006624:	f000 f886 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8006628:	200e      	movs	r0, #14
 800662a:	f000 f883 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800662e:	2009      	movs	r0, #9
 8006630:	f000 f880 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8006634:	204e      	movs	r0, #78	@ 0x4e
 8006636:	f000 f87d 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800663a:	2078      	movs	r0, #120	@ 0x78
 800663c:	f000 f87a 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8006640:	203c      	movs	r0, #60	@ 0x3c
 8006642:	f000 f877 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8006646:	2009      	movs	r0, #9
 8006648:	f000 f874 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 800664c:	2013      	movs	r0, #19
 800664e:	f000 f871 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8006652:	2005      	movs	r0, #5
 8006654:	f000 f86e 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8006658:	2017      	movs	r0, #23
 800665a:	f000 f86b 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800665e:	2011      	movs	r0, #17
 8006660:	f000 f868 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006664:	2000      	movs	r0, #0
 8006666:	f000 f865 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800666a:	20e1      	movs	r0, #225	@ 0xe1
 800666c:	f000 f855 	bl	800671a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006670:	2000      	movs	r0, #0
 8006672:	f000 f85f 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8006676:	2016      	movs	r0, #22
 8006678:	f000 f85c 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800667c:	201b      	movs	r0, #27
 800667e:	f000 f859 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8006682:	2004      	movs	r0, #4
 8006684:	f000 f856 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8006688:	2011      	movs	r0, #17
 800668a:	f000 f853 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 800668e:	2007      	movs	r0, #7
 8006690:	f000 f850 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8006694:	2031      	movs	r0, #49	@ 0x31
 8006696:	f000 f84d 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800669a:	2033      	movs	r0, #51	@ 0x33
 800669c:	f000 f84a 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80066a0:	2042      	movs	r0, #66	@ 0x42
 80066a2:	f000 f847 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80066a6:	2005      	movs	r0, #5
 80066a8:	f000 f844 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80066ac:	200c      	movs	r0, #12
 80066ae:	f000 f841 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80066b2:	200a      	movs	r0, #10
 80066b4:	f000 f83e 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80066b8:	2028      	movs	r0, #40	@ 0x28
 80066ba:	f000 f83b 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80066be:	202f      	movs	r0, #47	@ 0x2f
 80066c0:	f000 f838 	bl	8006734 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80066c4:	200f      	movs	r0, #15
 80066c6:	f000 f835 	bl	8006734 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80066ca:	2011      	movs	r0, #17
 80066cc:	f000 f825 	bl	800671a <ili9341_WriteReg>
  LCD_Delay(200);
 80066d0:	20c8      	movs	r0, #200	@ 0xc8
 80066d2:	f000 fa0d 	bl	8006af0 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80066d6:	2029      	movs	r0, #41	@ 0x29
 80066d8:	f000 f81f 	bl	800671a <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80066dc:	202c      	movs	r0, #44	@ 0x2c
 80066de:	f000 f81c 	bl	800671a <ili9341_WriteReg>
}
 80066e2:	bf00      	nop
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80066ea:	f000 f913 	bl	8006914 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80066ee:	2103      	movs	r1, #3
 80066f0:	20d3      	movs	r0, #211	@ 0xd3
 80066f2:	f000 f82c 	bl	800674e <ili9341_ReadData>
 80066f6:	4603      	mov	r3, r0
 80066f8:	b29b      	uxth	r3, r3
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	bd80      	pop	{r7, pc}

080066fe <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8006702:	2029      	movs	r0, #41	@ 0x29
 8006704:	f000 f809 	bl	800671a <ili9341_WriteReg>
}
 8006708:	bf00      	nop
 800670a:	bd80      	pop	{r7, pc}

0800670c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8006710:	2028      	movs	r0, #40	@ 0x28
 8006712:	f000 f802 	bl	800671a <ili9341_WriteReg>
}
 8006716:	bf00      	nop
 8006718:	bd80      	pop	{r7, pc}

0800671a <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b082      	sub	sp, #8
 800671e:	af00      	add	r7, sp, #0
 8006720:	4603      	mov	r3, r0
 8006722:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8006724:	79fb      	ldrb	r3, [r7, #7]
 8006726:	4618      	mov	r0, r3
 8006728:	f000 f98e 	bl	8006a48 <LCD_IO_WriteReg>
}
 800672c:	bf00      	nop
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	4603      	mov	r3, r0
 800673c:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800673e:	88fb      	ldrh	r3, [r7, #6]
 8006740:	4618      	mov	r0, r3
 8006742:	f000 f95f 	bl	8006a04 <LCD_IO_WriteData>
}
 8006746:	bf00      	nop
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b082      	sub	sp, #8
 8006752:	af00      	add	r7, sp, #0
 8006754:	4603      	mov	r3, r0
 8006756:	460a      	mov	r2, r1
 8006758:	80fb      	strh	r3, [r7, #6]
 800675a:	4613      	mov	r3, r2
 800675c:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800675e:	797a      	ldrb	r2, [r7, #5]
 8006760:	88fb      	ldrh	r3, [r7, #6]
 8006762:	4611      	mov	r1, r2
 8006764:	4618      	mov	r0, r3
 8006766:	f000 f991 	bl	8006a8c <LCD_IO_ReadData>
 800676a:	4603      	mov	r3, r0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8006774:	b480      	push	{r7}
 8006776:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8006778:	23f0      	movs	r3, #240	@ 0xf0
}
 800677a:	4618      	mov	r0, r3
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8006784:	b480      	push	{r7}
 8006786:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8006788:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 800678c:	4618      	mov	r0, r3
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
	...

08006798 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800679c:	4819      	ldr	r0, [pc, #100]	@ (8006804 <SPIx_Init+0x6c>)
 800679e:	f004 fcd2 	bl	800b146 <HAL_SPI_GetState>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d12b      	bne.n	8006800 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80067a8:	4b16      	ldr	r3, [pc, #88]	@ (8006804 <SPIx_Init+0x6c>)
 80067aa:	4a17      	ldr	r2, [pc, #92]	@ (8006808 <SPIx_Init+0x70>)
 80067ac:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80067ae:	4b15      	ldr	r3, [pc, #84]	@ (8006804 <SPIx_Init+0x6c>)
 80067b0:	2218      	movs	r2, #24
 80067b2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80067b4:	4b13      	ldr	r3, [pc, #76]	@ (8006804 <SPIx_Init+0x6c>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80067ba:	4b12      	ldr	r3, [pc, #72]	@ (8006804 <SPIx_Init+0x6c>)
 80067bc:	2200      	movs	r2, #0
 80067be:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80067c0:	4b10      	ldr	r3, [pc, #64]	@ (8006804 <SPIx_Init+0x6c>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80067c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006804 <SPIx_Init+0x6c>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80067cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006804 <SPIx_Init+0x6c>)
 80067ce:	2207      	movs	r2, #7
 80067d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80067d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006804 <SPIx_Init+0x6c>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80067d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006804 <SPIx_Init+0x6c>)
 80067da:	2200      	movs	r2, #0
 80067dc:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80067de:	4b09      	ldr	r3, [pc, #36]	@ (8006804 <SPIx_Init+0x6c>)
 80067e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067e4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80067e6:	4b07      	ldr	r3, [pc, #28]	@ (8006804 <SPIx_Init+0x6c>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80067ec:	4b05      	ldr	r3, [pc, #20]	@ (8006804 <SPIx_Init+0x6c>)
 80067ee:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80067f2:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80067f4:	4803      	ldr	r0, [pc, #12]	@ (8006804 <SPIx_Init+0x6c>)
 80067f6:	f000 f853 	bl	80068a0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80067fa:	4802      	ldr	r0, [pc, #8]	@ (8006804 <SPIx_Init+0x6c>)
 80067fc:	f004 f838 	bl	800a870 <HAL_SPI_Init>
  } 
}
 8006800:	bf00      	nop
 8006802:	bd80      	pop	{r7, pc}
 8006804:	20001a8c 	.word	0x20001a8c
 8006808:	40015000 	.word	0x40015000

0800680c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	4603      	mov	r3, r0
 8006814:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8006816:	2300      	movs	r3, #0
 8006818:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800681a:	79fb      	ldrb	r3, [r7, #7]
 800681c:	b29a      	uxth	r2, r3
 800681e:	4b09      	ldr	r3, [pc, #36]	@ (8006844 <SPIx_Read+0x38>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f107 0108 	add.w	r1, r7, #8
 8006826:	4808      	ldr	r0, [pc, #32]	@ (8006848 <SPIx_Read+0x3c>)
 8006828:	f004 f9e2 	bl	800abf0 <HAL_SPI_Receive>
 800682c:	4603      	mov	r3, r0
 800682e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8006830:	7bfb      	ldrb	r3, [r7, #15]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8006836:	f000 f827 	bl	8006888 <SPIx_Error>
  }
  
  return readvalue;
 800683a:	68bb      	ldr	r3, [r7, #8]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	20000194 	.word	0x20000194
 8006848:	20001a8c 	.word	0x20001a8c

0800684c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	4603      	mov	r3, r0
 8006854:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006856:	2300      	movs	r3, #0
 8006858:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800685a:	4b09      	ldr	r3, [pc, #36]	@ (8006880 <SPIx_Write+0x34>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	1db9      	adds	r1, r7, #6
 8006860:	2201      	movs	r2, #1
 8006862:	4808      	ldr	r0, [pc, #32]	@ (8006884 <SPIx_Write+0x38>)
 8006864:	f004 f890 	bl	800a988 <HAL_SPI_Transmit>
 8006868:	4603      	mov	r3, r0
 800686a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800686c:	7bfb      	ldrb	r3, [r7, #15]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8006872:	f000 f809 	bl	8006888 <SPIx_Error>
  }
}
 8006876:	bf00      	nop
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	20000194 	.word	0x20000194
 8006884:	20001a8c 	.word	0x20001a8c

08006888 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800688c:	4803      	ldr	r0, [pc, #12]	@ (800689c <SPIx_Error+0x14>)
 800688e:	f004 f853 	bl	800a938 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8006892:	f7ff ff81 	bl	8006798 <SPIx_Init>
}
 8006896:	bf00      	nop
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	20001a8c 	.word	0x20001a8c

080068a0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b08a      	sub	sp, #40	@ 0x28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80068a8:	2300      	movs	r3, #0
 80068aa:	613b      	str	r3, [r7, #16]
 80068ac:	4b17      	ldr	r3, [pc, #92]	@ (800690c <SPIx_MspInit+0x6c>)
 80068ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068b0:	4a16      	ldr	r2, [pc, #88]	@ (800690c <SPIx_MspInit+0x6c>)
 80068b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80068b8:	4b14      	ldr	r3, [pc, #80]	@ (800690c <SPIx_MspInit+0x6c>)
 80068ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068c0:	613b      	str	r3, [r7, #16]
 80068c2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80068c4:	2300      	movs	r3, #0
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	4b10      	ldr	r3, [pc, #64]	@ (800690c <SPIx_MspInit+0x6c>)
 80068ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068cc:	4a0f      	ldr	r2, [pc, #60]	@ (800690c <SPIx_MspInit+0x6c>)
 80068ce:	f043 0320 	orr.w	r3, r3, #32
 80068d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80068d4:	4b0d      	ldr	r3, [pc, #52]	@ (800690c <SPIx_MspInit+0x6c>)
 80068d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068d8:	f003 0320 	and.w	r3, r3, #32
 80068dc:	60fb      	str	r3, [r7, #12]
 80068de:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80068e0:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80068e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80068e6:	2302      	movs	r3, #2
 80068e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80068ea:	2302      	movs	r3, #2
 80068ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80068ee:	2301      	movs	r3, #1
 80068f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80068f2:	2305      	movs	r3, #5
 80068f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80068f6:	f107 0314 	add.w	r3, r7, #20
 80068fa:	4619      	mov	r1, r3
 80068fc:	4804      	ldr	r0, [pc, #16]	@ (8006910 <SPIx_MspInit+0x70>)
 80068fe:	f002 f88b 	bl	8008a18 <HAL_GPIO_Init>
}
 8006902:	bf00      	nop
 8006904:	3728      	adds	r7, #40	@ 0x28
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	40023800 	.word	0x40023800
 8006910:	40021400 	.word	0x40021400

08006914 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b088      	sub	sp, #32
 8006918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800691a:	4b36      	ldr	r3, [pc, #216]	@ (80069f4 <LCD_IO_Init+0xe0>)
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d164      	bne.n	80069ec <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8006922:	4b34      	ldr	r3, [pc, #208]	@ (80069f4 <LCD_IO_Init+0xe0>)
 8006924:	2201      	movs	r2, #1
 8006926:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8006928:	2300      	movs	r3, #0
 800692a:	60bb      	str	r3, [r7, #8]
 800692c:	4b32      	ldr	r3, [pc, #200]	@ (80069f8 <LCD_IO_Init+0xe4>)
 800692e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006930:	4a31      	ldr	r2, [pc, #196]	@ (80069f8 <LCD_IO_Init+0xe4>)
 8006932:	f043 0308 	orr.w	r3, r3, #8
 8006936:	6313      	str	r3, [r2, #48]	@ 0x30
 8006938:	4b2f      	ldr	r3, [pc, #188]	@ (80069f8 <LCD_IO_Init+0xe4>)
 800693a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800693c:	f003 0308 	and.w	r3, r3, #8
 8006940:	60bb      	str	r3, [r7, #8]
 8006942:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8006944:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006948:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800694a:	2301      	movs	r3, #1
 800694c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800694e:	2300      	movs	r3, #0
 8006950:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8006952:	2302      	movs	r3, #2
 8006954:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8006956:	f107 030c 	add.w	r3, r7, #12
 800695a:	4619      	mov	r1, r3
 800695c:	4827      	ldr	r0, [pc, #156]	@ (80069fc <LCD_IO_Init+0xe8>)
 800695e:	f002 f85b 	bl	8008a18 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8006962:	2300      	movs	r3, #0
 8006964:	607b      	str	r3, [r7, #4]
 8006966:	4b24      	ldr	r3, [pc, #144]	@ (80069f8 <LCD_IO_Init+0xe4>)
 8006968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800696a:	4a23      	ldr	r2, [pc, #140]	@ (80069f8 <LCD_IO_Init+0xe4>)
 800696c:	f043 0308 	orr.w	r3, r3, #8
 8006970:	6313      	str	r3, [r2, #48]	@ 0x30
 8006972:	4b21      	ldr	r3, [pc, #132]	@ (80069f8 <LCD_IO_Init+0xe4>)
 8006974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006976:	f003 0308 	and.w	r3, r3, #8
 800697a:	607b      	str	r3, [r7, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800697e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006982:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8006984:	2301      	movs	r3, #1
 8006986:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8006988:	2300      	movs	r3, #0
 800698a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800698c:	2302      	movs	r3, #2
 800698e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8006990:	f107 030c 	add.w	r3, r7, #12
 8006994:	4619      	mov	r1, r3
 8006996:	4819      	ldr	r0, [pc, #100]	@ (80069fc <LCD_IO_Init+0xe8>)
 8006998:	f002 f83e 	bl	8008a18 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800699c:	2300      	movs	r3, #0
 800699e:	603b      	str	r3, [r7, #0]
 80069a0:	4b15      	ldr	r3, [pc, #84]	@ (80069f8 <LCD_IO_Init+0xe4>)
 80069a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069a4:	4a14      	ldr	r2, [pc, #80]	@ (80069f8 <LCD_IO_Init+0xe4>)
 80069a6:	f043 0304 	orr.w	r3, r3, #4
 80069aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80069ac:	4b12      	ldr	r3, [pc, #72]	@ (80069f8 <LCD_IO_Init+0xe4>)
 80069ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b0:	f003 0304 	and.w	r3, r3, #4
 80069b4:	603b      	str	r3, [r7, #0]
 80069b6:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80069b8:	2304      	movs	r3, #4
 80069ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80069bc:	2301      	movs	r3, #1
 80069be:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80069c0:	2300      	movs	r3, #0
 80069c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80069c4:	2302      	movs	r3, #2
 80069c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80069c8:	f107 030c 	add.w	r3, r7, #12
 80069cc:	4619      	mov	r1, r3
 80069ce:	480c      	ldr	r0, [pc, #48]	@ (8006a00 <LCD_IO_Init+0xec>)
 80069d0:	f002 f822 	bl	8008a18 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80069d4:	2200      	movs	r2, #0
 80069d6:	2104      	movs	r1, #4
 80069d8:	4809      	ldr	r0, [pc, #36]	@ (8006a00 <LCD_IO_Init+0xec>)
 80069da:	f002 faed 	bl	8008fb8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80069de:	2201      	movs	r2, #1
 80069e0:	2104      	movs	r1, #4
 80069e2:	4807      	ldr	r0, [pc, #28]	@ (8006a00 <LCD_IO_Init+0xec>)
 80069e4:	f002 fae8 	bl	8008fb8 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80069e8:	f7ff fed6 	bl	8006798 <SPIx_Init>
  }
}
 80069ec:	bf00      	nop
 80069ee:	3720      	adds	r7, #32
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	20001ae4 	.word	0x20001ae4
 80069f8:	40023800 	.word	0x40023800
 80069fc:	40020c00 	.word	0x40020c00
 8006a00:	40020800 	.word	0x40020800

08006a04 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006a14:	480a      	ldr	r0, [pc, #40]	@ (8006a40 <LCD_IO_WriteData+0x3c>)
 8006a16:	f002 facf 	bl	8008fb8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	2104      	movs	r1, #4
 8006a1e:	4809      	ldr	r0, [pc, #36]	@ (8006a44 <LCD_IO_WriteData+0x40>)
 8006a20:	f002 faca 	bl	8008fb8 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8006a24:	88fb      	ldrh	r3, [r7, #6]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7ff ff10 	bl	800684c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	2104      	movs	r1, #4
 8006a30:	4804      	ldr	r0, [pc, #16]	@ (8006a44 <LCD_IO_WriteData+0x40>)
 8006a32:	f002 fac1 	bl	8008fb8 <HAL_GPIO_WritePin>
}
 8006a36:	bf00      	nop
 8006a38:	3708      	adds	r7, #8
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	40020c00 	.word	0x40020c00
 8006a44:	40020800 	.word	0x40020800

08006a48 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	4603      	mov	r3, r0
 8006a50:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8006a52:	2200      	movs	r2, #0
 8006a54:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006a58:	480a      	ldr	r0, [pc, #40]	@ (8006a84 <LCD_IO_WriteReg+0x3c>)
 8006a5a:	f002 faad 	bl	8008fb8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8006a5e:	2200      	movs	r2, #0
 8006a60:	2104      	movs	r1, #4
 8006a62:	4809      	ldr	r0, [pc, #36]	@ (8006a88 <LCD_IO_WriteReg+0x40>)
 8006a64:	f002 faa8 	bl	8008fb8 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8006a68:	79fb      	ldrb	r3, [r7, #7]
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7ff feed 	bl	800684c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8006a72:	2201      	movs	r2, #1
 8006a74:	2104      	movs	r1, #4
 8006a76:	4804      	ldr	r0, [pc, #16]	@ (8006a88 <LCD_IO_WriteReg+0x40>)
 8006a78:	f002 fa9e 	bl	8008fb8 <HAL_GPIO_WritePin>
}
 8006a7c:	bf00      	nop
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	40020c00 	.word	0x40020c00
 8006a88:	40020800 	.word	0x40020800

08006a8c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	4603      	mov	r3, r0
 8006a94:	460a      	mov	r2, r1
 8006a96:	80fb      	strh	r3, [r7, #6]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	2104      	movs	r1, #4
 8006aa4:	4810      	ldr	r0, [pc, #64]	@ (8006ae8 <LCD_IO_ReadData+0x5c>)
 8006aa6:	f002 fa87 	bl	8008fb8 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006ab0:	480e      	ldr	r0, [pc, #56]	@ (8006aec <LCD_IO_ReadData+0x60>)
 8006ab2:	f002 fa81 	bl	8008fb8 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8006ab6:	88fb      	ldrh	r3, [r7, #6]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7ff fec7 	bl	800684c <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8006abe:	797b      	ldrb	r3, [r7, #5]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7ff fea3 	bl	800680c <SPIx_Read>
 8006ac6:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006ace:	4807      	ldr	r0, [pc, #28]	@ (8006aec <LCD_IO_ReadData+0x60>)
 8006ad0:	f002 fa72 	bl	8008fb8 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	2104      	movs	r1, #4
 8006ad8:	4803      	ldr	r0, [pc, #12]	@ (8006ae8 <LCD_IO_ReadData+0x5c>)
 8006ada:	f002 fa6d 	bl	8008fb8 <HAL_GPIO_WritePin>
  
  return readvalue;
 8006ade:	68fb      	ldr	r3, [r7, #12]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	40020800 	.word	0x40020800
 8006aec:	40020c00 	.word	0x40020c00

08006af0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fee5 	bl	80078c8 <HAL_Delay>
}
 8006afe:	bf00      	nop
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
	...

08006b08 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8006b0c:	4b2d      	ldr	r3, [pc, #180]	@ (8006bc4 <BSP_LCD_Init+0xbc>)
 8006b0e:	4a2e      	ldr	r2, [pc, #184]	@ (8006bc8 <BSP_LCD_Init+0xc0>)
 8006b10:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8006b12:	4b2c      	ldr	r3, [pc, #176]	@ (8006bc4 <BSP_LCD_Init+0xbc>)
 8006b14:	2209      	movs	r2, #9
 8006b16:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8006b18:	4b2a      	ldr	r3, [pc, #168]	@ (8006bc4 <BSP_LCD_Init+0xbc>)
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8006b1e:	4b29      	ldr	r3, [pc, #164]	@ (8006bc4 <BSP_LCD_Init+0xbc>)
 8006b20:	221d      	movs	r2, #29
 8006b22:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8006b24:	4b27      	ldr	r3, [pc, #156]	@ (8006bc4 <BSP_LCD_Init+0xbc>)
 8006b26:	2203      	movs	r2, #3
 8006b28:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8006b2a:	4b26      	ldr	r3, [pc, #152]	@ (8006bc4 <BSP_LCD_Init+0xbc>)
 8006b2c:	f240 120d 	movw	r2, #269	@ 0x10d
 8006b30:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8006b32:	4b24      	ldr	r3, [pc, #144]	@ (8006bc4 <BSP_LCD_Init+0xbc>)
 8006b34:	f240 1243 	movw	r2, #323	@ 0x143
 8006b38:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8006b3a:	4b22      	ldr	r3, [pc, #136]	@ (8006bc4 <BSP_LCD_Init+0xbc>)
 8006b3c:	f240 1217 	movw	r2, #279	@ 0x117
 8006b40:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8006b42:	4b20      	ldr	r3, [pc, #128]	@ (8006bc4 <BSP_LCD_Init+0xbc>)
 8006b44:	f240 1247 	movw	r2, #327	@ 0x147
 8006b48:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8006b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8006bc4 <BSP_LCD_Init+0xbc>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8006b52:	4b1c      	ldr	r3, [pc, #112]	@ (8006bc4 <BSP_LCD_Init+0xbc>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8006b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8006bc4 <BSP_LCD_Init+0xbc>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8006b62:	4b1a      	ldr	r3, [pc, #104]	@ (8006bcc <BSP_LCD_Init+0xc4>)
 8006b64:	2208      	movs	r2, #8
 8006b66:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8006b68:	4b18      	ldr	r3, [pc, #96]	@ (8006bcc <BSP_LCD_Init+0xc4>)
 8006b6a:	22c0      	movs	r2, #192	@ 0xc0
 8006b6c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8006b6e:	4b17      	ldr	r3, [pc, #92]	@ (8006bcc <BSP_LCD_Init+0xc4>)
 8006b70:	2204      	movs	r2, #4
 8006b72:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8006b74:	4b15      	ldr	r3, [pc, #84]	@ (8006bcc <BSP_LCD_Init+0xc4>)
 8006b76:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006b7a:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8006b7c:	4813      	ldr	r0, [pc, #76]	@ (8006bcc <BSP_LCD_Init+0xc4>)
 8006b7e:	f003 fb3f 	bl	800a200 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8006b82:	4b10      	ldr	r3, [pc, #64]	@ (8006bc4 <BSP_LCD_Init+0xbc>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8006b88:	4b0e      	ldr	r3, [pc, #56]	@ (8006bc4 <BSP_LCD_Init+0xbc>)
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8006b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006bc4 <BSP_LCD_Init+0xbc>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8006b94:	4b0b      	ldr	r3, [pc, #44]	@ (8006bc4 <BSP_LCD_Init+0xbc>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8006b9a:	f000 fa6b 	bl	8007074 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8006b9e:	4809      	ldr	r0, [pc, #36]	@ (8006bc4 <BSP_LCD_Init+0xbc>)
 8006ba0:	f002 fbe4 	bl	800936c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8006ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8006bd0 <BSP_LCD_Init+0xc8>)
 8006ba6:	4a0b      	ldr	r2, [pc, #44]	@ (8006bd4 <BSP_LCD_Init+0xcc>)
 8006ba8:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8006baa:	4b09      	ldr	r3, [pc, #36]	@ (8006bd0 <BSP_LCD_Init+0xc8>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8006bb2:	f000 fc4d 	bl	8007450 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8006bb6:	4808      	ldr	r0, [pc, #32]	@ (8006bd8 <BSP_LCD_Init+0xd0>)
 8006bb8:	f000 f8be 	bl	8006d38 <BSP_LCD_SetFont>

  return LCD_OK;
 8006bbc:	2300      	movs	r3, #0
}  
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	20001ae8 	.word	0x20001ae8
 8006bc8:	40016800 	.word	0x40016800
 8006bcc:	20001bd0 	.word	0x20001bd0
 8006bd0:	20001c1c 	.word	0x20001c1c
 8006bd4:	2000015c 	.word	0x2000015c
 8006bd8:	20000198 	.word	0x20000198

08006bdc <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8006be0:	4b03      	ldr	r3, [pc, #12]	@ (8006bf0 <BSP_LCD_GetXSize+0x14>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be6:	4798      	blx	r3
 8006be8:	4603      	mov	r3, r0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20001c1c 	.word	0x20001c1c

08006bf4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8006bf8:	4b03      	ldr	r3, [pc, #12]	@ (8006c08 <BSP_LCD_GetYSize+0x14>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bfe:	4798      	blx	r3
 8006c00:	4603      	mov	r3, r0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20001c1c 	.word	0x20001c1c

08006c0c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b090      	sub	sp, #64	@ 0x40
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	4603      	mov	r3, r0
 8006c14:	6039      	str	r1, [r7, #0]
 8006c16:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8006c1c:	f7ff ffde 	bl	8006bdc <BSP_LCD_GetXSize>
 8006c20:	4603      	mov	r3, r0
 8006c22:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8006c24:	2300      	movs	r3, #0
 8006c26:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8006c28:	f7ff ffe4 	bl	8006bf4 <BSP_LCD_GetYSize>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8006c30:	2300      	movs	r3, #0
 8006c32:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8006c38:	23ff      	movs	r3, #255	@ 0xff
 8006c3a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8006c40:	2300      	movs	r3, #0
 8006c42:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8006c46:	2300      	movs	r3, #0
 8006c48:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8006c52:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8006c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006c58:	2307      	movs	r3, #7
 8006c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8006c5c:	f7ff ffbe 	bl	8006bdc <BSP_LCD_GetXSize>
 8006c60:	4603      	mov	r3, r0
 8006c62:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8006c64:	f7ff ffc6 	bl	8006bf4 <BSP_LCD_GetYSize>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8006c6c:	88fa      	ldrh	r2, [r7, #6]
 8006c6e:	f107 030c 	add.w	r3, r7, #12
 8006c72:	4619      	mov	r1, r3
 8006c74:	4814      	ldr	r0, [pc, #80]	@ (8006cc8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8006c76:	f002 fc49 	bl	800950c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8006c7a:	88fa      	ldrh	r2, [r7, #6]
 8006c7c:	4913      	ldr	r1, [pc, #76]	@ (8006ccc <BSP_LCD_LayerDefaultInit+0xc0>)
 8006c7e:	4613      	mov	r3, r2
 8006c80:	005b      	lsls	r3, r3, #1
 8006c82:	4413      	add	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	440b      	add	r3, r1
 8006c88:	3304      	adds	r3, #4
 8006c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c8e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8006c90:	88fa      	ldrh	r2, [r7, #6]
 8006c92:	490e      	ldr	r1, [pc, #56]	@ (8006ccc <BSP_LCD_LayerDefaultInit+0xc0>)
 8006c94:	4613      	mov	r3, r2
 8006c96:	005b      	lsls	r3, r3, #1
 8006c98:	4413      	add	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	440b      	add	r3, r1
 8006c9e:	3308      	adds	r3, #8
 8006ca0:	4a0b      	ldr	r2, [pc, #44]	@ (8006cd0 <BSP_LCD_LayerDefaultInit+0xc4>)
 8006ca2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8006ca4:	88fa      	ldrh	r2, [r7, #6]
 8006ca6:	4909      	ldr	r1, [pc, #36]	@ (8006ccc <BSP_LCD_LayerDefaultInit+0xc0>)
 8006ca8:	4613      	mov	r3, r2
 8006caa:	005b      	lsls	r3, r3, #1
 8006cac:	4413      	add	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	440b      	add	r3, r1
 8006cb2:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8006cb6:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8006cb8:	4803      	ldr	r0, [pc, #12]	@ (8006cc8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8006cba:	f002 fc65 	bl	8009588 <HAL_LTDC_EnableDither>
}
 8006cbe:	bf00      	nop
 8006cc0:	3740      	adds	r7, #64	@ 0x40
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	20001ae8 	.word	0x20001ae8
 8006ccc:	20001c04 	.word	0x20001c04
 8006cd0:	20000198 	.word	0x20000198

08006cd4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8006cdc:	4b07      	ldr	r3, [pc, #28]	@ (8006cfc <BSP_LCD_SetTextColor+0x28>)
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	4907      	ldr	r1, [pc, #28]	@ (8006d00 <BSP_LCD_SetTextColor+0x2c>)
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	4413      	add	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	440b      	add	r3, r1
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	601a      	str	r2, [r3, #0]
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	20001c00 	.word	0x20001c00
 8006d00:	20001c04 	.word	0x20001c04

08006d04 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8006d0c:	4b08      	ldr	r3, [pc, #32]	@ (8006d30 <BSP_LCD_SetBackColor+0x2c>)
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	4908      	ldr	r1, [pc, #32]	@ (8006d34 <BSP_LCD_SetBackColor+0x30>)
 8006d12:	4613      	mov	r3, r2
 8006d14:	005b      	lsls	r3, r3, #1
 8006d16:	4413      	add	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	440b      	add	r3, r1
 8006d1c:	3304      	adds	r3, #4
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	601a      	str	r2, [r3, #0]
}
 8006d22:	bf00      	nop
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	20001c00 	.word	0x20001c00
 8006d34:	20001c04 	.word	0x20001c04

08006d38 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8006d40:	4b08      	ldr	r3, [pc, #32]	@ (8006d64 <BSP_LCD_SetFont+0x2c>)
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	4908      	ldr	r1, [pc, #32]	@ (8006d68 <BSP_LCD_SetFont+0x30>)
 8006d46:	4613      	mov	r3, r2
 8006d48:	005b      	lsls	r3, r3, #1
 8006d4a:	4413      	add	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	440b      	add	r3, r1
 8006d50:	3308      	adds	r3, #8
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	601a      	str	r2, [r3, #0]
}
 8006d56:	bf00      	nop
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	20001c00 	.word	0x20001c00
 8006d68:	20001c04 	.word	0x20001c04

08006d6c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8006d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af02      	add	r7, sp, #8
 8006d72:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8006d74:	4b0f      	ldr	r3, [pc, #60]	@ (8006db4 <BSP_LCD_Clear+0x48>)
 8006d76:	681c      	ldr	r4, [r3, #0]
 8006d78:	4b0e      	ldr	r3, [pc, #56]	@ (8006db4 <BSP_LCD_Clear+0x48>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a0e      	ldr	r2, [pc, #56]	@ (8006db8 <BSP_LCD_Clear+0x4c>)
 8006d7e:	2134      	movs	r1, #52	@ 0x34
 8006d80:	fb01 f303 	mul.w	r3, r1, r3
 8006d84:	4413      	add	r3, r2
 8006d86:	335c      	adds	r3, #92	@ 0x5c
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	461e      	mov	r6, r3
 8006d8c:	f7ff ff26 	bl	8006bdc <BSP_LCD_GetXSize>
 8006d90:	4605      	mov	r5, r0
 8006d92:	f7ff ff2f 	bl	8006bf4 <BSP_LCD_GetYSize>
 8006d96:	4602      	mov	r2, r0
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	9301      	str	r3, [sp, #4]
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	4613      	mov	r3, r2
 8006da2:	462a      	mov	r2, r5
 8006da4:	4631      	mov	r1, r6
 8006da6:	4620      	mov	r0, r4
 8006da8:	f000 fb1a 	bl	80073e0 <FillBuffer>
}
 8006dac:	bf00      	nop
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006db4:	20001c00 	.word	0x20001c00
 8006db8:	20001ae8 	.word	0x20001ae8

08006dbc <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8006dbc:	b590      	push	{r4, r7, lr}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	80fb      	strh	r3, [r7, #6]
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	80bb      	strh	r3, [r7, #4]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006dce:	4b1b      	ldr	r3, [pc, #108]	@ (8006e3c <BSP_LCD_DisplayChar+0x80>)
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	491b      	ldr	r1, [pc, #108]	@ (8006e40 <BSP_LCD_DisplayChar+0x84>)
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	005b      	lsls	r3, r3, #1
 8006dd8:	4413      	add	r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	440b      	add	r3, r1
 8006dde:	3308      	adds	r3, #8
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	6819      	ldr	r1, [r3, #0]
 8006de4:	78fb      	ldrb	r3, [r7, #3]
 8006de6:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8006dea:	4b14      	ldr	r3, [pc, #80]	@ (8006e3c <BSP_LCD_DisplayChar+0x80>)
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	4c14      	ldr	r4, [pc, #80]	@ (8006e40 <BSP_LCD_DisplayChar+0x84>)
 8006df0:	4613      	mov	r3, r2
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	4413      	add	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4423      	add	r3, r4
 8006dfa:	3308      	adds	r3, #8
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006e00:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8006e04:	4b0d      	ldr	r3, [pc, #52]	@ (8006e3c <BSP_LCD_DisplayChar+0x80>)
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	4c0d      	ldr	r4, [pc, #52]	@ (8006e40 <BSP_LCD_DisplayChar+0x84>)
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	4413      	add	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4423      	add	r3, r4
 8006e14:	3308      	adds	r3, #8
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	889b      	ldrh	r3, [r3, #4]
 8006e1a:	3307      	adds	r3, #7
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	da00      	bge.n	8006e22 <BSP_LCD_DisplayChar+0x66>
 8006e20:	3307      	adds	r3, #7
 8006e22:	10db      	asrs	r3, r3, #3
 8006e24:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006e28:	18ca      	adds	r2, r1, r3
 8006e2a:	88b9      	ldrh	r1, [r7, #4]
 8006e2c:	88fb      	ldrh	r3, [r7, #6]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 fa1c 	bl	800726c <DrawChar>
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd90      	pop	{r4, r7, pc}
 8006e3c:	20001c00 	.word	0x20001c00
 8006e40:	20001c04 	.word	0x20001c04

08006e44 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8006e44:	b5b0      	push	{r4, r5, r7, lr}
 8006e46:	b088      	sub	sp, #32
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60ba      	str	r2, [r7, #8]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	4603      	mov	r3, r0
 8006e50:	81fb      	strh	r3, [r7, #14]
 8006e52:	460b      	mov	r3, r1
 8006e54:	81bb      	strh	r3, [r7, #12]
 8006e56:	4613      	mov	r3, r2
 8006e58:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	83fb      	strh	r3, [r7, #30]
 8006e5e:	2300      	movs	r3, #0
 8006e60:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8006e62:	2300      	movs	r3, #0
 8006e64:	61bb      	str	r3, [r7, #24]
 8006e66:	2300      	movs	r3, #0
 8006e68:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8006e6e:	e002      	b.n	8006e76 <BSP_LCD_DisplayStringAt+0x32>
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	3301      	adds	r3, #1
 8006e74:	61bb      	str	r3, [r7, #24]
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	1c5a      	adds	r2, r3, #1
 8006e7a:	617a      	str	r2, [r7, #20]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1f6      	bne.n	8006e70 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8006e82:	f7ff feab 	bl	8006bdc <BSP_LCD_GetXSize>
 8006e86:	4601      	mov	r1, r0
 8006e88:	4b4b      	ldr	r3, [pc, #300]	@ (8006fb8 <BSP_LCD_DisplayStringAt+0x174>)
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	484b      	ldr	r0, [pc, #300]	@ (8006fbc <BSP_LCD_DisplayStringAt+0x178>)
 8006e8e:	4613      	mov	r3, r2
 8006e90:	005b      	lsls	r3, r3, #1
 8006e92:	4413      	add	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4403      	add	r3, r0
 8006e98:	3308      	adds	r3, #8
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	889b      	ldrh	r3, [r3, #4]
 8006e9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ea2:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8006ea4:	79fb      	ldrb	r3, [r7, #7]
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	d01c      	beq.n	8006ee4 <BSP_LCD_DisplayStringAt+0xa0>
 8006eaa:	2b03      	cmp	r3, #3
 8006eac:	dc33      	bgt.n	8006f16 <BSP_LCD_DisplayStringAt+0xd2>
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d002      	beq.n	8006eb8 <BSP_LCD_DisplayStringAt+0x74>
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d019      	beq.n	8006eea <BSP_LCD_DisplayStringAt+0xa6>
 8006eb6:	e02e      	b.n	8006f16 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	1ad1      	subs	r1, r2, r3
 8006ebe:	4b3e      	ldr	r3, [pc, #248]	@ (8006fb8 <BSP_LCD_DisplayStringAt+0x174>)
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	483e      	ldr	r0, [pc, #248]	@ (8006fbc <BSP_LCD_DisplayStringAt+0x178>)
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	005b      	lsls	r3, r3, #1
 8006ec8:	4413      	add	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4403      	add	r3, r0
 8006ece:	3308      	adds	r3, #8
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	889b      	ldrh	r3, [r3, #4]
 8006ed4:	fb01 f303 	mul.w	r3, r1, r3
 8006ed8:	085b      	lsrs	r3, r3, #1
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	89fb      	ldrh	r3, [r7, #14]
 8006ede:	4413      	add	r3, r2
 8006ee0:	83fb      	strh	r3, [r7, #30]
      break;
 8006ee2:	e01b      	b.n	8006f1c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8006ee4:	89fb      	ldrh	r3, [r7, #14]
 8006ee6:	83fb      	strh	r3, [r7, #30]
      break;
 8006ee8:	e018      	b.n	8006f1c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	b299      	uxth	r1, r3
 8006ef2:	4b31      	ldr	r3, [pc, #196]	@ (8006fb8 <BSP_LCD_DisplayStringAt+0x174>)
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	4831      	ldr	r0, [pc, #196]	@ (8006fbc <BSP_LCD_DisplayStringAt+0x178>)
 8006ef8:	4613      	mov	r3, r2
 8006efa:	005b      	lsls	r3, r3, #1
 8006efc:	4413      	add	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4403      	add	r3, r0
 8006f02:	3308      	adds	r3, #8
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	889b      	ldrh	r3, [r3, #4]
 8006f08:	fb11 f303 	smulbb	r3, r1, r3
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	89fb      	ldrh	r3, [r7, #14]
 8006f10:	4413      	add	r3, r2
 8006f12:	83fb      	strh	r3, [r7, #30]
      break;
 8006f14:	e002      	b.n	8006f1c <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8006f16:	89fb      	ldrh	r3, [r7, #14]
 8006f18:	83fb      	strh	r3, [r7, #30]
      break;
 8006f1a:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8006f1c:	e01a      	b.n	8006f54 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	781a      	ldrb	r2, [r3, #0]
 8006f22:	89b9      	ldrh	r1, [r7, #12]
 8006f24:	8bfb      	ldrh	r3, [r7, #30]
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7ff ff48 	bl	8006dbc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8006f2c:	4b22      	ldr	r3, [pc, #136]	@ (8006fb8 <BSP_LCD_DisplayStringAt+0x174>)
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	4922      	ldr	r1, [pc, #136]	@ (8006fbc <BSP_LCD_DisplayStringAt+0x178>)
 8006f32:	4613      	mov	r3, r2
 8006f34:	005b      	lsls	r3, r3, #1
 8006f36:	4413      	add	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	440b      	add	r3, r1
 8006f3c:	3308      	adds	r3, #8
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	889a      	ldrh	r2, [r3, #4]
 8006f42:	8bfb      	ldrh	r3, [r7, #30]
 8006f44:	4413      	add	r3, r2
 8006f46:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	60bb      	str	r3, [r7, #8]
    i++;
 8006f4e:	8bbb      	ldrh	r3, [r7, #28]
 8006f50:	3301      	adds	r3, #1
 8006f52:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	bf14      	ite	ne
 8006f5c:	2301      	movne	r3, #1
 8006f5e:	2300      	moveq	r3, #0
 8006f60:	b2dc      	uxtb	r4, r3
 8006f62:	f7ff fe3b 	bl	8006bdc <BSP_LCD_GetXSize>
 8006f66:	8bb9      	ldrh	r1, [r7, #28]
 8006f68:	4b13      	ldr	r3, [pc, #76]	@ (8006fb8 <BSP_LCD_DisplayStringAt+0x174>)
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	4d13      	ldr	r5, [pc, #76]	@ (8006fbc <BSP_LCD_DisplayStringAt+0x178>)
 8006f6e:	4613      	mov	r3, r2
 8006f70:	005b      	lsls	r3, r3, #1
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	442b      	add	r3, r5
 8006f78:	3308      	adds	r3, #8
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	889b      	ldrh	r3, [r3, #4]
 8006f7e:	fb01 f303 	mul.w	r3, r1, r3
 8006f82:	1ac3      	subs	r3, r0, r3
 8006f84:	b299      	uxth	r1, r3
 8006f86:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb8 <BSP_LCD_DisplayStringAt+0x174>)
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	480c      	ldr	r0, [pc, #48]	@ (8006fbc <BSP_LCD_DisplayStringAt+0x178>)
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	005b      	lsls	r3, r3, #1
 8006f90:	4413      	add	r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4403      	add	r3, r0
 8006f96:	3308      	adds	r3, #8
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	889b      	ldrh	r3, [r3, #4]
 8006f9c:	4299      	cmp	r1, r3
 8006f9e:	bf2c      	ite	cs
 8006fa0:	2301      	movcs	r3, #1
 8006fa2:	2300      	movcc	r3, #0
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	4023      	ands	r3, r4
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1b7      	bne.n	8006f1e <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8006fae:	bf00      	nop
 8006fb0:	bf00      	nop
 8006fb2:	3720      	adds	r7, #32
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bdb0      	pop	{r4, r5, r7, pc}
 8006fb8:	20001c00 	.word	0x20001c00
 8006fbc:	20001c04 	.word	0x20001c04

08006fc0 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8006fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fc4:	b086      	sub	sp, #24
 8006fc6:	af02      	add	r7, sp, #8
 8006fc8:	4604      	mov	r4, r0
 8006fca:	4608      	mov	r0, r1
 8006fcc:	4611      	mov	r1, r2
 8006fce:	461a      	mov	r2, r3
 8006fd0:	4623      	mov	r3, r4
 8006fd2:	80fb      	strh	r3, [r7, #6]
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	80bb      	strh	r3, [r7, #4]
 8006fd8:	460b      	mov	r3, r1
 8006fda:	807b      	strh	r3, [r7, #2]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006fe4:	4b20      	ldr	r3, [pc, #128]	@ (8007068 <BSP_LCD_FillRect+0xa8>)
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	4920      	ldr	r1, [pc, #128]	@ (800706c <BSP_LCD_FillRect+0xac>)
 8006fea:	4613      	mov	r3, r2
 8006fec:	005b      	lsls	r3, r3, #1
 8006fee:	4413      	add	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	440b      	add	r3, r1
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7ff fe6c 	bl	8006cd4 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8007068 <BSP_LCD_FillRect+0xa8>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a1b      	ldr	r2, [pc, #108]	@ (8007070 <BSP_LCD_FillRect+0xb0>)
 8007002:	2134      	movs	r1, #52	@ 0x34
 8007004:	fb01 f303 	mul.w	r3, r1, r3
 8007008:	4413      	add	r3, r2
 800700a:	335c      	adds	r3, #92	@ 0x5c
 800700c:	681c      	ldr	r4, [r3, #0]
 800700e:	f7ff fde5 	bl	8006bdc <BSP_LCD_GetXSize>
 8007012:	4602      	mov	r2, r0
 8007014:	88bb      	ldrh	r3, [r7, #4]
 8007016:	fb03 f202 	mul.w	r2, r3, r2
 800701a:	88fb      	ldrh	r3, [r7, #6]
 800701c:	4413      	add	r3, r2
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	4423      	add	r3, r4
 8007022:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8007024:	4b10      	ldr	r3, [pc, #64]	@ (8007068 <BSP_LCD_FillRect+0xa8>)
 8007026:	681c      	ldr	r4, [r3, #0]
 8007028:	68fd      	ldr	r5, [r7, #12]
 800702a:	887e      	ldrh	r6, [r7, #2]
 800702c:	f8b7 8000 	ldrh.w	r8, [r7]
 8007030:	f7ff fdd4 	bl	8006bdc <BSP_LCD_GetXSize>
 8007034:	4602      	mov	r2, r0
 8007036:	887b      	ldrh	r3, [r7, #2]
 8007038:	1ad1      	subs	r1, r2, r3
 800703a:	4b0b      	ldr	r3, [pc, #44]	@ (8007068 <BSP_LCD_FillRect+0xa8>)
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	480b      	ldr	r0, [pc, #44]	@ (800706c <BSP_LCD_FillRect+0xac>)
 8007040:	4613      	mov	r3, r2
 8007042:	005b      	lsls	r3, r3, #1
 8007044:	4413      	add	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4403      	add	r3, r0
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	9301      	str	r3, [sp, #4]
 800704e:	9100      	str	r1, [sp, #0]
 8007050:	4643      	mov	r3, r8
 8007052:	4632      	mov	r2, r6
 8007054:	4629      	mov	r1, r5
 8007056:	4620      	mov	r0, r4
 8007058:	f000 f9c2 	bl	80073e0 <FillBuffer>
}
 800705c:	bf00      	nop
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007066:	bf00      	nop
 8007068:	20001c00 	.word	0x20001c00
 800706c:	20001c04 	.word	0x20001c04
 8007070:	20001ae8 	.word	0x20001ae8

08007074 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b08e      	sub	sp, #56	@ 0x38
 8007078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800707a:	2300      	movs	r3, #0
 800707c:	623b      	str	r3, [r7, #32]
 800707e:	4b61      	ldr	r3, [pc, #388]	@ (8007204 <BSP_LCD_MspInit+0x190>)
 8007080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007082:	4a60      	ldr	r2, [pc, #384]	@ (8007204 <BSP_LCD_MspInit+0x190>)
 8007084:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007088:	6453      	str	r3, [r2, #68]	@ 0x44
 800708a:	4b5e      	ldr	r3, [pc, #376]	@ (8007204 <BSP_LCD_MspInit+0x190>)
 800708c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800708e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007092:	623b      	str	r3, [r7, #32]
 8007094:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8007096:	2300      	movs	r3, #0
 8007098:	61fb      	str	r3, [r7, #28]
 800709a:	4b5a      	ldr	r3, [pc, #360]	@ (8007204 <BSP_LCD_MspInit+0x190>)
 800709c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800709e:	4a59      	ldr	r2, [pc, #356]	@ (8007204 <BSP_LCD_MspInit+0x190>)
 80070a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80070a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80070a6:	4b57      	ldr	r3, [pc, #348]	@ (8007204 <BSP_LCD_MspInit+0x190>)
 80070a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070ae:	61fb      	str	r3, [r7, #28]
 80070b0:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80070b2:	2300      	movs	r3, #0
 80070b4:	61bb      	str	r3, [r7, #24]
 80070b6:	4b53      	ldr	r3, [pc, #332]	@ (8007204 <BSP_LCD_MspInit+0x190>)
 80070b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ba:	4a52      	ldr	r2, [pc, #328]	@ (8007204 <BSP_LCD_MspInit+0x190>)
 80070bc:	f043 0301 	orr.w	r3, r3, #1
 80070c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80070c2:	4b50      	ldr	r3, [pc, #320]	@ (8007204 <BSP_LCD_MspInit+0x190>)
 80070c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	61bb      	str	r3, [r7, #24]
 80070cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80070ce:	2300      	movs	r3, #0
 80070d0:	617b      	str	r3, [r7, #20]
 80070d2:	4b4c      	ldr	r3, [pc, #304]	@ (8007204 <BSP_LCD_MspInit+0x190>)
 80070d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d6:	4a4b      	ldr	r2, [pc, #300]	@ (8007204 <BSP_LCD_MspInit+0x190>)
 80070d8:	f043 0302 	orr.w	r3, r3, #2
 80070dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80070de:	4b49      	ldr	r3, [pc, #292]	@ (8007204 <BSP_LCD_MspInit+0x190>)
 80070e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070e2:	f003 0302 	and.w	r3, r3, #2
 80070e6:	617b      	str	r3, [r7, #20]
 80070e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80070ea:	2300      	movs	r3, #0
 80070ec:	613b      	str	r3, [r7, #16]
 80070ee:	4b45      	ldr	r3, [pc, #276]	@ (8007204 <BSP_LCD_MspInit+0x190>)
 80070f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f2:	4a44      	ldr	r2, [pc, #272]	@ (8007204 <BSP_LCD_MspInit+0x190>)
 80070f4:	f043 0304 	orr.w	r3, r3, #4
 80070f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80070fa:	4b42      	ldr	r3, [pc, #264]	@ (8007204 <BSP_LCD_MspInit+0x190>)
 80070fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070fe:	f003 0304 	and.w	r3, r3, #4
 8007102:	613b      	str	r3, [r7, #16]
 8007104:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007106:	2300      	movs	r3, #0
 8007108:	60fb      	str	r3, [r7, #12]
 800710a:	4b3e      	ldr	r3, [pc, #248]	@ (8007204 <BSP_LCD_MspInit+0x190>)
 800710c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800710e:	4a3d      	ldr	r2, [pc, #244]	@ (8007204 <BSP_LCD_MspInit+0x190>)
 8007110:	f043 0308 	orr.w	r3, r3, #8
 8007114:	6313      	str	r3, [r2, #48]	@ 0x30
 8007116:	4b3b      	ldr	r3, [pc, #236]	@ (8007204 <BSP_LCD_MspInit+0x190>)
 8007118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800711a:	f003 0308 	and.w	r3, r3, #8
 800711e:	60fb      	str	r3, [r7, #12]
 8007120:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007122:	2300      	movs	r3, #0
 8007124:	60bb      	str	r3, [r7, #8]
 8007126:	4b37      	ldr	r3, [pc, #220]	@ (8007204 <BSP_LCD_MspInit+0x190>)
 8007128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800712a:	4a36      	ldr	r2, [pc, #216]	@ (8007204 <BSP_LCD_MspInit+0x190>)
 800712c:	f043 0320 	orr.w	r3, r3, #32
 8007130:	6313      	str	r3, [r2, #48]	@ 0x30
 8007132:	4b34      	ldr	r3, [pc, #208]	@ (8007204 <BSP_LCD_MspInit+0x190>)
 8007134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007136:	f003 0320 	and.w	r3, r3, #32
 800713a:	60bb      	str	r3, [r7, #8]
 800713c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800713e:	2300      	movs	r3, #0
 8007140:	607b      	str	r3, [r7, #4]
 8007142:	4b30      	ldr	r3, [pc, #192]	@ (8007204 <BSP_LCD_MspInit+0x190>)
 8007144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007146:	4a2f      	ldr	r2, [pc, #188]	@ (8007204 <BSP_LCD_MspInit+0x190>)
 8007148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800714c:	6313      	str	r3, [r2, #48]	@ 0x30
 800714e:	4b2d      	ldr	r3, [pc, #180]	@ (8007204 <BSP_LCD_MspInit+0x190>)
 8007150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007156:	607b      	str	r3, [r7, #4]
 8007158:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800715a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800715e:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8007160:	2302      	movs	r3, #2
 8007162:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8007164:	2300      	movs	r3, #0
 8007166:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8007168:	2302      	movs	r3, #2
 800716a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800716c:	230e      	movs	r3, #14
 800716e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8007170:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007174:	4619      	mov	r1, r3
 8007176:	4824      	ldr	r0, [pc, #144]	@ (8007208 <BSP_LCD_MspInit+0x194>)
 8007178:	f001 fc4e 	bl	8008a18 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800717c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8007180:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8007182:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007186:	4619      	mov	r1, r3
 8007188:	4820      	ldr	r0, [pc, #128]	@ (800720c <BSP_LCD_MspInit+0x198>)
 800718a:	f001 fc45 	bl	8008a18 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800718e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8007192:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8007194:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007198:	4619      	mov	r1, r3
 800719a:	481d      	ldr	r0, [pc, #116]	@ (8007210 <BSP_LCD_MspInit+0x19c>)
 800719c:	f001 fc3c 	bl	8008a18 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80071a0:	2348      	movs	r3, #72	@ 0x48
 80071a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80071a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071a8:	4619      	mov	r1, r3
 80071aa:	481a      	ldr	r0, [pc, #104]	@ (8007214 <BSP_LCD_MspInit+0x1a0>)
 80071ac:	f001 fc34 	bl	8008a18 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80071b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80071b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80071b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071ba:	4619      	mov	r1, r3
 80071bc:	4816      	ldr	r0, [pc, #88]	@ (8007218 <BSP_LCD_MspInit+0x1a4>)
 80071be:	f001 fc2b 	bl	8008a18 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80071c2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80071c6:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80071c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071cc:	4619      	mov	r1, r3
 80071ce:	4813      	ldr	r0, [pc, #76]	@ (800721c <BSP_LCD_MspInit+0x1a8>)
 80071d0:	f001 fc22 	bl	8008a18 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80071d4:	2303      	movs	r3, #3
 80071d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80071d8:	2309      	movs	r3, #9
 80071da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80071dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071e0:	4619      	mov	r1, r3
 80071e2:	480a      	ldr	r0, [pc, #40]	@ (800720c <BSP_LCD_MspInit+0x198>)
 80071e4:	f001 fc18 	bl	8008a18 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80071e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80071ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80071ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071f2:	4619      	mov	r1, r3
 80071f4:	4809      	ldr	r0, [pc, #36]	@ (800721c <BSP_LCD_MspInit+0x1a8>)
 80071f6:	f001 fc0f 	bl	8008a18 <HAL_GPIO_Init>
}
 80071fa:	bf00      	nop
 80071fc:	3738      	adds	r7, #56	@ 0x38
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	40023800 	.word	0x40023800
 8007208:	40020000 	.word	0x40020000
 800720c:	40020400 	.word	0x40020400
 8007210:	40020800 	.word	0x40020800
 8007214:	40020c00 	.word	0x40020c00
 8007218:	40021400 	.word	0x40021400
 800721c:	40021800 	.word	0x40021800

08007220 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8007220:	b5b0      	push	{r4, r5, r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	4603      	mov	r3, r0
 8007228:	603a      	str	r2, [r7, #0]
 800722a:	80fb      	strh	r3, [r7, #6]
 800722c:	460b      	mov	r3, r1
 800722e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8007230:	4b0c      	ldr	r3, [pc, #48]	@ (8007264 <BSP_LCD_DrawPixel+0x44>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a0c      	ldr	r2, [pc, #48]	@ (8007268 <BSP_LCD_DrawPixel+0x48>)
 8007236:	2134      	movs	r1, #52	@ 0x34
 8007238:	fb01 f303 	mul.w	r3, r1, r3
 800723c:	4413      	add	r3, r2
 800723e:	335c      	adds	r3, #92	@ 0x5c
 8007240:	681c      	ldr	r4, [r3, #0]
 8007242:	88bd      	ldrh	r5, [r7, #4]
 8007244:	f7ff fcca 	bl	8006bdc <BSP_LCD_GetXSize>
 8007248:	4603      	mov	r3, r0
 800724a:	fb03 f205 	mul.w	r2, r3, r5
 800724e:	88fb      	ldrh	r3, [r7, #6]
 8007250:	4413      	add	r3, r2
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	4423      	add	r3, r4
 8007256:	461a      	mov	r2, r3
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	6013      	str	r3, [r2, #0]
}
 800725c:	bf00      	nop
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bdb0      	pop	{r4, r5, r7, pc}
 8007264:	20001c00 	.word	0x20001c00
 8007268:	20001ae8 	.word	0x20001ae8

0800726c <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b088      	sub	sp, #32
 8007270:	af00      	add	r7, sp, #0
 8007272:	4603      	mov	r3, r0
 8007274:	603a      	str	r2, [r7, #0]
 8007276:	80fb      	strh	r3, [r7, #6]
 8007278:	460b      	mov	r3, r1
 800727a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800727c:	2300      	movs	r3, #0
 800727e:	61fb      	str	r3, [r7, #28]
 8007280:	2300      	movs	r3, #0
 8007282:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8007284:	2300      	movs	r3, #0
 8007286:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8007288:	4b53      	ldr	r3, [pc, #332]	@ (80073d8 <DrawChar+0x16c>)
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	4953      	ldr	r1, [pc, #332]	@ (80073dc <DrawChar+0x170>)
 800728e:	4613      	mov	r3, r2
 8007290:	005b      	lsls	r3, r3, #1
 8007292:	4413      	add	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	440b      	add	r3, r1
 8007298:	3308      	adds	r3, #8
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	88db      	ldrh	r3, [r3, #6]
 800729e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80072a0:	4b4d      	ldr	r3, [pc, #308]	@ (80073d8 <DrawChar+0x16c>)
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	494d      	ldr	r1, [pc, #308]	@ (80073dc <DrawChar+0x170>)
 80072a6:	4613      	mov	r3, r2
 80072a8:	005b      	lsls	r3, r3, #1
 80072aa:	4413      	add	r3, r2
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	440b      	add	r3, r1
 80072b0:	3308      	adds	r3, #8
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	889b      	ldrh	r3, [r3, #4]
 80072b6:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80072b8:	8a3b      	ldrh	r3, [r7, #16]
 80072ba:	3307      	adds	r3, #7
 80072bc:	2b00      	cmp	r3, #0
 80072be:	da00      	bge.n	80072c2 <DrawChar+0x56>
 80072c0:	3307      	adds	r3, #7
 80072c2:	10db      	asrs	r3, r3, #3
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	00db      	lsls	r3, r3, #3
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	8a3b      	ldrh	r3, [r7, #16]
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80072d2:	2300      	movs	r3, #0
 80072d4:	61fb      	str	r3, [r7, #28]
 80072d6:	e076      	b.n	80073c6 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80072d8:	8a3b      	ldrh	r3, [r7, #16]
 80072da:	3307      	adds	r3, #7
 80072dc:	2b00      	cmp	r3, #0
 80072de:	da00      	bge.n	80072e2 <DrawChar+0x76>
 80072e0:	3307      	adds	r3, #7
 80072e2:	10db      	asrs	r3, r3, #3
 80072e4:	461a      	mov	r2, r3
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	fb02 f303 	mul.w	r3, r2, r3
 80072ec:	683a      	ldr	r2, [r7, #0]
 80072ee:	4413      	add	r3, r2
 80072f0:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80072f2:	8a3b      	ldrh	r3, [r7, #16]
 80072f4:	3307      	adds	r3, #7
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	da00      	bge.n	80072fc <DrawChar+0x90>
 80072fa:	3307      	adds	r3, #7
 80072fc:	10db      	asrs	r3, r3, #3
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d002      	beq.n	8007308 <DrawChar+0x9c>
 8007302:	2b02      	cmp	r3, #2
 8007304:	d004      	beq.n	8007310 <DrawChar+0xa4>
 8007306:	e00c      	b.n	8007322 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	617b      	str	r3, [r7, #20]
      break;
 800730e:	e016      	b.n	800733e <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	021b      	lsls	r3, r3, #8
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	3201      	adds	r2, #1
 800731a:	7812      	ldrb	r2, [r2, #0]
 800731c:	4313      	orrs	r3, r2
 800731e:	617b      	str	r3, [r7, #20]
      break;
 8007320:	e00d      	b.n	800733e <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	041a      	lsls	r2, r3, #16
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	3301      	adds	r3, #1
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	021b      	lsls	r3, r3, #8
 8007330:	4313      	orrs	r3, r2
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	3202      	adds	r2, #2
 8007336:	7812      	ldrb	r2, [r2, #0]
 8007338:	4313      	orrs	r3, r2
 800733a:	617b      	str	r3, [r7, #20]
      break;
 800733c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800733e:	2300      	movs	r3, #0
 8007340:	61bb      	str	r3, [r7, #24]
 8007342:	e036      	b.n	80073b2 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8007344:	8a3a      	ldrh	r2, [r7, #16]
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	1ad2      	subs	r2, r2, r3
 800734a:	7bfb      	ldrb	r3, [r7, #15]
 800734c:	4413      	add	r3, r2
 800734e:	3b01      	subs	r3, #1
 8007350:	2201      	movs	r2, #1
 8007352:	fa02 f303 	lsl.w	r3, r2, r3
 8007356:	461a      	mov	r2, r3
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	4013      	ands	r3, r2
 800735c:	2b00      	cmp	r3, #0
 800735e:	d012      	beq.n	8007386 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	b29a      	uxth	r2, r3
 8007364:	88fb      	ldrh	r3, [r7, #6]
 8007366:	4413      	add	r3, r2
 8007368:	b298      	uxth	r0, r3
 800736a:	4b1b      	ldr	r3, [pc, #108]	@ (80073d8 <DrawChar+0x16c>)
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	491b      	ldr	r1, [pc, #108]	@ (80073dc <DrawChar+0x170>)
 8007370:	4613      	mov	r3, r2
 8007372:	005b      	lsls	r3, r3, #1
 8007374:	4413      	add	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	440b      	add	r3, r1
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	88bb      	ldrh	r3, [r7, #4]
 800737e:	4619      	mov	r1, r3
 8007380:	f7ff ff4e 	bl	8007220 <BSP_LCD_DrawPixel>
 8007384:	e012      	b.n	80073ac <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	b29a      	uxth	r2, r3
 800738a:	88fb      	ldrh	r3, [r7, #6]
 800738c:	4413      	add	r3, r2
 800738e:	b298      	uxth	r0, r3
 8007390:	4b11      	ldr	r3, [pc, #68]	@ (80073d8 <DrawChar+0x16c>)
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	4911      	ldr	r1, [pc, #68]	@ (80073dc <DrawChar+0x170>)
 8007396:	4613      	mov	r3, r2
 8007398:	005b      	lsls	r3, r3, #1
 800739a:	4413      	add	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	440b      	add	r3, r1
 80073a0:	3304      	adds	r3, #4
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	88bb      	ldrh	r3, [r7, #4]
 80073a6:	4619      	mov	r1, r3
 80073a8:	f7ff ff3a 	bl	8007220 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	3301      	adds	r3, #1
 80073b0:	61bb      	str	r3, [r7, #24]
 80073b2:	8a3b      	ldrh	r3, [r7, #16]
 80073b4:	69ba      	ldr	r2, [r7, #24]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d3c4      	bcc.n	8007344 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80073ba:	88bb      	ldrh	r3, [r7, #4]
 80073bc:	3301      	adds	r3, #1
 80073be:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	3301      	adds	r3, #1
 80073c4:	61fb      	str	r3, [r7, #28]
 80073c6:	8a7b      	ldrh	r3, [r7, #18]
 80073c8:	69fa      	ldr	r2, [r7, #28]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d384      	bcc.n	80072d8 <DrawChar+0x6c>
  }
}
 80073ce:	bf00      	nop
 80073d0:	bf00      	nop
 80073d2:	3720      	adds	r7, #32
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	20001c00 	.word	0x20001c00
 80073dc:	20001c04 	.word	0x20001c04

080073e0 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af02      	add	r7, sp, #8
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
 80073ec:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80073ee:	4b16      	ldr	r3, [pc, #88]	@ (8007448 <FillBuffer+0x68>)
 80073f0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80073f4:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80073f6:	4b14      	ldr	r3, [pc, #80]	@ (8007448 <FillBuffer+0x68>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80073fc:	4a12      	ldr	r2, [pc, #72]	@ (8007448 <FillBuffer+0x68>)
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8007402:	4b11      	ldr	r3, [pc, #68]	@ (8007448 <FillBuffer+0x68>)
 8007404:	4a11      	ldr	r2, [pc, #68]	@ (800744c <FillBuffer+0x6c>)
 8007406:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8007408:	480f      	ldr	r0, [pc, #60]	@ (8007448 <FillBuffer+0x68>)
 800740a:	f001 f879 	bl	8008500 <HAL_DMA2D_Init>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d115      	bne.n	8007440 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8007414:	68f9      	ldr	r1, [r7, #12]
 8007416:	480c      	ldr	r0, [pc, #48]	@ (8007448 <FillBuffer+0x68>)
 8007418:	f001 f9d0 	bl	80087bc <HAL_DMA2D_ConfigLayer>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10e      	bne.n	8007440 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	69f9      	ldr	r1, [r7, #28]
 800742c:	4806      	ldr	r0, [pc, #24]	@ (8007448 <FillBuffer+0x68>)
 800742e:	f001 f8b0 	bl	8008592 <HAL_DMA2D_Start>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d103      	bne.n	8007440 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8007438:	210a      	movs	r1, #10
 800743a:	4803      	ldr	r0, [pc, #12]	@ (8007448 <FillBuffer+0x68>)
 800743c:	f001 f8d4 	bl	80085e8 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8007440:	bf00      	nop
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	20001b90 	.word	0x20001b90
 800744c:	4002b000 	.word	0x4002b000

08007450 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8007454:	4b29      	ldr	r3, [pc, #164]	@ (80074fc <BSP_SDRAM_Init+0xac>)
 8007456:	4a2a      	ldr	r2, [pc, #168]	@ (8007500 <BSP_SDRAM_Init+0xb0>)
 8007458:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800745a:	4b2a      	ldr	r3, [pc, #168]	@ (8007504 <BSP_SDRAM_Init+0xb4>)
 800745c:	2202      	movs	r2, #2
 800745e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8007460:	4b28      	ldr	r3, [pc, #160]	@ (8007504 <BSP_SDRAM_Init+0xb4>)
 8007462:	2207      	movs	r2, #7
 8007464:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8007466:	4b27      	ldr	r3, [pc, #156]	@ (8007504 <BSP_SDRAM_Init+0xb4>)
 8007468:	2204      	movs	r2, #4
 800746a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 800746c:	4b25      	ldr	r3, [pc, #148]	@ (8007504 <BSP_SDRAM_Init+0xb4>)
 800746e:	2207      	movs	r2, #7
 8007470:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8007472:	4b24      	ldr	r3, [pc, #144]	@ (8007504 <BSP_SDRAM_Init+0xb4>)
 8007474:	2202      	movs	r2, #2
 8007476:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8007478:	4b22      	ldr	r3, [pc, #136]	@ (8007504 <BSP_SDRAM_Init+0xb4>)
 800747a:	2202      	movs	r2, #2
 800747c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800747e:	4b21      	ldr	r3, [pc, #132]	@ (8007504 <BSP_SDRAM_Init+0xb4>)
 8007480:	2202      	movs	r2, #2
 8007482:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8007484:	4b1d      	ldr	r3, [pc, #116]	@ (80074fc <BSP_SDRAM_Init+0xac>)
 8007486:	2201      	movs	r2, #1
 8007488:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800748a:	4b1c      	ldr	r3, [pc, #112]	@ (80074fc <BSP_SDRAM_Init+0xac>)
 800748c:	2200      	movs	r2, #0
 800748e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8007490:	4b1a      	ldr	r3, [pc, #104]	@ (80074fc <BSP_SDRAM_Init+0xac>)
 8007492:	2204      	movs	r2, #4
 8007494:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8007496:	4b19      	ldr	r3, [pc, #100]	@ (80074fc <BSP_SDRAM_Init+0xac>)
 8007498:	2210      	movs	r2, #16
 800749a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800749c:	4b17      	ldr	r3, [pc, #92]	@ (80074fc <BSP_SDRAM_Init+0xac>)
 800749e:	2240      	movs	r2, #64	@ 0x40
 80074a0:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80074a2:	4b16      	ldr	r3, [pc, #88]	@ (80074fc <BSP_SDRAM_Init+0xac>)
 80074a4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80074a8:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80074aa:	4b14      	ldr	r3, [pc, #80]	@ (80074fc <BSP_SDRAM_Init+0xac>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80074b0:	4b12      	ldr	r3, [pc, #72]	@ (80074fc <BSP_SDRAM_Init+0xac>)
 80074b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80074b6:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80074b8:	4b10      	ldr	r3, [pc, #64]	@ (80074fc <BSP_SDRAM_Init+0xac>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80074be:	4b0f      	ldr	r3, [pc, #60]	@ (80074fc <BSP_SDRAM_Init+0xac>)
 80074c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80074c4:	629a      	str	r2, [r3, #40]	@ 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80074c6:	2100      	movs	r1, #0
 80074c8:	480c      	ldr	r0, [pc, #48]	@ (80074fc <BSP_SDRAM_Init+0xac>)
 80074ca:	f000 f87f 	bl	80075cc <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80074ce:	490d      	ldr	r1, [pc, #52]	@ (8007504 <BSP_SDRAM_Init+0xb4>)
 80074d0:	480a      	ldr	r0, [pc, #40]	@ (80074fc <BSP_SDRAM_Init+0xac>)
 80074d2:	f003 f94e 	bl	800a772 <HAL_SDRAM_Init>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d003      	beq.n	80074e4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80074dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007508 <BSP_SDRAM_Init+0xb8>)
 80074de:	2201      	movs	r2, #1
 80074e0:	701a      	strb	r2, [r3, #0]
 80074e2:	e002      	b.n	80074ea <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80074e4:	4b08      	ldr	r3, [pc, #32]	@ (8007508 <BSP_SDRAM_Init+0xb8>)
 80074e6:	2200      	movs	r2, #0
 80074e8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80074ea:	f240 506a 	movw	r0, #1386	@ 0x56a
 80074ee:	f000 f80d 	bl	800750c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80074f2:	4b05      	ldr	r3, [pc, #20]	@ (8007508 <BSP_SDRAM_Init+0xb8>)
 80074f4:	781b      	ldrb	r3, [r3, #0]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	20001c20 	.word	0x20001c20
 8007500:	a0000140 	.word	0xa0000140
 8007504:	20001c54 	.word	0x20001c54
 8007508:	200001a8 	.word	0x200001a8

0800750c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8007514:	2300      	movs	r3, #0
 8007516:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8007518:	4b2a      	ldr	r3, [pc, #168]	@ (80075c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800751a:	2201      	movs	r2, #1
 800751c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800751e:	4b29      	ldr	r3, [pc, #164]	@ (80075c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007520:	2208      	movs	r2, #8
 8007522:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8007524:	4b27      	ldr	r3, [pc, #156]	@ (80075c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007526:	2201      	movs	r2, #1
 8007528:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800752a:	4b26      	ldr	r3, [pc, #152]	@ (80075c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800752c:	2200      	movs	r2, #0
 800752e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8007530:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007534:	4923      	ldr	r1, [pc, #140]	@ (80075c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007536:	4824      	ldr	r0, [pc, #144]	@ (80075c8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007538:	f003 f94f 	bl	800a7da <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800753c:	2001      	movs	r0, #1
 800753e:	f000 f9c3 	bl	80078c8 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8007542:	4b20      	ldr	r3, [pc, #128]	@ (80075c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007544:	2202      	movs	r2, #2
 8007546:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8007548:	4b1e      	ldr	r3, [pc, #120]	@ (80075c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800754a:	2208      	movs	r2, #8
 800754c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800754e:	4b1d      	ldr	r3, [pc, #116]	@ (80075c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007550:	2201      	movs	r2, #1
 8007552:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8007554:	4b1b      	ldr	r3, [pc, #108]	@ (80075c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007556:	2200      	movs	r2, #0
 8007558:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800755a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800755e:	4919      	ldr	r1, [pc, #100]	@ (80075c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007560:	4819      	ldr	r0, [pc, #100]	@ (80075c8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007562:	f003 f93a 	bl	800a7da <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8007566:	4b17      	ldr	r3, [pc, #92]	@ (80075c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007568:	2203      	movs	r2, #3
 800756a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800756c:	4b15      	ldr	r3, [pc, #84]	@ (80075c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800756e:	2208      	movs	r2, #8
 8007570:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8007572:	4b14      	ldr	r3, [pc, #80]	@ (80075c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007574:	2204      	movs	r2, #4
 8007576:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8007578:	4b12      	ldr	r3, [pc, #72]	@ (80075c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800757a:	2200      	movs	r2, #0
 800757c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800757e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007582:	4910      	ldr	r1, [pc, #64]	@ (80075c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007584:	4810      	ldr	r0, [pc, #64]	@ (80075c8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007586:	f003 f928 	bl	800a7da <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800758a:	f44f 730c 	mov.w	r3, #560	@ 0x230
 800758e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8007590:	4b0c      	ldr	r3, [pc, #48]	@ (80075c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007592:	2204      	movs	r2, #4
 8007594:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8007596:	4b0b      	ldr	r3, [pc, #44]	@ (80075c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007598:	2208      	movs	r2, #8
 800759a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800759c:	4b09      	ldr	r3, [pc, #36]	@ (80075c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800759e:	2201      	movs	r2, #1
 80075a0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	4a07      	ldr	r2, [pc, #28]	@ (80075c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80075a6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80075a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80075ac:	4905      	ldr	r1, [pc, #20]	@ (80075c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80075ae:	4806      	ldr	r0, [pc, #24]	@ (80075c8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80075b0:	f003 f913 	bl	800a7da <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80075b4:	6879      	ldr	r1, [r7, #4]
 80075b6:	4804      	ldr	r0, [pc, #16]	@ (80075c8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80075b8:	f003 f93a 	bl	800a830 <HAL_SDRAM_ProgramRefreshRate>
}
 80075bc:	bf00      	nop
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	20001c70 	.word	0x20001c70
 80075c8:	20001c20 	.word	0x20001c20

080075cc <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b090      	sub	sp, #64	@ 0x40
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 80ec 	beq.w	80077b6 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80075de:	2300      	movs	r3, #0
 80075e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075e2:	4b77      	ldr	r3, [pc, #476]	@ (80077c0 <BSP_SDRAM_MspInit+0x1f4>)
 80075e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075e6:	4a76      	ldr	r2, [pc, #472]	@ (80077c0 <BSP_SDRAM_MspInit+0x1f4>)
 80075e8:	f043 0301 	orr.w	r3, r3, #1
 80075ec:	6393      	str	r3, [r2, #56]	@ 0x38
 80075ee:	4b74      	ldr	r3, [pc, #464]	@ (80077c0 <BSP_SDRAM_MspInit+0x1f4>)
 80075f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80075fa:	2300      	movs	r3, #0
 80075fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80075fe:	4b70      	ldr	r3, [pc, #448]	@ (80077c0 <BSP_SDRAM_MspInit+0x1f4>)
 8007600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007602:	4a6f      	ldr	r2, [pc, #444]	@ (80077c0 <BSP_SDRAM_MspInit+0x1f4>)
 8007604:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007608:	6313      	str	r3, [r2, #48]	@ 0x30
 800760a:	4b6d      	ldr	r3, [pc, #436]	@ (80077c0 <BSP_SDRAM_MspInit+0x1f4>)
 800760c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800760e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007612:	627b      	str	r3, [r7, #36]	@ 0x24
 8007614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007616:	2300      	movs	r3, #0
 8007618:	623b      	str	r3, [r7, #32]
 800761a:	4b69      	ldr	r3, [pc, #420]	@ (80077c0 <BSP_SDRAM_MspInit+0x1f4>)
 800761c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800761e:	4a68      	ldr	r2, [pc, #416]	@ (80077c0 <BSP_SDRAM_MspInit+0x1f4>)
 8007620:	f043 0302 	orr.w	r3, r3, #2
 8007624:	6313      	str	r3, [r2, #48]	@ 0x30
 8007626:	4b66      	ldr	r3, [pc, #408]	@ (80077c0 <BSP_SDRAM_MspInit+0x1f4>)
 8007628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800762a:	f003 0302 	and.w	r3, r3, #2
 800762e:	623b      	str	r3, [r7, #32]
 8007630:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007632:	2300      	movs	r3, #0
 8007634:	61fb      	str	r3, [r7, #28]
 8007636:	4b62      	ldr	r3, [pc, #392]	@ (80077c0 <BSP_SDRAM_MspInit+0x1f4>)
 8007638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800763a:	4a61      	ldr	r2, [pc, #388]	@ (80077c0 <BSP_SDRAM_MspInit+0x1f4>)
 800763c:	f043 0304 	orr.w	r3, r3, #4
 8007640:	6313      	str	r3, [r2, #48]	@ 0x30
 8007642:	4b5f      	ldr	r3, [pc, #380]	@ (80077c0 <BSP_SDRAM_MspInit+0x1f4>)
 8007644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007646:	f003 0304 	and.w	r3, r3, #4
 800764a:	61fb      	str	r3, [r7, #28]
 800764c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800764e:	2300      	movs	r3, #0
 8007650:	61bb      	str	r3, [r7, #24]
 8007652:	4b5b      	ldr	r3, [pc, #364]	@ (80077c0 <BSP_SDRAM_MspInit+0x1f4>)
 8007654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007656:	4a5a      	ldr	r2, [pc, #360]	@ (80077c0 <BSP_SDRAM_MspInit+0x1f4>)
 8007658:	f043 0308 	orr.w	r3, r3, #8
 800765c:	6313      	str	r3, [r2, #48]	@ 0x30
 800765e:	4b58      	ldr	r3, [pc, #352]	@ (80077c0 <BSP_SDRAM_MspInit+0x1f4>)
 8007660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007662:	f003 0308 	and.w	r3, r3, #8
 8007666:	61bb      	str	r3, [r7, #24]
 8007668:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800766a:	2300      	movs	r3, #0
 800766c:	617b      	str	r3, [r7, #20]
 800766e:	4b54      	ldr	r3, [pc, #336]	@ (80077c0 <BSP_SDRAM_MspInit+0x1f4>)
 8007670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007672:	4a53      	ldr	r2, [pc, #332]	@ (80077c0 <BSP_SDRAM_MspInit+0x1f4>)
 8007674:	f043 0310 	orr.w	r3, r3, #16
 8007678:	6313      	str	r3, [r2, #48]	@ 0x30
 800767a:	4b51      	ldr	r3, [pc, #324]	@ (80077c0 <BSP_SDRAM_MspInit+0x1f4>)
 800767c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800767e:	f003 0310 	and.w	r3, r3, #16
 8007682:	617b      	str	r3, [r7, #20]
 8007684:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007686:	2300      	movs	r3, #0
 8007688:	613b      	str	r3, [r7, #16]
 800768a:	4b4d      	ldr	r3, [pc, #308]	@ (80077c0 <BSP_SDRAM_MspInit+0x1f4>)
 800768c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800768e:	4a4c      	ldr	r2, [pc, #304]	@ (80077c0 <BSP_SDRAM_MspInit+0x1f4>)
 8007690:	f043 0320 	orr.w	r3, r3, #32
 8007694:	6313      	str	r3, [r2, #48]	@ 0x30
 8007696:	4b4a      	ldr	r3, [pc, #296]	@ (80077c0 <BSP_SDRAM_MspInit+0x1f4>)
 8007698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800769a:	f003 0320 	and.w	r3, r3, #32
 800769e:	613b      	str	r3, [r7, #16]
 80076a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80076a2:	2300      	movs	r3, #0
 80076a4:	60fb      	str	r3, [r7, #12]
 80076a6:	4b46      	ldr	r3, [pc, #280]	@ (80077c0 <BSP_SDRAM_MspInit+0x1f4>)
 80076a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076aa:	4a45      	ldr	r2, [pc, #276]	@ (80077c0 <BSP_SDRAM_MspInit+0x1f4>)
 80076ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80076b2:	4b43      	ldr	r3, [pc, #268]	@ (80077c0 <BSP_SDRAM_MspInit+0x1f4>)
 80076b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ba:	60fb      	str	r3, [r7, #12]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80076be:	2302      	movs	r3, #2
 80076c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80076c2:	2302      	movs	r3, #2
 80076c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80076c6:	2300      	movs	r3, #0
 80076c8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80076ca:	230c      	movs	r3, #12
 80076cc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80076ce:	2360      	movs	r3, #96	@ 0x60
 80076d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80076d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80076d6:	4619      	mov	r1, r3
 80076d8:	483a      	ldr	r0, [pc, #232]	@ (80077c4 <BSP_SDRAM_MspInit+0x1f8>)
 80076da:	f001 f99d 	bl	8008a18 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80076de:	2301      	movs	r3, #1
 80076e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80076e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80076e6:	4619      	mov	r1, r3
 80076e8:	4837      	ldr	r0, [pc, #220]	@ (80077c8 <BSP_SDRAM_MspInit+0x1fc>)
 80076ea:	f001 f995 	bl	8008a18 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80076ee:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80076f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80076f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80076f8:	4619      	mov	r1, r3
 80076fa:	4834      	ldr	r0, [pc, #208]	@ (80077cc <BSP_SDRAM_MspInit+0x200>)
 80076fc:	f001 f98c 	bl	8008a18 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8007700:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8007704:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8007706:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800770a:	4619      	mov	r1, r3
 800770c:	4830      	ldr	r0, [pc, #192]	@ (80077d0 <BSP_SDRAM_MspInit+0x204>)
 800770e:	f001 f983 	bl	8008a18 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8007712:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8007716:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8007718:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800771c:	4619      	mov	r1, r3
 800771e:	482d      	ldr	r0, [pc, #180]	@ (80077d4 <BSP_SDRAM_MspInit+0x208>)
 8007720:	f001 f97a 	bl	8008a18 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8007724:	f248 1333 	movw	r3, #33075	@ 0x8133
 8007728:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800772a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800772e:	4619      	mov	r1, r3
 8007730:	4829      	ldr	r0, [pc, #164]	@ (80077d8 <BSP_SDRAM_MspInit+0x20c>)
 8007732:	f001 f971 	bl	8008a18 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8007736:	4b29      	ldr	r3, [pc, #164]	@ (80077dc <BSP_SDRAM_MspInit+0x210>)
 8007738:	2200      	movs	r2, #0
 800773a:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800773c:	4b27      	ldr	r3, [pc, #156]	@ (80077dc <BSP_SDRAM_MspInit+0x210>)
 800773e:	2280      	movs	r2, #128	@ 0x80
 8007740:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8007742:	4b26      	ldr	r3, [pc, #152]	@ (80077dc <BSP_SDRAM_MspInit+0x210>)
 8007744:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007748:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800774a:	4b24      	ldr	r3, [pc, #144]	@ (80077dc <BSP_SDRAM_MspInit+0x210>)
 800774c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007750:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007752:	4b22      	ldr	r3, [pc, #136]	@ (80077dc <BSP_SDRAM_MspInit+0x210>)
 8007754:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007758:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800775a:	4b20      	ldr	r3, [pc, #128]	@ (80077dc <BSP_SDRAM_MspInit+0x210>)
 800775c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007760:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8007762:	4b1e      	ldr	r3, [pc, #120]	@ (80077dc <BSP_SDRAM_MspInit+0x210>)
 8007764:	2200      	movs	r2, #0
 8007766:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8007768:	4b1c      	ldr	r3, [pc, #112]	@ (80077dc <BSP_SDRAM_MspInit+0x210>)
 800776a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800776e:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8007770:	4b1a      	ldr	r3, [pc, #104]	@ (80077dc <BSP_SDRAM_MspInit+0x210>)
 8007772:	2200      	movs	r2, #0
 8007774:	625a      	str	r2, [r3, #36]	@ 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8007776:	4b19      	ldr	r3, [pc, #100]	@ (80077dc <BSP_SDRAM_MspInit+0x210>)
 8007778:	2203      	movs	r2, #3
 800777a:	629a      	str	r2, [r3, #40]	@ 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800777c:	4b17      	ldr	r3, [pc, #92]	@ (80077dc <BSP_SDRAM_MspInit+0x210>)
 800777e:	2200      	movs	r2, #0
 8007780:	62da      	str	r2, [r3, #44]	@ 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8007782:	4b16      	ldr	r3, [pc, #88]	@ (80077dc <BSP_SDRAM_MspInit+0x210>)
 8007784:	2200      	movs	r2, #0
 8007786:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8007788:	4b14      	ldr	r3, [pc, #80]	@ (80077dc <BSP_SDRAM_MspInit+0x210>)
 800778a:	4a15      	ldr	r2, [pc, #84]	@ (80077e0 <BSP_SDRAM_MspInit+0x214>)
 800778c:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a12      	ldr	r2, [pc, #72]	@ (80077dc <BSP_SDRAM_MspInit+0x210>)
 8007792:	631a      	str	r2, [r3, #48]	@ 0x30
 8007794:	4a11      	ldr	r2, [pc, #68]	@ (80077dc <BSP_SDRAM_MspInit+0x210>)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800779a:	4810      	ldr	r0, [pc, #64]	@ (80077dc <BSP_SDRAM_MspInit+0x210>)
 800779c:	f000 fcaa 	bl	80080f4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80077a0:	480e      	ldr	r0, [pc, #56]	@ (80077dc <BSP_SDRAM_MspInit+0x210>)
 80077a2:	f000 fbf9 	bl	8007f98 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80077a6:	2200      	movs	r2, #0
 80077a8:	210f      	movs	r1, #15
 80077aa:	2038      	movs	r0, #56	@ 0x38
 80077ac:	f000 f98b 	bl	8007ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80077b0:	2038      	movs	r0, #56	@ 0x38
 80077b2:	f000 f9a4 	bl	8007afe <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80077b6:	bf00      	nop
 80077b8:	3740      	adds	r7, #64	@ 0x40
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	40023800 	.word	0x40023800
 80077c4:	40020400 	.word	0x40020400
 80077c8:	40020800 	.word	0x40020800
 80077cc:	40020c00 	.word	0x40020c00
 80077d0:	40021000 	.word	0x40021000
 80077d4:	40021400 	.word	0x40021400
 80077d8:	40021800 	.word	0x40021800
 80077dc:	20001c80 	.word	0x20001c80
 80077e0:	40026410 	.word	0x40026410

080077e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80077e8:	4b0e      	ldr	r3, [pc, #56]	@ (8007824 <HAL_Init+0x40>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a0d      	ldr	r2, [pc, #52]	@ (8007824 <HAL_Init+0x40>)
 80077ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80077f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80077f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007824 <HAL_Init+0x40>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a0a      	ldr	r2, [pc, #40]	@ (8007824 <HAL_Init+0x40>)
 80077fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80077fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007800:	4b08      	ldr	r3, [pc, #32]	@ (8007824 <HAL_Init+0x40>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a07      	ldr	r2, [pc, #28]	@ (8007824 <HAL_Init+0x40>)
 8007806:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800780a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800780c:	2003      	movs	r0, #3
 800780e:	f000 f94f 	bl	8007ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007812:	2000      	movs	r0, #0
 8007814:	f000 f808 	bl	8007828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007818:	f7fe fa52 	bl	8005cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	40023c00 	.word	0x40023c00

08007828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007830:	4b12      	ldr	r3, [pc, #72]	@ (800787c <HAL_InitTick+0x54>)
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	4b12      	ldr	r3, [pc, #72]	@ (8007880 <HAL_InitTick+0x58>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	4619      	mov	r1, r3
 800783a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800783e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007842:	fbb2 f3f3 	udiv	r3, r2, r3
 8007846:	4618      	mov	r0, r3
 8007848:	f000 f967 	bl	8007b1a <HAL_SYSTICK_Config>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e00e      	b.n	8007874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b0f      	cmp	r3, #15
 800785a:	d80a      	bhi.n	8007872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800785c:	2200      	movs	r2, #0
 800785e:	6879      	ldr	r1, [r7, #4]
 8007860:	f04f 30ff 	mov.w	r0, #4294967295
 8007864:	f000 f92f 	bl	8007ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007868:	4a06      	ldr	r2, [pc, #24]	@ (8007884 <HAL_InitTick+0x5c>)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	e000      	b.n	8007874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
}
 8007874:	4618      	mov	r0, r3
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	20000158 	.word	0x20000158
 8007880:	200001b0 	.word	0x200001b0
 8007884:	200001ac 	.word	0x200001ac

08007888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007888:	b480      	push	{r7}
 800788a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800788c:	4b06      	ldr	r3, [pc, #24]	@ (80078a8 <HAL_IncTick+0x20>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	461a      	mov	r2, r3
 8007892:	4b06      	ldr	r3, [pc, #24]	@ (80078ac <HAL_IncTick+0x24>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4413      	add	r3, r2
 8007898:	4a04      	ldr	r2, [pc, #16]	@ (80078ac <HAL_IncTick+0x24>)
 800789a:	6013      	str	r3, [r2, #0]
}
 800789c:	bf00      	nop
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	200001b0 	.word	0x200001b0
 80078ac:	20001ce0 	.word	0x20001ce0

080078b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80078b0:	b480      	push	{r7}
 80078b2:	af00      	add	r7, sp, #0
  return uwTick;
 80078b4:	4b03      	ldr	r3, [pc, #12]	@ (80078c4 <HAL_GetTick+0x14>)
 80078b6:	681b      	ldr	r3, [r3, #0]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	20001ce0 	.word	0x20001ce0

080078c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80078d0:	f7ff ffee 	bl	80078b0 <HAL_GetTick>
 80078d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e0:	d005      	beq.n	80078ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80078e2:	4b0a      	ldr	r3, [pc, #40]	@ (800790c <HAL_Delay+0x44>)
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	461a      	mov	r2, r3
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4413      	add	r3, r2
 80078ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80078ee:	bf00      	nop
 80078f0:	f7ff ffde 	bl	80078b0 <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d8f7      	bhi.n	80078f0 <HAL_Delay+0x28>
  {
  }
}
 8007900:	bf00      	nop
 8007902:	bf00      	nop
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	200001b0 	.word	0x200001b0

08007910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f003 0307 	and.w	r3, r3, #7
 800791e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007920:	4b0c      	ldr	r3, [pc, #48]	@ (8007954 <__NVIC_SetPriorityGrouping+0x44>)
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007926:	68ba      	ldr	r2, [r7, #8]
 8007928:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800792c:	4013      	ands	r3, r2
 800792e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007938:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800793c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007942:	4a04      	ldr	r2, [pc, #16]	@ (8007954 <__NVIC_SetPriorityGrouping+0x44>)
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	60d3      	str	r3, [r2, #12]
}
 8007948:	bf00      	nop
 800794a:	3714      	adds	r7, #20
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr
 8007954:	e000ed00 	.word	0xe000ed00

08007958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007958:	b480      	push	{r7}
 800795a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800795c:	4b04      	ldr	r3, [pc, #16]	@ (8007970 <__NVIC_GetPriorityGrouping+0x18>)
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	0a1b      	lsrs	r3, r3, #8
 8007962:	f003 0307 	and.w	r3, r3, #7
}
 8007966:	4618      	mov	r0, r3
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	e000ed00 	.word	0xe000ed00

08007974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	4603      	mov	r3, r0
 800797c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800797e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007982:	2b00      	cmp	r3, #0
 8007984:	db0b      	blt.n	800799e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007986:	79fb      	ldrb	r3, [r7, #7]
 8007988:	f003 021f 	and.w	r2, r3, #31
 800798c:	4907      	ldr	r1, [pc, #28]	@ (80079ac <__NVIC_EnableIRQ+0x38>)
 800798e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007992:	095b      	lsrs	r3, r3, #5
 8007994:	2001      	movs	r0, #1
 8007996:	fa00 f202 	lsl.w	r2, r0, r2
 800799a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800799e:	bf00      	nop
 80079a0:	370c      	adds	r7, #12
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	e000e100 	.word	0xe000e100

080079b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	4603      	mov	r3, r0
 80079b8:	6039      	str	r1, [r7, #0]
 80079ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	db0a      	blt.n	80079da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	490c      	ldr	r1, [pc, #48]	@ (80079fc <__NVIC_SetPriority+0x4c>)
 80079ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079ce:	0112      	lsls	r2, r2, #4
 80079d0:	b2d2      	uxtb	r2, r2
 80079d2:	440b      	add	r3, r1
 80079d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80079d8:	e00a      	b.n	80079f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	4908      	ldr	r1, [pc, #32]	@ (8007a00 <__NVIC_SetPriority+0x50>)
 80079e0:	79fb      	ldrb	r3, [r7, #7]
 80079e2:	f003 030f 	and.w	r3, r3, #15
 80079e6:	3b04      	subs	r3, #4
 80079e8:	0112      	lsls	r2, r2, #4
 80079ea:	b2d2      	uxtb	r2, r2
 80079ec:	440b      	add	r3, r1
 80079ee:	761a      	strb	r2, [r3, #24]
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	e000e100 	.word	0xe000e100
 8007a00:	e000ed00 	.word	0xe000ed00

08007a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b089      	sub	sp, #36	@ 0x24
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f003 0307 	and.w	r3, r3, #7
 8007a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	f1c3 0307 	rsb	r3, r3, #7
 8007a1e:	2b04      	cmp	r3, #4
 8007a20:	bf28      	it	cs
 8007a22:	2304      	movcs	r3, #4
 8007a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	3304      	adds	r3, #4
 8007a2a:	2b06      	cmp	r3, #6
 8007a2c:	d902      	bls.n	8007a34 <NVIC_EncodePriority+0x30>
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	3b03      	subs	r3, #3
 8007a32:	e000      	b.n	8007a36 <NVIC_EncodePriority+0x32>
 8007a34:	2300      	movs	r3, #0
 8007a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a38:	f04f 32ff 	mov.w	r2, #4294967295
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a42:	43da      	mvns	r2, r3
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	401a      	ands	r2, r3
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	fa01 f303 	lsl.w	r3, r1, r3
 8007a56:	43d9      	mvns	r1, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a5c:	4313      	orrs	r3, r2
         );
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3724      	adds	r7, #36	@ 0x24
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
	...

08007a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	3b01      	subs	r3, #1
 8007a78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a7c:	d301      	bcc.n	8007a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e00f      	b.n	8007aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a82:	4a0a      	ldr	r2, [pc, #40]	@ (8007aac <SysTick_Config+0x40>)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	3b01      	subs	r3, #1
 8007a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007a8a:	210f      	movs	r1, #15
 8007a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a90:	f7ff ff8e 	bl	80079b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a94:	4b05      	ldr	r3, [pc, #20]	@ (8007aac <SysTick_Config+0x40>)
 8007a96:	2200      	movs	r2, #0
 8007a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a9a:	4b04      	ldr	r3, [pc, #16]	@ (8007aac <SysTick_Config+0x40>)
 8007a9c:	2207      	movs	r2, #7
 8007a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	e000e010 	.word	0xe000e010

08007ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f7ff ff29 	bl	8007910 <__NVIC_SetPriorityGrouping>
}
 8007abe:	bf00      	nop
 8007ac0:	3708      	adds	r7, #8
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b086      	sub	sp, #24
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	4603      	mov	r3, r0
 8007ace:	60b9      	str	r1, [r7, #8]
 8007ad0:	607a      	str	r2, [r7, #4]
 8007ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007ad8:	f7ff ff3e 	bl	8007958 <__NVIC_GetPriorityGrouping>
 8007adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	68b9      	ldr	r1, [r7, #8]
 8007ae2:	6978      	ldr	r0, [r7, #20]
 8007ae4:	f7ff ff8e 	bl	8007a04 <NVIC_EncodePriority>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007aee:	4611      	mov	r1, r2
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7ff ff5d 	bl	80079b0 <__NVIC_SetPriority>
}
 8007af6:	bf00      	nop
 8007af8:	3718      	adds	r7, #24
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b082      	sub	sp, #8
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	4603      	mov	r3, r0
 8007b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7ff ff31 	bl	8007974 <__NVIC_EnableIRQ>
}
 8007b12:	bf00      	nop
 8007b14:	3708      	adds	r7, #8
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b082      	sub	sp, #8
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f7ff ffa2 	bl	8007a6c <SysTick_Config>
 8007b28:	4603      	mov	r3, r0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b082      	sub	sp, #8
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d101      	bne.n	8007b44 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e014      	b.n	8007b6e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	791b      	ldrb	r3, [r3, #4]
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d105      	bne.n	8007b5a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7fe fbb5 	bl	80062c4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
	...

08007b78 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
 8007b84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d101      	bne.n	8007b94 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e0a2      	b.n	8007cda <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	795b      	ldrb	r3, [r3, #5]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d101      	bne.n	8007ba0 <HAL_DAC_Start_DMA+0x28>
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	e09c      	b.n	8007cda <HAL_DAC_Start_DMA+0x162>
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2202      	movs	r2, #2
 8007baa:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d129      	bne.n	8007c06 <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	4a4b      	ldr	r2, [pc, #300]	@ (8007ce4 <HAL_DAC_Start_DMA+0x16c>)
 8007bb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	4a4a      	ldr	r2, [pc, #296]	@ (8007ce8 <HAL_DAC_Start_DMA+0x170>)
 8007bc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	4a49      	ldr	r2, [pc, #292]	@ (8007cec <HAL_DAC_Start_DMA+0x174>)
 8007bc8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007bd8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d003      	beq.n	8007be8 <HAL_DAC_Start_DMA+0x70>
 8007be0:	6a3b      	ldr	r3, [r7, #32]
 8007be2:	2b04      	cmp	r3, #4
 8007be4:	d005      	beq.n	8007bf2 <HAL_DAC_Start_DMA+0x7a>
 8007be6:	e009      	b.n	8007bfc <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	3308      	adds	r3, #8
 8007bee:	613b      	str	r3, [r7, #16]
        break;
 8007bf0:	e033      	b.n	8007c5a <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	330c      	adds	r3, #12
 8007bf8:	613b      	str	r3, [r7, #16]
        break;
 8007bfa:	e02e      	b.n	8007c5a <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	3310      	adds	r3, #16
 8007c02:	613b      	str	r3, [r7, #16]
        break;
 8007c04:	e029      	b.n	8007c5a <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	4a39      	ldr	r2, [pc, #228]	@ (8007cf0 <HAL_DAC_Start_DMA+0x178>)
 8007c0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	4a38      	ldr	r2, [pc, #224]	@ (8007cf4 <HAL_DAC_Start_DMA+0x17c>)
 8007c14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	4a37      	ldr	r2, [pc, #220]	@ (8007cf8 <HAL_DAC_Start_DMA+0x180>)
 8007c1c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007c2c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8007c2e:	6a3b      	ldr	r3, [r7, #32]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d003      	beq.n	8007c3c <HAL_DAC_Start_DMA+0xc4>
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	2b04      	cmp	r3, #4
 8007c38:	d005      	beq.n	8007c46 <HAL_DAC_Start_DMA+0xce>
 8007c3a:	e009      	b.n	8007c50 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	3314      	adds	r3, #20
 8007c42:	613b      	str	r3, [r7, #16]
        break;
 8007c44:	e009      	b.n	8007c5a <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	3318      	adds	r3, #24
 8007c4c:	613b      	str	r3, [r7, #16]
        break;
 8007c4e:	e004      	b.n	8007c5a <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	331c      	adds	r3, #28
 8007c56:	613b      	str	r3, [r7, #16]
        break;
 8007c58:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d111      	bne.n	8007c84 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007c6e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6898      	ldr	r0, [r3, #8]
 8007c74:	6879      	ldr	r1, [r7, #4]
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	f000 fa99 	bl	80081b0 <HAL_DMA_Start_IT>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	75fb      	strb	r3, [r7, #23]
 8007c82:	e010      	b.n	8007ca6 <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8007c92:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	68d8      	ldr	r0, [r3, #12]
 8007c98:	6879      	ldr	r1, [r7, #4]
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	f000 fa87 	bl	80081b0 <HAL_DMA_Start_IT>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007cac:	7dfb      	ldrb	r3, [r7, #23]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10c      	bne.n	8007ccc <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6819      	ldr	r1, [r3, #0]
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	f003 0310 	and.w	r3, r3, #16
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	409a      	lsls	r2, r3
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	601a      	str	r2, [r3, #0]
 8007cca:	e005      	b.n	8007cd8 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	f043 0204 	orr.w	r2, r3, #4
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3718      	adds	r7, #24
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	08007e85 	.word	0x08007e85
 8007ce8:	08007ea7 	.word	0x08007ea7
 8007cec:	08007ec3 	.word	0x08007ec3
 8007cf0:	08007f2d 	.word	0x08007f2d
 8007cf4:	08007f4f 	.word	0x08007f4f
 8007cf8:	08007f6b 	.word	0x08007f6b

08007cfc <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e03e      	b.n	8007d8e <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	6819      	ldr	r1, [r3, #0]
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	f003 0310 	and.w	r3, r3, #16
 8007d1c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007d20:	fa02 f303 	lsl.w	r3, r2, r3
 8007d24:	43da      	mvns	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	400a      	ands	r2, r1
 8007d2c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	6819      	ldr	r1, [r3, #0]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	f003 0310 	and.w	r3, r3, #16
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d40:	43da      	mvns	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	400a      	ands	r2, r1
 8007d48:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10d      	bne.n	8007d6c <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	4618      	mov	r0, r3
 8007d56:	f000 fa83 	bl	8008260 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d68:	601a      	str	r2, [r3, #0]
 8007d6a:	e00c      	b.n	8007d86 <HAL_DAC_Stop_DMA+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	4618      	mov	r0, r3
 8007d72:	f000 fa75 	bl	8008260 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8007d84:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3708      	adds	r7, #8
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007d96:	b480      	push	{r7}
 8007d98:	b083      	sub	sp, #12
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8007d9e:	bf00      	nop
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007daa:	b480      	push	{r7}
 8007dac:	b083      	sub	sp, #12
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8007db2:	bf00      	nop
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b083      	sub	sp, #12
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8007dc6:	bf00      	nop
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b089      	sub	sp, #36	@ 0x24
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	60f8      	str	r0, [r7, #12]
 8007dda:	60b9      	str	r1, [r7, #8]
 8007ddc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d002      	beq.n	8007dee <HAL_DAC_ConfigChannel+0x1c>
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d101      	bne.n	8007df2 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e042      	b.n	8007e78 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	795b      	ldrb	r3, [r3, #5]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d101      	bne.n	8007dfe <HAL_DAC_ConfigChannel+0x2c>
 8007dfa:	2302      	movs	r3, #2
 8007dfc:	e03c      	b.n	8007e78 <HAL_DAC_ConfigChannel+0xa6>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2201      	movs	r2, #1
 8007e02:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2202      	movs	r2, #2
 8007e08:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f003 0310 	and.w	r3, r3, #16
 8007e18:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8007e1c:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8007e20:	43db      	mvns	r3, r3
 8007e22:	69ba      	ldr	r2, [r7, #24]
 8007e24:	4013      	ands	r3, r2
 8007e26:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f003 0310 	and.w	r3, r3, #16
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e40:	69ba      	ldr	r2, [r7, #24]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	69ba      	ldr	r2, [r7, #24]
 8007e4c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	6819      	ldr	r1, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f003 0310 	and.w	r3, r3, #16
 8007e5a:	22c0      	movs	r2, #192	@ 0xc0
 8007e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e60:	43da      	mvns	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	400a      	ands	r2, r1
 8007e68:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8007e76:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3724      	adds	r7, #36	@ 0x24
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e90:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f7ff ff7f 	bl	8007d96 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	711a      	strb	r2, [r3, #4]
}
 8007e9e:	bf00      	nop
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b084      	sub	sp, #16
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eb2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f7ff ff78 	bl	8007daa <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007eba:	bf00      	nop
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b084      	sub	sp, #16
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ece:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	f043 0204 	orr.w	r2, r3, #4
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f7ff ff6e 	bl	8007dbe <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	711a      	strb	r2, [r3, #4]
}
 8007ee8:	bf00      	nop
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007ef8:	bf00      	nop
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f38:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f7ff ffd8 	bl	8007ef0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2201      	movs	r2, #1
 8007f44:	711a      	strb	r2, [r3, #4]
}
 8007f46:	bf00      	nop
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b084      	sub	sp, #16
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f5a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f7ff ffd1 	bl	8007f04 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007f62:	bf00      	nop
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b084      	sub	sp, #16
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f76:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	f043 0204 	orr.w	r2, r3, #4
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f7ff ffc7 	bl	8007f18 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	711a      	strb	r2, [r3, #4]
}
 8007f90:	bf00      	nop
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007fa4:	f7ff fc84 	bl	80078b0 <HAL_GetTick>
 8007fa8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d101      	bne.n	8007fb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e099      	b.n	80080e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f022 0201 	bic.w	r2, r2, #1
 8007fd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007fd4:	e00f      	b.n	8007ff6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007fd6:	f7ff fc6b 	bl	80078b0 <HAL_GetTick>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	1ad3      	subs	r3, r2, r3
 8007fe0:	2b05      	cmp	r3, #5
 8007fe2:	d908      	bls.n	8007ff6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2220      	movs	r2, #32
 8007fe8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2203      	movs	r2, #3
 8007fee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e078      	b.n	80080e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 0301 	and.w	r3, r3, #1
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1e8      	bne.n	8007fd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	4b38      	ldr	r3, [pc, #224]	@ (80080f0 <HAL_DMA_Init+0x158>)
 8008010:	4013      	ands	r3, r2
 8008012:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008022:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800802e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800803a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a1b      	ldr	r3, [r3, #32]
 8008040:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	4313      	orrs	r3, r2
 8008046:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800804c:	2b04      	cmp	r3, #4
 800804e:	d107      	bne.n	8008060 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008058:	4313      	orrs	r3, r2
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	4313      	orrs	r3, r2
 800805e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	697a      	ldr	r2, [r7, #20]
 8008066:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	f023 0307 	bic.w	r3, r3, #7
 8008076:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800807c:	697a      	ldr	r2, [r7, #20]
 800807e:	4313      	orrs	r3, r2
 8008080:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008086:	2b04      	cmp	r3, #4
 8008088:	d117      	bne.n	80080ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	4313      	orrs	r3, r2
 8008092:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00e      	beq.n	80080ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 f9b3 	bl	8008408 <DMA_CheckFifoParam>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d008      	beq.n	80080ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2240      	movs	r2, #64	@ 0x40
 80080ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80080b6:	2301      	movs	r3, #1
 80080b8:	e016      	b.n	80080e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	697a      	ldr	r2, [r7, #20]
 80080c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f96a 	bl	800839c <DMA_CalcBaseAndBitshift>
 80080c8:	4603      	mov	r3, r0
 80080ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080d0:	223f      	movs	r2, #63	@ 0x3f
 80080d2:	409a      	lsls	r2, r3
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3718      	adds	r7, #24
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	f010803f 	.word	0xf010803f

080080f4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d101      	bne.n	8008106 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e050      	b.n	80081a8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b02      	cmp	r3, #2
 8008110:	d101      	bne.n	8008116 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8008112:	2302      	movs	r3, #2
 8008114:	e048      	b.n	80081a8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f022 0201 	bic.w	r2, r2, #1
 8008124:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2200      	movs	r2, #0
 800812c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2200      	movs	r2, #0
 8008134:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2200      	movs	r2, #0
 800813c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2200      	movs	r2, #0
 8008144:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2200      	movs	r2, #0
 800814c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2221      	movs	r2, #33	@ 0x21
 8008154:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f920 	bl	800839c <DMA_CalcBaseAndBitshift>
 800815c:	4603      	mov	r3, r0
 800815e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008188:	223f      	movs	r2, #63	@ 0x3f
 800818a:	409a      	lsls	r2, r3
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
 80081bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081be:	2300      	movs	r3, #0
 80081c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d101      	bne.n	80081d6 <HAL_DMA_Start_IT+0x26>
 80081d2:	2302      	movs	r3, #2
 80081d4:	e040      	b.n	8008258 <HAL_DMA_Start_IT+0xa8>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2201      	movs	r2, #1
 80081da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d12f      	bne.n	800824a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2202      	movs	r2, #2
 80081ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	68b9      	ldr	r1, [r7, #8]
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f000 f89e 	bl	8008340 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008208:	223f      	movs	r2, #63	@ 0x3f
 800820a:	409a      	lsls	r2, r3
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f042 0216 	orr.w	r2, r2, #22
 800821e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008224:	2b00      	cmp	r3, #0
 8008226:	d007      	beq.n	8008238 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f042 0208 	orr.w	r2, r2, #8
 8008236:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f042 0201 	orr.w	r2, r2, #1
 8008246:	601a      	str	r2, [r3, #0]
 8008248:	e005      	b.n	8008256 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008252:	2302      	movs	r3, #2
 8008254:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008256:	7dfb      	ldrb	r3, [r7, #23]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3718      	adds	r7, #24
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800826c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800826e:	f7ff fb1f 	bl	80078b0 <HAL_GetTick>
 8008272:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800827a:	b2db      	uxtb	r3, r3
 800827c:	2b02      	cmp	r3, #2
 800827e:	d008      	beq.n	8008292 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2280      	movs	r2, #128	@ 0x80
 8008284:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e052      	b.n	8008338 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f022 0216 	bic.w	r2, r2, #22
 80082a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	695a      	ldr	r2, [r3, #20]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80082b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d103      	bne.n	80082c2 <HAL_DMA_Abort+0x62>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d007      	beq.n	80082d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f022 0208 	bic.w	r2, r2, #8
 80082d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f022 0201 	bic.w	r2, r2, #1
 80082e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80082e2:	e013      	b.n	800830c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80082e4:	f7ff fae4 	bl	80078b0 <HAL_GetTick>
 80082e8:	4602      	mov	r2, r0
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	1ad3      	subs	r3, r2, r3
 80082ee:	2b05      	cmp	r3, #5
 80082f0:	d90c      	bls.n	800830c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2220      	movs	r2, #32
 80082f6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2203      	movs	r2, #3
 8008304:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_TIMEOUT;
 8008308:	2303      	movs	r3, #3
 800830a:	e015      	b.n	8008338 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0301 	and.w	r3, r3, #1
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1e4      	bne.n	80082e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800831e:	223f      	movs	r2, #63	@ 0x3f
 8008320:	409a      	lsls	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  }
  return HAL_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	607a      	str	r2, [r7, #4]
 800834c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800835c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	683a      	ldr	r2, [r7, #0]
 8008364:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	2b40      	cmp	r3, #64	@ 0x40
 800836c:	d108      	bne.n	8008380 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800837e:	e007      	b.n	8008390 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	60da      	str	r2, [r3, #12]
}
 8008390:	bf00      	nop
 8008392:	3714      	adds	r7, #20
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	3b10      	subs	r3, #16
 80083ac:	4a14      	ldr	r2, [pc, #80]	@ (8008400 <DMA_CalcBaseAndBitshift+0x64>)
 80083ae:	fba2 2303 	umull	r2, r3, r2, r3
 80083b2:	091b      	lsrs	r3, r3, #4
 80083b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80083b6:	4a13      	ldr	r2, [pc, #76]	@ (8008404 <DMA_CalcBaseAndBitshift+0x68>)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	4413      	add	r3, r2
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	461a      	mov	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	d909      	bls.n	80083de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80083d2:	f023 0303 	bic.w	r3, r3, #3
 80083d6:	1d1a      	adds	r2, r3, #4
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	659a      	str	r2, [r3, #88]	@ 0x58
 80083dc:	e007      	b.n	80083ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80083e6:	f023 0303 	bic.w	r3, r3, #3
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3714      	adds	r7, #20
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	aaaaaaab 	.word	0xaaaaaaab
 8008404:	0800db88 	.word	0x0800db88

08008408 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008410:	2300      	movs	r3, #0
 8008412:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008418:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	699b      	ldr	r3, [r3, #24]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d11f      	bne.n	8008462 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	2b03      	cmp	r3, #3
 8008426:	d856      	bhi.n	80084d6 <DMA_CheckFifoParam+0xce>
 8008428:	a201      	add	r2, pc, #4	@ (adr r2, 8008430 <DMA_CheckFifoParam+0x28>)
 800842a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842e:	bf00      	nop
 8008430:	08008441 	.word	0x08008441
 8008434:	08008453 	.word	0x08008453
 8008438:	08008441 	.word	0x08008441
 800843c:	080084d7 	.word	0x080084d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008444:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008448:	2b00      	cmp	r3, #0
 800844a:	d046      	beq.n	80084da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008450:	e043      	b.n	80084da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008456:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800845a:	d140      	bne.n	80084de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008460:	e03d      	b.n	80084de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800846a:	d121      	bne.n	80084b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	2b03      	cmp	r3, #3
 8008470:	d837      	bhi.n	80084e2 <DMA_CheckFifoParam+0xda>
 8008472:	a201      	add	r2, pc, #4	@ (adr r2, 8008478 <DMA_CheckFifoParam+0x70>)
 8008474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008478:	08008489 	.word	0x08008489
 800847c:	0800848f 	.word	0x0800848f
 8008480:	08008489 	.word	0x08008489
 8008484:	080084a1 	.word	0x080084a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	73fb      	strb	r3, [r7, #15]
      break;
 800848c:	e030      	b.n	80084f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008492:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d025      	beq.n	80084e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800849e:	e022      	b.n	80084e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80084a8:	d11f      	bne.n	80084ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80084ae:	e01c      	b.n	80084ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d903      	bls.n	80084be <DMA_CheckFifoParam+0xb6>
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	2b03      	cmp	r3, #3
 80084ba:	d003      	beq.n	80084c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80084bc:	e018      	b.n	80084f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	73fb      	strb	r3, [r7, #15]
      break;
 80084c2:	e015      	b.n	80084f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00e      	beq.n	80084ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	73fb      	strb	r3, [r7, #15]
      break;
 80084d4:	e00b      	b.n	80084ee <DMA_CheckFifoParam+0xe6>
      break;
 80084d6:	bf00      	nop
 80084d8:	e00a      	b.n	80084f0 <DMA_CheckFifoParam+0xe8>
      break;
 80084da:	bf00      	nop
 80084dc:	e008      	b.n	80084f0 <DMA_CheckFifoParam+0xe8>
      break;
 80084de:	bf00      	nop
 80084e0:	e006      	b.n	80084f0 <DMA_CheckFifoParam+0xe8>
      break;
 80084e2:	bf00      	nop
 80084e4:	e004      	b.n	80084f0 <DMA_CheckFifoParam+0xe8>
      break;
 80084e6:	bf00      	nop
 80084e8:	e002      	b.n	80084f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80084ea:	bf00      	nop
 80084ec:	e000      	b.n	80084f0 <DMA_CheckFifoParam+0xe8>
      break;
 80084ee:	bf00      	nop
    }
  } 
  
  return status; 
 80084f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3714      	adds	r7, #20
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop

08008500 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d101      	bne.n	8008512 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e03b      	b.n	800858a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008518:	b2db      	uxtb	r3, r3
 800851a:	2b00      	cmp	r3, #0
 800851c:	d106      	bne.n	800852c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7fd fbf2 	bl	8005d10 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2202      	movs	r2, #2
 8008530:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685a      	ldr	r2, [r3, #4]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	430a      	orrs	r2, r1
 8008548:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008550:	f023 0107 	bic.w	r1, r3, #7
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	689a      	ldr	r2, [r3, #8]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	430a      	orrs	r2, r1
 800855e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008566:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800856a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	68d1      	ldr	r1, [r2, #12]
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	6812      	ldr	r2, [r2, #0]
 8008576:	430b      	orrs	r3, r1
 8008578:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b086      	sub	sp, #24
 8008596:	af02      	add	r7, sp, #8
 8008598:	60f8      	str	r0, [r7, #12]
 800859a:	60b9      	str	r1, [r7, #8]
 800859c:	607a      	str	r2, [r7, #4]
 800859e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d101      	bne.n	80085ae <HAL_DMA2D_Start+0x1c>
 80085aa:	2302      	movs	r3, #2
 80085ac:	e018      	b.n	80085e0 <HAL_DMA2D_Start+0x4e>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2202      	movs	r2, #2
 80085ba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	9300      	str	r3, [sp, #0]
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	68b9      	ldr	r1, [r7, #8]
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f000 f989 	bl	80088e0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f042 0201 	orr.w	r2, r2, #1
 80085dc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b086      	sub	sp, #24
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80085f2:	2300      	movs	r3, #0
 80085f4:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0301 	and.w	r3, r3, #1
 8008600:	2b00      	cmp	r3, #0
 8008602:	d056      	beq.n	80086b2 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8008604:	f7ff f954 	bl	80078b0 <HAL_GetTick>
 8008608:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800860a:	e04b      	b.n	80086a4 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800861a:	2b00      	cmp	r3, #0
 800861c:	d023      	beq.n	8008666 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f003 0320 	and.w	r3, r3, #32
 8008624:	2b00      	cmp	r3, #0
 8008626:	d005      	beq.n	8008634 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800862c:	f043 0202 	orr.w	r2, r3, #2
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f003 0301 	and.w	r3, r3, #1
 800863a:	2b00      	cmp	r3, #0
 800863c:	d005      	beq.n	800864a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008642:	f043 0201 	orr.w	r2, r3, #1
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2221      	movs	r2, #33	@ 0x21
 8008650:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2204      	movs	r2, #4
 8008656:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e0a5      	b.n	80087b2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800866c:	d01a      	beq.n	80086a4 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800866e:	f7ff f91f 	bl	80078b0 <HAL_GetTick>
 8008672:	4602      	mov	r2, r0
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	683a      	ldr	r2, [r7, #0]
 800867a:	429a      	cmp	r2, r3
 800867c:	d302      	bcc.n	8008684 <HAL_DMA2D_PollForTransfer+0x9c>
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d10f      	bne.n	80086a4 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008688:	f043 0220 	orr.w	r2, r3, #32
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2203      	movs	r2, #3
 8008694:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80086a0:	2303      	movs	r3, #3
 80086a2:	e086      	b.n	80087b2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	f003 0302 	and.w	r3, r3, #2
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d0ac      	beq.n	800860c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	69db      	ldr	r3, [r3, #28]
 80086b8:	f003 0320 	and.w	r3, r3, #32
 80086bc:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086c4:	f003 0320 	and.w	r3, r3, #32
 80086c8:	693a      	ldr	r2, [r7, #16]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d061      	beq.n	8008798 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80086d4:	f7ff f8ec 	bl	80078b0 <HAL_GetTick>
 80086d8:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80086da:	e056      	b.n	800878a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d02e      	beq.n	800874c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f003 0308 	and.w	r3, r3, #8
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d005      	beq.n	8008704 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086fc:	f043 0204 	orr.w	r2, r3, #4
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f003 0320 	and.w	r3, r3, #32
 800870a:	2b00      	cmp	r3, #0
 800870c:	d005      	beq.n	800871a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008712:	f043 0202 	orr.w	r2, r3, #2
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	2b00      	cmp	r3, #0
 8008722:	d005      	beq.n	8008730 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008728:	f043 0201 	orr.w	r2, r3, #1
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2229      	movs	r2, #41	@ 0x29
 8008736:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2204      	movs	r2, #4
 800873c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	e032      	b.n	80087b2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008752:	d01a      	beq.n	800878a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8008754:	f7ff f8ac 	bl	80078b0 <HAL_GetTick>
 8008758:	4602      	mov	r2, r0
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	683a      	ldr	r2, [r7, #0]
 8008760:	429a      	cmp	r2, r3
 8008762:	d302      	bcc.n	800876a <HAL_DMA2D_PollForTransfer+0x182>
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10f      	bne.n	800878a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800876e:	f043 0220 	orr.w	r2, r3, #32
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2203      	movs	r2, #3
 800877a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	e013      	b.n	80087b2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	f003 0310 	and.w	r3, r3, #16
 8008794:	2b00      	cmp	r3, #0
 8008796:	d0a1      	beq.n	80086dc <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2212      	movs	r2, #18
 800879e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3718      	adds	r7, #24
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
	...

080087bc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80087bc:	b480      	push	{r7}
 80087be:	b087      	sub	sp, #28
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d101      	bne.n	80087dc <HAL_DMA2D_ConfigLayer+0x20>
 80087d8:	2302      	movs	r3, #2
 80087da:	e079      	b.n	80088d0 <HAL_DMA2D_ConfigLayer+0x114>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2202      	movs	r2, #2
 80087e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	011b      	lsls	r3, r3, #4
 80087f0:	3318      	adds	r3, #24
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	4413      	add	r3, r2
 80087f6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	685a      	ldr	r2, [r3, #4]
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	041b      	lsls	r3, r3, #16
 8008802:	4313      	orrs	r3, r2
 8008804:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8008806:	4b35      	ldr	r3, [pc, #212]	@ (80088dc <HAL_DMA2D_ConfigLayer+0x120>)
 8008808:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	2b0a      	cmp	r3, #10
 8008810:	d003      	beq.n	800881a <HAL_DMA2D_ConfigLayer+0x5e>
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	2b09      	cmp	r3, #9
 8008818:	d107      	bne.n	800882a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8008822:	697a      	ldr	r2, [r7, #20]
 8008824:	4313      	orrs	r3, r2
 8008826:	617b      	str	r3, [r7, #20]
 8008828:	e005      	b.n	8008836 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	061b      	lsls	r3, r3, #24
 8008830:	697a      	ldr	r2, [r7, #20]
 8008832:	4313      	orrs	r3, r2
 8008834:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d120      	bne.n	800887e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	43db      	mvns	r3, r3
 8008846:	ea02 0103 	and.w	r1, r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	697a      	ldr	r2, [r7, #20]
 8008850:	430a      	orrs	r2, r1
 8008852:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	693a      	ldr	r2, [r7, #16]
 800885a:	6812      	ldr	r2, [r2, #0]
 800885c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	2b0a      	cmp	r3, #10
 8008864:	d003      	beq.n	800886e <HAL_DMA2D_ConfigLayer+0xb2>
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	2b09      	cmp	r3, #9
 800886c:	d127      	bne.n	80088be <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	68da      	ldr	r2, [r3, #12]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800887a:	629a      	str	r2, [r3, #40]	@ 0x28
 800887c:	e01f      	b.n	80088be <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	69da      	ldr	r2, [r3, #28]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	43db      	mvns	r3, r3
 8008888:	ea02 0103 	and.w	r1, r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	697a      	ldr	r2, [r7, #20]
 8008892:	430a      	orrs	r2, r1
 8008894:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	693a      	ldr	r2, [r7, #16]
 800889c:	6812      	ldr	r2, [r2, #0]
 800889e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	2b0a      	cmp	r3, #10
 80088a6:	d003      	beq.n	80088b0 <HAL_DMA2D_ConfigLayer+0xf4>
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	2b09      	cmp	r3, #9
 80088ae:	d106      	bne.n	80088be <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	68da      	ldr	r2, [r3, #12]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80088bc:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	371c      	adds	r7, #28
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr
 80088dc:	ff03000f 	.word	0xff03000f

080088e0 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b08b      	sub	sp, #44	@ 0x2c
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	607a      	str	r2, [r7, #4]
 80088ec:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088f4:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	041a      	lsls	r2, r3, #16
 80088fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088fe:	431a      	orrs	r2, r3
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	430a      	orrs	r2, r1
 8008906:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008918:	d174      	bne.n	8008a04 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8008920:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008928:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008930:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	b2db      	uxtb	r3, r3
 8008936:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d108      	bne.n	8008952 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8008940:	69ba      	ldr	r2, [r7, #24]
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	431a      	orrs	r2, r3
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	4313      	orrs	r3, r2
 800894a:	697a      	ldr	r2, [r7, #20]
 800894c:	4313      	orrs	r3, r2
 800894e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008950:	e053      	b.n	80089fa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	2b01      	cmp	r3, #1
 8008958:	d106      	bne.n	8008968 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800895a:	69ba      	ldr	r2, [r7, #24]
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	4313      	orrs	r3, r2
 8008960:	697a      	ldr	r2, [r7, #20]
 8008962:	4313      	orrs	r3, r2
 8008964:	627b      	str	r3, [r7, #36]	@ 0x24
 8008966:	e048      	b.n	80089fa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	2b02      	cmp	r3, #2
 800896e:	d111      	bne.n	8008994 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	0cdb      	lsrs	r3, r3, #19
 8008974:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	0a9b      	lsrs	r3, r3, #10
 800897a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	08db      	lsrs	r3, r3, #3
 8008980:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	015a      	lsls	r2, r3, #5
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	02db      	lsls	r3, r3, #11
 800898a:	4313      	orrs	r3, r2
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	4313      	orrs	r3, r2
 8008990:	627b      	str	r3, [r7, #36]	@ 0x24
 8008992:	e032      	b.n	80089fa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	2b03      	cmp	r3, #3
 800899a:	d117      	bne.n	80089cc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800899c:	6a3b      	ldr	r3, [r7, #32]
 800899e:	0fdb      	lsrs	r3, r3, #31
 80089a0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	0cdb      	lsrs	r3, r3, #19
 80089a6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	0adb      	lsrs	r3, r3, #11
 80089ac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	08db      	lsrs	r3, r3, #3
 80089b2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	015a      	lsls	r2, r3, #5
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	029b      	lsls	r3, r3, #10
 80089bc:	431a      	orrs	r2, r3
 80089be:	6a3b      	ldr	r3, [r7, #32]
 80089c0:	03db      	lsls	r3, r3, #15
 80089c2:	4313      	orrs	r3, r2
 80089c4:	697a      	ldr	r2, [r7, #20]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80089ca:	e016      	b.n	80089fa <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	0f1b      	lsrs	r3, r3, #28
 80089d0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	0d1b      	lsrs	r3, r3, #20
 80089d6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	0b1b      	lsrs	r3, r3, #12
 80089dc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	091b      	lsrs	r3, r3, #4
 80089e2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80089e4:	69bb      	ldr	r3, [r7, #24]
 80089e6:	011a      	lsls	r2, r3, #4
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	021b      	lsls	r3, r3, #8
 80089ec:	431a      	orrs	r2, r3
 80089ee:	6a3b      	ldr	r3, [r7, #32]
 80089f0:	031b      	lsls	r3, r3, #12
 80089f2:	4313      	orrs	r3, r2
 80089f4:	697a      	ldr	r2, [r7, #20]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a00:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8008a02:	e003      	b.n	8008a0c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68ba      	ldr	r2, [r7, #8]
 8008a0a:	60da      	str	r2, [r3, #12]
}
 8008a0c:	bf00      	nop
 8008a0e:	372c      	adds	r7, #44	@ 0x2c
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b089      	sub	sp, #36	@ 0x24
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008a22:	2300      	movs	r3, #0
 8008a24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008a26:	2300      	movs	r3, #0
 8008a28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008a2e:	2300      	movs	r3, #0
 8008a30:	61fb      	str	r3, [r7, #28]
 8008a32:	e177      	b.n	8008d24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008a34:	2201      	movs	r2, #1
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	fa02 f303 	lsl.w	r3, r2, r3
 8008a3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	4013      	ands	r3, r2
 8008a46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008a48:	693a      	ldr	r2, [r7, #16]
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	f040 8166 	bne.w	8008d1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d00b      	beq.n	8008a72 <HAL_GPIO_Init+0x5a>
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d007      	beq.n	8008a72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008a66:	2b11      	cmp	r3, #17
 8008a68:	d003      	beq.n	8008a72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	2b12      	cmp	r3, #18
 8008a70:	d130      	bne.n	8008ad4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	005b      	lsls	r3, r3, #1
 8008a7c:	2203      	movs	r2, #3
 8008a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a82:	43db      	mvns	r3, r3
 8008a84:	69ba      	ldr	r2, [r7, #24]
 8008a86:	4013      	ands	r3, r2
 8008a88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	68da      	ldr	r2, [r3, #12]
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	005b      	lsls	r3, r3, #1
 8008a92:	fa02 f303 	lsl.w	r3, r2, r3
 8008a96:	69ba      	ldr	r2, [r7, #24]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	69ba      	ldr	r2, [r7, #24]
 8008aa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab0:	43db      	mvns	r3, r3
 8008ab2:	69ba      	ldr	r2, [r7, #24]
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	091b      	lsrs	r3, r3, #4
 8008abe:	f003 0201 	and.w	r2, r3, #1
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac8:	69ba      	ldr	r2, [r7, #24]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	69ba      	ldr	r2, [r7, #24]
 8008ad2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	005b      	lsls	r3, r3, #1
 8008ade:	2203      	movs	r2, #3
 8008ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ae4:	43db      	mvns	r3, r3
 8008ae6:	69ba      	ldr	r2, [r7, #24]
 8008ae8:	4013      	ands	r3, r2
 8008aea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	689a      	ldr	r2, [r3, #8]
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	005b      	lsls	r3, r3, #1
 8008af4:	fa02 f303 	lsl.w	r3, r2, r3
 8008af8:	69ba      	ldr	r2, [r7, #24]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	69ba      	ldr	r2, [r7, #24]
 8008b02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d003      	beq.n	8008b14 <HAL_GPIO_Init+0xfc>
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	2b12      	cmp	r3, #18
 8008b12:	d123      	bne.n	8008b5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	08da      	lsrs	r2, r3, #3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	3208      	adds	r2, #8
 8008b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	f003 0307 	and.w	r3, r3, #7
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	220f      	movs	r2, #15
 8008b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b30:	43db      	mvns	r3, r3
 8008b32:	69ba      	ldr	r2, [r7, #24]
 8008b34:	4013      	ands	r3, r2
 8008b36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	691a      	ldr	r2, [r3, #16]
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	f003 0307 	and.w	r3, r3, #7
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	fa02 f303 	lsl.w	r3, r2, r3
 8008b48:	69ba      	ldr	r2, [r7, #24]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	08da      	lsrs	r2, r3, #3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	3208      	adds	r2, #8
 8008b56:	69b9      	ldr	r1, [r7, #24]
 8008b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	005b      	lsls	r3, r3, #1
 8008b66:	2203      	movs	r2, #3
 8008b68:	fa02 f303 	lsl.w	r3, r2, r3
 8008b6c:	43db      	mvns	r3, r3
 8008b6e:	69ba      	ldr	r2, [r7, #24]
 8008b70:	4013      	ands	r3, r2
 8008b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	f003 0203 	and.w	r2, r3, #3
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	005b      	lsls	r3, r3, #1
 8008b80:	fa02 f303 	lsl.w	r3, r2, r3
 8008b84:	69ba      	ldr	r2, [r7, #24]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	69ba      	ldr	r2, [r7, #24]
 8008b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f000 80c0 	beq.w	8008d1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	60fb      	str	r3, [r7, #12]
 8008ba2:	4b66      	ldr	r3, [pc, #408]	@ (8008d3c <HAL_GPIO_Init+0x324>)
 8008ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ba6:	4a65      	ldr	r2, [pc, #404]	@ (8008d3c <HAL_GPIO_Init+0x324>)
 8008ba8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8008bae:	4b63      	ldr	r3, [pc, #396]	@ (8008d3c <HAL_GPIO_Init+0x324>)
 8008bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008bb6:	60fb      	str	r3, [r7, #12]
 8008bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008bba:	4a61      	ldr	r2, [pc, #388]	@ (8008d40 <HAL_GPIO_Init+0x328>)
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	089b      	lsrs	r3, r3, #2
 8008bc0:	3302      	adds	r3, #2
 8008bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	f003 0303 	and.w	r3, r3, #3
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	220f      	movs	r2, #15
 8008bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd6:	43db      	mvns	r3, r3
 8008bd8:	69ba      	ldr	r2, [r7, #24]
 8008bda:	4013      	ands	r3, r2
 8008bdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a58      	ldr	r2, [pc, #352]	@ (8008d44 <HAL_GPIO_Init+0x32c>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d037      	beq.n	8008c56 <HAL_GPIO_Init+0x23e>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a57      	ldr	r2, [pc, #348]	@ (8008d48 <HAL_GPIO_Init+0x330>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d031      	beq.n	8008c52 <HAL_GPIO_Init+0x23a>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a56      	ldr	r2, [pc, #344]	@ (8008d4c <HAL_GPIO_Init+0x334>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d02b      	beq.n	8008c4e <HAL_GPIO_Init+0x236>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a55      	ldr	r2, [pc, #340]	@ (8008d50 <HAL_GPIO_Init+0x338>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d025      	beq.n	8008c4a <HAL_GPIO_Init+0x232>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a54      	ldr	r2, [pc, #336]	@ (8008d54 <HAL_GPIO_Init+0x33c>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d01f      	beq.n	8008c46 <HAL_GPIO_Init+0x22e>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a53      	ldr	r2, [pc, #332]	@ (8008d58 <HAL_GPIO_Init+0x340>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d019      	beq.n	8008c42 <HAL_GPIO_Init+0x22a>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a52      	ldr	r2, [pc, #328]	@ (8008d5c <HAL_GPIO_Init+0x344>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d013      	beq.n	8008c3e <HAL_GPIO_Init+0x226>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a51      	ldr	r2, [pc, #324]	@ (8008d60 <HAL_GPIO_Init+0x348>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d00d      	beq.n	8008c3a <HAL_GPIO_Init+0x222>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a50      	ldr	r2, [pc, #320]	@ (8008d64 <HAL_GPIO_Init+0x34c>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d007      	beq.n	8008c36 <HAL_GPIO_Init+0x21e>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a4f      	ldr	r2, [pc, #316]	@ (8008d68 <HAL_GPIO_Init+0x350>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d101      	bne.n	8008c32 <HAL_GPIO_Init+0x21a>
 8008c2e:	2309      	movs	r3, #9
 8008c30:	e012      	b.n	8008c58 <HAL_GPIO_Init+0x240>
 8008c32:	230a      	movs	r3, #10
 8008c34:	e010      	b.n	8008c58 <HAL_GPIO_Init+0x240>
 8008c36:	2308      	movs	r3, #8
 8008c38:	e00e      	b.n	8008c58 <HAL_GPIO_Init+0x240>
 8008c3a:	2307      	movs	r3, #7
 8008c3c:	e00c      	b.n	8008c58 <HAL_GPIO_Init+0x240>
 8008c3e:	2306      	movs	r3, #6
 8008c40:	e00a      	b.n	8008c58 <HAL_GPIO_Init+0x240>
 8008c42:	2305      	movs	r3, #5
 8008c44:	e008      	b.n	8008c58 <HAL_GPIO_Init+0x240>
 8008c46:	2304      	movs	r3, #4
 8008c48:	e006      	b.n	8008c58 <HAL_GPIO_Init+0x240>
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	e004      	b.n	8008c58 <HAL_GPIO_Init+0x240>
 8008c4e:	2302      	movs	r3, #2
 8008c50:	e002      	b.n	8008c58 <HAL_GPIO_Init+0x240>
 8008c52:	2301      	movs	r3, #1
 8008c54:	e000      	b.n	8008c58 <HAL_GPIO_Init+0x240>
 8008c56:	2300      	movs	r3, #0
 8008c58:	69fa      	ldr	r2, [r7, #28]
 8008c5a:	f002 0203 	and.w	r2, r2, #3
 8008c5e:	0092      	lsls	r2, r2, #2
 8008c60:	4093      	lsls	r3, r2
 8008c62:	69ba      	ldr	r2, [r7, #24]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c68:	4935      	ldr	r1, [pc, #212]	@ (8008d40 <HAL_GPIO_Init+0x328>)
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	089b      	lsrs	r3, r3, #2
 8008c6e:	3302      	adds	r3, #2
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008c76:	4b3d      	ldr	r3, [pc, #244]	@ (8008d6c <HAL_GPIO_Init+0x354>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	43db      	mvns	r3, r3
 8008c80:	69ba      	ldr	r2, [r7, #24]
 8008c82:	4013      	ands	r3, r2
 8008c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d003      	beq.n	8008c9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008c92:	69ba      	ldr	r2, [r7, #24]
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008c9a:	4a34      	ldr	r2, [pc, #208]	@ (8008d6c <HAL_GPIO_Init+0x354>)
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008ca0:	4b32      	ldr	r3, [pc, #200]	@ (8008d6c <HAL_GPIO_Init+0x354>)
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	43db      	mvns	r3, r3
 8008caa:	69ba      	ldr	r2, [r7, #24]
 8008cac:	4013      	ands	r3, r2
 8008cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d003      	beq.n	8008cc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008cbc:	69ba      	ldr	r2, [r7, #24]
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008cc4:	4a29      	ldr	r2, [pc, #164]	@ (8008d6c <HAL_GPIO_Init+0x354>)
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008cca:	4b28      	ldr	r3, [pc, #160]	@ (8008d6c <HAL_GPIO_Init+0x354>)
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	43db      	mvns	r3, r3
 8008cd4:	69ba      	ldr	r2, [r7, #24]
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d003      	beq.n	8008cee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008ce6:	69ba      	ldr	r2, [r7, #24]
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008cee:	4a1f      	ldr	r2, [pc, #124]	@ (8008d6c <HAL_GPIO_Init+0x354>)
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8008d6c <HAL_GPIO_Init+0x354>)
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	43db      	mvns	r3, r3
 8008cfe:	69ba      	ldr	r2, [r7, #24]
 8008d00:	4013      	ands	r3, r2
 8008d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d003      	beq.n	8008d18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008d10:	69ba      	ldr	r2, [r7, #24]
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008d18:	4a14      	ldr	r2, [pc, #80]	@ (8008d6c <HAL_GPIO_Init+0x354>)
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	3301      	adds	r3, #1
 8008d22:	61fb      	str	r3, [r7, #28]
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	2b0f      	cmp	r3, #15
 8008d28:	f67f ae84 	bls.w	8008a34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008d2c:	bf00      	nop
 8008d2e:	bf00      	nop
 8008d30:	3724      	adds	r7, #36	@ 0x24
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	40023800 	.word	0x40023800
 8008d40:	40013800 	.word	0x40013800
 8008d44:	40020000 	.word	0x40020000
 8008d48:	40020400 	.word	0x40020400
 8008d4c:	40020800 	.word	0x40020800
 8008d50:	40020c00 	.word	0x40020c00
 8008d54:	40021000 	.word	0x40021000
 8008d58:	40021400 	.word	0x40021400
 8008d5c:	40021800 	.word	0x40021800
 8008d60:	40021c00 	.word	0x40021c00
 8008d64:	40022000 	.word	0x40022000
 8008d68:	40022400 	.word	0x40022400
 8008d6c:	40013c00 	.word	0x40013c00

08008d70 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b087      	sub	sp, #28
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8008d82:	2300      	movs	r3, #0
 8008d84:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008d86:	2300      	movs	r3, #0
 8008d88:	617b      	str	r3, [r7, #20]
 8008d8a:	e0d9      	b.n	8008f40 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	fa02 f303 	lsl.w	r3, r2, r3
 8008d94:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	4013      	ands	r3, r2
 8008d9c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	f040 80c9 	bne.w	8008f3a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008da8:	4a6b      	ldr	r2, [pc, #428]	@ (8008f58 <HAL_GPIO_DeInit+0x1e8>)
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	089b      	lsrs	r3, r3, #2
 8008dae:	3302      	adds	r3, #2
 8008db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008db4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	f003 0303 	and.w	r3, r3, #3
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	220f      	movs	r2, #15
 8008dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	4013      	ands	r3, r2
 8008dc8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a63      	ldr	r2, [pc, #396]	@ (8008f5c <HAL_GPIO_DeInit+0x1ec>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d037      	beq.n	8008e42 <HAL_GPIO_DeInit+0xd2>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a62      	ldr	r2, [pc, #392]	@ (8008f60 <HAL_GPIO_DeInit+0x1f0>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d031      	beq.n	8008e3e <HAL_GPIO_DeInit+0xce>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a61      	ldr	r2, [pc, #388]	@ (8008f64 <HAL_GPIO_DeInit+0x1f4>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d02b      	beq.n	8008e3a <HAL_GPIO_DeInit+0xca>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a60      	ldr	r2, [pc, #384]	@ (8008f68 <HAL_GPIO_DeInit+0x1f8>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d025      	beq.n	8008e36 <HAL_GPIO_DeInit+0xc6>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a5f      	ldr	r2, [pc, #380]	@ (8008f6c <HAL_GPIO_DeInit+0x1fc>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d01f      	beq.n	8008e32 <HAL_GPIO_DeInit+0xc2>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a5e      	ldr	r2, [pc, #376]	@ (8008f70 <HAL_GPIO_DeInit+0x200>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d019      	beq.n	8008e2e <HAL_GPIO_DeInit+0xbe>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a5d      	ldr	r2, [pc, #372]	@ (8008f74 <HAL_GPIO_DeInit+0x204>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d013      	beq.n	8008e2a <HAL_GPIO_DeInit+0xba>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a5c      	ldr	r2, [pc, #368]	@ (8008f78 <HAL_GPIO_DeInit+0x208>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d00d      	beq.n	8008e26 <HAL_GPIO_DeInit+0xb6>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a5b      	ldr	r2, [pc, #364]	@ (8008f7c <HAL_GPIO_DeInit+0x20c>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d007      	beq.n	8008e22 <HAL_GPIO_DeInit+0xb2>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a5a      	ldr	r2, [pc, #360]	@ (8008f80 <HAL_GPIO_DeInit+0x210>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d101      	bne.n	8008e1e <HAL_GPIO_DeInit+0xae>
 8008e1a:	2309      	movs	r3, #9
 8008e1c:	e012      	b.n	8008e44 <HAL_GPIO_DeInit+0xd4>
 8008e1e:	230a      	movs	r3, #10
 8008e20:	e010      	b.n	8008e44 <HAL_GPIO_DeInit+0xd4>
 8008e22:	2308      	movs	r3, #8
 8008e24:	e00e      	b.n	8008e44 <HAL_GPIO_DeInit+0xd4>
 8008e26:	2307      	movs	r3, #7
 8008e28:	e00c      	b.n	8008e44 <HAL_GPIO_DeInit+0xd4>
 8008e2a:	2306      	movs	r3, #6
 8008e2c:	e00a      	b.n	8008e44 <HAL_GPIO_DeInit+0xd4>
 8008e2e:	2305      	movs	r3, #5
 8008e30:	e008      	b.n	8008e44 <HAL_GPIO_DeInit+0xd4>
 8008e32:	2304      	movs	r3, #4
 8008e34:	e006      	b.n	8008e44 <HAL_GPIO_DeInit+0xd4>
 8008e36:	2303      	movs	r3, #3
 8008e38:	e004      	b.n	8008e44 <HAL_GPIO_DeInit+0xd4>
 8008e3a:	2302      	movs	r3, #2
 8008e3c:	e002      	b.n	8008e44 <HAL_GPIO_DeInit+0xd4>
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e000      	b.n	8008e44 <HAL_GPIO_DeInit+0xd4>
 8008e42:	2300      	movs	r3, #0
 8008e44:	697a      	ldr	r2, [r7, #20]
 8008e46:	f002 0203 	and.w	r2, r2, #3
 8008e4a:	0092      	lsls	r2, r2, #2
 8008e4c:	4093      	lsls	r3, r2
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d132      	bne.n	8008eba <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008e54:	4b4b      	ldr	r3, [pc, #300]	@ (8008f84 <HAL_GPIO_DeInit+0x214>)
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	43db      	mvns	r3, r3
 8008e5c:	4949      	ldr	r1, [pc, #292]	@ (8008f84 <HAL_GPIO_DeInit+0x214>)
 8008e5e:	4013      	ands	r3, r2
 8008e60:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008e62:	4b48      	ldr	r3, [pc, #288]	@ (8008f84 <HAL_GPIO_DeInit+0x214>)
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	43db      	mvns	r3, r3
 8008e6a:	4946      	ldr	r1, [pc, #280]	@ (8008f84 <HAL_GPIO_DeInit+0x214>)
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8008e70:	4b44      	ldr	r3, [pc, #272]	@ (8008f84 <HAL_GPIO_DeInit+0x214>)
 8008e72:	689a      	ldr	r2, [r3, #8]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	43db      	mvns	r3, r3
 8008e78:	4942      	ldr	r1, [pc, #264]	@ (8008f84 <HAL_GPIO_DeInit+0x214>)
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008e7e:	4b41      	ldr	r3, [pc, #260]	@ (8008f84 <HAL_GPIO_DeInit+0x214>)
 8008e80:	68da      	ldr	r2, [r3, #12]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	43db      	mvns	r3, r3
 8008e86:	493f      	ldr	r1, [pc, #252]	@ (8008f84 <HAL_GPIO_DeInit+0x214>)
 8008e88:	4013      	ands	r3, r2
 8008e8a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	f003 0303 	and.w	r3, r3, #3
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	220f      	movs	r2, #15
 8008e96:	fa02 f303 	lsl.w	r3, r2, r3
 8008e9a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008e9c:	4a2e      	ldr	r2, [pc, #184]	@ (8008f58 <HAL_GPIO_DeInit+0x1e8>)
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	089b      	lsrs	r3, r3, #2
 8008ea2:	3302      	adds	r3, #2
 8008ea4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	43da      	mvns	r2, r3
 8008eac:	482a      	ldr	r0, [pc, #168]	@ (8008f58 <HAL_GPIO_DeInit+0x1e8>)
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	089b      	lsrs	r3, r3, #2
 8008eb2:	400a      	ands	r2, r1
 8008eb4:	3302      	adds	r3, #2
 8008eb6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	005b      	lsls	r3, r3, #1
 8008ec2:	2103      	movs	r1, #3
 8008ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ec8:	43db      	mvns	r3, r3
 8008eca:	401a      	ands	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	08da      	lsrs	r2, r3, #3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	3208      	adds	r2, #8
 8008ed8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	f003 0307 	and.w	r3, r3, #7
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	220f      	movs	r2, #15
 8008ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eea:	43db      	mvns	r3, r3
 8008eec:	697a      	ldr	r2, [r7, #20]
 8008eee:	08d2      	lsrs	r2, r2, #3
 8008ef0:	4019      	ands	r1, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	3208      	adds	r2, #8
 8008ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	68da      	ldr	r2, [r3, #12]
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	005b      	lsls	r3, r3, #1
 8008f02:	2103      	movs	r1, #3
 8008f04:	fa01 f303 	lsl.w	r3, r1, r3
 8008f08:	43db      	mvns	r3, r3
 8008f0a:	401a      	ands	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685a      	ldr	r2, [r3, #4]
 8008f14:	2101      	movs	r1, #1
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	fa01 f303 	lsl.w	r3, r1, r3
 8008f1c:	43db      	mvns	r3, r3
 8008f1e:	401a      	ands	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	689a      	ldr	r2, [r3, #8]
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	005b      	lsls	r3, r3, #1
 8008f2c:	2103      	movs	r1, #3
 8008f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8008f32:	43db      	mvns	r3, r3
 8008f34:	401a      	ands	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	617b      	str	r3, [r7, #20]
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	2b0f      	cmp	r3, #15
 8008f44:	f67f af22 	bls.w	8008d8c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008f48:	bf00      	nop
 8008f4a:	bf00      	nop
 8008f4c:	371c      	adds	r7, #28
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop
 8008f58:	40013800 	.word	0x40013800
 8008f5c:	40020000 	.word	0x40020000
 8008f60:	40020400 	.word	0x40020400
 8008f64:	40020800 	.word	0x40020800
 8008f68:	40020c00 	.word	0x40020c00
 8008f6c:	40021000 	.word	0x40021000
 8008f70:	40021400 	.word	0x40021400
 8008f74:	40021800 	.word	0x40021800
 8008f78:	40021c00 	.word	0x40021c00
 8008f7c:	40022000 	.word	0x40022000
 8008f80:	40022400 	.word	0x40022400
 8008f84:	40013c00 	.word	0x40013c00

08008f88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	460b      	mov	r3, r1
 8008f92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	691a      	ldr	r2, [r3, #16]
 8008f98:	887b      	ldrh	r3, [r7, #2]
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d002      	beq.n	8008fa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	73fb      	strb	r3, [r7, #15]
 8008fa4:	e001      	b.n	8008faa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	807b      	strh	r3, [r7, #2]
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008fc8:	787b      	ldrb	r3, [r7, #1]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d003      	beq.n	8008fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008fce:	887a      	ldrh	r2, [r7, #2]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008fd4:	e003      	b.n	8008fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008fd6:	887b      	ldrh	r3, [r7, #2]
 8008fd8:	041a      	lsls	r2, r3, #16
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	619a      	str	r2, [r3, #24]
}
 8008fde:	bf00      	nop
 8008fe0:	370c      	adds	r7, #12
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr
	...

08008fec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d101      	bne.n	8008ffe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e12b      	b.n	8009256 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009004:	b2db      	uxtb	r3, r3
 8009006:	2b00      	cmp	r3, #0
 8009008:	d106      	bne.n	8009018 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f7fc fe9e 	bl	8005d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2224      	movs	r2, #36	@ 0x24
 800901c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f022 0201 	bic.w	r2, r2, #1
 800902e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800903e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800904e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009050:	f001 f8c2 	bl	800a1d8 <HAL_RCC_GetPCLK1Freq>
 8009054:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	4a81      	ldr	r2, [pc, #516]	@ (8009260 <HAL_I2C_Init+0x274>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d807      	bhi.n	8009070 <HAL_I2C_Init+0x84>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	4a80      	ldr	r2, [pc, #512]	@ (8009264 <HAL_I2C_Init+0x278>)
 8009064:	4293      	cmp	r3, r2
 8009066:	bf94      	ite	ls
 8009068:	2301      	movls	r3, #1
 800906a:	2300      	movhi	r3, #0
 800906c:	b2db      	uxtb	r3, r3
 800906e:	e006      	b.n	800907e <HAL_I2C_Init+0x92>
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	4a7d      	ldr	r2, [pc, #500]	@ (8009268 <HAL_I2C_Init+0x27c>)
 8009074:	4293      	cmp	r3, r2
 8009076:	bf94      	ite	ls
 8009078:	2301      	movls	r3, #1
 800907a:	2300      	movhi	r3, #0
 800907c:	b2db      	uxtb	r3, r3
 800907e:	2b00      	cmp	r3, #0
 8009080:	d001      	beq.n	8009086 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	e0e7      	b.n	8009256 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	4a78      	ldr	r2, [pc, #480]	@ (800926c <HAL_I2C_Init+0x280>)
 800908a:	fba2 2303 	umull	r2, r3, r2, r3
 800908e:	0c9b      	lsrs	r3, r3, #18
 8009090:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	430a      	orrs	r2, r1
 80090a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	6a1b      	ldr	r3, [r3, #32]
 80090ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	4a6a      	ldr	r2, [pc, #424]	@ (8009260 <HAL_I2C_Init+0x274>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d802      	bhi.n	80090c0 <HAL_I2C_Init+0xd4>
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	3301      	adds	r3, #1
 80090be:	e009      	b.n	80090d4 <HAL_I2C_Init+0xe8>
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80090c6:	fb02 f303 	mul.w	r3, r2, r3
 80090ca:	4a69      	ldr	r2, [pc, #420]	@ (8009270 <HAL_I2C_Init+0x284>)
 80090cc:	fba2 2303 	umull	r2, r3, r2, r3
 80090d0:	099b      	lsrs	r3, r3, #6
 80090d2:	3301      	adds	r3, #1
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	6812      	ldr	r2, [r2, #0]
 80090d8:	430b      	orrs	r3, r1
 80090da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	69db      	ldr	r3, [r3, #28]
 80090e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80090e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	495c      	ldr	r1, [pc, #368]	@ (8009260 <HAL_I2C_Init+0x274>)
 80090f0:	428b      	cmp	r3, r1
 80090f2:	d819      	bhi.n	8009128 <HAL_I2C_Init+0x13c>
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	1e59      	subs	r1, r3, #1
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	005b      	lsls	r3, r3, #1
 80090fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8009102:	1c59      	adds	r1, r3, #1
 8009104:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009108:	400b      	ands	r3, r1
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00a      	beq.n	8009124 <HAL_I2C_Init+0x138>
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	1e59      	subs	r1, r3, #1
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	005b      	lsls	r3, r3, #1
 8009118:	fbb1 f3f3 	udiv	r3, r1, r3
 800911c:	3301      	adds	r3, #1
 800911e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009122:	e051      	b.n	80091c8 <HAL_I2C_Init+0x1dc>
 8009124:	2304      	movs	r3, #4
 8009126:	e04f      	b.n	80091c8 <HAL_I2C_Init+0x1dc>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d111      	bne.n	8009154 <HAL_I2C_Init+0x168>
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	1e58      	subs	r0, r3, #1
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6859      	ldr	r1, [r3, #4]
 8009138:	460b      	mov	r3, r1
 800913a:	005b      	lsls	r3, r3, #1
 800913c:	440b      	add	r3, r1
 800913e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009142:	3301      	adds	r3, #1
 8009144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009148:	2b00      	cmp	r3, #0
 800914a:	bf0c      	ite	eq
 800914c:	2301      	moveq	r3, #1
 800914e:	2300      	movne	r3, #0
 8009150:	b2db      	uxtb	r3, r3
 8009152:	e012      	b.n	800917a <HAL_I2C_Init+0x18e>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	1e58      	subs	r0, r3, #1
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6859      	ldr	r1, [r3, #4]
 800915c:	460b      	mov	r3, r1
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	440b      	add	r3, r1
 8009162:	0099      	lsls	r1, r3, #2
 8009164:	440b      	add	r3, r1
 8009166:	fbb0 f3f3 	udiv	r3, r0, r3
 800916a:	3301      	adds	r3, #1
 800916c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009170:	2b00      	cmp	r3, #0
 8009172:	bf0c      	ite	eq
 8009174:	2301      	moveq	r3, #1
 8009176:	2300      	movne	r3, #0
 8009178:	b2db      	uxtb	r3, r3
 800917a:	2b00      	cmp	r3, #0
 800917c:	d001      	beq.n	8009182 <HAL_I2C_Init+0x196>
 800917e:	2301      	movs	r3, #1
 8009180:	e022      	b.n	80091c8 <HAL_I2C_Init+0x1dc>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d10e      	bne.n	80091a8 <HAL_I2C_Init+0x1bc>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	1e58      	subs	r0, r3, #1
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6859      	ldr	r1, [r3, #4]
 8009192:	460b      	mov	r3, r1
 8009194:	005b      	lsls	r3, r3, #1
 8009196:	440b      	add	r3, r1
 8009198:	fbb0 f3f3 	udiv	r3, r0, r3
 800919c:	3301      	adds	r3, #1
 800919e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091a6:	e00f      	b.n	80091c8 <HAL_I2C_Init+0x1dc>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	1e58      	subs	r0, r3, #1
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6859      	ldr	r1, [r3, #4]
 80091b0:	460b      	mov	r3, r1
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	440b      	add	r3, r1
 80091b6:	0099      	lsls	r1, r3, #2
 80091b8:	440b      	add	r3, r1
 80091ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80091be:	3301      	adds	r3, #1
 80091c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80091c8:	6879      	ldr	r1, [r7, #4]
 80091ca:	6809      	ldr	r1, [r1, #0]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	69da      	ldr	r2, [r3, #28]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a1b      	ldr	r3, [r3, #32]
 80091e2:	431a      	orrs	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	430a      	orrs	r2, r1
 80091ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80091f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	6911      	ldr	r1, [r2, #16]
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	68d2      	ldr	r2, [r2, #12]
 8009202:	4311      	orrs	r1, r2
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	6812      	ldr	r2, [r2, #0]
 8009208:	430b      	orrs	r3, r1
 800920a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	695a      	ldr	r2, [r3, #20]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	699b      	ldr	r3, [r3, #24]
 800921e:	431a      	orrs	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	430a      	orrs	r2, r1
 8009226:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f042 0201 	orr.w	r2, r2, #1
 8009236:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2220      	movs	r2, #32
 8009242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	000186a0 	.word	0x000186a0
 8009264:	001e847f 	.word	0x001e847f
 8009268:	003d08ff 	.word	0x003d08ff
 800926c:	431bde83 	.word	0x431bde83
 8009270:	10624dd3 	.word	0x10624dd3

08009274 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009284:	b2db      	uxtb	r3, r3
 8009286:	2b20      	cmp	r3, #32
 8009288:	d129      	bne.n	80092de <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2224      	movs	r2, #36	@ 0x24
 800928e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f022 0201 	bic.w	r2, r2, #1
 80092a0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f022 0210 	bic.w	r2, r2, #16
 80092b0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	683a      	ldr	r2, [r7, #0]
 80092be:	430a      	orrs	r2, r1
 80092c0:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f042 0201 	orr.w	r2, r2, #1
 80092d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2220      	movs	r2, #32
 80092d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80092da:	2300      	movs	r3, #0
 80092dc:	e000      	b.n	80092e0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80092de:	2302      	movs	r3, #2
  }
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80092f6:	2300      	movs	r3, #0
 80092f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009300:	b2db      	uxtb	r3, r3
 8009302:	2b20      	cmp	r3, #32
 8009304:	d12a      	bne.n	800935c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2224      	movs	r2, #36	@ 0x24
 800930a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f022 0201 	bic.w	r2, r2, #1
 800931c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009324:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8009326:	89fb      	ldrh	r3, [r7, #14]
 8009328:	f023 030f 	bic.w	r3, r3, #15
 800932c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	b29a      	uxth	r2, r3
 8009332:	89fb      	ldrh	r3, [r7, #14]
 8009334:	4313      	orrs	r3, r2
 8009336:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	89fa      	ldrh	r2, [r7, #14]
 800933e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f042 0201 	orr.w	r2, r2, #1
 800934e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2220      	movs	r2, #32
 8009354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8009358:	2300      	movs	r3, #0
 800935a:	e000      	b.n	800935e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800935c:	2302      	movs	r3, #2
  }
}
 800935e:	4618      	mov	r0, r3
 8009360:	3714      	adds	r7, #20
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
	...

0800936c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d101      	bne.n	800937e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	e0bf      	b.n	80094fe <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8009384:	b2db      	uxtb	r3, r3
 8009386:	2b00      	cmp	r3, #0
 8009388:	d106      	bne.n	8009398 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7fc fd26 	bl	8005de4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2202      	movs	r2, #2
 800939c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	699a      	ldr	r2, [r3, #24]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80093ae:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	6999      	ldr	r1, [r3, #24]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	685a      	ldr	r2, [r3, #4]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80093c4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	430a      	orrs	r2, r1
 80093d2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	6899      	ldr	r1, [r3, #8]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	4b4a      	ldr	r3, [pc, #296]	@ (8009508 <HAL_LTDC_Init+0x19c>)
 80093e0:	400b      	ands	r3, r1
 80093e2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	695b      	ldr	r3, [r3, #20]
 80093e8:	041b      	lsls	r3, r3, #16
 80093ea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6899      	ldr	r1, [r3, #8]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	699a      	ldr	r2, [r3, #24]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	431a      	orrs	r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	430a      	orrs	r2, r1
 8009400:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68d9      	ldr	r1, [r3, #12]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	4b3e      	ldr	r3, [pc, #248]	@ (8009508 <HAL_LTDC_Init+0x19c>)
 800940e:	400b      	ands	r3, r1
 8009410:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	69db      	ldr	r3, [r3, #28]
 8009416:	041b      	lsls	r3, r3, #16
 8009418:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68d9      	ldr	r1, [r3, #12]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a1a      	ldr	r2, [r3, #32]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	431a      	orrs	r2, r3
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	430a      	orrs	r2, r1
 800942e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	6919      	ldr	r1, [r3, #16]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	4b33      	ldr	r3, [pc, #204]	@ (8009508 <HAL_LTDC_Init+0x19c>)
 800943c:	400b      	ands	r3, r1
 800943e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009444:	041b      	lsls	r3, r3, #16
 8009446:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6919      	ldr	r1, [r3, #16]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	431a      	orrs	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	430a      	orrs	r2, r1
 800945c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	6959      	ldr	r1, [r3, #20]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	4b27      	ldr	r3, [pc, #156]	@ (8009508 <HAL_LTDC_Init+0x19c>)
 800946a:	400b      	ands	r3, r1
 800946c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009472:	041b      	lsls	r3, r3, #16
 8009474:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	6959      	ldr	r1, [r3, #20]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	431a      	orrs	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	430a      	orrs	r2, r1
 800948a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009492:	021b      	lsls	r3, r3, #8
 8009494:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800949c:	041b      	lsls	r3, r3, #16
 800949e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80094ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80094c2:	431a      	orrs	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	430a      	orrs	r2, r1
 80094ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f042 0206 	orr.w	r2, r2, #6
 80094da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	699a      	ldr	r2, [r3, #24]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f042 0201 	orr.w	r2, r2, #1
 80094ea:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2201      	movs	r2, #1
 80094f8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	f000f800 	.word	0xf000f800

0800950c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800950c:	b5b0      	push	{r4, r5, r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800951e:	2b01      	cmp	r3, #1
 8009520:	d101      	bne.n	8009526 <HAL_LTDC_ConfigLayer+0x1a>
 8009522:	2302      	movs	r3, #2
 8009524:	e02c      	b.n	8009580 <HAL_LTDC_ConfigLayer+0x74>
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2201      	movs	r2, #1
 800952a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2202      	movs	r2, #2
 8009532:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2134      	movs	r1, #52	@ 0x34
 800953c:	fb01 f303 	mul.w	r3, r1, r3
 8009540:	4413      	add	r3, r2
 8009542:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	4614      	mov	r4, r2
 800954a:	461d      	mov	r5, r3
 800954c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800954e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009558:	682b      	ldr	r3, [r5, #0]
 800955a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	68b9      	ldr	r1, [r7, #8]
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	f000 f83b 	bl	80095dc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2201      	movs	r2, #1
 800956c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2201      	movs	r2, #1
 8009572:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2200      	movs	r2, #0
 800957a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bdb0      	pop	{r4, r5, r7, pc}

08009588 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8009596:	2b01      	cmp	r3, #1
 8009598:	d101      	bne.n	800959e <HAL_LTDC_EnableDither+0x16>
 800959a:	2302      	movs	r3, #2
 800959c:	e016      	b.n	80095cc <HAL_LTDC_EnableDither+0x44>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2201      	movs	r2, #1
 80095a2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2202      	movs	r2, #2
 80095aa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80095ae:	4b0a      	ldr	r3, [pc, #40]	@ (80095d8 <HAL_LTDC_EnableDither+0x50>)
 80095b0:	699b      	ldr	r3, [r3, #24]
 80095b2:	4a09      	ldr	r2, [pc, #36]	@ (80095d8 <HAL_LTDC_EnableDither+0x50>)
 80095b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095b8:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr
 80095d8:	40016800 	.word	0x40016800

080095dc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80095dc:	b480      	push	{r7}
 80095de:	b089      	sub	sp, #36	@ 0x24
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	685a      	ldr	r2, [r3, #4]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	0c1b      	lsrs	r3, r3, #16
 80095f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095f8:	4413      	add	r3, r2
 80095fa:	041b      	lsls	r3, r3, #16
 80095fc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	461a      	mov	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	01db      	lsls	r3, r3, #7
 8009608:	4413      	add	r3, r2
 800960a:	3384      	adds	r3, #132	@ 0x84
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	6812      	ldr	r2, [r2, #0]
 8009612:	4611      	mov	r1, r2
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	01d2      	lsls	r2, r2, #7
 8009618:	440a      	add	r2, r1
 800961a:	3284      	adds	r2, #132	@ 0x84
 800961c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009620:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	0c1b      	lsrs	r3, r3, #16
 800962e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009632:	4413      	add	r3, r2
 8009634:	1c5a      	adds	r2, r3, #1
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4619      	mov	r1, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	01db      	lsls	r3, r3, #7
 8009640:	440b      	add	r3, r1
 8009642:	3384      	adds	r3, #132	@ 0x84
 8009644:	4619      	mov	r1, r3
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	4313      	orrs	r3, r2
 800964a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	68da      	ldr	r2, [r3, #12]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800965a:	4413      	add	r3, r2
 800965c:	041b      	lsls	r3, r3, #16
 800965e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	461a      	mov	r2, r3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	01db      	lsls	r3, r3, #7
 800966a:	4413      	add	r3, r2
 800966c:	3384      	adds	r3, #132	@ 0x84
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	6812      	ldr	r2, [r2, #0]
 8009674:	4611      	mov	r1, r2
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	01d2      	lsls	r2, r2, #7
 800967a:	440a      	add	r2, r1
 800967c:	3284      	adds	r2, #132	@ 0x84
 800967e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009682:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	689a      	ldr	r2, [r3, #8]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009692:	4413      	add	r3, r2
 8009694:	1c5a      	adds	r2, r3, #1
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4619      	mov	r1, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	01db      	lsls	r3, r3, #7
 80096a0:	440b      	add	r3, r1
 80096a2:	3384      	adds	r3, #132	@ 0x84
 80096a4:	4619      	mov	r1, r3
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	461a      	mov	r2, r3
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	01db      	lsls	r3, r3, #7
 80096b6:	4413      	add	r3, r2
 80096b8:	3384      	adds	r3, #132	@ 0x84
 80096ba:	691b      	ldr	r3, [r3, #16]
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	6812      	ldr	r2, [r2, #0]
 80096c0:	4611      	mov	r1, r2
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	01d2      	lsls	r2, r2, #7
 80096c6:	440a      	add	r2, r1
 80096c8:	3284      	adds	r2, #132	@ 0x84
 80096ca:	f023 0307 	bic.w	r3, r3, #7
 80096ce:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	461a      	mov	r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	01db      	lsls	r3, r3, #7
 80096da:	4413      	add	r3, r2
 80096dc:	3384      	adds	r3, #132	@ 0x84
 80096de:	461a      	mov	r2, r3
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80096ec:	021b      	lsls	r3, r3, #8
 80096ee:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80096f6:	041b      	lsls	r3, r3, #16
 80096f8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	699b      	ldr	r3, [r3, #24]
 80096fe:	061b      	lsls	r3, r3, #24
 8009700:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	461a      	mov	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	01db      	lsls	r3, r3, #7
 800970c:	4413      	add	r3, r2
 800970e:	3384      	adds	r3, #132	@ 0x84
 8009710:	699b      	ldr	r3, [r3, #24]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	461a      	mov	r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	01db      	lsls	r3, r3, #7
 800971c:	4413      	add	r3, r2
 800971e:	3384      	adds	r3, #132	@ 0x84
 8009720:	461a      	mov	r2, r3
 8009722:	2300      	movs	r3, #0
 8009724:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800972c:	461a      	mov	r2, r3
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	431a      	orrs	r2, r3
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	431a      	orrs	r2, r3
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4619      	mov	r1, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	01db      	lsls	r3, r3, #7
 8009740:	440b      	add	r3, r1
 8009742:	3384      	adds	r3, #132	@ 0x84
 8009744:	4619      	mov	r1, r3
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	4313      	orrs	r3, r2
 800974a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	461a      	mov	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	01db      	lsls	r3, r3, #7
 8009756:	4413      	add	r3, r2
 8009758:	3384      	adds	r3, #132	@ 0x84
 800975a:	695b      	ldr	r3, [r3, #20]
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	6812      	ldr	r2, [r2, #0]
 8009760:	4611      	mov	r1, r2
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	01d2      	lsls	r2, r2, #7
 8009766:	440a      	add	r2, r1
 8009768:	3284      	adds	r2, #132	@ 0x84
 800976a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800976e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	461a      	mov	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	01db      	lsls	r3, r3, #7
 800977a:	4413      	add	r3, r2
 800977c:	3384      	adds	r3, #132	@ 0x84
 800977e:	461a      	mov	r2, r3
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	695b      	ldr	r3, [r3, #20]
 8009784:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	461a      	mov	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	01db      	lsls	r3, r3, #7
 8009790:	4413      	add	r3, r2
 8009792:	3384      	adds	r3, #132	@ 0x84
 8009794:	69db      	ldr	r3, [r3, #28]
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	6812      	ldr	r2, [r2, #0]
 800979a:	4611      	mov	r1, r2
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	01d2      	lsls	r2, r2, #7
 80097a0:	440a      	add	r2, r1
 80097a2:	3284      	adds	r2, #132	@ 0x84
 80097a4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80097a8:	f023 0307 	bic.w	r3, r3, #7
 80097ac:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	69da      	ldr	r2, [r3, #28]
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	6a1b      	ldr	r3, [r3, #32]
 80097b6:	68f9      	ldr	r1, [r7, #12]
 80097b8:	6809      	ldr	r1, [r1, #0]
 80097ba:	4608      	mov	r0, r1
 80097bc:	6879      	ldr	r1, [r7, #4]
 80097be:	01c9      	lsls	r1, r1, #7
 80097c0:	4401      	add	r1, r0
 80097c2:	3184      	adds	r1, #132	@ 0x84
 80097c4:	4313      	orrs	r3, r2
 80097c6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	461a      	mov	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	01db      	lsls	r3, r3, #7
 80097d2:	4413      	add	r3, r2
 80097d4:	3384      	adds	r3, #132	@ 0x84
 80097d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	461a      	mov	r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	01db      	lsls	r3, r3, #7
 80097e2:	4413      	add	r3, r2
 80097e4:	3384      	adds	r3, #132	@ 0x84
 80097e6:	461a      	mov	r2, r3
 80097e8:	2300      	movs	r3, #0
 80097ea:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	461a      	mov	r2, r3
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	01db      	lsls	r3, r3, #7
 80097f6:	4413      	add	r3, r2
 80097f8:	3384      	adds	r3, #132	@ 0x84
 80097fa:	461a      	mov	r2, r3
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009800:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	691b      	ldr	r3, [r3, #16]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d102      	bne.n	8009810 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800980a:	2304      	movs	r3, #4
 800980c:	61fb      	str	r3, [r7, #28]
 800980e:	e01b      	b.n	8009848 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	2b01      	cmp	r3, #1
 8009816:	d102      	bne.n	800981e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8009818:	2303      	movs	r3, #3
 800981a:	61fb      	str	r3, [r7, #28]
 800981c:	e014      	b.n	8009848 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	2b04      	cmp	r3, #4
 8009824:	d00b      	beq.n	800983e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800982a:	2b02      	cmp	r3, #2
 800982c:	d007      	beq.n	800983e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009832:	2b03      	cmp	r3, #3
 8009834:	d003      	beq.n	800983e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800983a:	2b07      	cmp	r3, #7
 800983c:	d102      	bne.n	8009844 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800983e:	2302      	movs	r3, #2
 8009840:	61fb      	str	r3, [r7, #28]
 8009842:	e001      	b.n	8009848 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8009844:	2301      	movs	r3, #1
 8009846:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	461a      	mov	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	01db      	lsls	r3, r3, #7
 8009852:	4413      	add	r3, r2
 8009854:	3384      	adds	r3, #132	@ 0x84
 8009856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	6812      	ldr	r2, [r2, #0]
 800985c:	4611      	mov	r1, r2
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	01d2      	lsls	r2, r2, #7
 8009862:	440a      	add	r2, r1
 8009864:	3284      	adds	r2, #132	@ 0x84
 8009866:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800986a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009870:	69fa      	ldr	r2, [r7, #28]
 8009872:	fb02 f303 	mul.w	r3, r2, r3
 8009876:	041a      	lsls	r2, r3, #16
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	6859      	ldr	r1, [r3, #4]
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	1acb      	subs	r3, r1, r3
 8009882:	69f9      	ldr	r1, [r7, #28]
 8009884:	fb01 f303 	mul.w	r3, r1, r3
 8009888:	3303      	adds	r3, #3
 800988a:	68f9      	ldr	r1, [r7, #12]
 800988c:	6809      	ldr	r1, [r1, #0]
 800988e:	4608      	mov	r0, r1
 8009890:	6879      	ldr	r1, [r7, #4]
 8009892:	01c9      	lsls	r1, r1, #7
 8009894:	4401      	add	r1, r0
 8009896:	3184      	adds	r1, #132	@ 0x84
 8009898:	4313      	orrs	r3, r2
 800989a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	461a      	mov	r2, r3
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	01db      	lsls	r3, r3, #7
 80098a6:	4413      	add	r3, r2
 80098a8:	3384      	adds	r3, #132	@ 0x84
 80098aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	6812      	ldr	r2, [r2, #0]
 80098b0:	4611      	mov	r1, r2
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	01d2      	lsls	r2, r2, #7
 80098b6:	440a      	add	r2, r1
 80098b8:	3284      	adds	r2, #132	@ 0x84
 80098ba:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80098be:	f023 0307 	bic.w	r3, r3, #7
 80098c2:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	461a      	mov	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	01db      	lsls	r3, r3, #7
 80098ce:	4413      	add	r3, r2
 80098d0:	3384      	adds	r3, #132	@ 0x84
 80098d2:	461a      	mov	r2, r3
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098d8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	461a      	mov	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	01db      	lsls	r3, r3, #7
 80098e4:	4413      	add	r3, r2
 80098e6:	3384      	adds	r3, #132	@ 0x84
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	68fa      	ldr	r2, [r7, #12]
 80098ec:	6812      	ldr	r2, [r2, #0]
 80098ee:	4611      	mov	r1, r2
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	01d2      	lsls	r2, r2, #7
 80098f4:	440a      	add	r2, r1
 80098f6:	3284      	adds	r2, #132	@ 0x84
 80098f8:	f043 0301 	orr.w	r3, r3, #1
 80098fc:	6013      	str	r3, [r2, #0]
}
 80098fe:	bf00      	nop
 8009900:	3724      	adds	r7, #36	@ 0x24
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
	...

0800990c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b086      	sub	sp, #24
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d101      	bne.n	800991e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	e25e      	b.n	8009ddc <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f003 0301 	and.w	r3, r3, #1
 8009926:	2b00      	cmp	r3, #0
 8009928:	d075      	beq.n	8009a16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800992a:	4b88      	ldr	r3, [pc, #544]	@ (8009b4c <HAL_RCC_OscConfig+0x240>)
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	f003 030c 	and.w	r3, r3, #12
 8009932:	2b04      	cmp	r3, #4
 8009934:	d00c      	beq.n	8009950 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009936:	4b85      	ldr	r3, [pc, #532]	@ (8009b4c <HAL_RCC_OscConfig+0x240>)
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800993e:	2b08      	cmp	r3, #8
 8009940:	d112      	bne.n	8009968 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009942:	4b82      	ldr	r3, [pc, #520]	@ (8009b4c <HAL_RCC_OscConfig+0x240>)
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800994a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800994e:	d10b      	bne.n	8009968 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009950:	4b7e      	ldr	r3, [pc, #504]	@ (8009b4c <HAL_RCC_OscConfig+0x240>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009958:	2b00      	cmp	r3, #0
 800995a:	d05b      	beq.n	8009a14 <HAL_RCC_OscConfig+0x108>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d157      	bne.n	8009a14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	e239      	b.n	8009ddc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009970:	d106      	bne.n	8009980 <HAL_RCC_OscConfig+0x74>
 8009972:	4b76      	ldr	r3, [pc, #472]	@ (8009b4c <HAL_RCC_OscConfig+0x240>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a75      	ldr	r2, [pc, #468]	@ (8009b4c <HAL_RCC_OscConfig+0x240>)
 8009978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800997c:	6013      	str	r3, [r2, #0]
 800997e:	e01d      	b.n	80099bc <HAL_RCC_OscConfig+0xb0>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009988:	d10c      	bne.n	80099a4 <HAL_RCC_OscConfig+0x98>
 800998a:	4b70      	ldr	r3, [pc, #448]	@ (8009b4c <HAL_RCC_OscConfig+0x240>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a6f      	ldr	r2, [pc, #444]	@ (8009b4c <HAL_RCC_OscConfig+0x240>)
 8009990:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009994:	6013      	str	r3, [r2, #0]
 8009996:	4b6d      	ldr	r3, [pc, #436]	@ (8009b4c <HAL_RCC_OscConfig+0x240>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a6c      	ldr	r2, [pc, #432]	@ (8009b4c <HAL_RCC_OscConfig+0x240>)
 800999c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80099a0:	6013      	str	r3, [r2, #0]
 80099a2:	e00b      	b.n	80099bc <HAL_RCC_OscConfig+0xb0>
 80099a4:	4b69      	ldr	r3, [pc, #420]	@ (8009b4c <HAL_RCC_OscConfig+0x240>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a68      	ldr	r2, [pc, #416]	@ (8009b4c <HAL_RCC_OscConfig+0x240>)
 80099aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80099ae:	6013      	str	r3, [r2, #0]
 80099b0:	4b66      	ldr	r3, [pc, #408]	@ (8009b4c <HAL_RCC_OscConfig+0x240>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a65      	ldr	r2, [pc, #404]	@ (8009b4c <HAL_RCC_OscConfig+0x240>)
 80099b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80099ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d013      	beq.n	80099ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099c4:	f7fd ff74 	bl	80078b0 <HAL_GetTick>
 80099c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099ca:	e008      	b.n	80099de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80099cc:	f7fd ff70 	bl	80078b0 <HAL_GetTick>
 80099d0:	4602      	mov	r2, r0
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	1ad3      	subs	r3, r2, r3
 80099d6:	2b64      	cmp	r3, #100	@ 0x64
 80099d8:	d901      	bls.n	80099de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80099da:	2303      	movs	r3, #3
 80099dc:	e1fe      	b.n	8009ddc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099de:	4b5b      	ldr	r3, [pc, #364]	@ (8009b4c <HAL_RCC_OscConfig+0x240>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d0f0      	beq.n	80099cc <HAL_RCC_OscConfig+0xc0>
 80099ea:	e014      	b.n	8009a16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099ec:	f7fd ff60 	bl	80078b0 <HAL_GetTick>
 80099f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80099f2:	e008      	b.n	8009a06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80099f4:	f7fd ff5c 	bl	80078b0 <HAL_GetTick>
 80099f8:	4602      	mov	r2, r0
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	1ad3      	subs	r3, r2, r3
 80099fe:	2b64      	cmp	r3, #100	@ 0x64
 8009a00:	d901      	bls.n	8009a06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009a02:	2303      	movs	r3, #3
 8009a04:	e1ea      	b.n	8009ddc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009a06:	4b51      	ldr	r3, [pc, #324]	@ (8009b4c <HAL_RCC_OscConfig+0x240>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d1f0      	bne.n	80099f4 <HAL_RCC_OscConfig+0xe8>
 8009a12:	e000      	b.n	8009a16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f003 0302 	and.w	r3, r3, #2
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d063      	beq.n	8009aea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009a22:	4b4a      	ldr	r3, [pc, #296]	@ (8009b4c <HAL_RCC_OscConfig+0x240>)
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	f003 030c 	and.w	r3, r3, #12
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00b      	beq.n	8009a46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009a2e:	4b47      	ldr	r3, [pc, #284]	@ (8009b4c <HAL_RCC_OscConfig+0x240>)
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009a36:	2b08      	cmp	r3, #8
 8009a38:	d11c      	bne.n	8009a74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009a3a:	4b44      	ldr	r3, [pc, #272]	@ (8009b4c <HAL_RCC_OscConfig+0x240>)
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d116      	bne.n	8009a74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009a46:	4b41      	ldr	r3, [pc, #260]	@ (8009b4c <HAL_RCC_OscConfig+0x240>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f003 0302 	and.w	r3, r3, #2
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d005      	beq.n	8009a5e <HAL_RCC_OscConfig+0x152>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d001      	beq.n	8009a5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e1be      	b.n	8009ddc <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8009b4c <HAL_RCC_OscConfig+0x240>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	00db      	lsls	r3, r3, #3
 8009a6c:	4937      	ldr	r1, [pc, #220]	@ (8009b4c <HAL_RCC_OscConfig+0x240>)
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009a72:	e03a      	b.n	8009aea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d020      	beq.n	8009abe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009a7c:	4b34      	ldr	r3, [pc, #208]	@ (8009b50 <HAL_RCC_OscConfig+0x244>)
 8009a7e:	2201      	movs	r2, #1
 8009a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a82:	f7fd ff15 	bl	80078b0 <HAL_GetTick>
 8009a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a88:	e008      	b.n	8009a9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009a8a:	f7fd ff11 	bl	80078b0 <HAL_GetTick>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	1ad3      	subs	r3, r2, r3
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	d901      	bls.n	8009a9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009a98:	2303      	movs	r3, #3
 8009a9a:	e19f      	b.n	8009ddc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8009b4c <HAL_RCC_OscConfig+0x240>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f003 0302 	and.w	r3, r3, #2
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d0f0      	beq.n	8009a8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009aa8:	4b28      	ldr	r3, [pc, #160]	@ (8009b4c <HAL_RCC_OscConfig+0x240>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	00db      	lsls	r3, r3, #3
 8009ab6:	4925      	ldr	r1, [pc, #148]	@ (8009b4c <HAL_RCC_OscConfig+0x240>)
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	600b      	str	r3, [r1, #0]
 8009abc:	e015      	b.n	8009aea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009abe:	4b24      	ldr	r3, [pc, #144]	@ (8009b50 <HAL_RCC_OscConfig+0x244>)
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ac4:	f7fd fef4 	bl	80078b0 <HAL_GetTick>
 8009ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009aca:	e008      	b.n	8009ade <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009acc:	f7fd fef0 	bl	80078b0 <HAL_GetTick>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d901      	bls.n	8009ade <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009ada:	2303      	movs	r3, #3
 8009adc:	e17e      	b.n	8009ddc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ade:	4b1b      	ldr	r3, [pc, #108]	@ (8009b4c <HAL_RCC_OscConfig+0x240>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f003 0302 	and.w	r3, r3, #2
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1f0      	bne.n	8009acc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f003 0308 	and.w	r3, r3, #8
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d036      	beq.n	8009b64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	695b      	ldr	r3, [r3, #20]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d016      	beq.n	8009b2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009afe:	4b15      	ldr	r3, [pc, #84]	@ (8009b54 <HAL_RCC_OscConfig+0x248>)
 8009b00:	2201      	movs	r2, #1
 8009b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b04:	f7fd fed4 	bl	80078b0 <HAL_GetTick>
 8009b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b0a:	e008      	b.n	8009b1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b0c:	f7fd fed0 	bl	80078b0 <HAL_GetTick>
 8009b10:	4602      	mov	r2, r0
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	1ad3      	subs	r3, r2, r3
 8009b16:	2b02      	cmp	r3, #2
 8009b18:	d901      	bls.n	8009b1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	e15e      	b.n	8009ddc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8009b4c <HAL_RCC_OscConfig+0x240>)
 8009b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b22:	f003 0302 	and.w	r3, r3, #2
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d0f0      	beq.n	8009b0c <HAL_RCC_OscConfig+0x200>
 8009b2a:	e01b      	b.n	8009b64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b2c:	4b09      	ldr	r3, [pc, #36]	@ (8009b54 <HAL_RCC_OscConfig+0x248>)
 8009b2e:	2200      	movs	r2, #0
 8009b30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b32:	f7fd febd 	bl	80078b0 <HAL_GetTick>
 8009b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009b38:	e00e      	b.n	8009b58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b3a:	f7fd feb9 	bl	80078b0 <HAL_GetTick>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	1ad3      	subs	r3, r2, r3
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	d907      	bls.n	8009b58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009b48:	2303      	movs	r3, #3
 8009b4a:	e147      	b.n	8009ddc <HAL_RCC_OscConfig+0x4d0>
 8009b4c:	40023800 	.word	0x40023800
 8009b50:	42470000 	.word	0x42470000
 8009b54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009b58:	4b88      	ldr	r3, [pc, #544]	@ (8009d7c <HAL_RCC_OscConfig+0x470>)
 8009b5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b5c:	f003 0302 	and.w	r3, r3, #2
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d1ea      	bne.n	8009b3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f003 0304 	and.w	r3, r3, #4
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f000 8097 	beq.w	8009ca0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009b72:	2300      	movs	r3, #0
 8009b74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b76:	4b81      	ldr	r3, [pc, #516]	@ (8009d7c <HAL_RCC_OscConfig+0x470>)
 8009b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d10f      	bne.n	8009ba2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b82:	2300      	movs	r3, #0
 8009b84:	60bb      	str	r3, [r7, #8]
 8009b86:	4b7d      	ldr	r3, [pc, #500]	@ (8009d7c <HAL_RCC_OscConfig+0x470>)
 8009b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b8a:	4a7c      	ldr	r2, [pc, #496]	@ (8009d7c <HAL_RCC_OscConfig+0x470>)
 8009b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8009b92:	4b7a      	ldr	r3, [pc, #488]	@ (8009d7c <HAL_RCC_OscConfig+0x470>)
 8009b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b9a:	60bb      	str	r3, [r7, #8]
 8009b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ba2:	4b77      	ldr	r3, [pc, #476]	@ (8009d80 <HAL_RCC_OscConfig+0x474>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d118      	bne.n	8009be0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009bae:	4b74      	ldr	r3, [pc, #464]	@ (8009d80 <HAL_RCC_OscConfig+0x474>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a73      	ldr	r2, [pc, #460]	@ (8009d80 <HAL_RCC_OscConfig+0x474>)
 8009bb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009bb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009bba:	f7fd fe79 	bl	80078b0 <HAL_GetTick>
 8009bbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bc0:	e008      	b.n	8009bd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bc2:	f7fd fe75 	bl	80078b0 <HAL_GetTick>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	1ad3      	subs	r3, r2, r3
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	d901      	bls.n	8009bd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	e103      	b.n	8009ddc <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bd4:	4b6a      	ldr	r3, [pc, #424]	@ (8009d80 <HAL_RCC_OscConfig+0x474>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d0f0      	beq.n	8009bc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d106      	bne.n	8009bf6 <HAL_RCC_OscConfig+0x2ea>
 8009be8:	4b64      	ldr	r3, [pc, #400]	@ (8009d7c <HAL_RCC_OscConfig+0x470>)
 8009bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bec:	4a63      	ldr	r2, [pc, #396]	@ (8009d7c <HAL_RCC_OscConfig+0x470>)
 8009bee:	f043 0301 	orr.w	r3, r3, #1
 8009bf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8009bf4:	e01c      	b.n	8009c30 <HAL_RCC_OscConfig+0x324>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	2b05      	cmp	r3, #5
 8009bfc:	d10c      	bne.n	8009c18 <HAL_RCC_OscConfig+0x30c>
 8009bfe:	4b5f      	ldr	r3, [pc, #380]	@ (8009d7c <HAL_RCC_OscConfig+0x470>)
 8009c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c02:	4a5e      	ldr	r2, [pc, #376]	@ (8009d7c <HAL_RCC_OscConfig+0x470>)
 8009c04:	f043 0304 	orr.w	r3, r3, #4
 8009c08:	6713      	str	r3, [r2, #112]	@ 0x70
 8009c0a:	4b5c      	ldr	r3, [pc, #368]	@ (8009d7c <HAL_RCC_OscConfig+0x470>)
 8009c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c0e:	4a5b      	ldr	r2, [pc, #364]	@ (8009d7c <HAL_RCC_OscConfig+0x470>)
 8009c10:	f043 0301 	orr.w	r3, r3, #1
 8009c14:	6713      	str	r3, [r2, #112]	@ 0x70
 8009c16:	e00b      	b.n	8009c30 <HAL_RCC_OscConfig+0x324>
 8009c18:	4b58      	ldr	r3, [pc, #352]	@ (8009d7c <HAL_RCC_OscConfig+0x470>)
 8009c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c1c:	4a57      	ldr	r2, [pc, #348]	@ (8009d7c <HAL_RCC_OscConfig+0x470>)
 8009c1e:	f023 0301 	bic.w	r3, r3, #1
 8009c22:	6713      	str	r3, [r2, #112]	@ 0x70
 8009c24:	4b55      	ldr	r3, [pc, #340]	@ (8009d7c <HAL_RCC_OscConfig+0x470>)
 8009c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c28:	4a54      	ldr	r2, [pc, #336]	@ (8009d7c <HAL_RCC_OscConfig+0x470>)
 8009c2a:	f023 0304 	bic.w	r3, r3, #4
 8009c2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d015      	beq.n	8009c64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c38:	f7fd fe3a 	bl	80078b0 <HAL_GetTick>
 8009c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c3e:	e00a      	b.n	8009c56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c40:	f7fd fe36 	bl	80078b0 <HAL_GetTick>
 8009c44:	4602      	mov	r2, r0
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	1ad3      	subs	r3, r2, r3
 8009c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d901      	bls.n	8009c56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009c52:	2303      	movs	r3, #3
 8009c54:	e0c2      	b.n	8009ddc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c56:	4b49      	ldr	r3, [pc, #292]	@ (8009d7c <HAL_RCC_OscConfig+0x470>)
 8009c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c5a:	f003 0302 	and.w	r3, r3, #2
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d0ee      	beq.n	8009c40 <HAL_RCC_OscConfig+0x334>
 8009c62:	e014      	b.n	8009c8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c64:	f7fd fe24 	bl	80078b0 <HAL_GetTick>
 8009c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c6a:	e00a      	b.n	8009c82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c6c:	f7fd fe20 	bl	80078b0 <HAL_GetTick>
 8009c70:	4602      	mov	r2, r0
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	1ad3      	subs	r3, r2, r3
 8009c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d901      	bls.n	8009c82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009c7e:	2303      	movs	r3, #3
 8009c80:	e0ac      	b.n	8009ddc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c82:	4b3e      	ldr	r3, [pc, #248]	@ (8009d7c <HAL_RCC_OscConfig+0x470>)
 8009c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c86:	f003 0302 	and.w	r3, r3, #2
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d1ee      	bne.n	8009c6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009c8e:	7dfb      	ldrb	r3, [r7, #23]
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d105      	bne.n	8009ca0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c94:	4b39      	ldr	r3, [pc, #228]	@ (8009d7c <HAL_RCC_OscConfig+0x470>)
 8009c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c98:	4a38      	ldr	r2, [pc, #224]	@ (8009d7c <HAL_RCC_OscConfig+0x470>)
 8009c9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	699b      	ldr	r3, [r3, #24]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f000 8098 	beq.w	8009dda <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009caa:	4b34      	ldr	r3, [pc, #208]	@ (8009d7c <HAL_RCC_OscConfig+0x470>)
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	f003 030c 	and.w	r3, r3, #12
 8009cb2:	2b08      	cmp	r3, #8
 8009cb4:	d05c      	beq.n	8009d70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	699b      	ldr	r3, [r3, #24]
 8009cba:	2b02      	cmp	r3, #2
 8009cbc:	d141      	bne.n	8009d42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009cbe:	4b31      	ldr	r3, [pc, #196]	@ (8009d84 <HAL_RCC_OscConfig+0x478>)
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cc4:	f7fd fdf4 	bl	80078b0 <HAL_GetTick>
 8009cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cca:	e008      	b.n	8009cde <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ccc:	f7fd fdf0 	bl	80078b0 <HAL_GetTick>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	1ad3      	subs	r3, r2, r3
 8009cd6:	2b02      	cmp	r3, #2
 8009cd8:	d901      	bls.n	8009cde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009cda:	2303      	movs	r3, #3
 8009cdc:	e07e      	b.n	8009ddc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cde:	4b27      	ldr	r3, [pc, #156]	@ (8009d7c <HAL_RCC_OscConfig+0x470>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d1f0      	bne.n	8009ccc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	69da      	ldr	r2, [r3, #28]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6a1b      	ldr	r3, [r3, #32]
 8009cf2:	431a      	orrs	r2, r3
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cf8:	019b      	lsls	r3, r3, #6
 8009cfa:	431a      	orrs	r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d00:	085b      	lsrs	r3, r3, #1
 8009d02:	3b01      	subs	r3, #1
 8009d04:	041b      	lsls	r3, r3, #16
 8009d06:	431a      	orrs	r2, r3
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d0c:	061b      	lsls	r3, r3, #24
 8009d0e:	491b      	ldr	r1, [pc, #108]	@ (8009d7c <HAL_RCC_OscConfig+0x470>)
 8009d10:	4313      	orrs	r3, r2
 8009d12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009d14:	4b1b      	ldr	r3, [pc, #108]	@ (8009d84 <HAL_RCC_OscConfig+0x478>)
 8009d16:	2201      	movs	r2, #1
 8009d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d1a:	f7fd fdc9 	bl	80078b0 <HAL_GetTick>
 8009d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d20:	e008      	b.n	8009d34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d22:	f7fd fdc5 	bl	80078b0 <HAL_GetTick>
 8009d26:	4602      	mov	r2, r0
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	1ad3      	subs	r3, r2, r3
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d901      	bls.n	8009d34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009d30:	2303      	movs	r3, #3
 8009d32:	e053      	b.n	8009ddc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d34:	4b11      	ldr	r3, [pc, #68]	@ (8009d7c <HAL_RCC_OscConfig+0x470>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d0f0      	beq.n	8009d22 <HAL_RCC_OscConfig+0x416>
 8009d40:	e04b      	b.n	8009dda <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d42:	4b10      	ldr	r3, [pc, #64]	@ (8009d84 <HAL_RCC_OscConfig+0x478>)
 8009d44:	2200      	movs	r2, #0
 8009d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d48:	f7fd fdb2 	bl	80078b0 <HAL_GetTick>
 8009d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d4e:	e008      	b.n	8009d62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d50:	f7fd fdae 	bl	80078b0 <HAL_GetTick>
 8009d54:	4602      	mov	r2, r0
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	1ad3      	subs	r3, r2, r3
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d901      	bls.n	8009d62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009d5e:	2303      	movs	r3, #3
 8009d60:	e03c      	b.n	8009ddc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d62:	4b06      	ldr	r3, [pc, #24]	@ (8009d7c <HAL_RCC_OscConfig+0x470>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d1f0      	bne.n	8009d50 <HAL_RCC_OscConfig+0x444>
 8009d6e:	e034      	b.n	8009dda <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	699b      	ldr	r3, [r3, #24]
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d107      	bne.n	8009d88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	e02f      	b.n	8009ddc <HAL_RCC_OscConfig+0x4d0>
 8009d7c:	40023800 	.word	0x40023800
 8009d80:	40007000 	.word	0x40007000
 8009d84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009d88:	4b16      	ldr	r3, [pc, #88]	@ (8009de4 <HAL_RCC_OscConfig+0x4d8>)
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	69db      	ldr	r3, [r3, #28]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d11c      	bne.n	8009dd6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d115      	bne.n	8009dd6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009db0:	4013      	ands	r3, r2
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d10d      	bne.n	8009dd6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d106      	bne.n	8009dd6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d001      	beq.n	8009dda <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e000      	b.n	8009ddc <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3718      	adds	r7, #24
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	40023800 	.word	0x40023800

08009de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d101      	bne.n	8009dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	e0cc      	b.n	8009f96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009dfc:	4b68      	ldr	r3, [pc, #416]	@ (8009fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f003 030f 	and.w	r3, r3, #15
 8009e04:	683a      	ldr	r2, [r7, #0]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d90c      	bls.n	8009e24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e0a:	4b65      	ldr	r3, [pc, #404]	@ (8009fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8009e0c:	683a      	ldr	r2, [r7, #0]
 8009e0e:	b2d2      	uxtb	r2, r2
 8009e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e12:	4b63      	ldr	r3, [pc, #396]	@ (8009fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f003 030f 	and.w	r3, r3, #15
 8009e1a:	683a      	ldr	r2, [r7, #0]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d001      	beq.n	8009e24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	e0b8      	b.n	8009f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f003 0302 	and.w	r3, r3, #2
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d020      	beq.n	8009e72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f003 0304 	and.w	r3, r3, #4
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d005      	beq.n	8009e48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009e3c:	4b59      	ldr	r3, [pc, #356]	@ (8009fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	4a58      	ldr	r2, [pc, #352]	@ (8009fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009e46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f003 0308 	and.w	r3, r3, #8
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d005      	beq.n	8009e60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009e54:	4b53      	ldr	r3, [pc, #332]	@ (8009fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	4a52      	ldr	r2, [pc, #328]	@ (8009fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009e5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e60:	4b50      	ldr	r3, [pc, #320]	@ (8009fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	494d      	ldr	r1, [pc, #308]	@ (8009fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f003 0301 	and.w	r3, r3, #1
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d044      	beq.n	8009f08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d107      	bne.n	8009e96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e86:	4b47      	ldr	r3, [pc, #284]	@ (8009fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d119      	bne.n	8009ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	e07f      	b.n	8009f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	2b02      	cmp	r3, #2
 8009e9c:	d003      	beq.n	8009ea6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009ea2:	2b03      	cmp	r3, #3
 8009ea4:	d107      	bne.n	8009eb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ea6:	4b3f      	ldr	r3, [pc, #252]	@ (8009fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d109      	bne.n	8009ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e06f      	b.n	8009f96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009eb6:	4b3b      	ldr	r3, [pc, #236]	@ (8009fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f003 0302 	and.w	r3, r3, #2
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d101      	bne.n	8009ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e067      	b.n	8009f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009ec6:	4b37      	ldr	r3, [pc, #220]	@ (8009fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	f023 0203 	bic.w	r2, r3, #3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	4934      	ldr	r1, [pc, #208]	@ (8009fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009ed8:	f7fd fcea 	bl	80078b0 <HAL_GetTick>
 8009edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ede:	e00a      	b.n	8009ef6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ee0:	f7fd fce6 	bl	80078b0 <HAL_GetTick>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	1ad3      	subs	r3, r2, r3
 8009eea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d901      	bls.n	8009ef6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009ef2:	2303      	movs	r3, #3
 8009ef4:	e04f      	b.n	8009f96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ef6:	4b2b      	ldr	r3, [pc, #172]	@ (8009fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	f003 020c 	and.w	r2, r3, #12
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d1eb      	bne.n	8009ee0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009f08:	4b25      	ldr	r3, [pc, #148]	@ (8009fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f003 030f 	and.w	r3, r3, #15
 8009f10:	683a      	ldr	r2, [r7, #0]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d20c      	bcs.n	8009f30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f16:	4b22      	ldr	r3, [pc, #136]	@ (8009fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8009f18:	683a      	ldr	r2, [r7, #0]
 8009f1a:	b2d2      	uxtb	r2, r2
 8009f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f1e:	4b20      	ldr	r3, [pc, #128]	@ (8009fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f003 030f 	and.w	r3, r3, #15
 8009f26:	683a      	ldr	r2, [r7, #0]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d001      	beq.n	8009f30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e032      	b.n	8009f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f003 0304 	and.w	r3, r3, #4
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d008      	beq.n	8009f4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009f3c:	4b19      	ldr	r3, [pc, #100]	@ (8009fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	4916      	ldr	r1, [pc, #88]	@ (8009fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f003 0308 	and.w	r3, r3, #8
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d009      	beq.n	8009f6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009f5a:	4b12      	ldr	r3, [pc, #72]	@ (8009fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f5c:	689b      	ldr	r3, [r3, #8]
 8009f5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	691b      	ldr	r3, [r3, #16]
 8009f66:	00db      	lsls	r3, r3, #3
 8009f68:	490e      	ldr	r1, [pc, #56]	@ (8009fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009f6e:	f000 f821 	bl	8009fb4 <HAL_RCC_GetSysClockFreq>
 8009f72:	4602      	mov	r2, r0
 8009f74:	4b0b      	ldr	r3, [pc, #44]	@ (8009fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	091b      	lsrs	r3, r3, #4
 8009f7a:	f003 030f 	and.w	r3, r3, #15
 8009f7e:	490a      	ldr	r1, [pc, #40]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8009f80:	5ccb      	ldrb	r3, [r1, r3]
 8009f82:	fa22 f303 	lsr.w	r3, r2, r3
 8009f86:	4a09      	ldr	r2, [pc, #36]	@ (8009fac <HAL_RCC_ClockConfig+0x1c4>)
 8009f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009f8a:	4b09      	ldr	r3, [pc, #36]	@ (8009fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7fd fc4a 	bl	8007828 <HAL_InitTick>

  return HAL_OK;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3710      	adds	r7, #16
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	40023c00 	.word	0x40023c00
 8009fa4:	40023800 	.word	0x40023800
 8009fa8:	0800bc44 	.word	0x0800bc44
 8009fac:	20000158 	.word	0x20000158
 8009fb0:	200001ac 	.word	0x200001ac

08009fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009fb8:	b094      	sub	sp, #80	@ 0x50
 8009fba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009fcc:	4b79      	ldr	r3, [pc, #484]	@ (800a1b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	f003 030c 	and.w	r3, r3, #12
 8009fd4:	2b08      	cmp	r3, #8
 8009fd6:	d00d      	beq.n	8009ff4 <HAL_RCC_GetSysClockFreq+0x40>
 8009fd8:	2b08      	cmp	r3, #8
 8009fda:	f200 80e1 	bhi.w	800a1a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d002      	beq.n	8009fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8009fe2:	2b04      	cmp	r3, #4
 8009fe4:	d003      	beq.n	8009fee <HAL_RCC_GetSysClockFreq+0x3a>
 8009fe6:	e0db      	b.n	800a1a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009fe8:	4b73      	ldr	r3, [pc, #460]	@ (800a1b8 <HAL_RCC_GetSysClockFreq+0x204>)
 8009fea:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8009fec:	e0db      	b.n	800a1a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009fee:	4b73      	ldr	r3, [pc, #460]	@ (800a1bc <HAL_RCC_GetSysClockFreq+0x208>)
 8009ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009ff2:	e0d8      	b.n	800a1a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009ff4:	4b6f      	ldr	r3, [pc, #444]	@ (800a1b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ffc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009ffe:	4b6d      	ldr	r3, [pc, #436]	@ (800a1b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a006:	2b00      	cmp	r3, #0
 800a008:	d063      	beq.n	800a0d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a00a:	4b6a      	ldr	r3, [pc, #424]	@ (800a1b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	099b      	lsrs	r3, r3, #6
 800a010:	2200      	movs	r2, #0
 800a012:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a014:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a01c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a01e:	2300      	movs	r3, #0
 800a020:	637b      	str	r3, [r7, #52]	@ 0x34
 800a022:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800a026:	4622      	mov	r2, r4
 800a028:	462b      	mov	r3, r5
 800a02a:	f04f 0000 	mov.w	r0, #0
 800a02e:	f04f 0100 	mov.w	r1, #0
 800a032:	0159      	lsls	r1, r3, #5
 800a034:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a038:	0150      	lsls	r0, r2, #5
 800a03a:	4602      	mov	r2, r0
 800a03c:	460b      	mov	r3, r1
 800a03e:	4621      	mov	r1, r4
 800a040:	1a51      	subs	r1, r2, r1
 800a042:	6139      	str	r1, [r7, #16]
 800a044:	4629      	mov	r1, r5
 800a046:	eb63 0301 	sbc.w	r3, r3, r1
 800a04a:	617b      	str	r3, [r7, #20]
 800a04c:	f04f 0200 	mov.w	r2, #0
 800a050:	f04f 0300 	mov.w	r3, #0
 800a054:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a058:	4659      	mov	r1, fp
 800a05a:	018b      	lsls	r3, r1, #6
 800a05c:	4651      	mov	r1, sl
 800a05e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a062:	4651      	mov	r1, sl
 800a064:	018a      	lsls	r2, r1, #6
 800a066:	4651      	mov	r1, sl
 800a068:	ebb2 0801 	subs.w	r8, r2, r1
 800a06c:	4659      	mov	r1, fp
 800a06e:	eb63 0901 	sbc.w	r9, r3, r1
 800a072:	f04f 0200 	mov.w	r2, #0
 800a076:	f04f 0300 	mov.w	r3, #0
 800a07a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a07e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a082:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a086:	4690      	mov	r8, r2
 800a088:	4699      	mov	r9, r3
 800a08a:	4623      	mov	r3, r4
 800a08c:	eb18 0303 	adds.w	r3, r8, r3
 800a090:	60bb      	str	r3, [r7, #8]
 800a092:	462b      	mov	r3, r5
 800a094:	eb49 0303 	adc.w	r3, r9, r3
 800a098:	60fb      	str	r3, [r7, #12]
 800a09a:	f04f 0200 	mov.w	r2, #0
 800a09e:	f04f 0300 	mov.w	r3, #0
 800a0a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a0a6:	4629      	mov	r1, r5
 800a0a8:	024b      	lsls	r3, r1, #9
 800a0aa:	4621      	mov	r1, r4
 800a0ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a0b0:	4621      	mov	r1, r4
 800a0b2:	024a      	lsls	r2, r1, #9
 800a0b4:	4610      	mov	r0, r2
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a0be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a0c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a0c4:	f7f6 f892 	bl	80001ec <__aeabi_uldivmod>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	4613      	mov	r3, r2
 800a0ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0d0:	e058      	b.n	800a184 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a0d2:	4b38      	ldr	r3, [pc, #224]	@ (800a1b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	099b      	lsrs	r3, r3, #6
 800a0d8:	2200      	movs	r2, #0
 800a0da:	4618      	mov	r0, r3
 800a0dc:	4611      	mov	r1, r2
 800a0de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a0e2:	623b      	str	r3, [r7, #32]
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a0ec:	4642      	mov	r2, r8
 800a0ee:	464b      	mov	r3, r9
 800a0f0:	f04f 0000 	mov.w	r0, #0
 800a0f4:	f04f 0100 	mov.w	r1, #0
 800a0f8:	0159      	lsls	r1, r3, #5
 800a0fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a0fe:	0150      	lsls	r0, r2, #5
 800a100:	4602      	mov	r2, r0
 800a102:	460b      	mov	r3, r1
 800a104:	4641      	mov	r1, r8
 800a106:	ebb2 0a01 	subs.w	sl, r2, r1
 800a10a:	4649      	mov	r1, r9
 800a10c:	eb63 0b01 	sbc.w	fp, r3, r1
 800a110:	f04f 0200 	mov.w	r2, #0
 800a114:	f04f 0300 	mov.w	r3, #0
 800a118:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a11c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a120:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a124:	ebb2 040a 	subs.w	r4, r2, sl
 800a128:	eb63 050b 	sbc.w	r5, r3, fp
 800a12c:	f04f 0200 	mov.w	r2, #0
 800a130:	f04f 0300 	mov.w	r3, #0
 800a134:	00eb      	lsls	r3, r5, #3
 800a136:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a13a:	00e2      	lsls	r2, r4, #3
 800a13c:	4614      	mov	r4, r2
 800a13e:	461d      	mov	r5, r3
 800a140:	4643      	mov	r3, r8
 800a142:	18e3      	adds	r3, r4, r3
 800a144:	603b      	str	r3, [r7, #0]
 800a146:	464b      	mov	r3, r9
 800a148:	eb45 0303 	adc.w	r3, r5, r3
 800a14c:	607b      	str	r3, [r7, #4]
 800a14e:	f04f 0200 	mov.w	r2, #0
 800a152:	f04f 0300 	mov.w	r3, #0
 800a156:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a15a:	4629      	mov	r1, r5
 800a15c:	028b      	lsls	r3, r1, #10
 800a15e:	4621      	mov	r1, r4
 800a160:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a164:	4621      	mov	r1, r4
 800a166:	028a      	lsls	r2, r1, #10
 800a168:	4610      	mov	r0, r2
 800a16a:	4619      	mov	r1, r3
 800a16c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a16e:	2200      	movs	r2, #0
 800a170:	61bb      	str	r3, [r7, #24]
 800a172:	61fa      	str	r2, [r7, #28]
 800a174:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a178:	f7f6 f838 	bl	80001ec <__aeabi_uldivmod>
 800a17c:	4602      	mov	r2, r0
 800a17e:	460b      	mov	r3, r1
 800a180:	4613      	mov	r3, r2
 800a182:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a184:	4b0b      	ldr	r3, [pc, #44]	@ (800a1b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	0c1b      	lsrs	r3, r3, #16
 800a18a:	f003 0303 	and.w	r3, r3, #3
 800a18e:	3301      	adds	r3, #1
 800a190:	005b      	lsls	r3, r3, #1
 800a192:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800a194:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a198:	fbb2 f3f3 	udiv	r3, r2, r3
 800a19c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a19e:	e002      	b.n	800a1a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a1a0:	4b05      	ldr	r3, [pc, #20]	@ (800a1b8 <HAL_RCC_GetSysClockFreq+0x204>)
 800a1a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a1a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a1a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3750      	adds	r7, #80	@ 0x50
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1b2:	bf00      	nop
 800a1b4:	40023800 	.word	0x40023800
 800a1b8:	00f42400 	.word	0x00f42400
 800a1bc:	007a1200 	.word	0x007a1200

0800a1c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a1c4:	4b03      	ldr	r3, [pc, #12]	@ (800a1d4 <HAL_RCC_GetHCLKFreq+0x14>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop
 800a1d4:	20000158 	.word	0x20000158

0800a1d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a1dc:	f7ff fff0 	bl	800a1c0 <HAL_RCC_GetHCLKFreq>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	4b05      	ldr	r3, [pc, #20]	@ (800a1f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	0a9b      	lsrs	r3, r3, #10
 800a1e8:	f003 0307 	and.w	r3, r3, #7
 800a1ec:	4903      	ldr	r1, [pc, #12]	@ (800a1fc <HAL_RCC_GetPCLK1Freq+0x24>)
 800a1ee:	5ccb      	ldrb	r3, [r1, r3]
 800a1f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	40023800 	.word	0x40023800
 800a1fc:	0800bc54 	.word	0x0800bc54

0800a200 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b086      	sub	sp, #24
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a208:	2300      	movs	r3, #0
 800a20a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a20c:	2300      	movs	r3, #0
 800a20e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f003 0301 	and.w	r3, r3, #1
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d10b      	bne.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a224:	2b00      	cmp	r3, #0
 800a226:	d105      	bne.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a230:	2b00      	cmp	r3, #0
 800a232:	d075      	beq.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a234:	4b91      	ldr	r3, [pc, #580]	@ (800a47c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800a236:	2200      	movs	r2, #0
 800a238:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a23a:	f7fd fb39 	bl	80078b0 <HAL_GetTick>
 800a23e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a240:	e008      	b.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a242:	f7fd fb35 	bl	80078b0 <HAL_GetTick>
 800a246:	4602      	mov	r2, r0
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	1ad3      	subs	r3, r2, r3
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	d901      	bls.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a250:	2303      	movs	r3, #3
 800a252:	e189      	b.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a254:	4b8a      	ldr	r3, [pc, #552]	@ (800a480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d1f0      	bne.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f003 0301 	and.w	r3, r3, #1
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d009      	beq.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	019a      	lsls	r2, r3, #6
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	071b      	lsls	r3, r3, #28
 800a278:	4981      	ldr	r1, [pc, #516]	@ (800a480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a27a:	4313      	orrs	r3, r2
 800a27c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f003 0302 	and.w	r3, r3, #2
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d01f      	beq.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a28c:	4b7c      	ldr	r3, [pc, #496]	@ (800a480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a28e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a292:	0f1b      	lsrs	r3, r3, #28
 800a294:	f003 0307 	and.w	r3, r3, #7
 800a298:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	019a      	lsls	r2, r3, #6
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	061b      	lsls	r3, r3, #24
 800a2a6:	431a      	orrs	r2, r3
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	071b      	lsls	r3, r3, #28
 800a2ac:	4974      	ldr	r1, [pc, #464]	@ (800a480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a2b4:	4b72      	ldr	r3, [pc, #456]	@ (800a480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a2b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a2ba:	f023 021f 	bic.w	r2, r3, #31
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	69db      	ldr	r3, [r3, #28]
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	496e      	ldr	r1, [pc, #440]	@ (800a480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00d      	beq.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	019a      	lsls	r2, r3, #6
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	061b      	lsls	r3, r3, #24
 800a2e4:	431a      	orrs	r2, r3
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	689b      	ldr	r3, [r3, #8]
 800a2ea:	071b      	lsls	r3, r3, #28
 800a2ec:	4964      	ldr	r1, [pc, #400]	@ (800a480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a2f4:	4b61      	ldr	r3, [pc, #388]	@ (800a47c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a2fa:	f7fd fad9 	bl	80078b0 <HAL_GetTick>
 800a2fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a300:	e008      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a302:	f7fd fad5 	bl	80078b0 <HAL_GetTick>
 800a306:	4602      	mov	r2, r0
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	1ad3      	subs	r3, r2, r3
 800a30c:	2b02      	cmp	r3, #2
 800a30e:	d901      	bls.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a310:	2303      	movs	r3, #3
 800a312:	e129      	b.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a314:	4b5a      	ldr	r3, [pc, #360]	@ (800a480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d0f0      	beq.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f003 0304 	and.w	r3, r3, #4
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d105      	bne.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a334:	2b00      	cmp	r3, #0
 800a336:	d079      	beq.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a338:	4b52      	ldr	r3, [pc, #328]	@ (800a484 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800a33a:	2200      	movs	r2, #0
 800a33c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a33e:	f7fd fab7 	bl	80078b0 <HAL_GetTick>
 800a342:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a344:	e008      	b.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a346:	f7fd fab3 	bl	80078b0 <HAL_GetTick>
 800a34a:	4602      	mov	r2, r0
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	1ad3      	subs	r3, r2, r3
 800a350:	2b02      	cmp	r3, #2
 800a352:	d901      	bls.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a354:	2303      	movs	r3, #3
 800a356:	e107      	b.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a358:	4b49      	ldr	r3, [pc, #292]	@ (800a480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a360:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a364:	d0ef      	beq.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f003 0304 	and.w	r3, r3, #4
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d020      	beq.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a372:	4b43      	ldr	r3, [pc, #268]	@ (800a480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a378:	0f1b      	lsrs	r3, r3, #28
 800a37a:	f003 0307 	and.w	r3, r3, #7
 800a37e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	691b      	ldr	r3, [r3, #16]
 800a384:	019a      	lsls	r2, r3, #6
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	695b      	ldr	r3, [r3, #20]
 800a38a:	061b      	lsls	r3, r3, #24
 800a38c:	431a      	orrs	r2, r3
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	071b      	lsls	r3, r3, #28
 800a392:	493b      	ldr	r1, [pc, #236]	@ (800a480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a394:	4313      	orrs	r3, r2
 800a396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a39a:	4b39      	ldr	r3, [pc, #228]	@ (800a480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a39c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a3a0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6a1b      	ldr	r3, [r3, #32]
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	021b      	lsls	r3, r3, #8
 800a3ac:	4934      	ldr	r1, [pc, #208]	@ (800a480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f003 0308 	and.w	r3, r3, #8
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d01e      	beq.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a3c0:	4b2f      	ldr	r3, [pc, #188]	@ (800a480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a3c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3c6:	0e1b      	lsrs	r3, r3, #24
 800a3c8:	f003 030f 	and.w	r3, r3, #15
 800a3cc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	691b      	ldr	r3, [r3, #16]
 800a3d2:	019a      	lsls	r2, r3, #6
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	061b      	lsls	r3, r3, #24
 800a3d8:	431a      	orrs	r2, r3
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	699b      	ldr	r3, [r3, #24]
 800a3de:	071b      	lsls	r3, r3, #28
 800a3e0:	4927      	ldr	r1, [pc, #156]	@ (800a480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a3e8:	4b25      	ldr	r3, [pc, #148]	@ (800a480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a3ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a3ee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3f6:	4922      	ldr	r1, [pc, #136]	@ (800a480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a3fe:	4b21      	ldr	r3, [pc, #132]	@ (800a484 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800a400:	2201      	movs	r2, #1
 800a402:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a404:	f7fd fa54 	bl	80078b0 <HAL_GetTick>
 800a408:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a40a:	e008      	b.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a40c:	f7fd fa50 	bl	80078b0 <HAL_GetTick>
 800a410:	4602      	mov	r2, r0
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	1ad3      	subs	r3, r2, r3
 800a416:	2b02      	cmp	r3, #2
 800a418:	d901      	bls.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a41a:	2303      	movs	r3, #3
 800a41c:	e0a4      	b.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a41e:	4b18      	ldr	r3, [pc, #96]	@ (800a480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a426:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a42a:	d1ef      	bne.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f003 0320 	and.w	r3, r3, #32
 800a434:	2b00      	cmp	r3, #0
 800a436:	f000 808b 	beq.w	800a550 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a43a:	2300      	movs	r3, #0
 800a43c:	60fb      	str	r3, [r7, #12]
 800a43e:	4b10      	ldr	r3, [pc, #64]	@ (800a480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a442:	4a0f      	ldr	r2, [pc, #60]	@ (800a480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a448:	6413      	str	r3, [r2, #64]	@ 0x40
 800a44a:	4b0d      	ldr	r3, [pc, #52]	@ (800a480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a44c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a44e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a452:	60fb      	str	r3, [r7, #12]
 800a454:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a456:	4b0c      	ldr	r3, [pc, #48]	@ (800a488 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a0b      	ldr	r2, [pc, #44]	@ (800a488 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800a45c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a460:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a462:	f7fd fa25 	bl	80078b0 <HAL_GetTick>
 800a466:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a468:	e010      	b.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a46a:	f7fd fa21 	bl	80078b0 <HAL_GetTick>
 800a46e:	4602      	mov	r2, r0
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	1ad3      	subs	r3, r2, r3
 800a474:	2b02      	cmp	r3, #2
 800a476:	d909      	bls.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800a478:	2303      	movs	r3, #3
 800a47a:	e075      	b.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800a47c:	42470068 	.word	0x42470068
 800a480:	40023800 	.word	0x40023800
 800a484:	42470070 	.word	0x42470070
 800a488:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a48c:	4b38      	ldr	r3, [pc, #224]	@ (800a570 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a494:	2b00      	cmp	r3, #0
 800a496:	d0e8      	beq.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a498:	4b36      	ldr	r3, [pc, #216]	@ (800a574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a49a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a49c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4a0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d02f      	beq.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x308>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4b0:	693a      	ldr	r2, [r7, #16]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d028      	beq.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a4b6:	4b2f      	ldr	r3, [pc, #188]	@ (800a574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a4b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a4c0:	4b2d      	ldr	r3, [pc, #180]	@ (800a578 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a4c6:	4b2c      	ldr	r3, [pc, #176]	@ (800a578 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a4cc:	4a29      	ldr	r2, [pc, #164]	@ (800a574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a4d2:	4b28      	ldr	r3, [pc, #160]	@ (800a574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a4d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4d6:	f003 0301 	and.w	r3, r3, #1
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d114      	bne.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a4de:	f7fd f9e7 	bl	80078b0 <HAL_GetTick>
 800a4e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4e4:	e00a      	b.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a4e6:	f7fd f9e3 	bl	80078b0 <HAL_GetTick>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	1ad3      	subs	r3, r2, r3
 800a4f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d901      	bls.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800a4f8:	2303      	movs	r3, #3
 800a4fa:	e035      	b.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4fc:	4b1d      	ldr	r3, [pc, #116]	@ (800a574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a4fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a500:	f003 0302 	and.w	r3, r3, #2
 800a504:	2b00      	cmp	r3, #0
 800a506:	d0ee      	beq.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a50c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a510:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a514:	d10d      	bne.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800a516:	4b17      	ldr	r3, [pc, #92]	@ (800a574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a522:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a526:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a52a:	4912      	ldr	r1, [pc, #72]	@ (800a574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a52c:	4313      	orrs	r3, r2
 800a52e:	608b      	str	r3, [r1, #8]
 800a530:	e005      	b.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800a532:	4b10      	ldr	r3, [pc, #64]	@ (800a574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	4a0f      	ldr	r2, [pc, #60]	@ (800a574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a538:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800a53c:	6093      	str	r3, [r2, #8]
 800a53e:	4b0d      	ldr	r3, [pc, #52]	@ (800a574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a540:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a54a:	490a      	ldr	r1, [pc, #40]	@ (800a574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a54c:	4313      	orrs	r3, r2
 800a54e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f003 0310 	and.w	r3, r3, #16
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d004      	beq.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800a562:	4b06      	ldr	r3, [pc, #24]	@ (800a57c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800a564:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3718      	adds	r7, #24
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	40007000 	.word	0x40007000
 800a574:	40023800 	.word	0x40023800
 800a578:	42470e40 	.word	0x42470e40
 800a57c:	424711e0 	.word	0x424711e0

0800a580 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d101      	bne.n	800a592 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	e01c      	b.n	800a5cc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	795b      	ldrb	r3, [r3, #5]
 800a596:	b2db      	uxtb	r3, r3
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d105      	bne.n	800a5a8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f7fb fd2c 	bl	8006000 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2202      	movs	r2, #2
 800a5ac:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f042 0204 	orr.w	r2, r2, #4
 800a5bc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3708      	adds	r7, #8
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	791b      	ldrb	r3, [r3, #4]
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d101      	bne.n	800a5ee <HAL_RNG_GenerateRandomNumber+0x1a>
 800a5ea:	2302      	movs	r3, #2
 800a5ec:	e03d      	b.n	800a66a <HAL_RNG_GenerateRandomNumber+0x96>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	795b      	ldrb	r3, [r3, #5]
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d12c      	bne.n	800a658 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2202      	movs	r2, #2
 800a602:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a604:	f7fd f954 	bl	80078b0 <HAL_GetTick>
 800a608:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800a60a:	e011      	b.n	800a630 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a60c:	f7fd f950 	bl	80078b0 <HAL_GetTick>
 800a610:	4602      	mov	r2, r0
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	1ad3      	subs	r3, r2, r3
 800a616:	2b02      	cmp	r3, #2
 800a618:	d90a      	bls.n	800a630 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2201      	movs	r2, #1
 800a61e:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2202      	movs	r2, #2
 800a624:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2200      	movs	r2, #0
 800a62a:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 800a62c:	2301      	movs	r3, #1
 800a62e:	e01c      	b.n	800a66a <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	f003 0301 	and.w	r3, r3, #1
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d1e6      	bne.n	800a60c <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	689a      	ldr	r2, [r3, #8]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	68da      	ldr	r2, [r3, #12]
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2201      	movs	r2, #1
 800a654:	715a      	strb	r2, [r3, #5]
 800a656:	e004      	b.n	800a662 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2204      	movs	r2, #4
 800a65c:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2200      	movs	r2, #0
 800a666:	711a      	strb	r2, [r3, #4]

  return status;
 800a668:	7bfb      	ldrb	r3, [r7, #15]
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3710      	adds	r7, #16
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b082      	sub	sp, #8
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	330c      	adds	r3, #12
 800a67e:	4619      	mov	r1, r3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f7ff ffa7 	bl	800a5d4 <HAL_RNG_GenerateRandomNumber>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d102      	bne.n	800a692 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	e000      	b.n	800a694 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 800a692:	2300      	movs	r3, #0
  }
}
 800a694:	4618      	mov	r0, r3
 800a696:	3708      	adds	r7, #8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	f003 0320 	and.w	r3, r3, #32
 800a6b2:	2b20      	cmp	r3, #32
 800a6b4:	d105      	bne.n	800a6c2 <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2210      	movs	r2, #16
 800a6ba:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	60fb      	str	r3, [r7, #12]
 800a6c0:	e00b      	b.n	800a6da <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6cc:	2b40      	cmp	r3, #64	@ 0x40
 800a6ce:	d104      	bne.n	800a6da <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2208      	movs	r2, #8
 800a6d4:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d10a      	bne.n	800a6f6 <HAL_RNG_IRQHandler+0x5a>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2204      	movs	r2, #4
 800a6e4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 f839 	bl	800a75e <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 800a6f4:	605a      	str	r2, [r3, #4]
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	f003 0301 	and.w	r3, r3, #1
 800a700:	2b01      	cmp	r3, #1
 800a702:	d11d      	bne.n	800a740 <HAL_RNG_IRQHandler+0xa4>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	681a      	ldr	r2, [r3, #0]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f022 0208 	bic.w	r2, r2, #8
 800a712:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	689a      	ldr	r2, [r3, #8]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	795b      	ldrb	r3, [r3, #5]
 800a722:	b2db      	uxtb	r3, r3
 800a724:	2b04      	cmp	r3, #4
 800a726:	d00b      	beq.n	800a740 <HAL_RNG_IRQHandler+0xa4>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	4619      	mov	r1, r3
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 f804 	bl	800a748 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 800a740:	bf00      	nop
 800a742:	3710      	adds	r7, #16
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 800a752:	bf00      	nop
 800a754:	370c      	adds	r7, #12
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr

0800a75e <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800a75e:	b480      	push	{r7}
 800a760:	b083      	sub	sp, #12
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800a766:	bf00      	nop
 800a768:	370c      	adds	r7, #12
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr

0800a772 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800a772:	b580      	push	{r7, lr}
 800a774:	b082      	sub	sp, #8
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
 800a77a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d101      	bne.n	800a786 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	e025      	b.n	800a7d2 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d106      	bne.n	800a7a0 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f7fb fd66 	bl	800626c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2202      	movs	r2, #2
 800a7a4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	3304      	adds	r3, #4
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	4610      	mov	r0, r2
 800a7b4:	f001 f8a0 	bl	800b8f8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6818      	ldr	r0, [r3, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	6839      	ldr	r1, [r7, #0]
 800a7c4:	f001 f90b 	bl	800b9de <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}

0800a7da <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b084      	sub	sp, #16
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	60f8      	str	r0, [r7, #12]
 800a7e2:	60b9      	str	r1, [r7, #8]
 800a7e4:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	2b02      	cmp	r3, #2
 800a7f0:	d101      	bne.n	800a7f6 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800a7f2:	2302      	movs	r3, #2
 800a7f4:	e018      	b.n	800a828 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2202      	movs	r2, #2
 800a7fa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	68b9      	ldr	r1, [r7, #8]
 800a806:	4618      	mov	r0, r3
 800a808:	f001 f968 	bl	800badc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	2b02      	cmp	r3, #2
 800a812:	d104      	bne.n	800a81e <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2205      	movs	r2, #5
 800a818:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 800a81c:	e003      	b.n	800a826 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2201      	movs	r2, #1
 800a822:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  }
  
  return HAL_OK;  
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3710      	adds	r7, #16
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a840:	b2db      	uxtb	r3, r3
 800a842:	2b02      	cmp	r3, #2
 800a844:	d101      	bne.n	800a84a <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a846:	2302      	movs	r3, #2
 800a848:	e00e      	b.n	800a868 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2202      	movs	r2, #2
 800a84e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	6839      	ldr	r1, [r7, #0]
 800a858:	4618      	mov	r0, r3
 800a85a:	f001 f97b 	bl	800bb54 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2201      	movs	r2, #1
 800a862:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;   
 800a866:	2300      	movs	r3, #0
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3708      	adds	r7, #8
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d101      	bne.n	800a882 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a87e:	2301      	movs	r3, #1
 800a880:	e056      	b.n	800a930 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2200      	movs	r2, #0
 800a886:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	2b00      	cmp	r3, #0
 800a892:	d106      	bne.n	800a8a2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f7fb fbd7 	bl	8006050 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2202      	movs	r2, #2
 800a8a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a8b8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	685a      	ldr	r2, [r3, #4]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	431a      	orrs	r2, r3
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	431a      	orrs	r2, r3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	431a      	orrs	r2, r3
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	695b      	ldr	r3, [r3, #20]
 800a8d4:	431a      	orrs	r2, r3
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	699b      	ldr	r3, [r3, #24]
 800a8da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a8de:	431a      	orrs	r2, r3
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	69db      	ldr	r3, [r3, #28]
 800a8e4:	431a      	orrs	r2, r3
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a1b      	ldr	r3, [r3, #32]
 800a8ea:	ea42 0103 	orr.w	r1, r2, r3
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	430a      	orrs	r2, r1
 800a8f8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	699b      	ldr	r3, [r3, #24]
 800a8fe:	0c1b      	lsrs	r3, r3, #16
 800a900:	f003 0104 	and.w	r1, r3, #4
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	430a      	orrs	r2, r1
 800a90e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	69da      	ldr	r2, [r3, #28]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a91e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2201      	movs	r2, #1
 800a92a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800a92e:	2300      	movs	r3, #0
}
 800a930:	4618      	mov	r0, r3
 800a932:	3708      	adds	r7, #8
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d101      	bne.n	800a94a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800a946:	2301      	movs	r3, #1
 800a948:	e01a      	b.n	800a980 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2202      	movs	r2, #2
 800a94e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a960:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f7fb fbdc 	bl	8006120 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2200      	movs	r2, #0
 800a97a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800a97e:	2300      	movs	r3, #0
}
 800a980:	4618      	mov	r0, r3
 800a982:	3708      	adds	r7, #8
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b088      	sub	sp, #32
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	60b9      	str	r1, [r7, #8]
 800a992:	603b      	str	r3, [r7, #0]
 800a994:	4613      	mov	r3, r2
 800a996:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a998:	2300      	movs	r3, #0
 800a99a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d101      	bne.n	800a9aa <HAL_SPI_Transmit+0x22>
 800a9a6:	2302      	movs	r3, #2
 800a9a8:	e11e      	b.n	800abe8 <HAL_SPI_Transmit+0x260>
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a9b2:	f7fc ff7d 	bl	80078b0 <HAL_GetTick>
 800a9b6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a9b8:	88fb      	ldrh	r3, [r7, #6]
 800a9ba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d002      	beq.n	800a9ce <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a9c8:	2302      	movs	r3, #2
 800a9ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a9cc:	e103      	b.n	800abd6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d002      	beq.n	800a9da <HAL_SPI_Transmit+0x52>
 800a9d4:	88fb      	ldrh	r3, [r7, #6]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d102      	bne.n	800a9e0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a9de:	e0fa      	b.n	800abd6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2203      	movs	r2, #3
 800a9e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	68ba      	ldr	r2, [r7, #8]
 800a9f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	88fa      	ldrh	r2, [r7, #6]
 800a9f8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	88fa      	ldrh	r2, [r7, #6]
 800a9fe:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2200      	movs	r2, #0
 800aa04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2200      	movs	r2, #0
 800aa16:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa26:	d107      	bne.n	800aa38 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aa36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa42:	2b40      	cmp	r3, #64	@ 0x40
 800aa44:	d007      	beq.n	800aa56 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aa54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	68db      	ldr	r3, [r3, #12]
 800aa5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa5e:	d14b      	bne.n	800aaf8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d002      	beq.n	800aa6e <HAL_SPI_Transmit+0xe6>
 800aa68:	8afb      	ldrh	r3, [r7, #22]
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d13e      	bne.n	800aaec <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa72:	881a      	ldrh	r2, [r3, #0]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa7e:	1c9a      	adds	r2, r3, #2
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	3b01      	subs	r3, #1
 800aa8c:	b29a      	uxth	r2, r3
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800aa92:	e02b      	b.n	800aaec <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	689b      	ldr	r3, [r3, #8]
 800aa9a:	f003 0302 	and.w	r3, r3, #2
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	d112      	bne.n	800aac8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaa6:	881a      	ldrh	r2, [r3, #0]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aab2:	1c9a      	adds	r2, r3, #2
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	3b01      	subs	r3, #1
 800aac0:	b29a      	uxth	r2, r3
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	86da      	strh	r2, [r3, #54]	@ 0x36
 800aac6:	e011      	b.n	800aaec <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aac8:	f7fc fef2 	bl	80078b0 <HAL_GetTick>
 800aacc:	4602      	mov	r2, r0
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	1ad3      	subs	r3, r2, r3
 800aad2:	683a      	ldr	r2, [r7, #0]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d803      	bhi.n	800aae0 <HAL_SPI_Transmit+0x158>
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aade:	d102      	bne.n	800aae6 <HAL_SPI_Transmit+0x15e>
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d102      	bne.n	800aaec <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800aae6:	2303      	movs	r3, #3
 800aae8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800aaea:	e074      	b.n	800abd6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d1ce      	bne.n	800aa94 <HAL_SPI_Transmit+0x10c>
 800aaf6:	e04c      	b.n	800ab92 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d002      	beq.n	800ab06 <HAL_SPI_Transmit+0x17e>
 800ab00:	8afb      	ldrh	r3, [r7, #22]
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d140      	bne.n	800ab88 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	330c      	adds	r3, #12
 800ab10:	7812      	ldrb	r2, [r2, #0]
 800ab12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab18:	1c5a      	adds	r2, r3, #1
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	3b01      	subs	r3, #1
 800ab26:	b29a      	uxth	r2, r3
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ab2c:	e02c      	b.n	800ab88 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	f003 0302 	and.w	r3, r3, #2
 800ab38:	2b02      	cmp	r3, #2
 800ab3a:	d113      	bne.n	800ab64 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	330c      	adds	r3, #12
 800ab46:	7812      	ldrb	r2, [r2, #0]
 800ab48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab4e:	1c5a      	adds	r2, r3, #1
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	3b01      	subs	r3, #1
 800ab5c:	b29a      	uxth	r2, r3
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ab62:	e011      	b.n	800ab88 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab64:	f7fc fea4 	bl	80078b0 <HAL_GetTick>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	69bb      	ldr	r3, [r7, #24]
 800ab6c:	1ad3      	subs	r3, r2, r3
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d803      	bhi.n	800ab7c <HAL_SPI_Transmit+0x1f4>
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab7a:	d102      	bne.n	800ab82 <HAL_SPI_Transmit+0x1fa>
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d102      	bne.n	800ab88 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800ab82:	2303      	movs	r3, #3
 800ab84:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ab86:	e026      	b.n	800abd6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d1cd      	bne.n	800ab2e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ab92:	69ba      	ldr	r2, [r7, #24]
 800ab94:	6839      	ldr	r1, [r7, #0]
 800ab96:	68f8      	ldr	r0, [r7, #12]
 800ab98:	f000 fbb2 	bl	800b300 <SPI_EndRxTxTransaction>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d002      	beq.n	800aba8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2220      	movs	r2, #32
 800aba6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d10a      	bne.n	800abc6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800abb0:	2300      	movs	r3, #0
 800abb2:	613b      	str	r3, [r7, #16]
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	613b      	str	r3, [r7, #16]
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	613b      	str	r3, [r7, #16]
 800abc4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d002      	beq.n	800abd4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800abce:	2301      	movs	r3, #1
 800abd0:	77fb      	strb	r3, [r7, #31]
 800abd2:	e000      	b.n	800abd6 <HAL_SPI_Transmit+0x24e>
  }

error:
 800abd4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2201      	movs	r2, #1
 800abda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2200      	movs	r2, #0
 800abe2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800abe6:	7ffb      	ldrb	r3, [r7, #31]
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3720      	adds	r7, #32
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b088      	sub	sp, #32
 800abf4:	af02      	add	r7, sp, #8
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	603b      	str	r3, [r7, #0]
 800abfc:	4613      	mov	r3, r2
 800abfe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ac00:	2300      	movs	r3, #0
 800ac02:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ac0c:	d112      	bne.n	800ac34 <HAL_SPI_Receive+0x44>
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d10e      	bne.n	800ac34 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2204      	movs	r2, #4
 800ac1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ac1e:	88fa      	ldrh	r2, [r7, #6]
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	9300      	str	r3, [sp, #0]
 800ac24:	4613      	mov	r3, r2
 800ac26:	68ba      	ldr	r2, [r7, #8]
 800ac28:	68b9      	ldr	r1, [r7, #8]
 800ac2a:	68f8      	ldr	r0, [r7, #12]
 800ac2c:	f000 f8e9 	bl	800ae02 <HAL_SPI_TransmitReceive>
 800ac30:	4603      	mov	r3, r0
 800ac32:	e0e2      	b.n	800adfa <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d101      	bne.n	800ac42 <HAL_SPI_Receive+0x52>
 800ac3e:	2302      	movs	r3, #2
 800ac40:	e0db      	b.n	800adfa <HAL_SPI_Receive+0x20a>
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2201      	movs	r2, #1
 800ac46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ac4a:	f7fc fe31 	bl	80078b0 <HAL_GetTick>
 800ac4e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d002      	beq.n	800ac62 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ac5c:	2302      	movs	r3, #2
 800ac5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ac60:	e0c2      	b.n	800ade8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d002      	beq.n	800ac6e <HAL_SPI_Receive+0x7e>
 800ac68:	88fb      	ldrh	r3, [r7, #6]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d102      	bne.n	800ac74 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ac72:	e0b9      	b.n	800ade8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2204      	movs	r2, #4
 800ac78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	68ba      	ldr	r2, [r7, #8]
 800ac86:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	88fa      	ldrh	r2, [r7, #6]
 800ac8c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	88fa      	ldrh	r2, [r7, #6]
 800ac92:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2200      	movs	r2, #0
 800ac98:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2200      	movs	r2, #0
 800aca4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2200      	movs	r2, #0
 800acaa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2200      	movs	r2, #0
 800acb0:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	689b      	ldr	r3, [r3, #8]
 800acb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800acba:	d107      	bne.n	800accc <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800acca:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acd6:	2b40      	cmp	r3, #64	@ 0x40
 800acd8:	d007      	beq.n	800acea <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	681a      	ldr	r2, [r3, #0]
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ace8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d162      	bne.n	800adb8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800acf2:	e02e      	b.n	800ad52 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	f003 0301 	and.w	r3, r3, #1
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d115      	bne.n	800ad2e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f103 020c 	add.w	r2, r3, #12
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad0e:	7812      	ldrb	r2, [r2, #0]
 800ad10:	b2d2      	uxtb	r2, r2
 800ad12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad18:	1c5a      	adds	r2, r3, #1
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	3b01      	subs	r3, #1
 800ad26:	b29a      	uxth	r2, r3
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ad2c:	e011      	b.n	800ad52 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad2e:	f7fc fdbf 	bl	80078b0 <HAL_GetTick>
 800ad32:	4602      	mov	r2, r0
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	1ad3      	subs	r3, r2, r3
 800ad38:	683a      	ldr	r2, [r7, #0]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d803      	bhi.n	800ad46 <HAL_SPI_Receive+0x156>
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad44:	d102      	bne.n	800ad4c <HAL_SPI_Receive+0x15c>
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d102      	bne.n	800ad52 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800ad4c:	2303      	movs	r3, #3
 800ad4e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ad50:	e04a      	b.n	800ade8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d1cb      	bne.n	800acf4 <HAL_SPI_Receive+0x104>
 800ad5c:	e031      	b.n	800adc2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	689b      	ldr	r3, [r3, #8]
 800ad64:	f003 0301 	and.w	r3, r3, #1
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d113      	bne.n	800ad94 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	68da      	ldr	r2, [r3, #12]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad76:	b292      	uxth	r2, r2
 800ad78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad7e:	1c9a      	adds	r2, r3, #2
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	3b01      	subs	r3, #1
 800ad8c:	b29a      	uxth	r2, r3
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ad92:	e011      	b.n	800adb8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad94:	f7fc fd8c 	bl	80078b0 <HAL_GetTick>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	1ad3      	subs	r3, r2, r3
 800ad9e:	683a      	ldr	r2, [r7, #0]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d803      	bhi.n	800adac <HAL_SPI_Receive+0x1bc>
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adaa:	d102      	bne.n	800adb2 <HAL_SPI_Receive+0x1c2>
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d102      	bne.n	800adb8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800adb2:	2303      	movs	r3, #3
 800adb4:	75fb      	strb	r3, [r7, #23]
          goto error;
 800adb6:	e017      	b.n	800ade8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d1cd      	bne.n	800ad5e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800adc2:	693a      	ldr	r2, [r7, #16]
 800adc4:	6839      	ldr	r1, [r7, #0]
 800adc6:	68f8      	ldr	r0, [r7, #12]
 800adc8:	f000 fa35 	bl	800b236 <SPI_EndRxTransaction>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b00      	cmp	r3, #0
 800add0:	d002      	beq.n	800add8 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2220      	movs	r2, #32
 800add6:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800addc:	2b00      	cmp	r3, #0
 800adde:	d002      	beq.n	800ade6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
 800ade2:	75fb      	strb	r3, [r7, #23]
 800ade4:	e000      	b.n	800ade8 <HAL_SPI_Receive+0x1f8>
  }

error :
 800ade6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2201      	movs	r2, #1
 800adec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2200      	movs	r2, #0
 800adf4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800adf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3718      	adds	r7, #24
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b08c      	sub	sp, #48	@ 0x30
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	60f8      	str	r0, [r7, #12]
 800ae0a:	60b9      	str	r1, [r7, #8]
 800ae0c:	607a      	str	r2, [r7, #4]
 800ae0e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ae10:	2301      	movs	r3, #1
 800ae12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ae14:	2300      	movs	r3, #0
 800ae16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d101      	bne.n	800ae28 <HAL_SPI_TransmitReceive+0x26>
 800ae24:	2302      	movs	r3, #2
 800ae26:	e18a      	b.n	800b13e <HAL_SPI_TransmitReceive+0x33c>
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ae30:	f7fc fd3e 	bl	80078b0 <HAL_GetTick>
 800ae34:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ae3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ae46:	887b      	ldrh	r3, [r7, #2]
 800ae48:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ae4a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d00f      	beq.n	800ae72 <HAL_SPI_TransmitReceive+0x70>
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ae58:	d107      	bne.n	800ae6a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d103      	bne.n	800ae6a <HAL_SPI_TransmitReceive+0x68>
 800ae62:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ae66:	2b04      	cmp	r3, #4
 800ae68:	d003      	beq.n	800ae72 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ae6a:	2302      	movs	r3, #2
 800ae6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800ae70:	e15b      	b.n	800b12a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d005      	beq.n	800ae84 <HAL_SPI_TransmitReceive+0x82>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d002      	beq.n	800ae84 <HAL_SPI_TransmitReceive+0x82>
 800ae7e:	887b      	ldrh	r3, [r7, #2]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d103      	bne.n	800ae8c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800ae8a:	e14e      	b.n	800b12a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	2b04      	cmp	r3, #4
 800ae96:	d003      	beq.n	800aea0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2205      	movs	r2, #5
 800ae9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2200      	movs	r2, #0
 800aea4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	887a      	ldrh	r2, [r7, #2]
 800aeb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	887a      	ldrh	r2, [r7, #2]
 800aeb6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	887a      	ldrh	r2, [r7, #2]
 800aec2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	887a      	ldrh	r2, [r7, #2]
 800aec8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2200      	movs	r2, #0
 800aece:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2200      	movs	r2, #0
 800aed4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aee0:	2b40      	cmp	r3, #64	@ 0x40
 800aee2:	d007      	beq.n	800aef4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aef2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aefc:	d178      	bne.n	800aff0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d002      	beq.n	800af0c <HAL_SPI_TransmitReceive+0x10a>
 800af06:	8b7b      	ldrh	r3, [r7, #26]
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d166      	bne.n	800afda <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af10:	881a      	ldrh	r2, [r3, #0]
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af1c:	1c9a      	adds	r2, r3, #2
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800af26:	b29b      	uxth	r3, r3
 800af28:	3b01      	subs	r3, #1
 800af2a:	b29a      	uxth	r2, r3
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800af30:	e053      	b.n	800afda <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	f003 0302 	and.w	r3, r3, #2
 800af3c:	2b02      	cmp	r3, #2
 800af3e:	d11b      	bne.n	800af78 <HAL_SPI_TransmitReceive+0x176>
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800af44:	b29b      	uxth	r3, r3
 800af46:	2b00      	cmp	r3, #0
 800af48:	d016      	beq.n	800af78 <HAL_SPI_TransmitReceive+0x176>
 800af4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d113      	bne.n	800af78 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af54:	881a      	ldrh	r2, [r3, #0]
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af60:	1c9a      	adds	r2, r3, #2
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	3b01      	subs	r3, #1
 800af6e:	b29a      	uxth	r2, r3
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800af74:	2300      	movs	r3, #0
 800af76:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	f003 0301 	and.w	r3, r3, #1
 800af82:	2b01      	cmp	r3, #1
 800af84:	d119      	bne.n	800afba <HAL_SPI_TransmitReceive+0x1b8>
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d014      	beq.n	800afba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	68da      	ldr	r2, [r3, #12]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af9a:	b292      	uxth	r2, r2
 800af9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afa2:	1c9a      	adds	r2, r3, #2
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800afac:	b29b      	uxth	r3, r3
 800afae:	3b01      	subs	r3, #1
 800afb0:	b29a      	uxth	r2, r3
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800afb6:	2301      	movs	r3, #1
 800afb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800afba:	f7fc fc79 	bl	80078b0 <HAL_GetTick>
 800afbe:	4602      	mov	r2, r0
 800afc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc2:	1ad3      	subs	r3, r2, r3
 800afc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d807      	bhi.n	800afda <HAL_SPI_TransmitReceive+0x1d8>
 800afca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd0:	d003      	beq.n	800afda <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800afd2:	2303      	movs	r3, #3
 800afd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800afd8:	e0a7      	b.n	800b12a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800afde:	b29b      	uxth	r3, r3
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d1a6      	bne.n	800af32 <HAL_SPI_TransmitReceive+0x130>
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800afe8:	b29b      	uxth	r3, r3
 800afea:	2b00      	cmp	r3, #0
 800afec:	d1a1      	bne.n	800af32 <HAL_SPI_TransmitReceive+0x130>
 800afee:	e07c      	b.n	800b0ea <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d002      	beq.n	800affe <HAL_SPI_TransmitReceive+0x1fc>
 800aff8:	8b7b      	ldrh	r3, [r7, #26]
 800affa:	2b01      	cmp	r3, #1
 800affc:	d16b      	bne.n	800b0d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	330c      	adds	r3, #12
 800b008:	7812      	ldrb	r2, [r2, #0]
 800b00a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b010:	1c5a      	adds	r2, r3, #1
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	3b01      	subs	r3, #1
 800b01e:	b29a      	uxth	r2, r3
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b024:	e057      	b.n	800b0d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	f003 0302 	and.w	r3, r3, #2
 800b030:	2b02      	cmp	r3, #2
 800b032:	d11c      	bne.n	800b06e <HAL_SPI_TransmitReceive+0x26c>
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b038:	b29b      	uxth	r3, r3
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d017      	beq.n	800b06e <HAL_SPI_TransmitReceive+0x26c>
 800b03e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b040:	2b01      	cmp	r3, #1
 800b042:	d114      	bne.n	800b06e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	330c      	adds	r3, #12
 800b04e:	7812      	ldrb	r2, [r2, #0]
 800b050:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b056:	1c5a      	adds	r2, r3, #1
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b060:	b29b      	uxth	r3, r3
 800b062:	3b01      	subs	r3, #1
 800b064:	b29a      	uxth	r2, r3
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b06a:	2300      	movs	r3, #0
 800b06c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	f003 0301 	and.w	r3, r3, #1
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d119      	bne.n	800b0b0 <HAL_SPI_TransmitReceive+0x2ae>
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b080:	b29b      	uxth	r3, r3
 800b082:	2b00      	cmp	r3, #0
 800b084:	d014      	beq.n	800b0b0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	68da      	ldr	r2, [r3, #12]
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b090:	b2d2      	uxtb	r2, r2
 800b092:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b098:	1c5a      	adds	r2, r3, #1
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	3b01      	subs	r3, #1
 800b0a6:	b29a      	uxth	r2, r3
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b0b0:	f7fc fbfe 	bl	80078b0 <HAL_GetTick>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b8:	1ad3      	subs	r3, r2, r3
 800b0ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d803      	bhi.n	800b0c8 <HAL_SPI_TransmitReceive+0x2c6>
 800b0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0c6:	d102      	bne.n	800b0ce <HAL_SPI_TransmitReceive+0x2cc>
 800b0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d103      	bne.n	800b0d6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b0ce:	2303      	movs	r3, #3
 800b0d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800b0d4:	e029      	b.n	800b12a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1a2      	bne.n	800b026 <HAL_SPI_TransmitReceive+0x224>
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b0e4:	b29b      	uxth	r3, r3
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d19d      	bne.n	800b026 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b0ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f000 f906 	bl	800b300 <SPI_EndRxTxTransaction>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d006      	beq.n	800b108 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2220      	movs	r2, #32
 800b104:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800b106:	e010      	b.n	800b12a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	689b      	ldr	r3, [r3, #8]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d10b      	bne.n	800b128 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b110:	2300      	movs	r3, #0
 800b112:	617b      	str	r3, [r7, #20]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	68db      	ldr	r3, [r3, #12]
 800b11a:	617b      	str	r3, [r7, #20]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	689b      	ldr	r3, [r3, #8]
 800b122:	617b      	str	r3, [r7, #20]
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	e000      	b.n	800b12a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b128:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2201      	movs	r2, #1
 800b12e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2200      	movs	r2, #0
 800b136:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800b13a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3730      	adds	r7, #48	@ 0x30
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800b146:	b480      	push	{r7}
 800b148:	b083      	sub	sp, #12
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b154:	b2db      	uxtb	r3, r3
}
 800b156:	4618      	mov	r0, r3
 800b158:	370c      	adds	r7, #12
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr

0800b162 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b084      	sub	sp, #16
 800b166:	af00      	add	r7, sp, #0
 800b168:	60f8      	str	r0, [r7, #12]
 800b16a:	60b9      	str	r1, [r7, #8]
 800b16c:	603b      	str	r3, [r7, #0]
 800b16e:	4613      	mov	r3, r2
 800b170:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b172:	e04c      	b.n	800b20e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b17a:	d048      	beq.n	800b20e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b17c:	f7fc fb98 	bl	80078b0 <HAL_GetTick>
 800b180:	4602      	mov	r2, r0
 800b182:	69bb      	ldr	r3, [r7, #24]
 800b184:	1ad3      	subs	r3, r2, r3
 800b186:	683a      	ldr	r2, [r7, #0]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d902      	bls.n	800b192 <SPI_WaitFlagStateUntilTimeout+0x30>
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d13d      	bne.n	800b20e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	685a      	ldr	r2, [r3, #4]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b1a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b1aa:	d111      	bne.n	800b1d0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	689b      	ldr	r3, [r3, #8]
 800b1b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b1b4:	d004      	beq.n	800b1c0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b1be:	d107      	bne.n	800b1d0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	681a      	ldr	r2, [r3, #0]
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b1ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b1d8:	d10f      	bne.n	800b1fa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b1e8:	601a      	str	r2, [r3, #0]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	681a      	ldr	r2, [r3, #0]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b1f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2200      	movs	r2, #0
 800b206:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800b20a:	2303      	movs	r3, #3
 800b20c:	e00f      	b.n	800b22e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	689a      	ldr	r2, [r3, #8]
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	4013      	ands	r3, r2
 800b218:	68ba      	ldr	r2, [r7, #8]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	bf0c      	ite	eq
 800b21e:	2301      	moveq	r3, #1
 800b220:	2300      	movne	r3, #0
 800b222:	b2db      	uxtb	r3, r3
 800b224:	461a      	mov	r2, r3
 800b226:	79fb      	ldrb	r3, [r7, #7]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d1a3      	bne.n	800b174 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800b22c:	2300      	movs	r3, #0
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3710      	adds	r7, #16
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}

0800b236 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b236:	b580      	push	{r7, lr}
 800b238:	b086      	sub	sp, #24
 800b23a:	af02      	add	r7, sp, #8
 800b23c:	60f8      	str	r0, [r7, #12]
 800b23e:	60b9      	str	r1, [r7, #8]
 800b240:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b24a:	d111      	bne.n	800b270 <SPI_EndRxTransaction+0x3a>
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b254:	d004      	beq.n	800b260 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b25e:	d107      	bne.n	800b270 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b26e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b278:	d12a      	bne.n	800b2d0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b282:	d012      	beq.n	800b2aa <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	9300      	str	r3, [sp, #0]
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	2200      	movs	r2, #0
 800b28c:	2180      	movs	r1, #128	@ 0x80
 800b28e:	68f8      	ldr	r0, [r7, #12]
 800b290:	f7ff ff67 	bl	800b162 <SPI_WaitFlagStateUntilTimeout>
 800b294:	4603      	mov	r3, r0
 800b296:	2b00      	cmp	r3, #0
 800b298:	d02d      	beq.n	800b2f6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b29e:	f043 0220 	orr.w	r2, r3, #32
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800b2a6:	2303      	movs	r3, #3
 800b2a8:	e026      	b.n	800b2f8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	9300      	str	r3, [sp, #0]
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	2101      	movs	r1, #1
 800b2b4:	68f8      	ldr	r0, [r7, #12]
 800b2b6:	f7ff ff54 	bl	800b162 <SPI_WaitFlagStateUntilTimeout>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d01a      	beq.n	800b2f6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2c4:	f043 0220 	orr.w	r2, r3, #32
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800b2cc:	2303      	movs	r3, #3
 800b2ce:	e013      	b.n	800b2f8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	9300      	str	r3, [sp, #0]
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	2101      	movs	r1, #1
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	f7ff ff41 	bl	800b162 <SPI_WaitFlagStateUntilTimeout>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d007      	beq.n	800b2f6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2ea:	f043 0220 	orr.w	r2, r3, #32
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800b2f2:	2303      	movs	r3, #3
 800b2f4:	e000      	b.n	800b2f8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b2f6:	2300      	movs	r3, #0
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3710      	adds	r7, #16
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b088      	sub	sp, #32
 800b304:	af02      	add	r7, sp, #8
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b30c:	4b1b      	ldr	r3, [pc, #108]	@ (800b37c <SPI_EndRxTxTransaction+0x7c>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4a1b      	ldr	r2, [pc, #108]	@ (800b380 <SPI_EndRxTxTransaction+0x80>)
 800b312:	fba2 2303 	umull	r2, r3, r2, r3
 800b316:	0d5b      	lsrs	r3, r3, #21
 800b318:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b31c:	fb02 f303 	mul.w	r3, r2, r3
 800b320:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b32a:	d112      	bne.n	800b352 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	9300      	str	r3, [sp, #0]
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	2200      	movs	r2, #0
 800b334:	2180      	movs	r1, #128	@ 0x80
 800b336:	68f8      	ldr	r0, [r7, #12]
 800b338:	f7ff ff13 	bl	800b162 <SPI_WaitFlagStateUntilTimeout>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d016      	beq.n	800b370 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b346:	f043 0220 	orr.w	r2, r3, #32
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800b34e:	2303      	movs	r3, #3
 800b350:	e00f      	b.n	800b372 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00a      	beq.n	800b36e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	3b01      	subs	r3, #1
 800b35c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b368:	2b80      	cmp	r3, #128	@ 0x80
 800b36a:	d0f2      	beq.n	800b352 <SPI_EndRxTxTransaction+0x52>
 800b36c:	e000      	b.n	800b370 <SPI_EndRxTxTransaction+0x70>
        break;
 800b36e:	bf00      	nop
  }

  return HAL_OK;
 800b370:	2300      	movs	r3, #0
}
 800b372:	4618      	mov	r0, r3
 800b374:	3718      	adds	r7, #24
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	20000158 	.word	0x20000158
 800b380:	165e9f81 	.word	0x165e9f81

0800b384 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d101      	bne.n	800b396 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b392:	2301      	movs	r3, #1
 800b394:	e01d      	b.n	800b3d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d106      	bne.n	800b3b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f7fa ff68 	bl	8006280 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2202      	movs	r2, #2
 800b3b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	3304      	adds	r3, #4
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	4610      	mov	r0, r2
 800b3c4:	f000 f968 	bl	800b698 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b3d0:	2300      	movs	r3, #0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3708      	adds	r7, #8
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b3da:	b480      	push	{r7}
 800b3dc:	b085      	sub	sp, #20
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	68da      	ldr	r2, [r3, #12]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f042 0201 	orr.w	r2, r2, #1
 800b3f0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	689b      	ldr	r3, [r3, #8]
 800b3f8:	f003 0307 	and.w	r3, r3, #7
 800b3fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2b06      	cmp	r3, #6
 800b402:	d007      	beq.n	800b414 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f042 0201 	orr.w	r2, r2, #1
 800b412:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	3714      	adds	r7, #20
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr

0800b422 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b422:	b580      	push	{r7, lr}
 800b424:	b082      	sub	sp, #8
 800b426:	af00      	add	r7, sp, #0
 800b428:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	691b      	ldr	r3, [r3, #16]
 800b430:	f003 0302 	and.w	r3, r3, #2
 800b434:	2b02      	cmp	r3, #2
 800b436:	d122      	bne.n	800b47e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	f003 0302 	and.w	r3, r3, #2
 800b442:	2b02      	cmp	r3, #2
 800b444:	d11b      	bne.n	800b47e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f06f 0202 	mvn.w	r2, #2
 800b44e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2201      	movs	r2, #1
 800b454:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	699b      	ldr	r3, [r3, #24]
 800b45c:	f003 0303 	and.w	r3, r3, #3
 800b460:	2b00      	cmp	r3, #0
 800b462:	d003      	beq.n	800b46c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 f8f8 	bl	800b65a <HAL_TIM_IC_CaptureCallback>
 800b46a:	e005      	b.n	800b478 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 f8ea 	bl	800b646 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 f8fb 	bl	800b66e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	691b      	ldr	r3, [r3, #16]
 800b484:	f003 0304 	and.w	r3, r3, #4
 800b488:	2b04      	cmp	r3, #4
 800b48a:	d122      	bne.n	800b4d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	f003 0304 	and.w	r3, r3, #4
 800b496:	2b04      	cmp	r3, #4
 800b498:	d11b      	bne.n	800b4d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f06f 0204 	mvn.w	r2, #4
 800b4a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2202      	movs	r2, #2
 800b4a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	699b      	ldr	r3, [r3, #24]
 800b4b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d003      	beq.n	800b4c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 f8ce 	bl	800b65a <HAL_TIM_IC_CaptureCallback>
 800b4be:	e005      	b.n	800b4cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f000 f8c0 	bl	800b646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 f8d1 	bl	800b66e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	691b      	ldr	r3, [r3, #16]
 800b4d8:	f003 0308 	and.w	r3, r3, #8
 800b4dc:	2b08      	cmp	r3, #8
 800b4de:	d122      	bne.n	800b526 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	f003 0308 	and.w	r3, r3, #8
 800b4ea:	2b08      	cmp	r3, #8
 800b4ec:	d11b      	bne.n	800b526 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f06f 0208 	mvn.w	r2, #8
 800b4f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2204      	movs	r2, #4
 800b4fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	69db      	ldr	r3, [r3, #28]
 800b504:	f003 0303 	and.w	r3, r3, #3
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d003      	beq.n	800b514 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f000 f8a4 	bl	800b65a <HAL_TIM_IC_CaptureCallback>
 800b512:	e005      	b.n	800b520 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 f896 	bl	800b646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 f8a7 	bl	800b66e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2200      	movs	r2, #0
 800b524:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	691b      	ldr	r3, [r3, #16]
 800b52c:	f003 0310 	and.w	r3, r3, #16
 800b530:	2b10      	cmp	r3, #16
 800b532:	d122      	bne.n	800b57a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	f003 0310 	and.w	r3, r3, #16
 800b53e:	2b10      	cmp	r3, #16
 800b540:	d11b      	bne.n	800b57a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f06f 0210 	mvn.w	r2, #16
 800b54a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2208      	movs	r2, #8
 800b550:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	69db      	ldr	r3, [r3, #28]
 800b558:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d003      	beq.n	800b568 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 f87a 	bl	800b65a <HAL_TIM_IC_CaptureCallback>
 800b566:	e005      	b.n	800b574 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 f86c 	bl	800b646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 f87d 	bl	800b66e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2200      	movs	r2, #0
 800b578:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	691b      	ldr	r3, [r3, #16]
 800b580:	f003 0301 	and.w	r3, r3, #1
 800b584:	2b01      	cmp	r3, #1
 800b586:	d10e      	bne.n	800b5a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	f003 0301 	and.w	r3, r3, #1
 800b592:	2b01      	cmp	r3, #1
 800b594:	d107      	bne.n	800b5a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f06f 0201 	mvn.w	r2, #1
 800b59e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f000 f846 	bl	800b632 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	691b      	ldr	r3, [r3, #16]
 800b5ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5b0:	2b80      	cmp	r3, #128	@ 0x80
 800b5b2:	d10e      	bne.n	800b5d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	68db      	ldr	r3, [r3, #12]
 800b5ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5be:	2b80      	cmp	r3, #128	@ 0x80
 800b5c0:	d107      	bne.n	800b5d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b5ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 f989 	bl	800b8e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	691b      	ldr	r3, [r3, #16]
 800b5d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5dc:	2b40      	cmp	r3, #64	@ 0x40
 800b5de:	d10e      	bne.n	800b5fe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5ea:	2b40      	cmp	r3, #64	@ 0x40
 800b5ec:	d107      	bne.n	800b5fe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b5f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 f842 	bl	800b682 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	691b      	ldr	r3, [r3, #16]
 800b604:	f003 0320 	and.w	r3, r3, #32
 800b608:	2b20      	cmp	r3, #32
 800b60a:	d10e      	bne.n	800b62a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	f003 0320 	and.w	r3, r3, #32
 800b616:	2b20      	cmp	r3, #32
 800b618:	d107      	bne.n	800b62a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f06f 0220 	mvn.w	r2, #32
 800b622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f000 f953 	bl	800b8d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b62a:	bf00      	nop
 800b62c:	3708      	adds	r7, #8
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}

0800b632 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b632:	b480      	push	{r7}
 800b634:	b083      	sub	sp, #12
 800b636:	af00      	add	r7, sp, #0
 800b638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b63a:	bf00      	nop
 800b63c:	370c      	adds	r7, #12
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr

0800b646 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b646:	b480      	push	{r7}
 800b648:	b083      	sub	sp, #12
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b64e:	bf00      	nop
 800b650:	370c      	adds	r7, #12
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr

0800b65a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b65a:	b480      	push	{r7}
 800b65c:	b083      	sub	sp, #12
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b662:	bf00      	nop
 800b664:	370c      	adds	r7, #12
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr

0800b66e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b66e:	b480      	push	{r7}
 800b670:	b083      	sub	sp, #12
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b676:	bf00      	nop
 800b678:	370c      	adds	r7, #12
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr

0800b682 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b682:	b480      	push	{r7}
 800b684:	b083      	sub	sp, #12
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b68a:	bf00      	nop
 800b68c:	370c      	adds	r7, #12
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr
	...

0800b698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b698:	b480      	push	{r7}
 800b69a:	b085      	sub	sp, #20
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	4a40      	ldr	r2, [pc, #256]	@ (800b7ac <TIM_Base_SetConfig+0x114>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d013      	beq.n	800b6d8 <TIM_Base_SetConfig+0x40>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6b6:	d00f      	beq.n	800b6d8 <TIM_Base_SetConfig+0x40>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	4a3d      	ldr	r2, [pc, #244]	@ (800b7b0 <TIM_Base_SetConfig+0x118>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d00b      	beq.n	800b6d8 <TIM_Base_SetConfig+0x40>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	4a3c      	ldr	r2, [pc, #240]	@ (800b7b4 <TIM_Base_SetConfig+0x11c>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d007      	beq.n	800b6d8 <TIM_Base_SetConfig+0x40>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	4a3b      	ldr	r2, [pc, #236]	@ (800b7b8 <TIM_Base_SetConfig+0x120>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d003      	beq.n	800b6d8 <TIM_Base_SetConfig+0x40>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	4a3a      	ldr	r2, [pc, #232]	@ (800b7bc <TIM_Base_SetConfig+0x124>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d108      	bne.n	800b6ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	4a2f      	ldr	r2, [pc, #188]	@ (800b7ac <TIM_Base_SetConfig+0x114>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d02b      	beq.n	800b74a <TIM_Base_SetConfig+0xb2>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6f8:	d027      	beq.n	800b74a <TIM_Base_SetConfig+0xb2>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	4a2c      	ldr	r2, [pc, #176]	@ (800b7b0 <TIM_Base_SetConfig+0x118>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d023      	beq.n	800b74a <TIM_Base_SetConfig+0xb2>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	4a2b      	ldr	r2, [pc, #172]	@ (800b7b4 <TIM_Base_SetConfig+0x11c>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d01f      	beq.n	800b74a <TIM_Base_SetConfig+0xb2>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4a2a      	ldr	r2, [pc, #168]	@ (800b7b8 <TIM_Base_SetConfig+0x120>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d01b      	beq.n	800b74a <TIM_Base_SetConfig+0xb2>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	4a29      	ldr	r2, [pc, #164]	@ (800b7bc <TIM_Base_SetConfig+0x124>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d017      	beq.n	800b74a <TIM_Base_SetConfig+0xb2>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4a28      	ldr	r2, [pc, #160]	@ (800b7c0 <TIM_Base_SetConfig+0x128>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d013      	beq.n	800b74a <TIM_Base_SetConfig+0xb2>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4a27      	ldr	r2, [pc, #156]	@ (800b7c4 <TIM_Base_SetConfig+0x12c>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d00f      	beq.n	800b74a <TIM_Base_SetConfig+0xb2>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4a26      	ldr	r2, [pc, #152]	@ (800b7c8 <TIM_Base_SetConfig+0x130>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d00b      	beq.n	800b74a <TIM_Base_SetConfig+0xb2>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	4a25      	ldr	r2, [pc, #148]	@ (800b7cc <TIM_Base_SetConfig+0x134>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d007      	beq.n	800b74a <TIM_Base_SetConfig+0xb2>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	4a24      	ldr	r2, [pc, #144]	@ (800b7d0 <TIM_Base_SetConfig+0x138>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d003      	beq.n	800b74a <TIM_Base_SetConfig+0xb2>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	4a23      	ldr	r2, [pc, #140]	@ (800b7d4 <TIM_Base_SetConfig+0x13c>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d108      	bne.n	800b75c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	68fa      	ldr	r2, [r7, #12]
 800b758:	4313      	orrs	r3, r2
 800b75a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	695b      	ldr	r3, [r3, #20]
 800b766:	4313      	orrs	r3, r2
 800b768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	689a      	ldr	r2, [r3, #8]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	4a0a      	ldr	r2, [pc, #40]	@ (800b7ac <TIM_Base_SetConfig+0x114>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d003      	beq.n	800b790 <TIM_Base_SetConfig+0xf8>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	4a0c      	ldr	r2, [pc, #48]	@ (800b7bc <TIM_Base_SetConfig+0x124>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d103      	bne.n	800b798 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	691a      	ldr	r2, [r3, #16]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2201      	movs	r2, #1
 800b79c:	615a      	str	r2, [r3, #20]
}
 800b79e:	bf00      	nop
 800b7a0:	3714      	adds	r7, #20
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr
 800b7aa:	bf00      	nop
 800b7ac:	40010000 	.word	0x40010000
 800b7b0:	40000400 	.word	0x40000400
 800b7b4:	40000800 	.word	0x40000800
 800b7b8:	40000c00 	.word	0x40000c00
 800b7bc:	40010400 	.word	0x40010400
 800b7c0:	40014000 	.word	0x40014000
 800b7c4:	40014400 	.word	0x40014400
 800b7c8:	40014800 	.word	0x40014800
 800b7cc:	40001800 	.word	0x40001800
 800b7d0:	40001c00 	.word	0x40001c00
 800b7d4:	40002000 	.word	0x40002000

0800b7d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b085      	sub	sp, #20
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d101      	bne.n	800b7f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b7ec:	2302      	movs	r3, #2
 800b7ee:	e05a      	b.n	800b8a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2202      	movs	r2, #2
 800b7fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	4313      	orrs	r3, r2
 800b820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	68fa      	ldr	r2, [r7, #12]
 800b828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4a21      	ldr	r2, [pc, #132]	@ (800b8b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d022      	beq.n	800b87a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b83c:	d01d      	beq.n	800b87a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4a1d      	ldr	r2, [pc, #116]	@ (800b8b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d018      	beq.n	800b87a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a1b      	ldr	r2, [pc, #108]	@ (800b8bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d013      	beq.n	800b87a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4a1a      	ldr	r2, [pc, #104]	@ (800b8c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d00e      	beq.n	800b87a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a18      	ldr	r2, [pc, #96]	@ (800b8c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d009      	beq.n	800b87a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	4a17      	ldr	r2, [pc, #92]	@ (800b8c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d004      	beq.n	800b87a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	4a15      	ldr	r2, [pc, #84]	@ (800b8cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d10c      	bne.n	800b894 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b880:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	68ba      	ldr	r2, [r7, #8]
 800b888:	4313      	orrs	r3, r2
 800b88a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	68ba      	ldr	r2, [r7, #8]
 800b892:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2201      	movs	r2, #1
 800b898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b8a4:	2300      	movs	r3, #0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3714      	adds	r7, #20
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b0:	4770      	bx	lr
 800b8b2:	bf00      	nop
 800b8b4:	40010000 	.word	0x40010000
 800b8b8:	40000400 	.word	0x40000400
 800b8bc:	40000800 	.word	0x40000800
 800b8c0:	40000c00 	.word	0x40000c00
 800b8c4:	40010400 	.word	0x40010400
 800b8c8:	40014000 	.word	0x40014000
 800b8cc:	40001800 	.word	0x40001800

0800b8d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b083      	sub	sp, #12
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b8d8:	bf00      	nop
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr

0800b8e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b8ec:	bf00      	nop
 800b8ee:	370c      	adds	r7, #12
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr

0800b8f8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b085      	sub	sp, #20
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800b902:	2300      	movs	r3, #0
 800b904:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800b906:	2300      	movs	r3, #0
 800b908:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d029      	beq.n	800b966 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800b91e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b922:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b92c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800b932:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800b938:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800b93e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800b944:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800b94a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800b950:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                                               Init->ReadBurst          |\
 800b956:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b958:	68fa      	ldr	r2, [r7, #12]
 800b95a:	4313      	orrs	r3, r2
 800b95c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	68fa      	ldr	r2, [r7, #12]
 800b962:	601a      	str	r2, [r3, #0]
 800b964:	e034      	b.n	800b9d0 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800b972:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b97c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        Init->ReadBurst          |\
 800b982:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	4313      	orrs	r3, r2
 800b988:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800b996:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b99a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b9a4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800b9aa:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800b9b0:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800b9b6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800b9bc:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b9be:	68ba      	ldr	r2, [r7, #8]
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	68fa      	ldr	r2, [r7, #12]
 800b9c8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800b9d0:	2300      	movs	r3, #0
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3714      	adds	r7, #20
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr

0800b9de <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b9de:	b480      	push	{r7}
 800b9e0:	b087      	sub	sp, #28
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	60f8      	str	r0, [r7, #12]
 800b9e6:	60b9      	str	r1, [r7, #8]
 800b9e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d02e      	beq.n	800ba56 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	689b      	ldr	r3, [r3, #8]
 800b9fc:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ba04:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	3b01      	subs	r3, #1
 800ba12:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800ba14:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800ba1e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	68db      	ldr	r3, [r3, #12]
 800ba24:	3b01      	subs	r3, #1
 800ba26:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800ba28:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	691b      	ldr	r3, [r3, #16]
 800ba2e:	3b01      	subs	r3, #1
 800ba30:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800ba32:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	695b      	ldr	r3, [r3, #20]
 800ba38:	3b01      	subs	r3, #1
 800ba3a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800ba3c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	699b      	ldr	r3, [r3, #24]
 800ba42:	3b01      	subs	r3, #1
 800ba44:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800ba46:	4313      	orrs	r3, r2
 800ba48:	697a      	ldr	r2, [r7, #20]
 800ba4a:	4313      	orrs	r3, r2
 800ba4c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	697a      	ldr	r2, [r7, #20]
 800ba52:	609a      	str	r2, [r3, #8]
 800ba54:	e03b      	b.n	800bace <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	689b      	ldr	r3, [r3, #8]
 800ba5a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ba62:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ba66:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	68db      	ldr	r3, [r3, #12]
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	695b      	ldr	r3, [r3, #20]
 800ba74:	3b01      	subs	r3, #1
 800ba76:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	697a      	ldr	r2, [r7, #20]
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ba8c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	3b01      	subs	r3, #1
 800ba9a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800ba9c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	3b01      	subs	r3, #1
 800baa4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800baa6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	691b      	ldr	r3, [r3, #16]
 800baac:	3b01      	subs	r3, #1
 800baae:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800bab0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	699b      	ldr	r3, [r3, #24]
 800bab6:	3b01      	subs	r3, #1
 800bab8:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800baba:	4313      	orrs	r3, r2
 800babc:	693a      	ldr	r2, [r7, #16]
 800babe:	4313      	orrs	r3, r2
 800bac0:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	697a      	ldr	r2, [r7, #20]
 800bac6:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	693a      	ldr	r2, [r7, #16]
 800bacc:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800bace:	2300      	movs	r3, #0
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	371c      	adds	r7, #28
 800bad4:	46bd      	mov	sp, r7
 800bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bada:	4770      	bx	lr

0800badc <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b086      	sub	sp, #24
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800bae8:	2300      	movs	r3, #0
 800baea:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800baec:	2300      	movs	r3, #0
 800baee:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800baf8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	689b      	ldr	r3, [r3, #8]
 800bafe:	3b01      	subs	r3, #1
 800bb00:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800bb02:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800bb0e:	693a      	ldr	r2, [r7, #16]
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800bb14:	f7fb fecc 	bl	80078b0 <HAL_GetTick>
 800bb18:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800bb1a:	e010      	b.n	800bb3e <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb22:	d00c      	beq.n	800bb3e <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d007      	beq.n	800bb3a <FMC_SDRAM_SendCommand+0x5e>
 800bb2a:	f7fb fec1 	bl	80078b0 <HAL_GetTick>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	1ad3      	subs	r3, r2, r3
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d201      	bcs.n	800bb3e <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800bb3a:	2303      	movs	r3, #3
 800bb3c:	e006      	b.n	800bb4c <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	699b      	ldr	r3, [r3, #24]
 800bb42:	f003 0320 	and.w	r3, r3, #32
 800bb46:	2b20      	cmp	r3, #32
 800bb48:	d0e8      	beq.n	800bb1c <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800bb4a:	2300      	movs	r3, #0
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3718      	adds	r7, #24
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b083      	sub	sp, #12
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	695a      	ldr	r2, [r3, #20]
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	005b      	lsls	r3, r3, #1
 800bb66:	431a      	orrs	r2, r3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800bb6c:	2300      	movs	r3, #0
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	370c      	adds	r7, #12
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr

0800bb7a <memset>:
 800bb7a:	4402      	add	r2, r0
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d100      	bne.n	800bb84 <memset+0xa>
 800bb82:	4770      	bx	lr
 800bb84:	f803 1b01 	strb.w	r1, [r3], #1
 800bb88:	e7f9      	b.n	800bb7e <memset+0x4>
	...

0800bb8c <__libc_init_array>:
 800bb8c:	b570      	push	{r4, r5, r6, lr}
 800bb8e:	4d0d      	ldr	r5, [pc, #52]	@ (800bbc4 <__libc_init_array+0x38>)
 800bb90:	4c0d      	ldr	r4, [pc, #52]	@ (800bbc8 <__libc_init_array+0x3c>)
 800bb92:	1b64      	subs	r4, r4, r5
 800bb94:	10a4      	asrs	r4, r4, #2
 800bb96:	2600      	movs	r6, #0
 800bb98:	42a6      	cmp	r6, r4
 800bb9a:	d109      	bne.n	800bbb0 <__libc_init_array+0x24>
 800bb9c:	4d0b      	ldr	r5, [pc, #44]	@ (800bbcc <__libc_init_array+0x40>)
 800bb9e:	4c0c      	ldr	r4, [pc, #48]	@ (800bbd0 <__libc_init_array+0x44>)
 800bba0:	f000 f818 	bl	800bbd4 <_init>
 800bba4:	1b64      	subs	r4, r4, r5
 800bba6:	10a4      	asrs	r4, r4, #2
 800bba8:	2600      	movs	r6, #0
 800bbaa:	42a6      	cmp	r6, r4
 800bbac:	d105      	bne.n	800bbba <__libc_init_array+0x2e>
 800bbae:	bd70      	pop	{r4, r5, r6, pc}
 800bbb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbb4:	4798      	blx	r3
 800bbb6:	3601      	adds	r6, #1
 800bbb8:	e7ee      	b.n	800bb98 <__libc_init_array+0xc>
 800bbba:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbbe:	4798      	blx	r3
 800bbc0:	3601      	adds	r6, #1
 800bbc2:	e7f2      	b.n	800bbaa <__libc_init_array+0x1e>
 800bbc4:	0800db98 	.word	0x0800db98
 800bbc8:	0800db98 	.word	0x0800db98
 800bbcc:	0800db98 	.word	0x0800db98
 800bbd0:	0800db9c 	.word	0x0800db9c

0800bbd4 <_init>:
 800bbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbd6:	bf00      	nop
 800bbd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbda:	bc08      	pop	{r3}
 800bbdc:	469e      	mov	lr, r3
 800bbde:	4770      	bx	lr

0800bbe0 <_fini>:
 800bbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbe2:	bf00      	nop
 800bbe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbe6:	bc08      	pop	{r3}
 800bbe8:	469e      	mov	lr, r3
 800bbea:	4770      	bx	lr
