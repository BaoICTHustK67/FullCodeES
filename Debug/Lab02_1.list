
Lab02_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aaf8  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fa4  0800aca4  0800aca4  0000bca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc48  0800cc48  0000e074  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc48  0800cc48  0000dc48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc50  0800cc50  0000e074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc50  0800cc50  0000dc50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cc54  0800cc54  0000dc54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800cc58  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e074  2**0
                  CONTENTS
 10 .bss          00001280  20000074  20000074  0000e074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200012f4  200012f4  0000e074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000153b8  00000000  00000000  0000e0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034ac  00000000  00000000  0002345c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001408  00000000  00000000  00026908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f74  00000000  00000000  00027d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003f87  00000000  00000000  00028c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b579  00000000  00000000  0002cc0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd940  00000000  00000000  00048184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00125ac4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005370  00000000  00000000  00125b08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  0012ae78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000074 	.word	0x20000074
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800ac8c 	.word	0x0800ac8c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000078 	.word	0x20000078
 80001e8:	0800ac8c 	.word	0x0800ac8c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ArrayReset>:
        disable = false; //để tạm dừng màn hình bên trái

//============================================================

void ArrayReset()
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
    for (int i = 0; i <= 30; i++)
 80004e2:	2300      	movs	r3, #0
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	e016      	b.n	8000516 <ArrayReset+0x3a>
        for (int j = 0; j <= 30; j++)
 80004e8:	2300      	movs	r3, #0
 80004ea:	60bb      	str	r3, [r7, #8]
 80004ec:	e00d      	b.n	800050a <ArrayReset+0x2e>
            tetris[j][i] = 0;
 80004ee:	491e      	ldr	r1, [pc, #120]	@ (8000568 <ArrayReset+0x8c>)
 80004f0:	68ba      	ldr	r2, [r7, #8]
 80004f2:	4613      	mov	r3, r2
 80004f4:	011b      	lsls	r3, r3, #4
 80004f6:	1a9b      	subs	r3, r3, r2
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	68fa      	ldr	r2, [r7, #12]
 80004fc:	4413      	add	r3, r2
 80004fe:	2200      	movs	r2, #0
 8000500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int j = 0; j <= 30; j++)
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	3301      	adds	r3, #1
 8000508:	60bb      	str	r3, [r7, #8]
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	2b1e      	cmp	r3, #30
 800050e:	ddee      	ble.n	80004ee <ArrayReset+0x12>
    for (int i = 0; i <= 30; i++)
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	3301      	adds	r3, #1
 8000514:	60fb      	str	r3, [r7, #12]
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	2b1e      	cmp	r3, #30
 800051a:	dde5      	ble.n	80004e8 <ArrayReset+0xc>

    for (int i = 0; i <= 21; i++)
 800051c:	2300      	movs	r3, #0
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	e018      	b.n	8000554 <ArrayReset+0x78>
    {
        tetris[i][22] = 1;
 8000522:	4911      	ldr	r1, [pc, #68]	@ (8000568 <ArrayReset+0x8c>)
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	4613      	mov	r3, r2
 8000528:	011b      	lsls	r3, r3, #4
 800052a:	1a9b      	subs	r3, r3, r2
 800052c:	00db      	lsls	r3, r3, #3
 800052e:	440b      	add	r3, r1
 8000530:	3358      	adds	r3, #88	@ 0x58
 8000532:	2201      	movs	r2, #1
 8000534:	601a      	str	r2, [r3, #0]
        tetris[21][i] = 1;
 8000536:	4a0c      	ldr	r2, [pc, #48]	@ (8000568 <ArrayReset+0x8c>)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	f203 2376 	addw	r3, r3, #630	@ 0x276
 800053e:	2101      	movs	r1, #1
 8000540:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        tetris[0][i] = 1;
 8000544:	4a08      	ldr	r2, [pc, #32]	@ (8000568 <ArrayReset+0x8c>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2101      	movs	r1, #1
 800054a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i <= 21; i++)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	3301      	adds	r3, #1
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2b15      	cmp	r3, #21
 8000558:	dde3      	ble.n	8000522 <ArrayReset+0x46>
    }
}
 800055a:	bf00      	nop
 800055c:	bf00      	nop
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	20000090 	.word	0x20000090

0800056c <PrintArray>:

void PrintArray(int x, int y) // In mảng bắt đầu từ vị trí có toạ độ (x, y)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
    for (int i = 1; i <= 21; i++)
 8000576:	2301      	movs	r3, #1
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	e060      	b.n	800063e <PrintArray+0xd2>
    {
        for (int j = 1; j <= 20; j++)
 800057c:	2301      	movs	r3, #1
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	e057      	b.n	8000632 <PrintArray+0xc6>
        {
            switch (tetris[j][i])
 8000582:	4933      	ldr	r1, [pc, #204]	@ (8000650 <PrintArray+0xe4>)
 8000584:	68ba      	ldr	r2, [r7, #8]
 8000586:	4613      	mov	r3, r2
 8000588:	011b      	lsls	r3, r3, #4
 800058a:	1a9b      	subs	r3, r3, r2
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	68fa      	ldr	r2, [r7, #12]
 8000590:	4413      	add	r3, r2
 8000592:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000596:	2b06      	cmp	r3, #6
 8000598:	d848      	bhi.n	800062c <PrintArray+0xc0>
 800059a:	a201      	add	r2, pc, #4	@ (adr r2, 80005a0 <PrintArray+0x34>)
 800059c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a0:	080005bd 	.word	0x080005bd
 80005a4:	080005cd 	.word	0x080005cd
 80005a8:	080005dd 	.word	0x080005dd
 80005ac:	080005ed 	.word	0x080005ed
 80005b0:	080005fd 	.word	0x080005fd
 80005b4:	0800060d 	.word	0x0800060d
 80005b8:	0800061d 	.word	0x0800061d
            {
            case 0: { Colour(0); PrintXY(j, i); break; }
 80005bc:	2000      	movs	r0, #0
 80005be:	f005 f9d5 	bl	800596c <Colour>
 80005c2:	68f9      	ldr	r1, [r7, #12]
 80005c4:	68b8      	ldr	r0, [r7, #8]
 80005c6:	f005 f9b1 	bl	800592c <PrintXY>
 80005ca:	e02f      	b.n	800062c <PrintArray+0xc0>
            case 1: { Colour(1); PrintXY(j, i); break; }
 80005cc:	2001      	movs	r0, #1
 80005ce:	f005 f9cd 	bl	800596c <Colour>
 80005d2:	68f9      	ldr	r1, [r7, #12]
 80005d4:	68b8      	ldr	r0, [r7, #8]
 80005d6:	f005 f9a9 	bl	800592c <PrintXY>
 80005da:	e027      	b.n	800062c <PrintArray+0xc0>
            case 2: { Colour(2); PrintXY(j, i); break; }
 80005dc:	2002      	movs	r0, #2
 80005de:	f005 f9c5 	bl	800596c <Colour>
 80005e2:	68f9      	ldr	r1, [r7, #12]
 80005e4:	68b8      	ldr	r0, [r7, #8]
 80005e6:	f005 f9a1 	bl	800592c <PrintXY>
 80005ea:	e01f      	b.n	800062c <PrintArray+0xc0>
            case 3: { Colour(3); PrintXY(j, i); break; }
 80005ec:	2003      	movs	r0, #3
 80005ee:	f005 f9bd 	bl	800596c <Colour>
 80005f2:	68f9      	ldr	r1, [r7, #12]
 80005f4:	68b8      	ldr	r0, [r7, #8]
 80005f6:	f005 f999 	bl	800592c <PrintXY>
 80005fa:	e017      	b.n	800062c <PrintArray+0xc0>
            case 4: { Colour(4); PrintXY(j, i); break; }
 80005fc:	2004      	movs	r0, #4
 80005fe:	f005 f9b5 	bl	800596c <Colour>
 8000602:	68f9      	ldr	r1, [r7, #12]
 8000604:	68b8      	ldr	r0, [r7, #8]
 8000606:	f005 f991 	bl	800592c <PrintXY>
 800060a:	e00f      	b.n	800062c <PrintArray+0xc0>
            case 5: { Colour(5); PrintXY(j, i); break; }
 800060c:	2005      	movs	r0, #5
 800060e:	f005 f9ad 	bl	800596c <Colour>
 8000612:	68f9      	ldr	r1, [r7, #12]
 8000614:	68b8      	ldr	r0, [r7, #8]
 8000616:	f005 f989 	bl	800592c <PrintXY>
 800061a:	e007      	b.n	800062c <PrintArray+0xc0>
            case 6: { Colour(6); PrintXY(j, i); break; }
 800061c:	2006      	movs	r0, #6
 800061e:	f005 f9a5 	bl	800596c <Colour>
 8000622:	68f9      	ldr	r1, [r7, #12]
 8000624:	68b8      	ldr	r0, [r7, #8]
 8000626:	f005 f981 	bl	800592c <PrintXY>
 800062a:	bf00      	nop
        for (int j = 1; j <= 20; j++)
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	3301      	adds	r3, #1
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	2b14      	cmp	r3, #20
 8000636:	dda4      	ble.n	8000582 <PrintArray+0x16>
    for (int i = 1; i <= 21; i++)
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	3301      	adds	r3, #1
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	2b15      	cmp	r3, #21
 8000642:	dd9b      	ble.n	800057c <PrintArray+0x10>
            }
        }
    }
}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000090 	.word	0x20000090

08000654 <DeleteRow>:
// Check full rows
// and delete full rows
// and return a value of deleted rows

void DeleteRow(int n)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
    for (int i = 1; i <= 20; i++) tetris[i][n] = 0;
 800065c:	2301      	movs	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	e00d      	b.n	800067e <DeleteRow+0x2a>
 8000662:	490c      	ldr	r1, [pc, #48]	@ (8000694 <DeleteRow+0x40>)
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	4613      	mov	r3, r2
 8000668:	011b      	lsls	r3, r3, #4
 800066a:	1a9b      	subs	r3, r3, r2
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	4413      	add	r3, r2
 8000672:	2200      	movs	r2, #0
 8000674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b14      	cmp	r3, #20
 8000682:	ddee      	ble.n	8000662 <DeleteRow+0xe>
}
 8000684:	bf00      	nop
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000090 	.word	0x20000090

08000698 <MoveAllRowAbove>:

void MoveAllRowAbove(int n)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
    for (int i = n; i >= 1; i--)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	e020      	b.n	80006e8 <MoveAllRowAbove+0x50>
    {
        for (int j = 20; j >= 1; j--)
 80006a6:	2314      	movs	r3, #20
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	e017      	b.n	80006dc <MoveAllRowAbove+0x44>
        {
            tetris[j][i] = tetris[j][i - 1];
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	1e59      	subs	r1, r3, #1
 80006b0:	4812      	ldr	r0, [pc, #72]	@ (80006fc <MoveAllRowAbove+0x64>)
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	4613      	mov	r3, r2
 80006b6:	011b      	lsls	r3, r3, #4
 80006b8:	1a9b      	subs	r3, r3, r2
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	440b      	add	r3, r1
 80006be:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80006c2:	480e      	ldr	r0, [pc, #56]	@ (80006fc <MoveAllRowAbove+0x64>)
 80006c4:	68ba      	ldr	r2, [r7, #8]
 80006c6:	4613      	mov	r3, r2
 80006c8:	011b      	lsls	r3, r3, #4
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	4413      	add	r3, r2
 80006d2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for (int j = 20; j >= 1; j--)
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	3b01      	subs	r3, #1
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	dce4      	bgt.n	80006ac <MoveAllRowAbove+0x14>
    for (int i = n; i >= 1; i--)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	3b01      	subs	r3, #1
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	dcdb      	bgt.n	80006a6 <MoveAllRowAbove+0xe>
        }
    }
}
 80006ee:	bf00      	nop
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	20000090 	.word	0x20000090

08000700 <CheckFullRow>:

int CheckFullRow() // Function that checks and returns a number of full rows
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
    int FullRow = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
    bool t = false;
 800070a:	2300      	movs	r3, #0
 800070c:	72fb      	strb	r3, [r7, #11]
    fullrow = false;
 800070e:	4b1e      	ldr	r3, [pc, #120]	@ (8000788 <CheckFullRow+0x88>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
    for (int i = 1; i <= 21; i++)
 8000714:	2301      	movs	r3, #1
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	e02e      	b.n	8000778 <CheckFullRow+0x78>
    {
        for (int j = 1; j <= 21; j++)
 800071a:	2301      	movs	r3, #1
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	e019      	b.n	8000754 <CheckFullRow+0x54>
        {
            if (tetris[j][i] == 0)
 8000720:	491a      	ldr	r1, [pc, #104]	@ (800078c <CheckFullRow+0x8c>)
 8000722:	683a      	ldr	r2, [r7, #0]
 8000724:	4613      	mov	r3, r2
 8000726:	011b      	lsls	r3, r3, #4
 8000728:	1a9b      	subs	r3, r3, r2
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	4413      	add	r3, r2
 8000730:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d105      	bne.n	8000744 <CheckFullRow+0x44>
            {
                t = false;
 8000738:	2300      	movs	r3, #0
 800073a:	72fb      	strb	r3, [r7, #11]
                fullrow = t;
 800073c:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <CheckFullRow+0x88>)
 800073e:	7afb      	ldrb	r3, [r7, #11]
 8000740:	7013      	strb	r3, [r2, #0]
                break;
 8000742:	e00a      	b.n	800075a <CheckFullRow+0x5a>
            }
            t = true;
 8000744:	2301      	movs	r3, #1
 8000746:	72fb      	strb	r3, [r7, #11]
            fullrow = t;
 8000748:	4a0f      	ldr	r2, [pc, #60]	@ (8000788 <CheckFullRow+0x88>)
 800074a:	7afb      	ldrb	r3, [r7, #11]
 800074c:	7013      	strb	r3, [r2, #0]
        for (int j = 1; j <= 21; j++)
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	3301      	adds	r3, #1
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	2b15      	cmp	r3, #21
 8000758:	dde2      	ble.n	8000720 <CheckFullRow+0x20>
        }
        if (t)
 800075a:	7afb      	ldrb	r3, [r7, #11]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d008      	beq.n	8000772 <CheckFullRow+0x72>
        {
            FullRow++;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3301      	adds	r3, #1
 8000764:	60fb      	str	r3, [r7, #12]
            DeleteRow(i);
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f7ff ff74 	bl	8000654 <DeleteRow>
            MoveAllRowAbove(i);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff ff93 	bl	8000698 <MoveAllRowAbove>
    for (int i = 1; i <= 21; i++)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	3301      	adds	r3, #1
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b15      	cmp	r3, #21
 800077c:	ddcd      	ble.n	800071a <CheckFullRow+0x1a>
        }
    }
    return FullRow;
 800077e:	68fb      	ldr	r3, [r7, #12]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000eb3 	.word	0x20000eb3
 800078c:	20000090 	.word	0x20000090

08000790 <PrintVariables>:

void PrintVariables()
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
	...

080007a0 <Refresh>:

void Refresh()
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
    PrintArray(1, 1);
 80007a4:	2101      	movs	r1, #1
 80007a6:	2001      	movs	r0, #1
 80007a8:	f7ff fee0 	bl	800056c <PrintArray>
    Colour(colour);
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <Refresh+0x28>)
 80007ae:	881b      	ldrh	r3, [r3, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f005 f8db 	bl	800596c <Colour>
    PrintTetromino();
 80007b6:	f004 f977 	bl	8004aa8 <PrintTetromino>
    Colour(6);
 80007ba:	2006      	movs	r0, #6
 80007bc:	f005 f8d6 	bl	800596c <Colour>

    PrintVariables();
 80007c0:	f7ff ffe6 	bl	8000790 <PrintVariables>

    //Print next piece
    // PrintNextPiece(30, 4);

    // Print level
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000eb0 	.word	0x20000eb0

080007cc <InputProcess>:

void InputProcess() // Function processing user's input
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
//    if (isUSERKey() == 1) {
//    	while (isUSERKey() == 1);
//    	TETRIS_Snake = 1;
//    }
	if (isLeftKey() == 1 && !Pause) // Moves current tetromino to the left if the 'a' key is pressed
 80007d0:	f005 f838 	bl	8005844 <isLeftKey>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d12b      	bne.n	8000832 <InputProcess+0x66>
 80007da:	4b83      	ldr	r3, [pc, #524]	@ (80009e8 <InputProcess+0x21c>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	f083 0301 	eor.w	r3, r3, #1
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d024      	beq.n	8000832 <InputProcess+0x66>
    {
        while (isLeftKey() == 1) {
 80007e8:	e009      	b.n	80007fe <InputProcess+0x32>
        	if (isKeyHold >= KEY_HOLD_TIME) break;
 80007ea:	4b80      	ldr	r3, [pc, #512]	@ (80009ec <InputProcess+0x220>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a80      	ldr	r2, [pc, #512]	@ (80009f0 <InputProcess+0x224>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	dc0a      	bgt.n	800080a <InputProcess+0x3e>
        	else isKeyHold++;
 80007f4:	4b7d      	ldr	r3, [pc, #500]	@ (80009ec <InputProcess+0x220>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	3301      	adds	r3, #1
 80007fa:	4a7c      	ldr	r2, [pc, #496]	@ (80009ec <InputProcess+0x220>)
 80007fc:	6013      	str	r3, [r2, #0]
        while (isLeftKey() == 1) {
 80007fe:	f005 f821 	bl	8005844 <isLeftKey>
 8000802:	4603      	mov	r3, r0
 8000804:	2b01      	cmp	r3, #1
 8000806:	d0f0      	beq.n	80007ea <InputProcess+0x1e>
 8000808:	e000      	b.n	800080c <InputProcess+0x40>
        	if (isKeyHold >= KEY_HOLD_TIME) break;
 800080a:	bf00      	nop
        }
    	if (CanMoveLeft) tetrominoLocX--;
 800080c:	4b79      	ldr	r3, [pc, #484]	@ (80009f4 <InputProcess+0x228>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d004      	beq.n	800081e <InputProcess+0x52>
 8000814:	4b78      	ldr	r3, [pc, #480]	@ (80009f8 <InputProcess+0x22c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	3b01      	subs	r3, #1
 800081a:	4a77      	ldr	r2, [pc, #476]	@ (80009f8 <InputProcess+0x22c>)
 800081c:	6013      	str	r3, [r2, #0]
        Refresh();
 800081e:	f7ff ffbf 	bl	80007a0 <Refresh>
        if (isLeftKey() == 0) isKeyHold = 0;
 8000822:	f005 f80f 	bl	8005844 <isLeftKey>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d102      	bne.n	8000832 <InputProcess+0x66>
 800082c:	4b6f      	ldr	r3, [pc, #444]	@ (80009ec <InputProcess+0x220>)
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
    }
    if (isRightKey() == 1 && !Pause) // Moves current tetromino to the right if the 'd' key is pressed
 8000832:	f005 f819 	bl	8005868 <isRightKey>
 8000836:	4603      	mov	r3, r0
 8000838:	2b01      	cmp	r3, #1
 800083a:	d12b      	bne.n	8000894 <InputProcess+0xc8>
 800083c:	4b6a      	ldr	r3, [pc, #424]	@ (80009e8 <InputProcess+0x21c>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	f083 0301 	eor.w	r3, r3, #1
 8000844:	b2db      	uxtb	r3, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	d024      	beq.n	8000894 <InputProcess+0xc8>
    {
        while (isRightKey() == 1) {
 800084a:	e009      	b.n	8000860 <InputProcess+0x94>
        	if (isKeyHold >= KEY_HOLD_TIME) break;
 800084c:	4b67      	ldr	r3, [pc, #412]	@ (80009ec <InputProcess+0x220>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a67      	ldr	r2, [pc, #412]	@ (80009f0 <InputProcess+0x224>)
 8000852:	4293      	cmp	r3, r2
 8000854:	dc0a      	bgt.n	800086c <InputProcess+0xa0>
        	else isKeyHold++;
 8000856:	4b65      	ldr	r3, [pc, #404]	@ (80009ec <InputProcess+0x220>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	3301      	adds	r3, #1
 800085c:	4a63      	ldr	r2, [pc, #396]	@ (80009ec <InputProcess+0x220>)
 800085e:	6013      	str	r3, [r2, #0]
        while (isRightKey() == 1) {
 8000860:	f005 f802 	bl	8005868 <isRightKey>
 8000864:	4603      	mov	r3, r0
 8000866:	2b01      	cmp	r3, #1
 8000868:	d0f0      	beq.n	800084c <InputProcess+0x80>
 800086a:	e000      	b.n	800086e <InputProcess+0xa2>
        	if (isKeyHold >= KEY_HOLD_TIME) break;
 800086c:	bf00      	nop
        }
    	if (CanMoveRight) tetrominoLocX++;
 800086e:	4b63      	ldr	r3, [pc, #396]	@ (80009fc <InputProcess+0x230>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d004      	beq.n	8000880 <InputProcess+0xb4>
 8000876:	4b60      	ldr	r3, [pc, #384]	@ (80009f8 <InputProcess+0x22c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	3301      	adds	r3, #1
 800087c:	4a5e      	ldr	r2, [pc, #376]	@ (80009f8 <InputProcess+0x22c>)
 800087e:	6013      	str	r3, [r2, #0]
        Refresh();
 8000880:	f7ff ff8e 	bl	80007a0 <Refresh>
        if (isRightKey() == 0) isKeyHold = 0;
 8000884:	f004 fff0 	bl	8005868 <isRightKey>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d102      	bne.n	8000894 <InputProcess+0xc8>
 800088e:	4b57      	ldr	r3, [pc, #348]	@ (80009ec <InputProcess+0x220>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
    }
    if (isDownKey() == 1 && !Pause) // Moves current tetromino down if the 's' key is pressed
 8000894:	f004 ffc4 	bl	8005820 <isDownKey>
 8000898:	4603      	mov	r3, r0
 800089a:	2b01      	cmp	r3, #1
 800089c:	d115      	bne.n	80008ca <InputProcess+0xfe>
 800089e:	4b52      	ldr	r3, [pc, #328]	@ (80009e8 <InputProcess+0x21c>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	f083 0301 	eor.w	r3, r3, #1
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d00e      	beq.n	80008ca <InputProcess+0xfe>
    {
        // while (isDownKey() == 1);
    	if (CanMoveDown) if (tetrominoLocY < 20) tetrominoLocY++;
 80008ac:	4b54      	ldr	r3, [pc, #336]	@ (8000a00 <InputProcess+0x234>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d008      	beq.n	80008c6 <InputProcess+0xfa>
 80008b4:	4b53      	ldr	r3, [pc, #332]	@ (8000a04 <InputProcess+0x238>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b13      	cmp	r3, #19
 80008ba:	dc04      	bgt.n	80008c6 <InputProcess+0xfa>
 80008bc:	4b51      	ldr	r3, [pc, #324]	@ (8000a04 <InputProcess+0x238>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	3301      	adds	r3, #1
 80008c2:	4a50      	ldr	r2, [pc, #320]	@ (8000a04 <InputProcess+0x238>)
 80008c4:	6013      	str	r3, [r2, #0]
        Refresh();
 80008c6:	f7ff ff6b 	bl	80007a0 <Refresh>
    }
    if (isUpKey() == 1 && !Pause) // Change state of a tetromino when 'w' key is pressed
 80008ca:	f004 ff97 	bl	80057fc <isUpKey>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	f040 8087 	bne.w	80009e4 <InputProcess+0x218>
 80008d6:	4b44      	ldr	r3, [pc, #272]	@ (80009e8 <InputProcess+0x21c>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	f083 0301 	eor.w	r3, r3, #1
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d07f      	beq.n	80009e4 <InputProcess+0x218>
    {
        while (isUpKey() == 1);
 80008e4:	bf00      	nop
 80008e6:	f004 ff89 	bl	80057fc <isUpKey>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d0fa      	beq.n	80008e6 <InputProcess+0x11a>
    	if (CanRotate)
 80008f0:	4b45      	ldr	r3, [pc, #276]	@ (8000a08 <InputProcess+0x23c>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d073      	beq.n	80009e0 <InputProcess+0x214>
            switch (CurrentState)
 80008f8:	4b44      	ldr	r3, [pc, #272]	@ (8000a0c <InputProcess+0x240>)
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	3b01      	subs	r3, #1
 80008fe:	2b11      	cmp	r3, #17
 8000900:	d86e      	bhi.n	80009e0 <InputProcess+0x214>
 8000902:	a201      	add	r2, pc, #4	@ (adr r2, 8000908 <InputProcess+0x13c>)
 8000904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000908:	08000951 	.word	0x08000951
 800090c:	08000959 	.word	0x08000959
 8000910:	08000961 	.word	0x08000961
 8000914:	08000969 	.word	0x08000969
 8000918:	08000971 	.word	0x08000971
 800091c:	08000979 	.word	0x08000979
 8000920:	08000981 	.word	0x08000981
 8000924:	08000989 	.word	0x08000989
 8000928:	08000991 	.word	0x08000991
 800092c:	08000999 	.word	0x08000999
 8000930:	080009a1 	.word	0x080009a1
 8000934:	080009a9 	.word	0x080009a9
 8000938:	080009b1 	.word	0x080009b1
 800093c:	080009b9 	.word	0x080009b9
 8000940:	080009c1 	.word	0x080009c1
 8000944:	080009c9 	.word	0x080009c9
 8000948:	080009d1 	.word	0x080009d1
 800094c:	080009d9 	.word	0x080009d9
            {
            case 1: { CurrentState = 2; break; }
 8000950:	4b2e      	ldr	r3, [pc, #184]	@ (8000a0c <InputProcess+0x240>)
 8000952:	2202      	movs	r2, #2
 8000954:	801a      	strh	r2, [r3, #0]
 8000956:	e043      	b.n	80009e0 <InputProcess+0x214>
            case 2: { CurrentState = 1; break; }
 8000958:	4b2c      	ldr	r3, [pc, #176]	@ (8000a0c <InputProcess+0x240>)
 800095a:	2201      	movs	r2, #1
 800095c:	801a      	strh	r2, [r3, #0]
 800095e:	e03f      	b.n	80009e0 <InputProcess+0x214>
            case 3: { CurrentState = 4; break; }
 8000960:	4b2a      	ldr	r3, [pc, #168]	@ (8000a0c <InputProcess+0x240>)
 8000962:	2204      	movs	r2, #4
 8000964:	801a      	strh	r2, [r3, #0]
 8000966:	e03b      	b.n	80009e0 <InputProcess+0x214>
            case 4: { CurrentState = 5; break; }
 8000968:	4b28      	ldr	r3, [pc, #160]	@ (8000a0c <InputProcess+0x240>)
 800096a:	2205      	movs	r2, #5
 800096c:	801a      	strh	r2, [r3, #0]
 800096e:	e037      	b.n	80009e0 <InputProcess+0x214>
            case 5: { CurrentState = 6; break; }
 8000970:	4b26      	ldr	r3, [pc, #152]	@ (8000a0c <InputProcess+0x240>)
 8000972:	2206      	movs	r2, #6
 8000974:	801a      	strh	r2, [r3, #0]
 8000976:	e033      	b.n	80009e0 <InputProcess+0x214>
            case 6: { CurrentState = 3; break; }
 8000978:	4b24      	ldr	r3, [pc, #144]	@ (8000a0c <InputProcess+0x240>)
 800097a:	2203      	movs	r2, #3
 800097c:	801a      	strh	r2, [r3, #0]
 800097e:	e02f      	b.n	80009e0 <InputProcess+0x214>
            case 7: { CurrentState = 8; break; }
 8000980:	4b22      	ldr	r3, [pc, #136]	@ (8000a0c <InputProcess+0x240>)
 8000982:	2208      	movs	r2, #8
 8000984:	801a      	strh	r2, [r3, #0]
 8000986:	e02b      	b.n	80009e0 <InputProcess+0x214>
            case 8: { CurrentState = 9; break; }
 8000988:	4b20      	ldr	r3, [pc, #128]	@ (8000a0c <InputProcess+0x240>)
 800098a:	2209      	movs	r2, #9
 800098c:	801a      	strh	r2, [r3, #0]
 800098e:	e027      	b.n	80009e0 <InputProcess+0x214>
            case 9: { CurrentState = 10; break; }
 8000990:	4b1e      	ldr	r3, [pc, #120]	@ (8000a0c <InputProcess+0x240>)
 8000992:	220a      	movs	r2, #10
 8000994:	801a      	strh	r2, [r3, #0]
 8000996:	e023      	b.n	80009e0 <InputProcess+0x214>
            case 10: { CurrentState = 7; break; }
 8000998:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <InputProcess+0x240>)
 800099a:	2207      	movs	r2, #7
 800099c:	801a      	strh	r2, [r3, #0]
 800099e:	e01f      	b.n	80009e0 <InputProcess+0x214>
            case 11: { CurrentState = 12; break; }
 80009a0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a0c <InputProcess+0x240>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	801a      	strh	r2, [r3, #0]
 80009a6:	e01b      	b.n	80009e0 <InputProcess+0x214>
            case 12: { CurrentState = 11; break; }
 80009a8:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <InputProcess+0x240>)
 80009aa:	220b      	movs	r2, #11
 80009ac:	801a      	strh	r2, [r3, #0]
 80009ae:	e017      	b.n	80009e0 <InputProcess+0x214>
            case 13: { CurrentState = 14; break; }
 80009b0:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <InputProcess+0x240>)
 80009b2:	220e      	movs	r2, #14
 80009b4:	801a      	strh	r2, [r3, #0]
 80009b6:	e013      	b.n	80009e0 <InputProcess+0x214>
            case 14: { CurrentState = 15; break; }
 80009b8:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <InputProcess+0x240>)
 80009ba:	220f      	movs	r2, #15
 80009bc:	801a      	strh	r2, [r3, #0]
 80009be:	e00f      	b.n	80009e0 <InputProcess+0x214>
            case 15: { CurrentState = 16; break; }
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <InputProcess+0x240>)
 80009c2:	2210      	movs	r2, #16
 80009c4:	801a      	strh	r2, [r3, #0]
 80009c6:	e00b      	b.n	80009e0 <InputProcess+0x214>
            case 16: { CurrentState = 13; break; }
 80009c8:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <InputProcess+0x240>)
 80009ca:	220d      	movs	r2, #13
 80009cc:	801a      	strh	r2, [r3, #0]
 80009ce:	e007      	b.n	80009e0 <InputProcess+0x214>
            case 17: { CurrentState = 18; break; }
 80009d0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <InputProcess+0x240>)
 80009d2:	2212      	movs	r2, #18
 80009d4:	801a      	strh	r2, [r3, #0]
 80009d6:	e003      	b.n	80009e0 <InputProcess+0x214>
            case 18: { CurrentState = 17; break; }
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <InputProcess+0x240>)
 80009da:	2211      	movs	r2, #17
 80009dc:	801a      	strh	r2, [r3, #0]
 80009de:	bf00      	nop
            }
        Refresh();
 80009e0:	f7ff fede 	bl	80007a0 <Refresh>
    }
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000eb2 	.word	0x20000eb2
 80009ec:	20001090 	.word	0x20001090
 80009f0:	0007a11f 	.word	0x0007a11f
 80009f4:	2000000e 	.word	0x2000000e
 80009f8:	20000ea4 	.word	0x20000ea4
 80009fc:	2000000d 	.word	0x2000000d
 8000a00:	2000000f 	.word	0x2000000f
 8000a04:	20000ea8 	.word	0x20000ea8
 8000a08:	20000010 	.word	0x20000010
 8000a0c:	20000eac 	.word	0x20000eac

08000a10 <TETRIS_main>:

void TETRIS_main() {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
	if (1) {
		// Initialising
		ArrayReset();
 8000a16:	f7ff fd61 	bl	80004dc <ArrayReset>
		Colour(6); // Set default text colour to white
 8000a1a:	2006      	movs	r0, #6
 8000a1c:	f004 ffa6 	bl	800596c <Colour>
		NextPiece = Random(18); // Generate the first tetromino
 8000a20:	2012      	movs	r0, #18
 8000a22:	f004 ff33 	bl	800588c <Random>
 8000a26:	4603      	mov	r3, r0
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	4b93      	ldr	r3, [pc, #588]	@ (8000c78 <TETRIS_main+0x268>)
 8000a2c:	801a      	strh	r2, [r3, #0]
		Level = 1;
 8000a2e:	4b93      	ldr	r3, [pc, #588]	@ (8000c7c <TETRIS_main+0x26c>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	601a      	str	r2, [r3, #0]
		tetrominoLocX = Random(16) + 2;
 8000a34:	2010      	movs	r0, #16
 8000a36:	f004 ff29 	bl	800588c <Random>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	3302      	adds	r3, #2
 8000a3e:	4a90      	ldr	r2, [pc, #576]	@ (8000c80 <TETRIS_main+0x270>)
 8000a40:	6013      	str	r3, [r2, #0]
		tetrominoLocY = 1;
 8000a42:	4b90      	ldr	r3, [pc, #576]	@ (8000c84 <TETRIS_main+0x274>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	601a      	str	r2, [r3, #0]
		colour = Random(5) + 1;
 8000a48:	2005      	movs	r0, #5
 8000a4a:	f004 ff1f 	bl	800588c <Random>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	3301      	adds	r3, #1
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	4b8c      	ldr	r3, [pc, #560]	@ (8000c88 <TETRIS_main+0x278>)
 8000a58:	801a      	strh	r2, [r3, #0]
		CurrentState = NextPiece;
 8000a5a:	4b87      	ldr	r3, [pc, #540]	@ (8000c78 <TETRIS_main+0x268>)
 8000a5c:	881a      	ldrh	r2, [r3, #0]
 8000a5e:	4b8b      	ldr	r3, [pc, #556]	@ (8000c8c <TETRIS_main+0x27c>)
 8000a60:	801a      	strh	r2, [r3, #0]

		BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000a62:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000a66:	f005 ffbf 	bl	80069e8 <BSP_LCD_Clear>
		khung();
 8000a6a:	f000 f929 	bl	8000cc0 <khung>

		while (TETRIS_Snake == 0) // Infinite loop (or game loop, technically)
 8000a6e:	e0f8      	b.n	8000c62 <TETRIS_main+0x252>
		{
			InputProcess();
 8000a70:	f7ff feac 	bl	80007cc <InputProcess>
			// Statement checks whether a new tetromino should be generated
			if (NewTetromino && !Pause)
 8000a74:	4b86      	ldr	r3, [pc, #536]	@ (8000c90 <TETRIS_main+0x280>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d06e      	beq.n	8000b5a <TETRIS_main+0x14a>
 8000a7c:	4b85      	ldr	r3, [pc, #532]	@ (8000c94 <TETRIS_main+0x284>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	f083 0301 	eor.w	r3, r3, #1
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d067      	beq.n	8000b5a <TETRIS_main+0x14a>
			{
				tetrominoLocX = Random(16) + 2;
 8000a8a:	2010      	movs	r0, #16
 8000a8c:	f004 fefe 	bl	800588c <Random>
 8000a90:	4603      	mov	r3, r0
 8000a92:	3302      	adds	r3, #2
 8000a94:	4a7a      	ldr	r2, [pc, #488]	@ (8000c80 <TETRIS_main+0x270>)
 8000a96:	6013      	str	r3, [r2, #0]
				tetrominoLocY = 1;
 8000a98:	4b7a      	ldr	r3, [pc, #488]	@ (8000c84 <TETRIS_main+0x274>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	601a      	str	r2, [r3, #0]
				colour = Random(5) + 1;
 8000a9e:	2005      	movs	r0, #5
 8000aa0:	f004 fef4 	bl	800588c <Random>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	4b76      	ldr	r3, [pc, #472]	@ (8000c88 <TETRIS_main+0x278>)
 8000aae:	801a      	strh	r2, [r3, #0]
				CurrentState = NextPiece;
 8000ab0:	4b71      	ldr	r3, [pc, #452]	@ (8000c78 <TETRIS_main+0x268>)
 8000ab2:	881a      	ldrh	r2, [r3, #0]
 8000ab4:	4b75      	ldr	r3, [pc, #468]	@ (8000c8c <TETRIS_main+0x27c>)
 8000ab6:	801a      	strh	r2, [r3, #0]
				NextPiece = Random(18);
 8000ab8:	2012      	movs	r0, #18
 8000aba:	f004 fee7 	bl	800588c <Random>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	4b6d      	ldr	r3, [pc, #436]	@ (8000c78 <TETRIS_main+0x268>)
 8000ac4:	801a      	strh	r2, [r3, #0]
				TETRIS_Score += CheckFullRow() * 5;
 8000ac6:	f7ff fe1b 	bl	8000700 <CheckFullRow>
 8000aca:	4602      	mov	r2, r0
 8000acc:	4613      	mov	r3, r2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	441a      	add	r2, r3
 8000ad2:	4b71      	ldr	r3, [pc, #452]	@ (8000c98 <TETRIS_main+0x288>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a6f      	ldr	r2, [pc, #444]	@ (8000c98 <TETRIS_main+0x288>)
 8000ada:	6013      	str	r3, [r2, #0]
				NewTetromino = false;
 8000adc:	4b6c      	ldr	r3, [pc, #432]	@ (8000c90 <TETRIS_main+0x280>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]

				khung();
 8000ae2:	f000 f8ed 	bl	8000cc0 <khung>
				Refresh();
 8000ae6:	f7ff fe5b 	bl	80007a0 <Refresh>

				// Print score
				TETRIS_PrintScore();
 8000aea:	f000 f933 	bl	8000d54 <TETRIS_PrintScore>

				// Print next piece
				BSP_LCD_SetFont(&Font12);
 8000aee:	486b      	ldr	r0, [pc, #428]	@ (8000c9c <TETRIS_main+0x28c>)
 8000af0:	f005 ff60 	bl	80069b4 <BSP_LCD_SetFont>
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	f005 ff2a 	bl	8006950 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000afc:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000b00:	f005 ff3e 	bl	8006980 <BSP_LCD_SetBackColor>
				BSP_LCD_DisplayStringAt(150, 15, (uint8_t *) "NEXT PIECE", LEFT_MODE);
 8000b04:	2303      	movs	r3, #3
 8000b06:	4a66      	ldr	r2, [pc, #408]	@ (8000ca0 <TETRIS_main+0x290>)
 8000b08:	210f      	movs	r1, #15
 8000b0a:	2096      	movs	r0, #150	@ 0x96
 8000b0c:	f005 ffd8 	bl	8006ac0 <BSP_LCD_DisplayStringAt>
				PrintNextPiece(30, 5);
 8000b10:	2105      	movs	r1, #5
 8000b12:	201e      	movs	r0, #30
 8000b14:	f004 f8ac 	bl	8004c70 <PrintNextPiece>

				// Print level

				//Statement increases level
				if (TETRIS_Score % 10 == 0 && TETRIS_Score > 0 && fullrow)
 8000b18:	4b5f      	ldr	r3, [pc, #380]	@ (8000c98 <TETRIS_main+0x288>)
 8000b1a:	6819      	ldr	r1, [r3, #0]
 8000b1c:	4b61      	ldr	r3, [pc, #388]	@ (8000ca4 <TETRIS_main+0x294>)
 8000b1e:	fb83 2301 	smull	r2, r3, r3, r1
 8000b22:	109a      	asrs	r2, r3, #2
 8000b24:	17cb      	asrs	r3, r1, #31
 8000b26:	1ad2      	subs	r2, r2, r3
 8000b28:	4613      	mov	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	1aca      	subs	r2, r1, r3
 8000b32:	2a00      	cmp	r2, #0
 8000b34:	d111      	bne.n	8000b5a <TETRIS_main+0x14a>
 8000b36:	4b58      	ldr	r3, [pc, #352]	@ (8000c98 <TETRIS_main+0x288>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	dd0d      	ble.n	8000b5a <TETRIS_main+0x14a>
 8000b3e:	4b5a      	ldr	r3, [pc, #360]	@ (8000ca8 <TETRIS_main+0x298>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d009      	beq.n	8000b5a <TETRIS_main+0x14a>
				{
					Level++;
 8000b46:	4b4d      	ldr	r3, [pc, #308]	@ (8000c7c <TETRIS_main+0x26c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	4a4b      	ldr	r2, [pc, #300]	@ (8000c7c <TETRIS_main+0x26c>)
 8000b4e:	6013      	str	r3, [r2, #0]
					FallingSpeed -= 20;
 8000b50:	4b56      	ldr	r3, [pc, #344]	@ (8000cac <TETRIS_main+0x29c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	3b14      	subs	r3, #20
 8000b56:	4a55      	ldr	r2, [pc, #340]	@ (8000cac <TETRIS_main+0x29c>)
 8000b58:	6013      	str	r3, [r2, #0]

			}

			// Statement controls the dropping speed of tetrominoes
			// The bigger the value, the slower the tetrominoes will drop
			if (DelayTime == FallingSpeed && !Pause)
 8000b5a:	4b55      	ldr	r3, [pc, #340]	@ (8000cb0 <TETRIS_main+0x2a0>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	4b53      	ldr	r3, [pc, #332]	@ (8000cac <TETRIS_main+0x29c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d111      	bne.n	8000b8a <TETRIS_main+0x17a>
 8000b66:	4b4b      	ldr	r3, [pc, #300]	@ (8000c94 <TETRIS_main+0x284>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	f083 0301 	eor.w	r3, r3, #1
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d00a      	beq.n	8000b8a <TETRIS_main+0x17a>
			{
				tetrominoLocY++;
 8000b74:	4b43      	ldr	r3, [pc, #268]	@ (8000c84 <TETRIS_main+0x274>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	4a42      	ldr	r2, [pc, #264]	@ (8000c84 <TETRIS_main+0x274>)
 8000b7c:	6013      	str	r3, [r2, #0]
				DelayTime = 0;
 8000b7e:	4b4c      	ldr	r3, [pc, #304]	@ (8000cb0 <TETRIS_main+0x2a0>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]

				Refresh();
 8000b84:	f7ff fe0c 	bl	80007a0 <Refresh>
 8000b88:	e00b      	b.n	8000ba2 <TETRIS_main+0x192>
			}
			else if (!Pause) DelayTime++;
 8000b8a:	4b42      	ldr	r3, [pc, #264]	@ (8000c94 <TETRIS_main+0x284>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	f083 0301 	eor.w	r3, r3, #1
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d004      	beq.n	8000ba2 <TETRIS_main+0x192>
 8000b98:	4b45      	ldr	r3, [pc, #276]	@ (8000cb0 <TETRIS_main+0x2a0>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	4a44      	ldr	r2, [pc, #272]	@ (8000cb0 <TETRIS_main+0x2a0>)
 8000ba0:	6013      	str	r3, [r2, #0]

			// Statement ends the current game
			// A.K.A "GAME OVER"
			for (int i = 1; i <= 20; i++)
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	e059      	b.n	8000c5c <TETRIS_main+0x24c>
				if (tetris[i][2] != 0)
 8000ba8:	4942      	ldr	r1, [pc, #264]	@ (8000cb4 <TETRIS_main+0x2a4>)
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	4613      	mov	r3, r2
 8000bae:	011b      	lsls	r3, r3, #4
 8000bb0:	1a9b      	subs	r3, r3, r2
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	440b      	add	r3, r1
 8000bb6:	3308      	adds	r3, #8
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d04b      	beq.n	8000c56 <TETRIS_main+0x246>
				{
					// Print "Game Over"
					BSP_LCD_SetFont(&Font12);
 8000bbe:	4837      	ldr	r0, [pc, #220]	@ (8000c9c <TETRIS_main+0x28c>)
 8000bc0:	f005 fef8 	bl	80069b4 <BSP_LCD_SetFont>
					BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	f005 fec2 	bl	8006950 <BSP_LCD_SetTextColor>
					BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000bcc:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000bd0:	f005 fed6 	bl	8006980 <BSP_LCD_SetBackColor>
					BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 35, (uint8_t *)"GAME OVER", LEFT_MODE);
 8000bd4:	f005 fe4c 	bl	8006870 <BSP_LCD_GetYSize>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	085b      	lsrs	r3, r3, #1
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	3323      	adds	r3, #35	@ 0x23
 8000be0:	b299      	uxth	r1, r3
 8000be2:	2303      	movs	r3, #3
 8000be4:	4a34      	ldr	r2, [pc, #208]	@ (8000cb8 <TETRIS_main+0x2a8>)
 8000be6:	2000      	movs	r0, #0
 8000be8:	f005 ff6a 	bl	8006ac0 <BSP_LCD_DisplayStringAt>
					Pause = true;
 8000bec:	4b29      	ldr	r3, [pc, #164]	@ (8000c94 <TETRIS_main+0x284>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	701a      	strb	r2, [r3, #0]
					if (isAnyKeyPressed() == 1) {
 8000bf2:	f004 fe73 	bl	80058dc <isAnyKeyPressed>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d12c      	bne.n	8000c56 <TETRIS_main+0x246>
						// Delete "Game Over"
						BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000bfc:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000c00:	f005 fea6 	bl	8006950 <BSP_LCD_SetTextColor>
						BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000c04:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000c08:	f005 feba 	bl	8006980 <BSP_LCD_SetBackColor>
						BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 35, (uint8_t *)"GAME OVER", LEFT_MODE);
 8000c0c:	f005 fe30 	bl	8006870 <BSP_LCD_GetYSize>
 8000c10:	4603      	mov	r3, r0
 8000c12:	085b      	lsrs	r3, r3, #1
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	3323      	adds	r3, #35	@ 0x23
 8000c18:	b299      	uxth	r1, r3
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	4a26      	ldr	r2, [pc, #152]	@ (8000cb8 <TETRIS_main+0x2a8>)
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f005 ff4e 	bl	8006ac0 <BSP_LCD_DisplayStringAt>
						Pause = false;
 8000c24:	4b1b      	ldr	r3, [pc, #108]	@ (8000c94 <TETRIS_main+0x284>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]
						ArrayReset();
 8000c2a:	f7ff fc57 	bl	80004dc <ArrayReset>
						PrintArray(1, 1);
 8000c2e:	2101      	movs	r1, #1
 8000c30:	2001      	movs	r0, #1
 8000c32:	f7ff fc9b 	bl	800056c <PrintArray>
						TETRIS_Score = 0;
 8000c36:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <TETRIS_main+0x288>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
						Level = 1;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <TETRIS_main+0x26c>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	601a      	str	r2, [r3, #0]
						NextPiece = Random(18);
 8000c42:	2012      	movs	r0, #18
 8000c44:	f004 fe22 	bl	800588c <Random>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <TETRIS_main+0x268>)
 8000c4e:	801a      	strh	r2, [r3, #0]
						NewTetromino = true;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <TETRIS_main+0x280>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i <= 20; i++)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b14      	cmp	r3, #20
 8000c60:	dda2      	ble.n	8000ba8 <TETRIS_main+0x198>
		while (TETRIS_Snake == 0) // Infinite loop (or game loop, technically)
 8000c62:	4b16      	ldr	r3, [pc, #88]	@ (8000cbc <TETRIS_main+0x2ac>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f43f af02 	beq.w	8000a70 <TETRIS_main+0x60>
					}
				}
		}
	}
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000eae 	.word	0x20000eae
 8000c7c:	20000004 	.word	0x20000004
 8000c80:	20000ea4 	.word	0x20000ea4
 8000c84:	20000ea8 	.word	0x20000ea8
 8000c88:	20000eb0 	.word	0x20000eb0
 8000c8c:	20000eac 	.word	0x20000eac
 8000c90:	2000000c 	.word	0x2000000c
 8000c94:	20000eb2 	.word	0x20000eb2
 8000c98:	20000ea0 	.word	0x20000ea0
 8000c9c:	20000060 	.word	0x20000060
 8000ca0:	0800aca4 	.word	0x0800aca4
 8000ca4:	66666667 	.word	0x66666667
 8000ca8:	20000eb3 	.word	0x20000eb3
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	20000090 	.word	0x20000090
 8000cb8:	0800acb0 	.word	0x0800acb0
 8000cbc:	2000108c 	.word	0x2000108c

08000cc0 <khung>:

void khung() {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 22; i++) {
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	e00a      	b.n	8000ce2 <khung+0x22>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	f005 fe3e 	bl	8006950 <BSP_LCD_SetTextColor>
		PrintXY(i, 0);
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f004 fe28 	bl	800592c <PrintXY>
	for (int i = 0; i < 22; i++) {
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	2b15      	cmp	r3, #21
 8000ce6:	ddf1      	ble.n	8000ccc <khung+0xc>
	}

	for (int y = 0; y < 22; y++) {
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	e019      	b.n	8000d22 <khung+0x62>
		for (int x = 0; x < 22; x++) {
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	e010      	b.n	8000d16 <khung+0x56>
			if (x == 0 || x == 21) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d002      	beq.n	8000d00 <khung+0x40>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b15      	cmp	r3, #21
 8000cfe:	d107      	bne.n	8000d10 <khung+0x50>
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f005 fe24 	bl	8006950 <BSP_LCD_SetTextColor>
				PrintXY(x, y);
 8000d08:	68b9      	ldr	r1, [r7, #8]
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f004 fe0e 	bl	800592c <PrintXY>
		for (int x = 0; x < 22; x++) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3301      	adds	r3, #1
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b15      	cmp	r3, #21
 8000d1a:	ddeb      	ble.n	8000cf4 <khung+0x34>
	for (int y = 0; y < 22; y++) {
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	2b15      	cmp	r3, #21
 8000d26:	dde2      	ble.n	8000cee <khung+0x2e>
			}
		}
	}

	for (int i = 0; i < 22; i++) {
 8000d28:	2300      	movs	r3, #0
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	e00a      	b.n	8000d44 <khung+0x84>
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d32:	f005 fe0d 	bl	8006950 <BSP_LCD_SetTextColor>
			PrintXY(i, 22);
 8000d36:	2116      	movs	r1, #22
 8000d38:	6838      	ldr	r0, [r7, #0]
 8000d3a:	f004 fdf7 	bl	800592c <PrintXY>
	for (int i = 0; i < 22; i++) {
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	3301      	adds	r3, #1
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	2b15      	cmp	r3, #21
 8000d48:	ddf1      	ble.n	8000d2e <khung+0x6e>
		}
}
 8000d4a:	bf00      	nop
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <TETRIS_PrintScore>:

void TETRIS_PrintScore() {
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b099      	sub	sp, #100	@ 0x64
 8000d58:	af00      	add	r7, sp, #0
	int Digit[20], Score_temp;

	Score_temp = TETRIS_Score;
 8000d5a:	4bb5      	ldr	r3, [pc, #724]	@ (8001030 <TETRIS_PrintScore+0x2dc>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	65fb      	str	r3, [r7, #92]	@ 0x5c

	BSP_LCD_SetFont(&Font12);
 8000d60:	48b4      	ldr	r0, [pc, #720]	@ (8001034 <TETRIS_PrintScore+0x2e0>)
 8000d62:	f005 fe27 	bl	80069b4 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000d66:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6a:	f005 fdf1 	bl	8006950 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000d6e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000d72:	f005 fe05 	bl	8006980 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 20, (uint8_t *) "SCORE:                ", LEFT_MODE);
 8000d76:	f005 fd7b 	bl	8006870 <BSP_LCD_GetYSize>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	085b      	lsrs	r3, r3, #1
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	3314      	adds	r3, #20
 8000d82:	b299      	uxth	r1, r3
 8000d84:	2303      	movs	r3, #3
 8000d86:	4aac      	ldr	r2, [pc, #688]	@ (8001038 <TETRIS_PrintScore+0x2e4>)
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f005 fe99 	bl	8006ac0 <BSP_LCD_DisplayStringAt>

	if (Score_temp == 0) {
 8000d8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d10c      	bne.n	8000dae <TETRIS_PrintScore+0x5a>
		BSP_LCD_DisplayStringAt(49, BSP_LCD_GetYSize() / 2 + 20, (uint8_t *) "0", LEFT_MODE);
 8000d94:	f005 fd6c 	bl	8006870 <BSP_LCD_GetYSize>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	085b      	lsrs	r3, r3, #1
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	3314      	adds	r3, #20
 8000da0:	b299      	uxth	r1, r3
 8000da2:	2303      	movs	r3, #3
 8000da4:	4aa5      	ldr	r2, [pc, #660]	@ (800103c <TETRIS_PrintScore+0x2e8>)
 8000da6:	2031      	movs	r0, #49	@ 0x31
 8000da8:	f005 fe8a 	bl	8006ac0 <BSP_LCD_DisplayStringAt>
				j++;
				break;
			}
		}
	}
}
 8000dac:	e13b      	b.n	8001026 <TETRIS_PrintScore+0x2d2>
		int n = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	65bb      	str	r3, [r7, #88]	@ 0x58
		while (Score_temp != 0) {
 8000db2:	e01c      	b.n	8000dee <TETRIS_PrintScore+0x9a>
			Digit[n] = Score_temp % 10;
 8000db4:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8000db6:	4ba2      	ldr	r3, [pc, #648]	@ (8001040 <TETRIS_PrintScore+0x2ec>)
 8000db8:	fb83 2301 	smull	r2, r3, r3, r1
 8000dbc:	109a      	asrs	r2, r3, #2
 8000dbe:	17cb      	asrs	r3, r1, #31
 8000dc0:	1ad2      	subs	r2, r2, r3
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4413      	add	r3, r2
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	1aca      	subs	r2, r1, r3
 8000dcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	3360      	adds	r3, #96	@ 0x60
 8000dd2:	443b      	add	r3, r7
 8000dd4:	f843 2c60 	str.w	r2, [r3, #-96]
			n++;
 8000dd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000dda:	3301      	adds	r3, #1
 8000ddc:	65bb      	str	r3, [r7, #88]	@ 0x58
			Score_temp /= 10;
 8000dde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000de0:	4a97      	ldr	r2, [pc, #604]	@ (8001040 <TETRIS_PrintScore+0x2ec>)
 8000de2:	fb82 1203 	smull	r1, r2, r2, r3
 8000de6:	1092      	asrs	r2, r2, #2
 8000de8:	17db      	asrs	r3, r3, #31
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while (Score_temp != 0) {
 8000dee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d1df      	bne.n	8000db4 <TETRIS_PrintScore+0x60>
		int j = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	657b      	str	r3, [r7, #84]	@ 0x54
		for (int i = n - 1; i >= 0; i--) {
 8000df8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	653b      	str	r3, [r7, #80]	@ 0x50
 8000dfe:	e10e      	b.n	800101e <TETRIS_PrintScore+0x2ca>
			switch (Digit[i]) {
 8000e00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	3360      	adds	r3, #96	@ 0x60
 8000e06:	443b      	add	r3, r7
 8000e08:	f853 3c60 	ldr.w	r3, [r3, #-96]
 8000e0c:	2b09      	cmp	r3, #9
 8000e0e:	f200 8103 	bhi.w	8001018 <TETRIS_PrintScore+0x2c4>
 8000e12:	a201      	add	r2, pc, #4	@ (adr r2, 8000e18 <TETRIS_PrintScore+0xc4>)
 8000e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e18:	08000e41 	.word	0x08000e41
 8000e1c:	08000e71 	.word	0x08000e71
 8000e20:	08000ea1 	.word	0x08000ea1
 8000e24:	08000ed1 	.word	0x08000ed1
 8000e28:	08000f01 	.word	0x08000f01
 8000e2c:	08000f31 	.word	0x08000f31
 8000e30:	08000f61 	.word	0x08000f61
 8000e34:	08000f91 	.word	0x08000f91
 8000e38:	08000fc1 	.word	0x08000fc1
 8000e3c:	08000fe9 	.word	0x08000fe9
				BSP_LCD_DisplayStringAt(49 + j*7, BSP_LCD_GetYSize() / 2 + 20, (uint8_t *) "0", LEFT_MODE);
 8000e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	461a      	mov	r2, r3
 8000e46:	00d2      	lsls	r2, r2, #3
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	3331      	adds	r3, #49	@ 0x31
 8000e4e:	b29c      	uxth	r4, r3
 8000e50:	f005 fd0e 	bl	8006870 <BSP_LCD_GetYSize>
 8000e54:	4603      	mov	r3, r0
 8000e56:	085b      	lsrs	r3, r3, #1
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	3314      	adds	r3, #20
 8000e5c:	b299      	uxth	r1, r3
 8000e5e:	2303      	movs	r3, #3
 8000e60:	4a76      	ldr	r2, [pc, #472]	@ (800103c <TETRIS_PrintScore+0x2e8>)
 8000e62:	4620      	mov	r0, r4
 8000e64:	f005 fe2c 	bl	8006ac0 <BSP_LCD_DisplayStringAt>
				j++;
 8000e68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	657b      	str	r3, [r7, #84]	@ 0x54
				break;
 8000e6e:	e0d3      	b.n	8001018 <TETRIS_PrintScore+0x2c4>
				BSP_LCD_DisplayStringAt(49 + j*7, BSP_LCD_GetYSize() / 2 + 20, (uint8_t *) "1", LEFT_MODE);
 8000e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	461a      	mov	r2, r3
 8000e76:	00d2      	lsls	r2, r2, #3
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	3331      	adds	r3, #49	@ 0x31
 8000e7e:	b29c      	uxth	r4, r3
 8000e80:	f005 fcf6 	bl	8006870 <BSP_LCD_GetYSize>
 8000e84:	4603      	mov	r3, r0
 8000e86:	085b      	lsrs	r3, r3, #1
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	3314      	adds	r3, #20
 8000e8c:	b299      	uxth	r1, r3
 8000e8e:	2303      	movs	r3, #3
 8000e90:	4a6c      	ldr	r2, [pc, #432]	@ (8001044 <TETRIS_PrintScore+0x2f0>)
 8000e92:	4620      	mov	r0, r4
 8000e94:	f005 fe14 	bl	8006ac0 <BSP_LCD_DisplayStringAt>
				j++;
 8000e98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	657b      	str	r3, [r7, #84]	@ 0x54
				break;
 8000e9e:	e0bb      	b.n	8001018 <TETRIS_PrintScore+0x2c4>
				BSP_LCD_DisplayStringAt(49 + j*7, BSP_LCD_GetYSize() / 2 + 20, (uint8_t *) "2", LEFT_MODE);
 8000ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	00d2      	lsls	r2, r2, #3
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	3331      	adds	r3, #49	@ 0x31
 8000eae:	b29c      	uxth	r4, r3
 8000eb0:	f005 fcde 	bl	8006870 <BSP_LCD_GetYSize>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	085b      	lsrs	r3, r3, #1
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	3314      	adds	r3, #20
 8000ebc:	b299      	uxth	r1, r3
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	4a61      	ldr	r2, [pc, #388]	@ (8001048 <TETRIS_PrintScore+0x2f4>)
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	f005 fdfc 	bl	8006ac0 <BSP_LCD_DisplayStringAt>
				j++;
 8000ec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000eca:	3301      	adds	r3, #1
 8000ecc:	657b      	str	r3, [r7, #84]	@ 0x54
				break;
 8000ece:	e0a3      	b.n	8001018 <TETRIS_PrintScore+0x2c4>
				BSP_LCD_DisplayStringAt(49 + j*7, BSP_LCD_GetYSize() / 2 + 20, (uint8_t *) "3", LEFT_MODE);
 8000ed0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	00d2      	lsls	r2, r2, #3
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	3331      	adds	r3, #49	@ 0x31
 8000ede:	b29c      	uxth	r4, r3
 8000ee0:	f005 fcc6 	bl	8006870 <BSP_LCD_GetYSize>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	085b      	lsrs	r3, r3, #1
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	3314      	adds	r3, #20
 8000eec:	b299      	uxth	r1, r3
 8000eee:	2303      	movs	r3, #3
 8000ef0:	4a56      	ldr	r2, [pc, #344]	@ (800104c <TETRIS_PrintScore+0x2f8>)
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	f005 fde4 	bl	8006ac0 <BSP_LCD_DisplayStringAt>
				j++;
 8000ef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000efa:	3301      	adds	r3, #1
 8000efc:	657b      	str	r3, [r7, #84]	@ 0x54
				break;
 8000efe:	e08b      	b.n	8001018 <TETRIS_PrintScore+0x2c4>
				BSP_LCD_DisplayStringAt(49 + j*7, BSP_LCD_GetYSize() / 2 + 20, (uint8_t *) "4", LEFT_MODE);
 8000f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	461a      	mov	r2, r3
 8000f06:	00d2      	lsls	r2, r2, #3
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	3331      	adds	r3, #49	@ 0x31
 8000f0e:	b29c      	uxth	r4, r3
 8000f10:	f005 fcae 	bl	8006870 <BSP_LCD_GetYSize>
 8000f14:	4603      	mov	r3, r0
 8000f16:	085b      	lsrs	r3, r3, #1
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	3314      	adds	r3, #20
 8000f1c:	b299      	uxth	r1, r3
 8000f1e:	2303      	movs	r3, #3
 8000f20:	4a4b      	ldr	r2, [pc, #300]	@ (8001050 <TETRIS_PrintScore+0x2fc>)
 8000f22:	4620      	mov	r0, r4
 8000f24:	f005 fdcc 	bl	8006ac0 <BSP_LCD_DisplayStringAt>
				j++;
 8000f28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	657b      	str	r3, [r7, #84]	@ 0x54
				break;
 8000f2e:	e073      	b.n	8001018 <TETRIS_PrintScore+0x2c4>
				BSP_LCD_DisplayStringAt(49 + j*7, BSP_LCD_GetYSize() / 2 + 20, (uint8_t *) "5", LEFT_MODE);
 8000f30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	461a      	mov	r2, r3
 8000f36:	00d2      	lsls	r2, r2, #3
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	3331      	adds	r3, #49	@ 0x31
 8000f3e:	b29c      	uxth	r4, r3
 8000f40:	f005 fc96 	bl	8006870 <BSP_LCD_GetYSize>
 8000f44:	4603      	mov	r3, r0
 8000f46:	085b      	lsrs	r3, r3, #1
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	3314      	adds	r3, #20
 8000f4c:	b299      	uxth	r1, r3
 8000f4e:	2303      	movs	r3, #3
 8000f50:	4a40      	ldr	r2, [pc, #256]	@ (8001054 <TETRIS_PrintScore+0x300>)
 8000f52:	4620      	mov	r0, r4
 8000f54:	f005 fdb4 	bl	8006ac0 <BSP_LCD_DisplayStringAt>
				j++;
 8000f58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	657b      	str	r3, [r7, #84]	@ 0x54
				break;
 8000f5e:	e05b      	b.n	8001018 <TETRIS_PrintScore+0x2c4>
				BSP_LCD_DisplayStringAt(49 + j*7, BSP_LCD_GetYSize() / 2 + 20, (uint8_t *) "6", LEFT_MODE);
 8000f60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	461a      	mov	r2, r3
 8000f66:	00d2      	lsls	r2, r2, #3
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	3331      	adds	r3, #49	@ 0x31
 8000f6e:	b29c      	uxth	r4, r3
 8000f70:	f005 fc7e 	bl	8006870 <BSP_LCD_GetYSize>
 8000f74:	4603      	mov	r3, r0
 8000f76:	085b      	lsrs	r3, r3, #1
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	3314      	adds	r3, #20
 8000f7c:	b299      	uxth	r1, r3
 8000f7e:	2303      	movs	r3, #3
 8000f80:	4a35      	ldr	r2, [pc, #212]	@ (8001058 <TETRIS_PrintScore+0x304>)
 8000f82:	4620      	mov	r0, r4
 8000f84:	f005 fd9c 	bl	8006ac0 <BSP_LCD_DisplayStringAt>
				j++;
 8000f88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	657b      	str	r3, [r7, #84]	@ 0x54
				break;
 8000f8e:	e043      	b.n	8001018 <TETRIS_PrintScore+0x2c4>
				BSP_LCD_DisplayStringAt(49 + j*7, BSP_LCD_GetYSize() / 2 + 20, (uint8_t *) "7", LEFT_MODE);
 8000f90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	461a      	mov	r2, r3
 8000f96:	00d2      	lsls	r2, r2, #3
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	3331      	adds	r3, #49	@ 0x31
 8000f9e:	b29c      	uxth	r4, r3
 8000fa0:	f005 fc66 	bl	8006870 <BSP_LCD_GetYSize>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	085b      	lsrs	r3, r3, #1
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	3314      	adds	r3, #20
 8000fac:	b299      	uxth	r1, r3
 8000fae:	2303      	movs	r3, #3
 8000fb0:	4a2a      	ldr	r2, [pc, #168]	@ (800105c <TETRIS_PrintScore+0x308>)
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	f005 fd84 	bl	8006ac0 <BSP_LCD_DisplayStringAt>
				j++;
 8000fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fba:	3301      	adds	r3, #1
 8000fbc:	657b      	str	r3, [r7, #84]	@ 0x54
				break;
 8000fbe:	e02b      	b.n	8001018 <TETRIS_PrintScore+0x2c4>
				BSP_LCD_DisplayStringAt(49 + j, BSP_LCD_GetYSize() / 2 + 20, (uint8_t *) "8", LEFT_MODE);
 8000fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	3331      	adds	r3, #49	@ 0x31
 8000fc6:	b29c      	uxth	r4, r3
 8000fc8:	f005 fc52 	bl	8006870 <BSP_LCD_GetYSize>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	085b      	lsrs	r3, r3, #1
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	3314      	adds	r3, #20
 8000fd4:	b299      	uxth	r1, r3
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	4a21      	ldr	r2, [pc, #132]	@ (8001060 <TETRIS_PrintScore+0x30c>)
 8000fda:	4620      	mov	r0, r4
 8000fdc:	f005 fd70 	bl	8006ac0 <BSP_LCD_DisplayStringAt>
				j++;
 8000fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	657b      	str	r3, [r7, #84]	@ 0x54
				break;
 8000fe6:	e017      	b.n	8001018 <TETRIS_PrintScore+0x2c4>
				BSP_LCD_DisplayStringAt(49 + j*7, BSP_LCD_GetYSize() / 2 + 20, (uint8_t *) "9", LEFT_MODE);
 8000fe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	461a      	mov	r2, r3
 8000fee:	00d2      	lsls	r2, r2, #3
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	3331      	adds	r3, #49	@ 0x31
 8000ff6:	b29c      	uxth	r4, r3
 8000ff8:	f005 fc3a 	bl	8006870 <BSP_LCD_GetYSize>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	085b      	lsrs	r3, r3, #1
 8001000:	b29b      	uxth	r3, r3
 8001002:	3314      	adds	r3, #20
 8001004:	b299      	uxth	r1, r3
 8001006:	2303      	movs	r3, #3
 8001008:	4a16      	ldr	r2, [pc, #88]	@ (8001064 <TETRIS_PrintScore+0x310>)
 800100a:	4620      	mov	r0, r4
 800100c:	f005 fd58 	bl	8006ac0 <BSP_LCD_DisplayStringAt>
				j++;
 8001010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001012:	3301      	adds	r3, #1
 8001014:	657b      	str	r3, [r7, #84]	@ 0x54
				break;
 8001016:	bf00      	nop
		for (int i = n - 1; i >= 0; i--) {
 8001018:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800101a:	3b01      	subs	r3, #1
 800101c:	653b      	str	r3, [r7, #80]	@ 0x50
 800101e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001020:	2b00      	cmp	r3, #0
 8001022:	f6bf aeed 	bge.w	8000e00 <TETRIS_PrintScore+0xac>
}
 8001026:	bf00      	nop
 8001028:	3764      	adds	r7, #100	@ 0x64
 800102a:	46bd      	mov	sp, r7
 800102c:	bd90      	pop	{r4, r7, pc}
 800102e:	bf00      	nop
 8001030:	20000ea0 	.word	0x20000ea0
 8001034:	20000060 	.word	0x20000060
 8001038:	0800acbc 	.word	0x0800acbc
 800103c:	0800acd4 	.word	0x0800acd4
 8001040:	66666667 	.word	0x66666667
 8001044:	0800acd8 	.word	0x0800acd8
 8001048:	0800acdc 	.word	0x0800acdc
 800104c:	0800ace0 	.word	0x0800ace0
 8001050:	0800ace4 	.word	0x0800ace4
 8001054:	0800ace8 	.word	0x0800ace8
 8001058:	0800acec 	.word	0x0800acec
 800105c:	0800acf0 	.word	0x0800acf0
 8001060:	0800acf4 	.word	0x0800acf4
 8001064:	0800acf8 	.word	0x0800acf8

08001068 <BlockI1>:
#include "TETRIS.h"

// Functions that draw Tetrominoes

void BlockI1(int x, int y)
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
	// Print the block on the screen
	PrintXY(x + 1, y + 1);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	1c5a      	adds	r2, r3, #1
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	3301      	adds	r3, #1
 800107a:	4619      	mov	r1, r3
 800107c:	4610      	mov	r0, r2
 800107e:	f004 fc55 	bl	800592c <PrintXY>
	PrintXY(x, y + 1);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	4619      	mov	r1, r3
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f004 fc4f 	bl	800592c <PrintXY>
	PrintXY(x + 2, y + 1);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	1c9a      	adds	r2, r3, #2
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	4619      	mov	r1, r3
 8001098:	4610      	mov	r0, r2
 800109a:	f004 fc47 	bl	800592c <PrintXY>
	PrintXY(x + 3, y + 1);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	1cda      	adds	r2, r3, #3
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	3301      	adds	r3, #1
 80010a6:	4619      	mov	r1, r3
 80010a8:	4610      	mov	r0, r2
 80010aa:	f004 fc3f 	bl	800592c <PrintXY>

	CurrentState = 1;
 80010ae:	4b91      	ldr	r3, [pc, #580]	@ (80012f4 <BlockI1+0x28c>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 20 ||
 80010b4:	4b90      	ldr	r3, [pc, #576]	@ (80012f8 <BlockI1+0x290>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b13      	cmp	r3, #19
 80010ba:	dc3e      	bgt.n	800113a <BlockI1+0xd2>
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0 ||
 80010bc:	4b8f      	ldr	r3, [pc, #572]	@ (80012fc <BlockI1+0x294>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b8d      	ldr	r3, [pc, #564]	@ (80012f8 <BlockI1+0x290>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	1c99      	adds	r1, r3, #2
 80010c6:	488e      	ldr	r0, [pc, #568]	@ (8001300 <BlockI1+0x298>)
 80010c8:	4613      	mov	r3, r2
 80010ca:	011b      	lsls	r3, r3, #4
 80010cc:	1a9b      	subs	r3, r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	440b      	add	r3, r1
 80010d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 20 ||
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d12f      	bne.n	800113a <BlockI1+0xd2>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 80010da:	4b88      	ldr	r3, [pc, #544]	@ (80012fc <BlockI1+0x294>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	4b85      	ldr	r3, [pc, #532]	@ (80012f8 <BlockI1+0x290>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	1c99      	adds	r1, r3, #2
 80010e6:	4886      	ldr	r0, [pc, #536]	@ (8001300 <BlockI1+0x298>)
 80010e8:	4613      	mov	r3, r2
 80010ea:	011b      	lsls	r3, r3, #4
 80010ec:	1a9b      	subs	r3, r3, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	440b      	add	r3, r1
 80010f2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0 ||
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d11f      	bne.n	800113a <BlockI1+0xd2>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] != 0 ||
 80010fa:	4b80      	ldr	r3, [pc, #512]	@ (80012fc <BlockI1+0x294>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	1c9a      	adds	r2, r3, #2
 8001100:	4b7d      	ldr	r3, [pc, #500]	@ (80012f8 <BlockI1+0x290>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	1c99      	adds	r1, r3, #2
 8001106:	487e      	ldr	r0, [pc, #504]	@ (8001300 <BlockI1+0x298>)
 8001108:	4613      	mov	r3, r2
 800110a:	011b      	lsls	r3, r3, #4
 800110c:	1a9b      	subs	r3, r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	440b      	add	r3, r1
 8001112:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 8001116:	2b00      	cmp	r3, #0
 8001118:	d10f      	bne.n	800113a <BlockI1+0xd2>
		tetris[tetrominoLocX + 3][tetrominoLocY + 2] != 0)
 800111a:	4b78      	ldr	r3, [pc, #480]	@ (80012fc <BlockI1+0x294>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	1cda      	adds	r2, r3, #3
 8001120:	4b75      	ldr	r3, [pc, #468]	@ (80012f8 <BlockI1+0x290>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	1c99      	adds	r1, r3, #2
 8001126:	4876      	ldr	r0, [pc, #472]	@ (8001300 <BlockI1+0x298>)
 8001128:	4613      	mov	r3, r2
 800112a:	011b      	lsls	r3, r3, #4
 800112c:	1a9b      	subs	r3, r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	440b      	add	r3, r1
 8001132:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] != 0 ||
 8001136:	2b00      	cmp	r3, #0
 8001138:	d04f      	beq.n	80011da <BlockI1+0x172>
	{
		while (isDownKey() == 1);
 800113a:	bf00      	nop
 800113c:	f004 fb70 	bl	8005820 <isDownKey>
 8001140:	4603      	mov	r3, r0
 8001142:	2b01      	cmp	r3, #1
 8001144:	d0fa      	beq.n	800113c <BlockI1+0xd4>
		NewTetromino = true;
 8001146:	4b6f      	ldr	r3, [pc, #444]	@ (8001304 <BlockI1+0x29c>)
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 800114c:	4b6e      	ldr	r3, [pc, #440]	@ (8001308 <BlockI1+0x2a0>)
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 8001152:	4b6e      	ldr	r3, [pc, #440]	@ (800130c <BlockI1+0x2a4>)
 8001154:	8818      	ldrh	r0, [r3, #0]
 8001156:	4b69      	ldr	r3, [pc, #420]	@ (80012fc <BlockI1+0x294>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	1c5a      	adds	r2, r3, #1
 800115c:	4b66      	ldr	r3, [pc, #408]	@ (80012f8 <BlockI1+0x290>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	1c59      	adds	r1, r3, #1
 8001162:	4604      	mov	r4, r0
 8001164:	4866      	ldr	r0, [pc, #408]	@ (8001300 <BlockI1+0x298>)
 8001166:	4613      	mov	r3, r2
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	1a9b      	subs	r3, r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	440b      	add	r3, r1
 8001170:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] = colour;
 8001174:	4b65      	ldr	r3, [pc, #404]	@ (800130c <BlockI1+0x2a4>)
 8001176:	8818      	ldrh	r0, [r3, #0]
 8001178:	4b60      	ldr	r3, [pc, #384]	@ (80012fc <BlockI1+0x294>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b5e      	ldr	r3, [pc, #376]	@ (80012f8 <BlockI1+0x290>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	1c59      	adds	r1, r3, #1
 8001182:	4604      	mov	r4, r0
 8001184:	485e      	ldr	r0, [pc, #376]	@ (8001300 <BlockI1+0x298>)
 8001186:	4613      	mov	r3, r2
 8001188:	011b      	lsls	r3, r3, #4
 800118a:	1a9b      	subs	r3, r3, r2
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	440b      	add	r3, r1
 8001190:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] = colour;
 8001194:	4b5d      	ldr	r3, [pc, #372]	@ (800130c <BlockI1+0x2a4>)
 8001196:	8818      	ldrh	r0, [r3, #0]
 8001198:	4b58      	ldr	r3, [pc, #352]	@ (80012fc <BlockI1+0x294>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	1c9a      	adds	r2, r3, #2
 800119e:	4b56      	ldr	r3, [pc, #344]	@ (80012f8 <BlockI1+0x290>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	1c59      	adds	r1, r3, #1
 80011a4:	4604      	mov	r4, r0
 80011a6:	4856      	ldr	r0, [pc, #344]	@ (8001300 <BlockI1+0x298>)
 80011a8:	4613      	mov	r3, r2
 80011aa:	011b      	lsls	r3, r3, #4
 80011ac:	1a9b      	subs	r3, r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	440b      	add	r3, r1
 80011b2:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] = colour;
 80011b6:	4b55      	ldr	r3, [pc, #340]	@ (800130c <BlockI1+0x2a4>)
 80011b8:	8818      	ldrh	r0, [r3, #0]
 80011ba:	4b50      	ldr	r3, [pc, #320]	@ (80012fc <BlockI1+0x294>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	1cda      	adds	r2, r3, #3
 80011c0:	4b4d      	ldr	r3, [pc, #308]	@ (80012f8 <BlockI1+0x290>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	1c59      	adds	r1, r3, #1
 80011c6:	4604      	mov	r4, r0
 80011c8:	484d      	ldr	r0, [pc, #308]	@ (8001300 <BlockI1+0x298>)
 80011ca:	4613      	mov	r3, r2
 80011cc:	011b      	lsls	r3, r3, #4
 80011ce:	1a9b      	subs	r3, r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	440b      	add	r3, r1
 80011d4:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 80011d8:	e002      	b.n	80011e0 <BlockI1+0x178>
	}
	else CanMoveDown = true;
 80011da:	4b4b      	ldr	r3, [pc, #300]	@ (8001308 <BlockI1+0x2a0>)
 80011dc:	2201      	movs	r2, #1
 80011de:	701a      	strb	r2, [r3, #0]

	// Statement checks whether the tetromino could move left
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0		&&
 80011e0:	4b46      	ldr	r3, [pc, #280]	@ (80012fc <BlockI1+0x294>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b44      	ldr	r3, [pc, #272]	@ (80012f8 <BlockI1+0x290>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	1c59      	adds	r1, r3, #1
 80011ea:	4845      	ldr	r0, [pc, #276]	@ (8001300 <BlockI1+0x298>)
 80011ec:	4613      	mov	r3, r2
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	1a9b      	subs	r3, r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	440b      	add	r3, r1
 80011f6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d133      	bne.n	8001266 <BlockI1+0x1fe>
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 	&&
 80011fe:	4b3f      	ldr	r3, [pc, #252]	@ (80012fc <BlockI1+0x294>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	1e5a      	subs	r2, r3, #1
 8001204:	4b3c      	ldr	r3, [pc, #240]	@ (80012f8 <BlockI1+0x290>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	1c59      	adds	r1, r3, #1
 800120a:	483d      	ldr	r0, [pc, #244]	@ (8001300 <BlockI1+0x298>)
 800120c:	4613      	mov	r3, r2
 800120e:	011b      	lsls	r3, r3, #4
 8001210:	1a9b      	subs	r3, r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	440b      	add	r3, r1
 8001216:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0		&&
 800121a:	2b00      	cmp	r3, #0
 800121c:	d123      	bne.n	8001266 <BlockI1+0x1fe>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 	&&
 800121e:	4b37      	ldr	r3, [pc, #220]	@ (80012fc <BlockI1+0x294>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	4b34      	ldr	r3, [pc, #208]	@ (80012f8 <BlockI1+0x290>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	1c59      	adds	r1, r3, #1
 800122a:	4835      	ldr	r0, [pc, #212]	@ (8001300 <BlockI1+0x298>)
 800122c:	4613      	mov	r3, r2
 800122e:	011b      	lsls	r3, r3, #4
 8001230:	1a9b      	subs	r3, r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	440b      	add	r3, r1
 8001236:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 	&&
 800123a:	2b00      	cmp	r3, #0
 800123c:	d113      	bne.n	8001266 <BlockI1+0x1fe>
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0
 800123e:	4b2f      	ldr	r3, [pc, #188]	@ (80012fc <BlockI1+0x294>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	1c9a      	adds	r2, r3, #2
 8001244:	4b2c      	ldr	r3, [pc, #176]	@ (80012f8 <BlockI1+0x290>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	1c59      	adds	r1, r3, #1
 800124a:	482d      	ldr	r0, [pc, #180]	@ (8001300 <BlockI1+0x298>)
 800124c:	4613      	mov	r3, r2
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	1a9b      	subs	r3, r3, r2
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	440b      	add	r3, r1
 8001256:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 	&&
 800125a:	2b00      	cmp	r3, #0
 800125c:	d103      	bne.n	8001266 <BlockI1+0x1fe>
	)
		CanMoveLeft = true;
 800125e:	4b2c      	ldr	r3, [pc, #176]	@ (8001310 <BlockI1+0x2a8>)
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
 8001264:	e002      	b.n	800126c <BlockI1+0x204>
	else CanMoveLeft = false;
 8001266:	4b2a      	ldr	r3, [pc, #168]	@ (8001310 <BlockI1+0x2a8>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]

	//Statement checks whether the tetromino could move right
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0	&&
 800126c:	4b23      	ldr	r3, [pc, #140]	@ (80012fc <BlockI1+0x294>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	1c9a      	adds	r2, r3, #2
 8001272:	4b21      	ldr	r3, [pc, #132]	@ (80012f8 <BlockI1+0x290>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	1c59      	adds	r1, r3, #1
 8001278:	4821      	ldr	r0, [pc, #132]	@ (8001300 <BlockI1+0x298>)
 800127a:	4613      	mov	r3, r2
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	1a9b      	subs	r3, r3, r2
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	440b      	add	r3, r1
 8001284:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d145      	bne.n	8001318 <BlockI1+0x2b0>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 	&&
 800128c:	4b1b      	ldr	r3, [pc, #108]	@ (80012fc <BlockI1+0x294>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	4b19      	ldr	r3, [pc, #100]	@ (80012f8 <BlockI1+0x290>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	1c59      	adds	r1, r3, #1
 8001298:	4819      	ldr	r0, [pc, #100]	@ (8001300 <BlockI1+0x298>)
 800129a:	4613      	mov	r3, r2
 800129c:	011b      	lsls	r3, r3, #4
 800129e:	1a9b      	subs	r3, r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	440b      	add	r3, r1
 80012a4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0	&&
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d135      	bne.n	8001318 <BlockI1+0x2b0>
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 	&&
 80012ac:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <BlockI1+0x294>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	1cda      	adds	r2, r3, #3
 80012b2:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <BlockI1+0x290>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	1c59      	adds	r1, r3, #1
 80012b8:	4811      	ldr	r0, [pc, #68]	@ (8001300 <BlockI1+0x298>)
 80012ba:	4613      	mov	r3, r2
 80012bc:	011b      	lsls	r3, r3, #4
 80012be:	1a9b      	subs	r3, r3, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	440b      	add	r3, r1
 80012c4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 	&&
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d125      	bne.n	8001318 <BlockI1+0x2b0>
		tetris[tetrominoLocX + 4][tetrominoLocY + 1] == 0
 80012cc:	4b0b      	ldr	r3, [pc, #44]	@ (80012fc <BlockI1+0x294>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	1d1a      	adds	r2, r3, #4
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <BlockI1+0x290>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	1c59      	adds	r1, r3, #1
 80012d8:	4809      	ldr	r0, [pc, #36]	@ (8001300 <BlockI1+0x298>)
 80012da:	4613      	mov	r3, r2
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	1a9b      	subs	r3, r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	440b      	add	r3, r1
 80012e4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 	&&
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d115      	bne.n	8001318 <BlockI1+0x2b0>
	)
		CanMoveRight = true;
 80012ec:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <BlockI1+0x2ac>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
 80012f2:	e014      	b.n	800131e <BlockI1+0x2b6>
 80012f4:	20000eac 	.word	0x20000eac
 80012f8:	20000ea8 	.word	0x20000ea8
 80012fc:	20000ea4 	.word	0x20000ea4
 8001300:	20000090 	.word	0x20000090
 8001304:	2000000c 	.word	0x2000000c
 8001308:	2000000f 	.word	0x2000000f
 800130c:	20000eb0 	.word	0x20000eb0
 8001310:	2000000e 	.word	0x2000000e
 8001314:	2000000d 	.word	0x2000000d
	else CanMoveRight = false;
 8001318:	4b26      	ldr	r3, [pc, #152]	@ (80013b4 <BlockI1+0x34c>)
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]

	//Statement checks whether the tetromino could rotate (or switch state technically)
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 800131e:	4b26      	ldr	r3, [pc, #152]	@ (80013b8 <BlockI1+0x350>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	4b25      	ldr	r3, [pc, #148]	@ (80013bc <BlockI1+0x354>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	1c59      	adds	r1, r3, #1
 800132a:	4825      	ldr	r0, [pc, #148]	@ (80013c0 <BlockI1+0x358>)
 800132c:	4613      	mov	r3, r2
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	1a9b      	subs	r3, r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	440b      	add	r3, r1
 8001336:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d132      	bne.n	80013a4 <BlockI1+0x33c>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 800133e:	4b1e      	ldr	r3, [pc, #120]	@ (80013b8 <BlockI1+0x350>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	4b1d      	ldr	r3, [pc, #116]	@ (80013bc <BlockI1+0x354>)
 8001346:	6819      	ldr	r1, [r3, #0]
 8001348:	481d      	ldr	r0, [pc, #116]	@ (80013c0 <BlockI1+0x358>)
 800134a:	4613      	mov	r3, r2
 800134c:	011b      	lsls	r3, r3, #4
 800134e:	1a9b      	subs	r3, r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	440b      	add	r3, r1
 8001354:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8001358:	2b00      	cmp	r3, #0
 800135a:	d123      	bne.n	80013a4 <BlockI1+0x33c>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 800135c:	4b16      	ldr	r3, [pc, #88]	@ (80013b8 <BlockI1+0x350>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	1c5a      	adds	r2, r3, #1
 8001362:	4b16      	ldr	r3, [pc, #88]	@ (80013bc <BlockI1+0x354>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	1c99      	adds	r1, r3, #2
 8001368:	4815      	ldr	r0, [pc, #84]	@ (80013c0 <BlockI1+0x358>)
 800136a:	4613      	mov	r3, r2
 800136c:	011b      	lsls	r3, r3, #4
 800136e:	1a9b      	subs	r3, r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	440b      	add	r3, r1
 8001374:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 8001378:	2b00      	cmp	r3, #0
 800137a:	d113      	bne.n	80013a4 <BlockI1+0x33c>
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] == 0)
 800137c:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <BlockI1+0x350>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	1c5a      	adds	r2, r3, #1
 8001382:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <BlockI1+0x354>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	1cd9      	adds	r1, r3, #3
 8001388:	480d      	ldr	r0, [pc, #52]	@ (80013c0 <BlockI1+0x358>)
 800138a:	4613      	mov	r3, r2
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	1a9b      	subs	r3, r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	440b      	add	r3, r1
 8001394:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 8001398:	2b00      	cmp	r3, #0
 800139a:	d103      	bne.n	80013a4 <BlockI1+0x33c>
		CanRotate = true;
 800139c:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <BlockI1+0x35c>)
 800139e:	2201      	movs	r2, #1
 80013a0:	701a      	strb	r2, [r3, #0]
 80013a2:	e003      	b.n	80013ac <BlockI1+0x344>
	else CanRotate = false;
 80013a4:	4b07      	ldr	r3, [pc, #28]	@ (80013c4 <BlockI1+0x35c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
	// Print collision points
	//PrintXY(tetrominoLocX, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 3, tetrominoLocY + 2); cout << char(248);
}
 80013aa:	bf00      	nop
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd90      	pop	{r4, r7, pc}
 80013b4:	2000000d 	.word	0x2000000d
 80013b8:	20000ea4 	.word	0x20000ea4
 80013bc:	20000ea8 	.word	0x20000ea8
 80013c0:	20000090 	.word	0x20000090
 80013c4:	20000010 	.word	0x20000010

080013c8 <BlockI2>:

void BlockI2(int x, int y)
{
 80013c8:	b590      	push	{r4, r7, lr}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	1c5a      	adds	r2, r3, #1
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	3301      	adds	r3, #1
 80013da:	4619      	mov	r1, r3
 80013dc:	4610      	mov	r0, r2
 80013de:	f004 faa5 	bl	800592c <PrintXY>
	PrintXY(x + 1, y);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3301      	adds	r3, #1
 80013e6:	6839      	ldr	r1, [r7, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f004 fa9f 	bl	800592c <PrintXY>
	PrintXY(x + 1, y + 2);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	1c5a      	adds	r2, r3, #1
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	3302      	adds	r3, #2
 80013f6:	4619      	mov	r1, r3
 80013f8:	4610      	mov	r0, r2
 80013fa:	f004 fa97 	bl	800592c <PrintXY>
	PrintXY(x + 1, y + 3);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	1c5a      	adds	r2, r3, #1
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	3303      	adds	r3, #3
 8001406:	4619      	mov	r1, r3
 8001408:	4610      	mov	r0, r2
 800140a:	f004 fa8f 	bl	800592c <PrintXY>

	CurrentState = 2;
 800140e:	4b9e      	ldr	r3, [pc, #632]	@ (8001688 <BlockI2+0x2c0>)
 8001410:	2202      	movs	r2, #2
 8001412:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 18 ||
 8001414:	4b9d      	ldr	r3, [pc, #628]	@ (800168c <BlockI2+0x2c4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b11      	cmp	r3, #17
 800141a:	dc0f      	bgt.n	800143c <BlockI2+0x74>
		tetris[tetrominoLocX + 1][tetrominoLocY + 4] != 0)
 800141c:	4b9c      	ldr	r3, [pc, #624]	@ (8001690 <BlockI2+0x2c8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	1c5a      	adds	r2, r3, #1
 8001422:	4b9a      	ldr	r3, [pc, #616]	@ (800168c <BlockI2+0x2c4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	1d19      	adds	r1, r3, #4
 8001428:	489a      	ldr	r0, [pc, #616]	@ (8001694 <BlockI2+0x2cc>)
 800142a:	4613      	mov	r3, r2
 800142c:	011b      	lsls	r3, r3, #4
 800142e:	1a9b      	subs	r3, r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	440b      	add	r3, r1
 8001434:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 18 ||
 8001438:	2b00      	cmp	r3, #0
 800143a:	d04f      	beq.n	80014dc <BlockI2+0x114>
	{
		while (isDownKey() == 1);
 800143c:	bf00      	nop
 800143e:	f004 f9ef 	bl	8005820 <isDownKey>
 8001442:	4603      	mov	r3, r0
 8001444:	2b01      	cmp	r3, #1
 8001446:	d0fa      	beq.n	800143e <BlockI2+0x76>
		NewTetromino = true;
 8001448:	4b93      	ldr	r3, [pc, #588]	@ (8001698 <BlockI2+0x2d0>)
 800144a:	2201      	movs	r2, #1
 800144c:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 800144e:	4b93      	ldr	r3, [pc, #588]	@ (800169c <BlockI2+0x2d4>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 8001454:	4b92      	ldr	r3, [pc, #584]	@ (80016a0 <BlockI2+0x2d8>)
 8001456:	8818      	ldrh	r0, [r3, #0]
 8001458:	4b8d      	ldr	r3, [pc, #564]	@ (8001690 <BlockI2+0x2c8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	4b8b      	ldr	r3, [pc, #556]	@ (800168c <BlockI2+0x2c4>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	1c59      	adds	r1, r3, #1
 8001464:	4604      	mov	r4, r0
 8001466:	488b      	ldr	r0, [pc, #556]	@ (8001694 <BlockI2+0x2cc>)
 8001468:	4613      	mov	r3, r2
 800146a:	011b      	lsls	r3, r3, #4
 800146c:	1a9b      	subs	r3, r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	440b      	add	r3, r1
 8001472:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] = colour;
 8001476:	4b8a      	ldr	r3, [pc, #552]	@ (80016a0 <BlockI2+0x2d8>)
 8001478:	8818      	ldrh	r0, [r3, #0]
 800147a:	4b85      	ldr	r3, [pc, #532]	@ (8001690 <BlockI2+0x2c8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	4b82      	ldr	r3, [pc, #520]	@ (800168c <BlockI2+0x2c4>)
 8001482:	6819      	ldr	r1, [r3, #0]
 8001484:	4604      	mov	r4, r0
 8001486:	4883      	ldr	r0, [pc, #524]	@ (8001694 <BlockI2+0x2cc>)
 8001488:	4613      	mov	r3, r2
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	1a9b      	subs	r3, r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	440b      	add	r3, r1
 8001492:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] = colour;
 8001496:	4b82      	ldr	r3, [pc, #520]	@ (80016a0 <BlockI2+0x2d8>)
 8001498:	8818      	ldrh	r0, [r3, #0]
 800149a:	4b7d      	ldr	r3, [pc, #500]	@ (8001690 <BlockI2+0x2c8>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	4b7a      	ldr	r3, [pc, #488]	@ (800168c <BlockI2+0x2c4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	1c99      	adds	r1, r3, #2
 80014a6:	4604      	mov	r4, r0
 80014a8:	487a      	ldr	r0, [pc, #488]	@ (8001694 <BlockI2+0x2cc>)
 80014aa:	4613      	mov	r3, r2
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	1a9b      	subs	r3, r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	440b      	add	r3, r1
 80014b4:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] = colour;
 80014b8:	4b79      	ldr	r3, [pc, #484]	@ (80016a0 <BlockI2+0x2d8>)
 80014ba:	8818      	ldrh	r0, [r3, #0]
 80014bc:	4b74      	ldr	r3, [pc, #464]	@ (8001690 <BlockI2+0x2c8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	1c5a      	adds	r2, r3, #1
 80014c2:	4b72      	ldr	r3, [pc, #456]	@ (800168c <BlockI2+0x2c4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	1cd9      	adds	r1, r3, #3
 80014c8:	4604      	mov	r4, r0
 80014ca:	4872      	ldr	r0, [pc, #456]	@ (8001694 <BlockI2+0x2cc>)
 80014cc:	4613      	mov	r3, r2
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	1a9b      	subs	r3, r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	440b      	add	r3, r1
 80014d6:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 80014da:	e002      	b.n	80014e2 <BlockI2+0x11a>
	}
	else CanMoveDown = true;
 80014dc:	4b6f      	ldr	r3, [pc, #444]	@ (800169c <BlockI2+0x2d4>)
 80014de:	2201      	movs	r2, #1
 80014e0:	701a      	strb	r2, [r3, #0]

	if (	tetris[tetrominoLocX][tetrominoLocY + 1]	== 0	&&
 80014e2:	4b6b      	ldr	r3, [pc, #428]	@ (8001690 <BlockI2+0x2c8>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	4b69      	ldr	r3, [pc, #420]	@ (800168c <BlockI2+0x2c4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	1c59      	adds	r1, r3, #1
 80014ec:	4869      	ldr	r0, [pc, #420]	@ (8001694 <BlockI2+0x2cc>)
 80014ee:	4613      	mov	r3, r2
 80014f0:	011b      	lsls	r3, r3, #4
 80014f2:	1a9b      	subs	r3, r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	440b      	add	r3, r1
 80014f8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d12f      	bne.n	8001560 <BlockI2+0x198>
			tetris[tetrominoLocX][tetrominoLocY] 		== 0	&&
 8001500:	4b63      	ldr	r3, [pc, #396]	@ (8001690 <BlockI2+0x2c8>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b61      	ldr	r3, [pc, #388]	@ (800168c <BlockI2+0x2c4>)
 8001506:	6819      	ldr	r1, [r3, #0]
 8001508:	4862      	ldr	r0, [pc, #392]	@ (8001694 <BlockI2+0x2cc>)
 800150a:	4613      	mov	r3, r2
 800150c:	011b      	lsls	r3, r3, #4
 800150e:	1a9b      	subs	r3, r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	440b      	add	r3, r1
 8001514:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (	tetris[tetrominoLocX][tetrominoLocY + 1]	== 0	&&
 8001518:	2b00      	cmp	r3, #0
 800151a:	d121      	bne.n	8001560 <BlockI2+0x198>
			tetris[tetrominoLocX][tetrominoLocY + 2]	== 0	&&
 800151c:	4b5c      	ldr	r3, [pc, #368]	@ (8001690 <BlockI2+0x2c8>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b5a      	ldr	r3, [pc, #360]	@ (800168c <BlockI2+0x2c4>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	1c99      	adds	r1, r3, #2
 8001526:	485b      	ldr	r0, [pc, #364]	@ (8001694 <BlockI2+0x2cc>)
 8001528:	4613      	mov	r3, r2
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	1a9b      	subs	r3, r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	440b      	add	r3, r1
 8001532:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
			tetris[tetrominoLocX][tetrominoLocY] 		== 0	&&
 8001536:	2b00      	cmp	r3, #0
 8001538:	d112      	bne.n	8001560 <BlockI2+0x198>
			tetris[tetrominoLocX][tetrominoLocY + 3]	== 0
 800153a:	4b55      	ldr	r3, [pc, #340]	@ (8001690 <BlockI2+0x2c8>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	4b53      	ldr	r3, [pc, #332]	@ (800168c <BlockI2+0x2c4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	1cd9      	adds	r1, r3, #3
 8001544:	4853      	ldr	r0, [pc, #332]	@ (8001694 <BlockI2+0x2cc>)
 8001546:	4613      	mov	r3, r2
 8001548:	011b      	lsls	r3, r3, #4
 800154a:	1a9b      	subs	r3, r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	440b      	add	r3, r1
 8001550:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
			tetris[tetrominoLocX][tetrominoLocY + 2]	== 0	&&
 8001554:	2b00      	cmp	r3, #0
 8001556:	d103      	bne.n	8001560 <BlockI2+0x198>
		)
		CanMoveLeft = true;
 8001558:	4b52      	ldr	r3, [pc, #328]	@ (80016a4 <BlockI2+0x2dc>)
 800155a:	2201      	movs	r2, #1
 800155c:	701a      	strb	r2, [r3, #0]
 800155e:	e002      	b.n	8001566 <BlockI2+0x19e>
	else CanMoveLeft = false;
 8001560:	4b50      	ldr	r3, [pc, #320]	@ (80016a4 <BlockI2+0x2dc>)
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]

	if (	tetris[tetrominoLocX + 2][tetrominoLocY + 1]	== 0	&&
 8001566:	4b4a      	ldr	r3, [pc, #296]	@ (8001690 <BlockI2+0x2c8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	1c9a      	adds	r2, r3, #2
 800156c:	4b47      	ldr	r3, [pc, #284]	@ (800168c <BlockI2+0x2c4>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	1c59      	adds	r1, r3, #1
 8001572:	4848      	ldr	r0, [pc, #288]	@ (8001694 <BlockI2+0x2cc>)
 8001574:	4613      	mov	r3, r2
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	1a9b      	subs	r3, r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	440b      	add	r3, r1
 800157e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d132      	bne.n	80015ec <BlockI2+0x224>
			tetris[tetrominoLocX + 2][tetrominoLocY] 		== 0	&&
 8001586:	4b42      	ldr	r3, [pc, #264]	@ (8001690 <BlockI2+0x2c8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	1c9a      	adds	r2, r3, #2
 800158c:	4b3f      	ldr	r3, [pc, #252]	@ (800168c <BlockI2+0x2c4>)
 800158e:	6819      	ldr	r1, [r3, #0]
 8001590:	4840      	ldr	r0, [pc, #256]	@ (8001694 <BlockI2+0x2cc>)
 8001592:	4613      	mov	r3, r2
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	1a9b      	subs	r3, r3, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	440b      	add	r3, r1
 800159c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (	tetris[tetrominoLocX + 2][tetrominoLocY + 1]	== 0	&&
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d123      	bne.n	80015ec <BlockI2+0x224>
			tetris[tetrominoLocX + 2][tetrominoLocY + 2]	== 0	&&
 80015a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001690 <BlockI2+0x2c8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	1c9a      	adds	r2, r3, #2
 80015aa:	4b38      	ldr	r3, [pc, #224]	@ (800168c <BlockI2+0x2c4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	1c99      	adds	r1, r3, #2
 80015b0:	4838      	ldr	r0, [pc, #224]	@ (8001694 <BlockI2+0x2cc>)
 80015b2:	4613      	mov	r3, r2
 80015b4:	011b      	lsls	r3, r3, #4
 80015b6:	1a9b      	subs	r3, r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	440b      	add	r3, r1
 80015bc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
			tetris[tetrominoLocX + 2][tetrominoLocY] 		== 0	&&
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d113      	bne.n	80015ec <BlockI2+0x224>
			tetris[tetrominoLocX + 2][tetrominoLocY + 3]	== 0
 80015c4:	4b32      	ldr	r3, [pc, #200]	@ (8001690 <BlockI2+0x2c8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	1c9a      	adds	r2, r3, #2
 80015ca:	4b30      	ldr	r3, [pc, #192]	@ (800168c <BlockI2+0x2c4>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	1cd9      	adds	r1, r3, #3
 80015d0:	4830      	ldr	r0, [pc, #192]	@ (8001694 <BlockI2+0x2cc>)
 80015d2:	4613      	mov	r3, r2
 80015d4:	011b      	lsls	r3, r3, #4
 80015d6:	1a9b      	subs	r3, r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	440b      	add	r3, r1
 80015dc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
			tetris[tetrominoLocX + 2][tetrominoLocY + 2]	== 0	&&
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d103      	bne.n	80015ec <BlockI2+0x224>
		)
		CanMoveRight = true;
 80015e4:	4b30      	ldr	r3, [pc, #192]	@ (80016a8 <BlockI2+0x2e0>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
 80015ea:	e002      	b.n	80015f2 <BlockI2+0x22a>
	else CanMoveRight = false;
 80015ec:	4b2e      	ldr	r3, [pc, #184]	@ (80016a8 <BlockI2+0x2e0>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80015f2:	4b27      	ldr	r3, [pc, #156]	@ (8001690 <BlockI2+0x2c8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	4b24      	ldr	r3, [pc, #144]	@ (800168c <BlockI2+0x2c4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	1c59      	adds	r1, r3, #1
 80015fe:	4825      	ldr	r0, [pc, #148]	@ (8001694 <BlockI2+0x2cc>)
 8001600:	4613      	mov	r3, r2
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	1a9b      	subs	r3, r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	440b      	add	r3, r1
 800160a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d132      	bne.n	8001678 <BlockI2+0x2b0>
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8001612:	4b1f      	ldr	r3, [pc, #124]	@ (8001690 <BlockI2+0x2c8>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4b1d      	ldr	r3, [pc, #116]	@ (800168c <BlockI2+0x2c4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	1c59      	adds	r1, r3, #1
 800161c:	481d      	ldr	r0, [pc, #116]	@ (8001694 <BlockI2+0x2cc>)
 800161e:	4613      	mov	r3, r2
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	1a9b      	subs	r3, r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	440b      	add	r3, r1
 8001628:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 800162c:	2b00      	cmp	r3, #0
 800162e:	d123      	bne.n	8001678 <BlockI2+0x2b0>
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8001630:	4b17      	ldr	r3, [pc, #92]	@ (8001690 <BlockI2+0x2c8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	1c9a      	adds	r2, r3, #2
 8001636:	4b15      	ldr	r3, [pc, #84]	@ (800168c <BlockI2+0x2c4>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	1c59      	adds	r1, r3, #1
 800163c:	4815      	ldr	r0, [pc, #84]	@ (8001694 <BlockI2+0x2cc>)
 800163e:	4613      	mov	r3, r2
 8001640:	011b      	lsls	r3, r3, #4
 8001642:	1a9b      	subs	r3, r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	440b      	add	r3, r1
 8001648:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 800164c:	2b00      	cmp	r3, #0
 800164e:	d113      	bne.n	8001678 <BlockI2+0x2b0>
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0)
 8001650:	4b0f      	ldr	r3, [pc, #60]	@ (8001690 <BlockI2+0x2c8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	1cda      	adds	r2, r3, #3
 8001656:	4b0d      	ldr	r3, [pc, #52]	@ (800168c <BlockI2+0x2c4>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	1c59      	adds	r1, r3, #1
 800165c:	480d      	ldr	r0, [pc, #52]	@ (8001694 <BlockI2+0x2cc>)
 800165e:	4613      	mov	r3, r2
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	1a9b      	subs	r3, r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	440b      	add	r3, r1
 8001668:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 800166c:	2b00      	cmp	r3, #0
 800166e:	d103      	bne.n	8001678 <BlockI2+0x2b0>
		CanRotate = true;
 8001670:	4b0e      	ldr	r3, [pc, #56]	@ (80016ac <BlockI2+0x2e4>)
 8001672:	2201      	movs	r2, #1
 8001674:	701a      	strb	r2, [r3, #0]
 8001676:	e003      	b.n	8001680 <BlockI2+0x2b8>
	else CanRotate = false;
 8001678:	4b0c      	ldr	r3, [pc, #48]	@ (80016ac <BlockI2+0x2e4>)
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX + 1, tetrominoLocY - 1); cout << char(248);
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 4); cout << char(248);
}
 800167e:	bf00      	nop
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bd90      	pop	{r4, r7, pc}
 8001688:	20000eac 	.word	0x20000eac
 800168c:	20000ea8 	.word	0x20000ea8
 8001690:	20000ea4 	.word	0x20000ea4
 8001694:	20000090 	.word	0x20000090
 8001698:	2000000c 	.word	0x2000000c
 800169c:	2000000f 	.word	0x2000000f
 80016a0:	20000eb0 	.word	0x20000eb0
 80016a4:	2000000e 	.word	0x2000000e
 80016a8:	2000000d 	.word	0x2000000d
 80016ac:	20000010 	.word	0x20000010

080016b0 <BlockJ1>:

void BlockJ1(int x, int y)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	3301      	adds	r3, #1
 80016c2:	4619      	mov	r1, r3
 80016c4:	4610      	mov	r0, r2
 80016c6:	f004 f931 	bl	800592c <PrintXY>
	PrintXY(x, y + 1);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	3301      	adds	r3, #1
 80016ce:	4619      	mov	r1, r3
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f004 f92b 	bl	800592c <PrintXY>
	PrintXY(x + 2, y + 2);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	1c9a      	adds	r2, r3, #2
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	3302      	adds	r3, #2
 80016de:	4619      	mov	r1, r3
 80016e0:	4610      	mov	r0, r2
 80016e2:	f004 f923 	bl	800592c <PrintXY>
	PrintXY(x + 2, y + 1);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	1c9a      	adds	r2, r3, #2
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	4619      	mov	r1, r3
 80016f0:	4610      	mov	r0, r2
 80016f2:	f004 f91b 	bl	800592c <PrintXY>

	CurrentState = 3;
 80016f6:	4bb0      	ldr	r3, [pc, #704]	@ (80019b8 <BlockJ1+0x308>)
 80016f8:	2203      	movs	r2, #3
 80016fa:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 80016fc:	4baf      	ldr	r3, [pc, #700]	@ (80019bc <BlockJ1+0x30c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b12      	cmp	r3, #18
 8001702:	dc2e      	bgt.n	8001762 <BlockJ1+0xb2>
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0 ||
 8001704:	4bae      	ldr	r3, [pc, #696]	@ (80019c0 <BlockJ1+0x310>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4bac      	ldr	r3, [pc, #688]	@ (80019bc <BlockJ1+0x30c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	1c99      	adds	r1, r3, #2
 800170e:	48ad      	ldr	r0, [pc, #692]	@ (80019c4 <BlockJ1+0x314>)
 8001710:	4613      	mov	r3, r2
 8001712:	011b      	lsls	r3, r3, #4
 8001714:	1a9b      	subs	r3, r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	440b      	add	r3, r1
 800171a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 800171e:	2b00      	cmp	r3, #0
 8001720:	d11f      	bne.n	8001762 <BlockJ1+0xb2>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 8001722:	4ba7      	ldr	r3, [pc, #668]	@ (80019c0 <BlockJ1+0x310>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	1c5a      	adds	r2, r3, #1
 8001728:	4ba4      	ldr	r3, [pc, #656]	@ (80019bc <BlockJ1+0x30c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	1c99      	adds	r1, r3, #2
 800172e:	48a5      	ldr	r0, [pc, #660]	@ (80019c4 <BlockJ1+0x314>)
 8001730:	4613      	mov	r3, r2
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	1a9b      	subs	r3, r3, r2
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	440b      	add	r3, r1
 800173a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0 ||
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10f      	bne.n	8001762 <BlockJ1+0xb2>
		tetris[tetrominoLocX + 2][tetrominoLocY + 3] != 0)
 8001742:	4b9f      	ldr	r3, [pc, #636]	@ (80019c0 <BlockJ1+0x310>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	1c9a      	adds	r2, r3, #2
 8001748:	4b9c      	ldr	r3, [pc, #624]	@ (80019bc <BlockJ1+0x30c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	1cd9      	adds	r1, r3, #3
 800174e:	489d      	ldr	r0, [pc, #628]	@ (80019c4 <BlockJ1+0x314>)
 8001750:	4613      	mov	r3, r2
 8001752:	011b      	lsls	r3, r3, #4
 8001754:	1a9b      	subs	r3, r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	440b      	add	r3, r1
 800175a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 800175e:	2b00      	cmp	r3, #0
 8001760:	d04f      	beq.n	8001802 <BlockJ1+0x152>
	{
		while (isDownKey() == 1);
 8001762:	bf00      	nop
 8001764:	f004 f85c 	bl	8005820 <isDownKey>
 8001768:	4603      	mov	r3, r0
 800176a:	2b01      	cmp	r3, #1
 800176c:	d0fa      	beq.n	8001764 <BlockJ1+0xb4>
		NewTetromino = true;
 800176e:	4b96      	ldr	r3, [pc, #600]	@ (80019c8 <BlockJ1+0x318>)
 8001770:	2201      	movs	r2, #1
 8001772:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 8001774:	4b95      	ldr	r3, [pc, #596]	@ (80019cc <BlockJ1+0x31c>)
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 800177a:	4b95      	ldr	r3, [pc, #596]	@ (80019d0 <BlockJ1+0x320>)
 800177c:	8818      	ldrh	r0, [r3, #0]
 800177e:	4b90      	ldr	r3, [pc, #576]	@ (80019c0 <BlockJ1+0x310>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	1c5a      	adds	r2, r3, #1
 8001784:	4b8d      	ldr	r3, [pc, #564]	@ (80019bc <BlockJ1+0x30c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	1c59      	adds	r1, r3, #1
 800178a:	4604      	mov	r4, r0
 800178c:	488d      	ldr	r0, [pc, #564]	@ (80019c4 <BlockJ1+0x314>)
 800178e:	4613      	mov	r3, r2
 8001790:	011b      	lsls	r3, r3, #4
 8001792:	1a9b      	subs	r3, r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	440b      	add	r3, r1
 8001798:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] = colour;
 800179c:	4b8c      	ldr	r3, [pc, #560]	@ (80019d0 <BlockJ1+0x320>)
 800179e:	8818      	ldrh	r0, [r3, #0]
 80017a0:	4b87      	ldr	r3, [pc, #540]	@ (80019c0 <BlockJ1+0x310>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b85      	ldr	r3, [pc, #532]	@ (80019bc <BlockJ1+0x30c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	1c59      	adds	r1, r3, #1
 80017aa:	4604      	mov	r4, r0
 80017ac:	4885      	ldr	r0, [pc, #532]	@ (80019c4 <BlockJ1+0x314>)
 80017ae:	4613      	mov	r3, r2
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	1a9b      	subs	r3, r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	440b      	add	r3, r1
 80017b8:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] = colour;
 80017bc:	4b84      	ldr	r3, [pc, #528]	@ (80019d0 <BlockJ1+0x320>)
 80017be:	8818      	ldrh	r0, [r3, #0]
 80017c0:	4b7f      	ldr	r3, [pc, #508]	@ (80019c0 <BlockJ1+0x310>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	1c9a      	adds	r2, r3, #2
 80017c6:	4b7d      	ldr	r3, [pc, #500]	@ (80019bc <BlockJ1+0x30c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	1c59      	adds	r1, r3, #1
 80017cc:	4604      	mov	r4, r0
 80017ce:	487d      	ldr	r0, [pc, #500]	@ (80019c4 <BlockJ1+0x314>)
 80017d0:	4613      	mov	r3, r2
 80017d2:	011b      	lsls	r3, r3, #4
 80017d4:	1a9b      	subs	r3, r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	440b      	add	r3, r1
 80017da:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] = colour;
 80017de:	4b7c      	ldr	r3, [pc, #496]	@ (80019d0 <BlockJ1+0x320>)
 80017e0:	8818      	ldrh	r0, [r3, #0]
 80017e2:	4b77      	ldr	r3, [pc, #476]	@ (80019c0 <BlockJ1+0x310>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	1c9a      	adds	r2, r3, #2
 80017e8:	4b74      	ldr	r3, [pc, #464]	@ (80019bc <BlockJ1+0x30c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	1c99      	adds	r1, r3, #2
 80017ee:	4604      	mov	r4, r0
 80017f0:	4874      	ldr	r0, [pc, #464]	@ (80019c4 <BlockJ1+0x314>)
 80017f2:	4613      	mov	r3, r2
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	1a9b      	subs	r3, r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	440b      	add	r3, r1
 80017fc:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8001800:	e002      	b.n	8001808 <BlockJ1+0x158>
	}
	else CanMoveDown = true;
 8001802:	4b72      	ldr	r3, [pc, #456]	@ (80019cc <BlockJ1+0x31c>)
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0		&&
 8001808:	4b6d      	ldr	r3, [pc, #436]	@ (80019c0 <BlockJ1+0x310>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b6b      	ldr	r3, [pc, #428]	@ (80019bc <BlockJ1+0x30c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	1c59      	adds	r1, r3, #1
 8001812:	486c      	ldr	r0, [pc, #432]	@ (80019c4 <BlockJ1+0x314>)
 8001814:	4613      	mov	r3, r2
 8001816:	011b      	lsls	r3, r3, #4
 8001818:	1a9b      	subs	r3, r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	440b      	add	r3, r1
 800181e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d133      	bne.n	800188e <BlockJ1+0x1de>
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 	&&
 8001826:	4b66      	ldr	r3, [pc, #408]	@ (80019c0 <BlockJ1+0x310>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	1e5a      	subs	r2, r3, #1
 800182c:	4b63      	ldr	r3, [pc, #396]	@ (80019bc <BlockJ1+0x30c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	1c59      	adds	r1, r3, #1
 8001832:	4864      	ldr	r0, [pc, #400]	@ (80019c4 <BlockJ1+0x314>)
 8001834:	4613      	mov	r3, r2
 8001836:	011b      	lsls	r3, r3, #4
 8001838:	1a9b      	subs	r3, r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	440b      	add	r3, r1
 800183e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0		&&
 8001842:	2b00      	cmp	r3, #0
 8001844:	d123      	bne.n	800188e <BlockJ1+0x1de>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0	&&
 8001846:	4b5e      	ldr	r3, [pc, #376]	@ (80019c0 <BlockJ1+0x310>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	4b5b      	ldr	r3, [pc, #364]	@ (80019bc <BlockJ1+0x30c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	1c59      	adds	r1, r3, #1
 8001852:	485c      	ldr	r0, [pc, #368]	@ (80019c4 <BlockJ1+0x314>)
 8001854:	4613      	mov	r3, r2
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	1a9b      	subs	r3, r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	440b      	add	r3, r1
 800185e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 	&&
 8001862:	2b00      	cmp	r3, #0
 8001864:	d113      	bne.n	800188e <BlockJ1+0x1de>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0
 8001866:	4b56      	ldr	r3, [pc, #344]	@ (80019c0 <BlockJ1+0x310>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	4b53      	ldr	r3, [pc, #332]	@ (80019bc <BlockJ1+0x30c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	1c99      	adds	r1, r3, #2
 8001872:	4854      	ldr	r0, [pc, #336]	@ (80019c4 <BlockJ1+0x314>)
 8001874:	4613      	mov	r3, r2
 8001876:	011b      	lsls	r3, r3, #4
 8001878:	1a9b      	subs	r3, r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	440b      	add	r3, r1
 800187e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0	&&
 8001882:	2b00      	cmp	r3, #0
 8001884:	d103      	bne.n	800188e <BlockJ1+0x1de>
	)
		CanMoveLeft = true;
 8001886:	4b53      	ldr	r3, [pc, #332]	@ (80019d4 <BlockJ1+0x324>)
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
 800188c:	e002      	b.n	8001894 <BlockJ1+0x1e4>
	else CanMoveLeft = false;
 800188e:	4b51      	ldr	r3, [pc, #324]	@ (80019d4 <BlockJ1+0x324>)
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0	&&
 8001894:	4b4a      	ldr	r3, [pc, #296]	@ (80019c0 <BlockJ1+0x310>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	1c9a      	adds	r2, r3, #2
 800189a:	4b48      	ldr	r3, [pc, #288]	@ (80019bc <BlockJ1+0x30c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	1c59      	adds	r1, r3, #1
 80018a0:	4848      	ldr	r0, [pc, #288]	@ (80019c4 <BlockJ1+0x314>)
 80018a2:	4613      	mov	r3, r2
 80018a4:	011b      	lsls	r3, r3, #4
 80018a6:	1a9b      	subs	r3, r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	440b      	add	r3, r1
 80018ac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d133      	bne.n	800191c <BlockJ1+0x26c>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 	&&
 80018b4:	4b42      	ldr	r3, [pc, #264]	@ (80019c0 <BlockJ1+0x310>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	4b40      	ldr	r3, [pc, #256]	@ (80019bc <BlockJ1+0x30c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	1c59      	adds	r1, r3, #1
 80018c0:	4840      	ldr	r0, [pc, #256]	@ (80019c4 <BlockJ1+0x314>)
 80018c2:	4613      	mov	r3, r2
 80018c4:	011b      	lsls	r3, r3, #4
 80018c6:	1a9b      	subs	r3, r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	440b      	add	r3, r1
 80018cc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0	&&
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d123      	bne.n	800191c <BlockJ1+0x26c>
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0	&&
 80018d4:	4b3a      	ldr	r3, [pc, #232]	@ (80019c0 <BlockJ1+0x310>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	1cda      	adds	r2, r3, #3
 80018da:	4b38      	ldr	r3, [pc, #224]	@ (80019bc <BlockJ1+0x30c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	1c59      	adds	r1, r3, #1
 80018e0:	4838      	ldr	r0, [pc, #224]	@ (80019c4 <BlockJ1+0x314>)
 80018e2:	4613      	mov	r3, r2
 80018e4:	011b      	lsls	r3, r3, #4
 80018e6:	1a9b      	subs	r3, r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	440b      	add	r3, r1
 80018ec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 	&&
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d113      	bne.n	800191c <BlockJ1+0x26c>
		tetris[tetrominoLocX + 3][tetrominoLocY + 2] == 0
 80018f4:	4b32      	ldr	r3, [pc, #200]	@ (80019c0 <BlockJ1+0x310>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	1cda      	adds	r2, r3, #3
 80018fa:	4b30      	ldr	r3, [pc, #192]	@ (80019bc <BlockJ1+0x30c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	1c99      	adds	r1, r3, #2
 8001900:	4830      	ldr	r0, [pc, #192]	@ (80019c4 <BlockJ1+0x314>)
 8001902:	4613      	mov	r3, r2
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	440b      	add	r3, r1
 800190c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0	&&
 8001910:	2b00      	cmp	r3, #0
 8001912:	d103      	bne.n	800191c <BlockJ1+0x26c>
	)
		CanMoveRight = true;
 8001914:	4b30      	ldr	r3, [pc, #192]	@ (80019d8 <BlockJ1+0x328>)
 8001916:	2201      	movs	r2, #1
 8001918:	701a      	strb	r2, [r3, #0]
 800191a:	e002      	b.n	8001922 <BlockJ1+0x272>
	else CanMoveRight = false;
 800191c:	4b2e      	ldr	r3, [pc, #184]	@ (80019d8 <BlockJ1+0x328>)
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8001922:	4b27      	ldr	r3, [pc, #156]	@ (80019c0 <BlockJ1+0x310>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	4b24      	ldr	r3, [pc, #144]	@ (80019bc <BlockJ1+0x30c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	1c59      	adds	r1, r3, #1
 800192e:	4825      	ldr	r0, [pc, #148]	@ (80019c4 <BlockJ1+0x314>)
 8001930:	4613      	mov	r3, r2
 8001932:	011b      	lsls	r3, r3, #4
 8001934:	1a9b      	subs	r3, r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	440b      	add	r3, r1
 800193a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d131      	bne.n	80019a6 <BlockJ1+0x2f6>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 8001942:	4b1f      	ldr	r3, [pc, #124]	@ (80019c0 <BlockJ1+0x310>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	4b1c      	ldr	r3, [pc, #112]	@ (80019bc <BlockJ1+0x30c>)
 800194a:	6819      	ldr	r1, [r3, #0]
 800194c:	481d      	ldr	r0, [pc, #116]	@ (80019c4 <BlockJ1+0x314>)
 800194e:	4613      	mov	r3, r2
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	1a9b      	subs	r3, r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	440b      	add	r3, r1
 8001958:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 800195c:	2b00      	cmp	r3, #0
 800195e:	d122      	bne.n	80019a6 <BlockJ1+0x2f6>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 8001960:	4b17      	ldr	r3, [pc, #92]	@ (80019c0 <BlockJ1+0x310>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	1c5a      	adds	r2, r3, #1
 8001966:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <BlockJ1+0x30c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	1c99      	adds	r1, r3, #2
 800196c:	4815      	ldr	r0, [pc, #84]	@ (80019c4 <BlockJ1+0x314>)
 800196e:	4613      	mov	r3, r2
 8001970:	011b      	lsls	r3, r3, #4
 8001972:	1a9b      	subs	r3, r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	440b      	add	r3, r1
 8001978:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 800197c:	2b00      	cmp	r3, #0
 800197e:	d112      	bne.n	80019a6 <BlockJ1+0x2f6>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0)
 8001980:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <BlockJ1+0x310>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b0d      	ldr	r3, [pc, #52]	@ (80019bc <BlockJ1+0x30c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	1c99      	adds	r1, r3, #2
 800198a:	480e      	ldr	r0, [pc, #56]	@ (80019c4 <BlockJ1+0x314>)
 800198c:	4613      	mov	r3, r2
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	440b      	add	r3, r1
 8001996:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 800199a:	2b00      	cmp	r3, #0
 800199c:	d103      	bne.n	80019a6 <BlockJ1+0x2f6>
		CanRotate = true;
 800199e:	4b0f      	ldr	r3, [pc, #60]	@ (80019dc <BlockJ1+0x32c>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	701a      	strb	r2, [r3, #0]
 80019a4:	e003      	b.n	80019ae <BlockJ1+0x2fe>
	else CanRotate = false;
 80019a6:	4b0d      	ldr	r3, [pc, #52]	@ (80019dc <BlockJ1+0x32c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 3); cout << char(248);
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd90      	pop	{r4, r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000eac 	.word	0x20000eac
 80019bc:	20000ea8 	.word	0x20000ea8
 80019c0:	20000ea4 	.word	0x20000ea4
 80019c4:	20000090 	.word	0x20000090
 80019c8:	2000000c 	.word	0x2000000c
 80019cc:	2000000f 	.word	0x2000000f
 80019d0:	20000eb0 	.word	0x20000eb0
 80019d4:	2000000e 	.word	0x2000000e
 80019d8:	2000000d 	.word	0x2000000d
 80019dc:	20000010 	.word	0x20000010

080019e0 <BlockJ2>:

void BlockJ2(int x, int y)
{
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	3301      	adds	r3, #1
 80019f2:	4619      	mov	r1, r3
 80019f4:	4610      	mov	r0, r2
 80019f6:	f003 ff99 	bl	800592c <PrintXY>
	PrintXY(x + 1, y);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3301      	adds	r3, #1
 80019fe:	6839      	ldr	r1, [r7, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f003 ff93 	bl	800592c <PrintXY>
	PrintXY(x + 1, y + 2);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	1c5a      	adds	r2, r3, #1
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4610      	mov	r0, r2
 8001a12:	f003 ff8b 	bl	800592c <PrintXY>
	PrintXY(x, y + 2);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	3302      	adds	r3, #2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f003 ff85 	bl	800592c <PrintXY>

	CurrentState = 4;
 8001a22:	4ba5      	ldr	r3, [pc, #660]	@ (8001cb8 <BlockJ2+0x2d8>)
 8001a24:	2204      	movs	r2, #4
 8001a26:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 8001a28:	4ba4      	ldr	r3, [pc, #656]	@ (8001cbc <BlockJ2+0x2dc>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b12      	cmp	r3, #18
 8001a2e:	dc1e      	bgt.n	8001a6e <BlockJ2+0x8e>
		tetris[tetrominoLocX][tetrominoLocY + 3] != 0 ||
 8001a30:	4ba3      	ldr	r3, [pc, #652]	@ (8001cc0 <BlockJ2+0x2e0>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4ba1      	ldr	r3, [pc, #644]	@ (8001cbc <BlockJ2+0x2dc>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	1cd9      	adds	r1, r3, #3
 8001a3a:	48a2      	ldr	r0, [pc, #648]	@ (8001cc4 <BlockJ2+0x2e4>)
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	011b      	lsls	r3, r3, #4
 8001a40:	1a9b      	subs	r3, r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	440b      	add	r3, r1
 8001a46:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10f      	bne.n	8001a6e <BlockJ2+0x8e>
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0)
 8001a4e:	4b9c      	ldr	r3, [pc, #624]	@ (8001cc0 <BlockJ2+0x2e0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	4b99      	ldr	r3, [pc, #612]	@ (8001cbc <BlockJ2+0x2dc>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	1cd9      	adds	r1, r3, #3
 8001a5a:	489a      	ldr	r0, [pc, #616]	@ (8001cc4 <BlockJ2+0x2e4>)
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	1a9b      	subs	r3, r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	440b      	add	r3, r1
 8001a66:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 3] != 0 ||
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d04e      	beq.n	8001b0c <BlockJ2+0x12c>
	{
		while (isDownKey() == 1);
 8001a6e:	bf00      	nop
 8001a70:	f003 fed6 	bl	8005820 <isDownKey>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d0fa      	beq.n	8001a70 <BlockJ2+0x90>
		NewTetromino = true;
 8001a7a:	4b93      	ldr	r3, [pc, #588]	@ (8001cc8 <BlockJ2+0x2e8>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 8001a80:	4b92      	ldr	r3, [pc, #584]	@ (8001ccc <BlockJ2+0x2ec>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 8001a86:	4b92      	ldr	r3, [pc, #584]	@ (8001cd0 <BlockJ2+0x2f0>)
 8001a88:	8818      	ldrh	r0, [r3, #0]
 8001a8a:	4b8d      	ldr	r3, [pc, #564]	@ (8001cc0 <BlockJ2+0x2e0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	4b8a      	ldr	r3, [pc, #552]	@ (8001cbc <BlockJ2+0x2dc>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	1c59      	adds	r1, r3, #1
 8001a96:	4604      	mov	r4, r0
 8001a98:	488a      	ldr	r0, [pc, #552]	@ (8001cc4 <BlockJ2+0x2e4>)
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	011b      	lsls	r3, r3, #4
 8001a9e:	1a9b      	subs	r3, r3, r2
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] = colour;
 8001aa8:	4b89      	ldr	r3, [pc, #548]	@ (8001cd0 <BlockJ2+0x2f0>)
 8001aaa:	8818      	ldrh	r0, [r3, #0]
 8001aac:	4b84      	ldr	r3, [pc, #528]	@ (8001cc0 <BlockJ2+0x2e0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	4b82      	ldr	r3, [pc, #520]	@ (8001cbc <BlockJ2+0x2dc>)
 8001ab4:	6819      	ldr	r1, [r3, #0]
 8001ab6:	4604      	mov	r4, r0
 8001ab8:	4882      	ldr	r0, [pc, #520]	@ (8001cc4 <BlockJ2+0x2e4>)
 8001aba:	4613      	mov	r3, r2
 8001abc:	011b      	lsls	r3, r3, #4
 8001abe:	1a9b      	subs	r3, r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] = colour;
 8001ac8:	4b81      	ldr	r3, [pc, #516]	@ (8001cd0 <BlockJ2+0x2f0>)
 8001aca:	8818      	ldrh	r0, [r3, #0]
 8001acc:	4b7c      	ldr	r3, [pc, #496]	@ (8001cc0 <BlockJ2+0x2e0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	4b7a      	ldr	r3, [pc, #488]	@ (8001cbc <BlockJ2+0x2dc>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	1c99      	adds	r1, r3, #2
 8001ad8:	4604      	mov	r4, r0
 8001ada:	487a      	ldr	r0, [pc, #488]	@ (8001cc4 <BlockJ2+0x2e4>)
 8001adc:	4613      	mov	r3, r2
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	1a9b      	subs	r3, r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	440b      	add	r3, r1
 8001ae6:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] = colour;
 8001aea:	4b79      	ldr	r3, [pc, #484]	@ (8001cd0 <BlockJ2+0x2f0>)
 8001aec:	8818      	ldrh	r0, [r3, #0]
 8001aee:	4b74      	ldr	r3, [pc, #464]	@ (8001cc0 <BlockJ2+0x2e0>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4b72      	ldr	r3, [pc, #456]	@ (8001cbc <BlockJ2+0x2dc>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	1c99      	adds	r1, r3, #2
 8001af8:	4604      	mov	r4, r0
 8001afa:	4872      	ldr	r0, [pc, #456]	@ (8001cc4 <BlockJ2+0x2e4>)
 8001afc:	4613      	mov	r3, r2
 8001afe:	011b      	lsls	r3, r3, #4
 8001b00:	1a9b      	subs	r3, r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	440b      	add	r3, r1
 8001b06:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8001b0a:	e002      	b.n	8001b12 <BlockJ2+0x132>
	}
	else CanMoveDown = true;
 8001b0c:	4b6f      	ldr	r3, [pc, #444]	@ (8001ccc <BlockJ2+0x2ec>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8001b12:	4b6b      	ldr	r3, [pc, #428]	@ (8001cc0 <BlockJ2+0x2e0>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	4b69      	ldr	r3, [pc, #420]	@ (8001cbc <BlockJ2+0x2dc>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	1c59      	adds	r1, r3, #1
 8001b1c:	4869      	ldr	r0, [pc, #420]	@ (8001cc4 <BlockJ2+0x2e4>)
 8001b1e:	4613      	mov	r3, r2
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	1a9b      	subs	r3, r3, r2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	440b      	add	r3, r1
 8001b28:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d130      	bne.n	8001b92 <BlockJ2+0x1b2>
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 8001b30:	4b63      	ldr	r3, [pc, #396]	@ (8001cc0 <BlockJ2+0x2e0>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b61      	ldr	r3, [pc, #388]	@ (8001cbc <BlockJ2+0x2dc>)
 8001b36:	6819      	ldr	r1, [r3, #0]
 8001b38:	4862      	ldr	r0, [pc, #392]	@ (8001cc4 <BlockJ2+0x2e4>)
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	1a9b      	subs	r3, r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	440b      	add	r3, r1
 8001b44:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d122      	bne.n	8001b92 <BlockJ2+0x1b2>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 8001b4c:	4b5c      	ldr	r3, [pc, #368]	@ (8001cc0 <BlockJ2+0x2e0>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b5a      	ldr	r3, [pc, #360]	@ (8001cbc <BlockJ2+0x2dc>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	1c99      	adds	r1, r3, #2
 8001b56:	485b      	ldr	r0, [pc, #364]	@ (8001cc4 <BlockJ2+0x2e4>)
 8001b58:	4613      	mov	r3, r2
 8001b5a:	011b      	lsls	r3, r3, #4
 8001b5c:	1a9b      	subs	r3, r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	440b      	add	r3, r1
 8001b62:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d113      	bne.n	8001b92 <BlockJ2+0x1b2>
		tetris[tetrominoLocX - 1][tetrominoLocY + 2] == 0
 8001b6a:	4b55      	ldr	r3, [pc, #340]	@ (8001cc0 <BlockJ2+0x2e0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	1e5a      	subs	r2, r3, #1
 8001b70:	4b52      	ldr	r3, [pc, #328]	@ (8001cbc <BlockJ2+0x2dc>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	1c99      	adds	r1, r3, #2
 8001b76:	4853      	ldr	r0, [pc, #332]	@ (8001cc4 <BlockJ2+0x2e4>)
 8001b78:	4613      	mov	r3, r2
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	1a9b      	subs	r3, r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	440b      	add	r3, r1
 8001b82:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d103      	bne.n	8001b92 <BlockJ2+0x1b2>
	)
		CanMoveLeft = true;
 8001b8a:	4b52      	ldr	r3, [pc, #328]	@ (8001cd4 <BlockJ2+0x2f4>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	701a      	strb	r2, [r3, #0]
 8001b90:	e002      	b.n	8001b98 <BlockJ2+0x1b8>
	else CanMoveLeft = false;
 8001b92:	4b50      	ldr	r3, [pc, #320]	@ (8001cd4 <BlockJ2+0x2f4>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8001b98:	4b49      	ldr	r3, [pc, #292]	@ (8001cc0 <BlockJ2+0x2e0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	1c9a      	adds	r2, r3, #2
 8001b9e:	4b47      	ldr	r3, [pc, #284]	@ (8001cbc <BlockJ2+0x2dc>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	1c59      	adds	r1, r3, #1
 8001ba4:	4847      	ldr	r0, [pc, #284]	@ (8001cc4 <BlockJ2+0x2e4>)
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	011b      	lsls	r3, r3, #4
 8001baa:	1a9b      	subs	r3, r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	440b      	add	r3, r1
 8001bb0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d132      	bne.n	8001c1e <BlockJ2+0x23e>
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 8001bb8:	4b41      	ldr	r3, [pc, #260]	@ (8001cc0 <BlockJ2+0x2e0>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	1c9a      	adds	r2, r3, #2
 8001bbe:	4b3f      	ldr	r3, [pc, #252]	@ (8001cbc <BlockJ2+0x2dc>)
 8001bc0:	6819      	ldr	r1, [r3, #0]
 8001bc2:	4840      	ldr	r0, [pc, #256]	@ (8001cc4 <BlockJ2+0x2e4>)
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	1a9b      	subs	r3, r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	440b      	add	r3, r1
 8001bce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d123      	bne.n	8001c1e <BlockJ2+0x23e>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 8001bd6:	4b3a      	ldr	r3, [pc, #232]	@ (8001cc0 <BlockJ2+0x2e0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	1c9a      	adds	r2, r3, #2
 8001bdc:	4b37      	ldr	r3, [pc, #220]	@ (8001cbc <BlockJ2+0x2dc>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	1c99      	adds	r1, r3, #2
 8001be2:	4838      	ldr	r0, [pc, #224]	@ (8001cc4 <BlockJ2+0x2e4>)
 8001be4:	4613      	mov	r3, r2
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	1a9b      	subs	r3, r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	440b      	add	r3, r1
 8001bee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d113      	bne.n	8001c1e <BlockJ2+0x23e>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0
 8001bf6:	4b32      	ldr	r3, [pc, #200]	@ (8001cc0 <BlockJ2+0x2e0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8001cbc <BlockJ2+0x2dc>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	1c99      	adds	r1, r3, #2
 8001c02:	4830      	ldr	r0, [pc, #192]	@ (8001cc4 <BlockJ2+0x2e4>)
 8001c04:	4613      	mov	r3, r2
 8001c06:	011b      	lsls	r3, r3, #4
 8001c08:	1a9b      	subs	r3, r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	440b      	add	r3, r1
 8001c0e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d103      	bne.n	8001c1e <BlockJ2+0x23e>
	)
		CanMoveRight = true;
 8001c16:	4b30      	ldr	r3, [pc, #192]	@ (8001cd8 <BlockJ2+0x2f8>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	701a      	strb	r2, [r3, #0]
 8001c1c:	e002      	b.n	8001c24 <BlockJ2+0x244>
	else CanMoveRight = false;
 8001c1e:	4b2e      	ldr	r3, [pc, #184]	@ (8001cd8 <BlockJ2+0x2f8>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8001c24:	4b26      	ldr	r3, [pc, #152]	@ (8001cc0 <BlockJ2+0x2e0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	4b24      	ldr	r3, [pc, #144]	@ (8001cbc <BlockJ2+0x2dc>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	1c59      	adds	r1, r3, #1
 8001c30:	4824      	ldr	r0, [pc, #144]	@ (8001cc4 <BlockJ2+0x2e4>)
 8001c32:	4613      	mov	r3, r2
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	1a9b      	subs	r3, r3, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d130      	bne.n	8001ca6 <BlockJ2+0x2c6>
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8001c44:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc0 <BlockJ2+0x2e0>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b1c      	ldr	r3, [pc, #112]	@ (8001cbc <BlockJ2+0x2dc>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	1c59      	adds	r1, r3, #1
 8001c4e:	481d      	ldr	r0, [pc, #116]	@ (8001cc4 <BlockJ2+0x2e4>)
 8001c50:	4613      	mov	r3, r2
 8001c52:	011b      	lsls	r3, r3, #4
 8001c54:	1a9b      	subs	r3, r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	440b      	add	r3, r1
 8001c5a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d121      	bne.n	8001ca6 <BlockJ2+0x2c6>
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 8001c62:	4b17      	ldr	r3, [pc, #92]	@ (8001cc0 <BlockJ2+0x2e0>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <BlockJ2+0x2dc>)
 8001c68:	6819      	ldr	r1, [r3, #0]
 8001c6a:	4816      	ldr	r0, [pc, #88]	@ (8001cc4 <BlockJ2+0x2e4>)
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	1a9b      	subs	r3, r3, r2
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	440b      	add	r3, r1
 8001c76:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d113      	bne.n	8001ca6 <BlockJ2+0x2c6>
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0)
 8001c7e:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <BlockJ2+0x2e0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	1c9a      	adds	r2, r3, #2
 8001c84:	4b0d      	ldr	r3, [pc, #52]	@ (8001cbc <BlockJ2+0x2dc>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	1c59      	adds	r1, r3, #1
 8001c8a:	480e      	ldr	r0, [pc, #56]	@ (8001cc4 <BlockJ2+0x2e4>)
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	011b      	lsls	r3, r3, #4
 8001c90:	1a9b      	subs	r3, r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	440b      	add	r3, r1
 8001c96:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d103      	bne.n	8001ca6 <BlockJ2+0x2c6>
		CanRotate = true;
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cdc <BlockJ2+0x2fc>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	701a      	strb	r2, [r3, #0]
 8001ca4:	e003      	b.n	8001cae <BlockJ2+0x2ce>
	else CanRotate = false;
 8001ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8001cdc <BlockJ2+0x2fc>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX, tetrominoLocY + 3); cout << char(248);
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 3); cout << char(248);
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd90      	pop	{r4, r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000eac 	.word	0x20000eac
 8001cbc:	20000ea8 	.word	0x20000ea8
 8001cc0:	20000ea4 	.word	0x20000ea4
 8001cc4:	20000090 	.word	0x20000090
 8001cc8:	2000000c 	.word	0x2000000c
 8001ccc:	2000000f 	.word	0x2000000f
 8001cd0:	20000eb0 	.word	0x20000eb0
 8001cd4:	2000000e 	.word	0x2000000e
 8001cd8:	2000000d 	.word	0x2000000d
 8001cdc:	20000010 	.word	0x20000010

08001ce0 <BlockJ3>:

void BlockJ3(int x, int y)
{
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	f003 fe19 	bl	800592c <PrintXY>
	PrintXY(x, y + 1);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	4619      	mov	r1, r3
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f003 fe13 	bl	800592c <PrintXY>
	PrintXY(x, y);
 8001d06:	6839      	ldr	r1, [r7, #0]
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f003 fe0f 	bl	800592c <PrintXY>
	PrintXY(x + 2, y + 1);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	1c9a      	adds	r2, r3, #2
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	3301      	adds	r3, #1
 8001d16:	4619      	mov	r1, r3
 8001d18:	4610      	mov	r0, r2
 8001d1a:	f003 fe07 	bl	800592c <PrintXY>

	CurrentState = 5;
 8001d1e:	4bae      	ldr	r3, [pc, #696]	@ (8001fd8 <BlockJ3+0x2f8>)
 8001d20:	2205      	movs	r2, #5
 8001d22:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 20 ||
 8001d24:	4bad      	ldr	r3, [pc, #692]	@ (8001fdc <BlockJ3+0x2fc>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b13      	cmp	r3, #19
 8001d2a:	dc2e      	bgt.n	8001d8a <BlockJ3+0xaa>
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0 ||
 8001d2c:	4bac      	ldr	r3, [pc, #688]	@ (8001fe0 <BlockJ3+0x300>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4baa      	ldr	r3, [pc, #680]	@ (8001fdc <BlockJ3+0x2fc>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	1c99      	adds	r1, r3, #2
 8001d36:	48ab      	ldr	r0, [pc, #684]	@ (8001fe4 <BlockJ3+0x304>)
 8001d38:	4613      	mov	r3, r2
 8001d3a:	011b      	lsls	r3, r3, #4
 8001d3c:	1a9b      	subs	r3, r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	440b      	add	r3, r1
 8001d42:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 20 ||
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d11f      	bne.n	8001d8a <BlockJ3+0xaa>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 8001d4a:	4ba5      	ldr	r3, [pc, #660]	@ (8001fe0 <BlockJ3+0x300>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	1c5a      	adds	r2, r3, #1
 8001d50:	4ba2      	ldr	r3, [pc, #648]	@ (8001fdc <BlockJ3+0x2fc>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	1c99      	adds	r1, r3, #2
 8001d56:	48a3      	ldr	r0, [pc, #652]	@ (8001fe4 <BlockJ3+0x304>)
 8001d58:	4613      	mov	r3, r2
 8001d5a:	011b      	lsls	r3, r3, #4
 8001d5c:	1a9b      	subs	r3, r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	440b      	add	r3, r1
 8001d62:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0 ||
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10f      	bne.n	8001d8a <BlockJ3+0xaa>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] != 0)
 8001d6a:	4b9d      	ldr	r3, [pc, #628]	@ (8001fe0 <BlockJ3+0x300>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	1c9a      	adds	r2, r3, #2
 8001d70:	4b9a      	ldr	r3, [pc, #616]	@ (8001fdc <BlockJ3+0x2fc>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	1c99      	adds	r1, r3, #2
 8001d76:	489b      	ldr	r0, [pc, #620]	@ (8001fe4 <BlockJ3+0x304>)
 8001d78:	4613      	mov	r3, r2
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	1a9b      	subs	r3, r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	440b      	add	r3, r1
 8001d82:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d04d      	beq.n	8001e26 <BlockJ3+0x146>
	{
		while (isDownKey() == 1);
 8001d8a:	bf00      	nop
 8001d8c:	f003 fd48 	bl	8005820 <isDownKey>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d0fa      	beq.n	8001d8c <BlockJ3+0xac>
		NewTetromino = true;
 8001d96:	4b94      	ldr	r3, [pc, #592]	@ (8001fe8 <BlockJ3+0x308>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 8001d9c:	4b93      	ldr	r3, [pc, #588]	@ (8001fec <BlockJ3+0x30c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 8001da2:	4b93      	ldr	r3, [pc, #588]	@ (8001ff0 <BlockJ3+0x310>)
 8001da4:	8818      	ldrh	r0, [r3, #0]
 8001da6:	4b8e      	ldr	r3, [pc, #568]	@ (8001fe0 <BlockJ3+0x300>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	4b8b      	ldr	r3, [pc, #556]	@ (8001fdc <BlockJ3+0x2fc>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	1c59      	adds	r1, r3, #1
 8001db2:	4604      	mov	r4, r0
 8001db4:	488b      	ldr	r0, [pc, #556]	@ (8001fe4 <BlockJ3+0x304>)
 8001db6:	4613      	mov	r3, r2
 8001db8:	011b      	lsls	r3, r3, #4
 8001dba:	1a9b      	subs	r3, r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	440b      	add	r3, r1
 8001dc0:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] = colour;
 8001dc4:	4b8a      	ldr	r3, [pc, #552]	@ (8001ff0 <BlockJ3+0x310>)
 8001dc6:	8818      	ldrh	r0, [r3, #0]
 8001dc8:	4b85      	ldr	r3, [pc, #532]	@ (8001fe0 <BlockJ3+0x300>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b83      	ldr	r3, [pc, #524]	@ (8001fdc <BlockJ3+0x2fc>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	1c59      	adds	r1, r3, #1
 8001dd2:	4604      	mov	r4, r0
 8001dd4:	4883      	ldr	r0, [pc, #524]	@ (8001fe4 <BlockJ3+0x304>)
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	011b      	lsls	r3, r3, #4
 8001dda:	1a9b      	subs	r3, r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	440b      	add	r3, r1
 8001de0:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY] = colour;
 8001de4:	4b82      	ldr	r3, [pc, #520]	@ (8001ff0 <BlockJ3+0x310>)
 8001de6:	8818      	ldrh	r0, [r3, #0]
 8001de8:	4b7d      	ldr	r3, [pc, #500]	@ (8001fe0 <BlockJ3+0x300>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b7b      	ldr	r3, [pc, #492]	@ (8001fdc <BlockJ3+0x2fc>)
 8001dee:	6819      	ldr	r1, [r3, #0]
 8001df0:	4604      	mov	r4, r0
 8001df2:	487c      	ldr	r0, [pc, #496]	@ (8001fe4 <BlockJ3+0x304>)
 8001df4:	4613      	mov	r3, r2
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	440b      	add	r3, r1
 8001dfe:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] = colour;
 8001e02:	4b7b      	ldr	r3, [pc, #492]	@ (8001ff0 <BlockJ3+0x310>)
 8001e04:	8818      	ldrh	r0, [r3, #0]
 8001e06:	4b76      	ldr	r3, [pc, #472]	@ (8001fe0 <BlockJ3+0x300>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	1c9a      	adds	r2, r3, #2
 8001e0c:	4b73      	ldr	r3, [pc, #460]	@ (8001fdc <BlockJ3+0x2fc>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	1c59      	adds	r1, r3, #1
 8001e12:	4604      	mov	r4, r0
 8001e14:	4873      	ldr	r0, [pc, #460]	@ (8001fe4 <BlockJ3+0x304>)
 8001e16:	4613      	mov	r3, r2
 8001e18:	011b      	lsls	r3, r3, #4
 8001e1a:	1a9b      	subs	r3, r3, r2
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	440b      	add	r3, r1
 8001e20:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8001e24:	e002      	b.n	8001e2c <BlockJ3+0x14c>
	}
	else CanMoveDown = true;
 8001e26:	4b71      	ldr	r3, [pc, #452]	@ (8001fec <BlockJ3+0x30c>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8001e2c:	4b6c      	ldr	r3, [pc, #432]	@ (8001fe0 <BlockJ3+0x300>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b6a      	ldr	r3, [pc, #424]	@ (8001fdc <BlockJ3+0x2fc>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	1c59      	adds	r1, r3, #1
 8001e36:	486b      	ldr	r0, [pc, #428]	@ (8001fe4 <BlockJ3+0x304>)
 8001e38:	4613      	mov	r3, r2
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	1a9b      	subs	r3, r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	440b      	add	r3, r1
 8001e42:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d132      	bne.n	8001eb0 <BlockJ3+0x1d0>
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 8001e4a:	4b65      	ldr	r3, [pc, #404]	@ (8001fe0 <BlockJ3+0x300>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	1e5a      	subs	r2, r3, #1
 8001e50:	4b62      	ldr	r3, [pc, #392]	@ (8001fdc <BlockJ3+0x2fc>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	1c59      	adds	r1, r3, #1
 8001e56:	4863      	ldr	r0, [pc, #396]	@ (8001fe4 <BlockJ3+0x304>)
 8001e58:	4613      	mov	r3, r2
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	1a9b      	subs	r3, r3, r2
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	440b      	add	r3, r1
 8001e62:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d122      	bne.n	8001eb0 <BlockJ3+0x1d0>
		tetris[tetrominoLocX - 1][tetrominoLocY] == 0 &&
 8001e6a:	4b5d      	ldr	r3, [pc, #372]	@ (8001fe0 <BlockJ3+0x300>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	1e5a      	subs	r2, r3, #1
 8001e70:	4b5a      	ldr	r3, [pc, #360]	@ (8001fdc <BlockJ3+0x2fc>)
 8001e72:	6819      	ldr	r1, [r3, #0]
 8001e74:	485b      	ldr	r0, [pc, #364]	@ (8001fe4 <BlockJ3+0x304>)
 8001e76:	4613      	mov	r3, r2
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	1a9b      	subs	r3, r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	440b      	add	r3, r1
 8001e80:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d113      	bne.n	8001eb0 <BlockJ3+0x1d0>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0
 8001e88:	4b55      	ldr	r3, [pc, #340]	@ (8001fe0 <BlockJ3+0x300>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	1c5a      	adds	r2, r3, #1
 8001e8e:	4b53      	ldr	r3, [pc, #332]	@ (8001fdc <BlockJ3+0x2fc>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	1c59      	adds	r1, r3, #1
 8001e94:	4853      	ldr	r0, [pc, #332]	@ (8001fe4 <BlockJ3+0x304>)
 8001e96:	4613      	mov	r3, r2
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	1a9b      	subs	r3, r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	440b      	add	r3, r1
 8001ea0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX - 1][tetrominoLocY] == 0 &&
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d103      	bne.n	8001eb0 <BlockJ3+0x1d0>
	)
		CanMoveLeft = true;
 8001ea8:	4b52      	ldr	r3, [pc, #328]	@ (8001ff4 <BlockJ3+0x314>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]
 8001eae:	e002      	b.n	8001eb6 <BlockJ3+0x1d6>
	else CanMoveLeft = false;
 8001eb0:	4b50      	ldr	r3, [pc, #320]	@ (8001ff4 <BlockJ3+0x314>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8001eb6:	4b4a      	ldr	r3, [pc, #296]	@ (8001fe0 <BlockJ3+0x300>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	1c9a      	adds	r2, r3, #2
 8001ebc:	4b47      	ldr	r3, [pc, #284]	@ (8001fdc <BlockJ3+0x2fc>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	1c59      	adds	r1, r3, #1
 8001ec2:	4848      	ldr	r0, [pc, #288]	@ (8001fe4 <BlockJ3+0x304>)
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	440b      	add	r3, r1
 8001ece:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d132      	bne.n	8001f3c <BlockJ3+0x25c>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8001ed6:	4b42      	ldr	r3, [pc, #264]	@ (8001fe0 <BlockJ3+0x300>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	4b3f      	ldr	r3, [pc, #252]	@ (8001fdc <BlockJ3+0x2fc>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	1c59      	adds	r1, r3, #1
 8001ee2:	4840      	ldr	r0, [pc, #256]	@ (8001fe4 <BlockJ3+0x304>)
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	440b      	add	r3, r1
 8001eee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d122      	bne.n	8001f3c <BlockJ3+0x25c>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 8001ef6:	4b3a      	ldr	r3, [pc, #232]	@ (8001fe0 <BlockJ3+0x300>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	4b37      	ldr	r3, [pc, #220]	@ (8001fdc <BlockJ3+0x2fc>)
 8001efe:	6819      	ldr	r1, [r3, #0]
 8001f00:	4838      	ldr	r0, [pc, #224]	@ (8001fe4 <BlockJ3+0x304>)
 8001f02:	4613      	mov	r3, r2
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	1a9b      	subs	r3, r3, r2
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d113      	bne.n	8001f3c <BlockJ3+0x25c>
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0
 8001f14:	4b32      	ldr	r3, [pc, #200]	@ (8001fe0 <BlockJ3+0x300>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	1cda      	adds	r2, r3, #3
 8001f1a:	4b30      	ldr	r3, [pc, #192]	@ (8001fdc <BlockJ3+0x2fc>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	1c59      	adds	r1, r3, #1
 8001f20:	4830      	ldr	r0, [pc, #192]	@ (8001fe4 <BlockJ3+0x304>)
 8001f22:	4613      	mov	r3, r2
 8001f24:	011b      	lsls	r3, r3, #4
 8001f26:	1a9b      	subs	r3, r3, r2
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	440b      	add	r3, r1
 8001f2c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d103      	bne.n	8001f3c <BlockJ3+0x25c>
	)
		CanMoveRight = true;
 8001f34:	4b30      	ldr	r3, [pc, #192]	@ (8001ff8 <BlockJ3+0x318>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	701a      	strb	r2, [r3, #0]
 8001f3a:	e002      	b.n	8001f42 <BlockJ3+0x262>
	else CanMoveRight = false;
 8001f3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff8 <BlockJ3+0x318>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8001f42:	4b27      	ldr	r3, [pc, #156]	@ (8001fe0 <BlockJ3+0x300>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	4b24      	ldr	r3, [pc, #144]	@ (8001fdc <BlockJ3+0x2fc>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	1c59      	adds	r1, r3, #1
 8001f4e:	4825      	ldr	r0, [pc, #148]	@ (8001fe4 <BlockJ3+0x304>)
 8001f50:	4613      	mov	r3, r2
 8001f52:	011b      	lsls	r3, r3, #4
 8001f54:	1a9b      	subs	r3, r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	440b      	add	r3, r1
 8001f5a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d131      	bne.n	8001fc6 <BlockJ3+0x2e6>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 8001f62:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe0 <BlockJ3+0x300>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	4b1c      	ldr	r3, [pc, #112]	@ (8001fdc <BlockJ3+0x2fc>)
 8001f6a:	6819      	ldr	r1, [r3, #0]
 8001f6c:	481d      	ldr	r0, [pc, #116]	@ (8001fe4 <BlockJ3+0x304>)
 8001f6e:	4613      	mov	r3, r2
 8001f70:	011b      	lsls	r3, r3, #4
 8001f72:	1a9b      	subs	r3, r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	440b      	add	r3, r1
 8001f78:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d122      	bne.n	8001fc6 <BlockJ3+0x2e6>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 8001f80:	4b17      	ldr	r3, [pc, #92]	@ (8001fe0 <BlockJ3+0x300>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	1c5a      	adds	r2, r3, #1
 8001f86:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <BlockJ3+0x2fc>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	1c99      	adds	r1, r3, #2
 8001f8c:	4815      	ldr	r0, [pc, #84]	@ (8001fe4 <BlockJ3+0x304>)
 8001f8e:	4613      	mov	r3, r2
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	1a9b      	subs	r3, r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	440b      	add	r3, r1
 8001f98:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d112      	bne.n	8001fc6 <BlockJ3+0x2e6>
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0)
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <BlockJ3+0x300>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	1c9a      	adds	r2, r3, #2
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8001fdc <BlockJ3+0x2fc>)
 8001fa8:	6819      	ldr	r1, [r3, #0]
 8001faa:	480e      	ldr	r0, [pc, #56]	@ (8001fe4 <BlockJ3+0x304>)
 8001fac:	4613      	mov	r3, r2
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	1a9b      	subs	r3, r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	440b      	add	r3, r1
 8001fb6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d103      	bne.n	8001fc6 <BlockJ3+0x2e6>
		CanRotate = true;
 8001fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001ffc <BlockJ3+0x31c>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
 8001fc4:	e003      	b.n	8001fce <BlockJ3+0x2ee>
	else CanRotate = false;
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001ffc <BlockJ3+0x31c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 2); cout << char(248);
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd90      	pop	{r4, r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000eac 	.word	0x20000eac
 8001fdc:	20000ea8 	.word	0x20000ea8
 8001fe0:	20000ea4 	.word	0x20000ea4
 8001fe4:	20000090 	.word	0x20000090
 8001fe8:	2000000c 	.word	0x2000000c
 8001fec:	2000000f 	.word	0x2000000f
 8001ff0:	20000eb0 	.word	0x20000eb0
 8001ff4:	2000000e 	.word	0x2000000e
 8001ff8:	2000000d 	.word	0x2000000d
 8001ffc:	20000010 	.word	0x20000010

08002000 <BlockJ4>:

void BlockJ4(int x, int y)
{
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	3301      	adds	r3, #1
 8002012:	4619      	mov	r1, r3
 8002014:	4610      	mov	r0, r2
 8002016:	f003 fc89 	bl	800592c <PrintXY>
	PrintXY(x + 1, y);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3301      	adds	r3, #1
 800201e:	6839      	ldr	r1, [r7, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f003 fc83 	bl	800592c <PrintXY>
	PrintXY(x + 2, y);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3302      	adds	r3, #2
 800202a:	6839      	ldr	r1, [r7, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f003 fc7d 	bl	800592c <PrintXY>
	PrintXY(x + 1, y + 2);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	1c5a      	adds	r2, r3, #1
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	3302      	adds	r3, #2
 800203a:	4619      	mov	r1, r3
 800203c:	4610      	mov	r0, r2
 800203e:	f003 fc75 	bl	800592c <PrintXY>

	CurrentState = 6;
 8002042:	4ba5      	ldr	r3, [pc, #660]	@ (80022d8 <BlockJ4+0x2d8>)
 8002044:	2206      	movs	r2, #6
 8002046:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 8002048:	4ba4      	ldr	r3, [pc, #656]	@ (80022dc <BlockJ4+0x2dc>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b12      	cmp	r3, #18
 800204e:	dc1f      	bgt.n	8002090 <BlockJ4+0x90>
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 8002050:	4ba3      	ldr	r3, [pc, #652]	@ (80022e0 <BlockJ4+0x2e0>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	4ba1      	ldr	r3, [pc, #644]	@ (80022dc <BlockJ4+0x2dc>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	1cd9      	adds	r1, r3, #3
 800205c:	48a1      	ldr	r0, [pc, #644]	@ (80022e4 <BlockJ4+0x2e4>)
 800205e:	4613      	mov	r3, r2
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	440b      	add	r3, r1
 8002068:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10f      	bne.n	8002090 <BlockJ4+0x90>
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] != 0)
 8002070:	4b9b      	ldr	r3, [pc, #620]	@ (80022e0 <BlockJ4+0x2e0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	1c9a      	adds	r2, r3, #2
 8002076:	4b99      	ldr	r3, [pc, #612]	@ (80022dc <BlockJ4+0x2dc>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	1c59      	adds	r1, r3, #1
 800207c:	4899      	ldr	r0, [pc, #612]	@ (80022e4 <BlockJ4+0x2e4>)
 800207e:	4613      	mov	r3, r2
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	1a9b      	subs	r3, r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	440b      	add	r3, r1
 8002088:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 800208c:	2b00      	cmp	r3, #0
 800208e:	d04e      	beq.n	800212e <BlockJ4+0x12e>
	{
		while (isDownKey() == 1);
 8002090:	bf00      	nop
 8002092:	f003 fbc5 	bl	8005820 <isDownKey>
 8002096:	4603      	mov	r3, r0
 8002098:	2b01      	cmp	r3, #1
 800209a:	d0fa      	beq.n	8002092 <BlockJ4+0x92>
		NewTetromino = true;
 800209c:	4b92      	ldr	r3, [pc, #584]	@ (80022e8 <BlockJ4+0x2e8>)
 800209e:	2201      	movs	r2, #1
 80020a0:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 80020a2:	4b92      	ldr	r3, [pc, #584]	@ (80022ec <BlockJ4+0x2ec>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 80020a8:	4b91      	ldr	r3, [pc, #580]	@ (80022f0 <BlockJ4+0x2f0>)
 80020aa:	8818      	ldrh	r0, [r3, #0]
 80020ac:	4b8c      	ldr	r3, [pc, #560]	@ (80022e0 <BlockJ4+0x2e0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	1c5a      	adds	r2, r3, #1
 80020b2:	4b8a      	ldr	r3, [pc, #552]	@ (80022dc <BlockJ4+0x2dc>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	1c59      	adds	r1, r3, #1
 80020b8:	4604      	mov	r4, r0
 80020ba:	488a      	ldr	r0, [pc, #552]	@ (80022e4 <BlockJ4+0x2e4>)
 80020bc:	4613      	mov	r3, r2
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	440b      	add	r3, r1
 80020c6:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] = colour;
 80020ca:	4b89      	ldr	r3, [pc, #548]	@ (80022f0 <BlockJ4+0x2f0>)
 80020cc:	8818      	ldrh	r0, [r3, #0]
 80020ce:	4b84      	ldr	r3, [pc, #528]	@ (80022e0 <BlockJ4+0x2e0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	4b81      	ldr	r3, [pc, #516]	@ (80022dc <BlockJ4+0x2dc>)
 80020d6:	6819      	ldr	r1, [r3, #0]
 80020d8:	4604      	mov	r4, r0
 80020da:	4882      	ldr	r0, [pc, #520]	@ (80022e4 <BlockJ4+0x2e4>)
 80020dc:	4613      	mov	r3, r2
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	440b      	add	r3, r1
 80020e6:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] = colour;
 80020ea:	4b81      	ldr	r3, [pc, #516]	@ (80022f0 <BlockJ4+0x2f0>)
 80020ec:	8818      	ldrh	r0, [r3, #0]
 80020ee:	4b7c      	ldr	r3, [pc, #496]	@ (80022e0 <BlockJ4+0x2e0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	4b79      	ldr	r3, [pc, #484]	@ (80022dc <BlockJ4+0x2dc>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	1c99      	adds	r1, r3, #2
 80020fa:	4604      	mov	r4, r0
 80020fc:	4879      	ldr	r0, [pc, #484]	@ (80022e4 <BlockJ4+0x2e4>)
 80020fe:	4613      	mov	r3, r2
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	1a9b      	subs	r3, r3, r2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	440b      	add	r3, r1
 8002108:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY] = colour;
 800210c:	4b78      	ldr	r3, [pc, #480]	@ (80022f0 <BlockJ4+0x2f0>)
 800210e:	8818      	ldrh	r0, [r3, #0]
 8002110:	4b73      	ldr	r3, [pc, #460]	@ (80022e0 <BlockJ4+0x2e0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	1c9a      	adds	r2, r3, #2
 8002116:	4b71      	ldr	r3, [pc, #452]	@ (80022dc <BlockJ4+0x2dc>)
 8002118:	6819      	ldr	r1, [r3, #0]
 800211a:	4604      	mov	r4, r0
 800211c:	4871      	ldr	r0, [pc, #452]	@ (80022e4 <BlockJ4+0x2e4>)
 800211e:	4613      	mov	r3, r2
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	440b      	add	r3, r1
 8002128:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 800212c:	e002      	b.n	8002134 <BlockJ4+0x134>
	}
	else CanMoveDown = true;
 800212e:	4b6f      	ldr	r3, [pc, #444]	@ (80022ec <BlockJ4+0x2ec>)
 8002130:	2201      	movs	r2, #1
 8002132:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8002134:	4b6a      	ldr	r3, [pc, #424]	@ (80022e0 <BlockJ4+0x2e0>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4b68      	ldr	r3, [pc, #416]	@ (80022dc <BlockJ4+0x2dc>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	1c59      	adds	r1, r3, #1
 800213e:	4869      	ldr	r0, [pc, #420]	@ (80022e4 <BlockJ4+0x2e4>)
 8002140:	4613      	mov	r3, r2
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	440b      	add	r3, r1
 800214a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d12f      	bne.n	80021b2 <BlockJ4+0x1b2>
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 8002152:	4b63      	ldr	r3, [pc, #396]	@ (80022e0 <BlockJ4+0x2e0>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	4b61      	ldr	r3, [pc, #388]	@ (80022dc <BlockJ4+0x2dc>)
 8002158:	6819      	ldr	r1, [r3, #0]
 800215a:	4862      	ldr	r0, [pc, #392]	@ (80022e4 <BlockJ4+0x2e4>)
 800215c:	4613      	mov	r3, r2
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	1a9b      	subs	r3, r3, r2
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	440b      	add	r3, r1
 8002166:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 800216a:	2b00      	cmp	r3, #0
 800216c:	d121      	bne.n	80021b2 <BlockJ4+0x1b2>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 800216e:	4b5c      	ldr	r3, [pc, #368]	@ (80022e0 <BlockJ4+0x2e0>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	4b5a      	ldr	r3, [pc, #360]	@ (80022dc <BlockJ4+0x2dc>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	1c99      	adds	r1, r3, #2
 8002178:	485a      	ldr	r0, [pc, #360]	@ (80022e4 <BlockJ4+0x2e4>)
 800217a:	4613      	mov	r3, r2
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	1a9b      	subs	r3, r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	440b      	add	r3, r1
 8002184:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 8002188:	2b00      	cmp	r3, #0
 800218a:	d112      	bne.n	80021b2 <BlockJ4+0x1b2>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0
 800218c:	4b54      	ldr	r3, [pc, #336]	@ (80022e0 <BlockJ4+0x2e0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	4b52      	ldr	r3, [pc, #328]	@ (80022dc <BlockJ4+0x2dc>)
 8002194:	6819      	ldr	r1, [r3, #0]
 8002196:	4853      	ldr	r0, [pc, #332]	@ (80022e4 <BlockJ4+0x2e4>)
 8002198:	4613      	mov	r3, r2
 800219a:	011b      	lsls	r3, r3, #4
 800219c:	1a9b      	subs	r3, r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	440b      	add	r3, r1
 80021a2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d103      	bne.n	80021b2 <BlockJ4+0x1b2>
	)
		CanMoveLeft = true;
 80021aa:	4b52      	ldr	r3, [pc, #328]	@ (80022f4 <BlockJ4+0x2f4>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	701a      	strb	r2, [r3, #0]
 80021b0:	e002      	b.n	80021b8 <BlockJ4+0x1b8>
	else CanMoveLeft = false;
 80021b2:	4b50      	ldr	r3, [pc, #320]	@ (80022f4 <BlockJ4+0x2f4>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80021b8:	4b49      	ldr	r3, [pc, #292]	@ (80022e0 <BlockJ4+0x2e0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	1c9a      	adds	r2, r3, #2
 80021be:	4b47      	ldr	r3, [pc, #284]	@ (80022dc <BlockJ4+0x2dc>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	1c59      	adds	r1, r3, #1
 80021c4:	4847      	ldr	r0, [pc, #284]	@ (80022e4 <BlockJ4+0x2e4>)
 80021c6:	4613      	mov	r3, r2
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	1a9b      	subs	r3, r3, r2
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	440b      	add	r3, r1
 80021d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d131      	bne.n	800223c <BlockJ4+0x23c>
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 80021d8:	4b41      	ldr	r3, [pc, #260]	@ (80022e0 <BlockJ4+0x2e0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	1c9a      	adds	r2, r3, #2
 80021de:	4b3f      	ldr	r3, [pc, #252]	@ (80022dc <BlockJ4+0x2dc>)
 80021e0:	6819      	ldr	r1, [r3, #0]
 80021e2:	4840      	ldr	r0, [pc, #256]	@ (80022e4 <BlockJ4+0x2e4>)
 80021e4:	4613      	mov	r3, r2
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	1a9b      	subs	r3, r3, r2
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	440b      	add	r3, r1
 80021ee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d122      	bne.n	800223c <BlockJ4+0x23c>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 80021f6:	4b3a      	ldr	r3, [pc, #232]	@ (80022e0 <BlockJ4+0x2e0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	1c9a      	adds	r2, r3, #2
 80021fc:	4b37      	ldr	r3, [pc, #220]	@ (80022dc <BlockJ4+0x2dc>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	1c99      	adds	r1, r3, #2
 8002202:	4838      	ldr	r0, [pc, #224]	@ (80022e4 <BlockJ4+0x2e4>)
 8002204:	4613      	mov	r3, r2
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	440b      	add	r3, r1
 800220e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 8002212:	2b00      	cmp	r3, #0
 8002214:	d112      	bne.n	800223c <BlockJ4+0x23c>
		tetris[tetrominoLocX + 3][tetrominoLocY] == 0
 8002216:	4b32      	ldr	r3, [pc, #200]	@ (80022e0 <BlockJ4+0x2e0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	1cda      	adds	r2, r3, #3
 800221c:	4b2f      	ldr	r3, [pc, #188]	@ (80022dc <BlockJ4+0x2dc>)
 800221e:	6819      	ldr	r1, [r3, #0]
 8002220:	4830      	ldr	r0, [pc, #192]	@ (80022e4 <BlockJ4+0x2e4>)
 8002222:	4613      	mov	r3, r2
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	1a9b      	subs	r3, r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	440b      	add	r3, r1
 800222c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 8002230:	2b00      	cmp	r3, #0
 8002232:	d103      	bne.n	800223c <BlockJ4+0x23c>
	)
		CanMoveRight = true;
 8002234:	4b30      	ldr	r3, [pc, #192]	@ (80022f8 <BlockJ4+0x2f8>)
 8002236:	2201      	movs	r2, #1
 8002238:	701a      	strb	r2, [r3, #0]
 800223a:	e002      	b.n	8002242 <BlockJ4+0x242>
	else CanMoveRight = false;
 800223c:	4b2e      	ldr	r3, [pc, #184]	@ (80022f8 <BlockJ4+0x2f8>)
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8002242:	4b27      	ldr	r3, [pc, #156]	@ (80022e0 <BlockJ4+0x2e0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	4b24      	ldr	r3, [pc, #144]	@ (80022dc <BlockJ4+0x2dc>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	1c59      	adds	r1, r3, #1
 800224e:	4825      	ldr	r0, [pc, #148]	@ (80022e4 <BlockJ4+0x2e4>)
 8002250:	4613      	mov	r3, r2
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	1a9b      	subs	r3, r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	440b      	add	r3, r1
 800225a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d132      	bne.n	80022c8 <BlockJ4+0x2c8>
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8002262:	4b1f      	ldr	r3, [pc, #124]	@ (80022e0 <BlockJ4+0x2e0>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	4b1d      	ldr	r3, [pc, #116]	@ (80022dc <BlockJ4+0x2dc>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	1c59      	adds	r1, r3, #1
 800226c:	481d      	ldr	r0, [pc, #116]	@ (80022e4 <BlockJ4+0x2e4>)
 800226e:	4613      	mov	r3, r2
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	1a9b      	subs	r3, r3, r2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	440b      	add	r3, r1
 8002278:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 800227c:	2b00      	cmp	r3, #0
 800227e:	d123      	bne.n	80022c8 <BlockJ4+0x2c8>
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8002280:	4b17      	ldr	r3, [pc, #92]	@ (80022e0 <BlockJ4+0x2e0>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	1c9a      	adds	r2, r3, #2
 8002286:	4b15      	ldr	r3, [pc, #84]	@ (80022dc <BlockJ4+0x2dc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	1c59      	adds	r1, r3, #1
 800228c:	4815      	ldr	r0, [pc, #84]	@ (80022e4 <BlockJ4+0x2e4>)
 800228e:	4613      	mov	r3, r2
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	440b      	add	r3, r1
 8002298:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 800229c:	2b00      	cmp	r3, #0
 800229e:	d113      	bne.n	80022c8 <BlockJ4+0x2c8>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0)
 80022a0:	4b0f      	ldr	r3, [pc, #60]	@ (80022e0 <BlockJ4+0x2e0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	1c9a      	adds	r2, r3, #2
 80022a6:	4b0d      	ldr	r3, [pc, #52]	@ (80022dc <BlockJ4+0x2dc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	1c99      	adds	r1, r3, #2
 80022ac:	480d      	ldr	r0, [pc, #52]	@ (80022e4 <BlockJ4+0x2e4>)
 80022ae:	4613      	mov	r3, r2
 80022b0:	011b      	lsls	r3, r3, #4
 80022b2:	1a9b      	subs	r3, r3, r2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	440b      	add	r3, r1
 80022b8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d103      	bne.n	80022c8 <BlockJ4+0x2c8>
		CanRotate = true;
 80022c0:	4b0e      	ldr	r3, [pc, #56]	@ (80022fc <BlockJ4+0x2fc>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	701a      	strb	r2, [r3, #0]
 80022c6:	e003      	b.n	80022d0 <BlockJ4+0x2d0>
	else CanRotate = false;
 80022c8:	4b0c      	ldr	r3, [pc, #48]	@ (80022fc <BlockJ4+0x2fc>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 3); cout << char(248);
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 1); cout << char(248);
}
 80022ce:	bf00      	nop
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd90      	pop	{r4, r7, pc}
 80022d8:	20000eac 	.word	0x20000eac
 80022dc:	20000ea8 	.word	0x20000ea8
 80022e0:	20000ea4 	.word	0x20000ea4
 80022e4:	20000090 	.word	0x20000090
 80022e8:	2000000c 	.word	0x2000000c
 80022ec:	2000000f 	.word	0x2000000f
 80022f0:	20000eb0 	.word	0x20000eb0
 80022f4:	2000000e 	.word	0x2000000e
 80022f8:	2000000d 	.word	0x2000000d
 80022fc:	20000010 	.word	0x20000010

08002300 <BlockL1>:

void BlockL1(int x, int y)
{
 8002300:	b590      	push	{r4, r7, lr}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	4619      	mov	r1, r3
 8002314:	4610      	mov	r0, r2
 8002316:	f003 fb09 	bl	800592c <PrintXY>
	PrintXY(x, y + 1);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	3301      	adds	r3, #1
 800231e:	4619      	mov	r1, r3
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f003 fb03 	bl	800592c <PrintXY>
	PrintXY(x + 2, y + 1);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	1c9a      	adds	r2, r3, #2
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	3301      	adds	r3, #1
 800232e:	4619      	mov	r1, r3
 8002330:	4610      	mov	r0, r2
 8002332:	f003 fafb 	bl	800592c <PrintXY>
	PrintXY(x, y + 2);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	3302      	adds	r3, #2
 800233a:	4619      	mov	r1, r3
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f003 faf5 	bl	800592c <PrintXY>

	CurrentState = 7;
 8002342:	4bb0      	ldr	r3, [pc, #704]	@ (8002604 <BlockL1+0x304>)
 8002344:	2207      	movs	r2, #7
 8002346:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 8002348:	4baf      	ldr	r3, [pc, #700]	@ (8002608 <BlockL1+0x308>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b12      	cmp	r3, #18
 800234e:	dc2e      	bgt.n	80023ae <BlockL1+0xae>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 8002350:	4bae      	ldr	r3, [pc, #696]	@ (800260c <BlockL1+0x30c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	4bac      	ldr	r3, [pc, #688]	@ (8002608 <BlockL1+0x308>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	1c99      	adds	r1, r3, #2
 800235c:	48ac      	ldr	r0, [pc, #688]	@ (8002610 <BlockL1+0x310>)
 800235e:	4613      	mov	r3, r2
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	1a9b      	subs	r3, r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	440b      	add	r3, r1
 8002368:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 800236c:	2b00      	cmp	r3, #0
 800236e:	d11e      	bne.n	80023ae <BlockL1+0xae>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] != 0 ||
 8002370:	4ba6      	ldr	r3, [pc, #664]	@ (800260c <BlockL1+0x30c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	1c9a      	adds	r2, r3, #2
 8002376:	4ba4      	ldr	r3, [pc, #656]	@ (8002608 <BlockL1+0x308>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	1c99      	adds	r1, r3, #2
 800237c:	48a4      	ldr	r0, [pc, #656]	@ (8002610 <BlockL1+0x310>)
 800237e:	4613      	mov	r3, r2
 8002380:	011b      	lsls	r3, r3, #4
 8002382:	1a9b      	subs	r3, r3, r2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	440b      	add	r3, r1
 8002388:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10e      	bne.n	80023ae <BlockL1+0xae>
		tetris[tetrominoLocX][tetrominoLocY + 3] != 0)
 8002390:	4b9e      	ldr	r3, [pc, #632]	@ (800260c <BlockL1+0x30c>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b9c      	ldr	r3, [pc, #624]	@ (8002608 <BlockL1+0x308>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	1cd9      	adds	r1, r3, #3
 800239a:	489d      	ldr	r0, [pc, #628]	@ (8002610 <BlockL1+0x310>)
 800239c:	4613      	mov	r3, r2
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	440b      	add	r3, r1
 80023a6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] != 0 ||
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d04e      	beq.n	800244c <BlockL1+0x14c>
	{
		while (isDownKey() == 1);
 80023ae:	bf00      	nop
 80023b0:	f003 fa36 	bl	8005820 <isDownKey>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d0fa      	beq.n	80023b0 <BlockL1+0xb0>
		NewTetromino = true;
 80023ba:	4b96      	ldr	r3, [pc, #600]	@ (8002614 <BlockL1+0x314>)
 80023bc:	2201      	movs	r2, #1
 80023be:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 80023c0:	4b95      	ldr	r3, [pc, #596]	@ (8002618 <BlockL1+0x318>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 80023c6:	4b95      	ldr	r3, [pc, #596]	@ (800261c <BlockL1+0x31c>)
 80023c8:	8818      	ldrh	r0, [r3, #0]
 80023ca:	4b90      	ldr	r3, [pc, #576]	@ (800260c <BlockL1+0x30c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	1c5a      	adds	r2, r3, #1
 80023d0:	4b8d      	ldr	r3, [pc, #564]	@ (8002608 <BlockL1+0x308>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	1c59      	adds	r1, r3, #1
 80023d6:	4604      	mov	r4, r0
 80023d8:	488d      	ldr	r0, [pc, #564]	@ (8002610 <BlockL1+0x310>)
 80023da:	4613      	mov	r3, r2
 80023dc:	011b      	lsls	r3, r3, #4
 80023de:	1a9b      	subs	r3, r3, r2
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	440b      	add	r3, r1
 80023e4:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] = colour;
 80023e8:	4b8c      	ldr	r3, [pc, #560]	@ (800261c <BlockL1+0x31c>)
 80023ea:	8818      	ldrh	r0, [r3, #0]
 80023ec:	4b87      	ldr	r3, [pc, #540]	@ (800260c <BlockL1+0x30c>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b85      	ldr	r3, [pc, #532]	@ (8002608 <BlockL1+0x308>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	1c59      	adds	r1, r3, #1
 80023f6:	4604      	mov	r4, r0
 80023f8:	4885      	ldr	r0, [pc, #532]	@ (8002610 <BlockL1+0x310>)
 80023fa:	4613      	mov	r3, r2
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	440b      	add	r3, r1
 8002404:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] = colour;
 8002408:	4b84      	ldr	r3, [pc, #528]	@ (800261c <BlockL1+0x31c>)
 800240a:	8818      	ldrh	r0, [r3, #0]
 800240c:	4b7f      	ldr	r3, [pc, #508]	@ (800260c <BlockL1+0x30c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	1c9a      	adds	r2, r3, #2
 8002412:	4b7d      	ldr	r3, [pc, #500]	@ (8002608 <BlockL1+0x308>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	1c59      	adds	r1, r3, #1
 8002418:	4604      	mov	r4, r0
 800241a:	487d      	ldr	r0, [pc, #500]	@ (8002610 <BlockL1+0x310>)
 800241c:	4613      	mov	r3, r2
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	440b      	add	r3, r1
 8002426:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] = colour;
 800242a:	4b7c      	ldr	r3, [pc, #496]	@ (800261c <BlockL1+0x31c>)
 800242c:	8818      	ldrh	r0, [r3, #0]
 800242e:	4b77      	ldr	r3, [pc, #476]	@ (800260c <BlockL1+0x30c>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	4b75      	ldr	r3, [pc, #468]	@ (8002608 <BlockL1+0x308>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	1c99      	adds	r1, r3, #2
 8002438:	4604      	mov	r4, r0
 800243a:	4875      	ldr	r0, [pc, #468]	@ (8002610 <BlockL1+0x310>)
 800243c:	4613      	mov	r3, r2
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	1a9b      	subs	r3, r3, r2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	440b      	add	r3, r1
 8002446:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 800244a:	e002      	b.n	8002452 <BlockL1+0x152>
	}
	else CanMoveDown = true;
 800244c:	4b72      	ldr	r3, [pc, #456]	@ (8002618 <BlockL1+0x318>)
 800244e:	2201      	movs	r2, #1
 8002450:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8002452:	4b6e      	ldr	r3, [pc, #440]	@ (800260c <BlockL1+0x30c>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	4b6c      	ldr	r3, [pc, #432]	@ (8002608 <BlockL1+0x308>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	1c59      	adds	r1, r3, #1
 800245c:	486c      	ldr	r0, [pc, #432]	@ (8002610 <BlockL1+0x310>)
 800245e:	4613      	mov	r3, r2
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	440b      	add	r3, r1
 8002468:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d133      	bne.n	80024d8 <BlockL1+0x1d8>
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 8002470:	4b66      	ldr	r3, [pc, #408]	@ (800260c <BlockL1+0x30c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	1e5a      	subs	r2, r3, #1
 8002476:	4b64      	ldr	r3, [pc, #400]	@ (8002608 <BlockL1+0x308>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	1c59      	adds	r1, r3, #1
 800247c:	4864      	ldr	r0, [pc, #400]	@ (8002610 <BlockL1+0x310>)
 800247e:	4613      	mov	r3, r2
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	1a9b      	subs	r3, r3, r2
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	440b      	add	r3, r1
 8002488:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 800248c:	2b00      	cmp	r3, #0
 800248e:	d123      	bne.n	80024d8 <BlockL1+0x1d8>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8002490:	4b5e      	ldr	r3, [pc, #376]	@ (800260c <BlockL1+0x30c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	4b5c      	ldr	r3, [pc, #368]	@ (8002608 <BlockL1+0x308>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	1c59      	adds	r1, r3, #1
 800249c:	485c      	ldr	r0, [pc, #368]	@ (8002610 <BlockL1+0x310>)
 800249e:	4613      	mov	r3, r2
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	1a9b      	subs	r3, r3, r2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	440b      	add	r3, r1
 80024a8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d113      	bne.n	80024d8 <BlockL1+0x1d8>
		tetris[tetrominoLocX - 1][tetrominoLocY + 2] == 0
 80024b0:	4b56      	ldr	r3, [pc, #344]	@ (800260c <BlockL1+0x30c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	1e5a      	subs	r2, r3, #1
 80024b6:	4b54      	ldr	r3, [pc, #336]	@ (8002608 <BlockL1+0x308>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	1c99      	adds	r1, r3, #2
 80024bc:	4854      	ldr	r0, [pc, #336]	@ (8002610 <BlockL1+0x310>)
 80024be:	4613      	mov	r3, r2
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	440b      	add	r3, r1
 80024c8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d103      	bne.n	80024d8 <BlockL1+0x1d8>
	)
		CanMoveLeft = true;
 80024d0:	4b53      	ldr	r3, [pc, #332]	@ (8002620 <BlockL1+0x320>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	701a      	strb	r2, [r3, #0]
 80024d6:	e002      	b.n	80024de <BlockL1+0x1de>
	else CanMoveLeft = false;
 80024d8:	4b51      	ldr	r3, [pc, #324]	@ (8002620 <BlockL1+0x320>)
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80024de:	4b4b      	ldr	r3, [pc, #300]	@ (800260c <BlockL1+0x30c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	1c9a      	adds	r2, r3, #2
 80024e4:	4b48      	ldr	r3, [pc, #288]	@ (8002608 <BlockL1+0x308>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	1c59      	adds	r1, r3, #1
 80024ea:	4849      	ldr	r0, [pc, #292]	@ (8002610 <BlockL1+0x310>)
 80024ec:	4613      	mov	r3, r2
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	1a9b      	subs	r3, r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	440b      	add	r3, r1
 80024f6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d133      	bne.n	8002566 <BlockL1+0x266>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80024fe:	4b43      	ldr	r3, [pc, #268]	@ (800260c <BlockL1+0x30c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	4b40      	ldr	r3, [pc, #256]	@ (8002608 <BlockL1+0x308>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	1c59      	adds	r1, r3, #1
 800250a:	4841      	ldr	r0, [pc, #260]	@ (8002610 <BlockL1+0x310>)
 800250c:	4613      	mov	r3, r2
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	440b      	add	r3, r1
 8002516:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 800251a:	2b00      	cmp	r3, #0
 800251c:	d123      	bne.n	8002566 <BlockL1+0x266>
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 800251e:	4b3b      	ldr	r3, [pc, #236]	@ (800260c <BlockL1+0x30c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	1cda      	adds	r2, r3, #3
 8002524:	4b38      	ldr	r3, [pc, #224]	@ (8002608 <BlockL1+0x308>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	1c59      	adds	r1, r3, #1
 800252a:	4839      	ldr	r0, [pc, #228]	@ (8002610 <BlockL1+0x310>)
 800252c:	4613      	mov	r3, r2
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	440b      	add	r3, r1
 8002536:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 800253a:	2b00      	cmp	r3, #0
 800253c:	d113      	bne.n	8002566 <BlockL1+0x266>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0
 800253e:	4b33      	ldr	r3, [pc, #204]	@ (800260c <BlockL1+0x30c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	4b30      	ldr	r3, [pc, #192]	@ (8002608 <BlockL1+0x308>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	1c99      	adds	r1, r3, #2
 800254a:	4831      	ldr	r0, [pc, #196]	@ (8002610 <BlockL1+0x310>)
 800254c:	4613      	mov	r3, r2
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	1a9b      	subs	r3, r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	440b      	add	r3, r1
 8002556:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 800255a:	2b00      	cmp	r3, #0
 800255c:	d103      	bne.n	8002566 <BlockL1+0x266>
	)
		CanMoveRight = true;
 800255e:	4b31      	ldr	r3, [pc, #196]	@ (8002624 <BlockL1+0x324>)
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]
 8002564:	e002      	b.n	800256c <BlockL1+0x26c>
	else CanMoveRight = false;
 8002566:	4b2f      	ldr	r3, [pc, #188]	@ (8002624 <BlockL1+0x324>)
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 800256c:	4b27      	ldr	r3, [pc, #156]	@ (800260c <BlockL1+0x30c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	4b25      	ldr	r3, [pc, #148]	@ (8002608 <BlockL1+0x308>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	1c59      	adds	r1, r3, #1
 8002578:	4825      	ldr	r0, [pc, #148]	@ (8002610 <BlockL1+0x310>)
 800257a:	4613      	mov	r3, r2
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	1a9b      	subs	r3, r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	440b      	add	r3, r1
 8002584:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d132      	bne.n	80025f2 <BlockL1+0x2f2>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 800258c:	4b1f      	ldr	r3, [pc, #124]	@ (800260c <BlockL1+0x30c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	4b1d      	ldr	r3, [pc, #116]	@ (8002608 <BlockL1+0x308>)
 8002594:	6819      	ldr	r1, [r3, #0]
 8002596:	481e      	ldr	r0, [pc, #120]	@ (8002610 <BlockL1+0x310>)
 8002598:	4613      	mov	r3, r2
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	440b      	add	r3, r1
 80025a2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d123      	bne.n	80025f2 <BlockL1+0x2f2>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 80025aa:	4b18      	ldr	r3, [pc, #96]	@ (800260c <BlockL1+0x30c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	4b15      	ldr	r3, [pc, #84]	@ (8002608 <BlockL1+0x308>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	1c99      	adds	r1, r3, #2
 80025b6:	4816      	ldr	r0, [pc, #88]	@ (8002610 <BlockL1+0x310>)
 80025b8:	4613      	mov	r3, r2
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	440b      	add	r3, r1
 80025c2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d113      	bne.n	80025f2 <BlockL1+0x2f2>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0)
 80025ca:	4b10      	ldr	r3, [pc, #64]	@ (800260c <BlockL1+0x30c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	1c9a      	adds	r2, r3, #2
 80025d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002608 <BlockL1+0x308>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	1c99      	adds	r1, r3, #2
 80025d6:	480e      	ldr	r0, [pc, #56]	@ (8002610 <BlockL1+0x310>)
 80025d8:	4613      	mov	r3, r2
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	1a9b      	subs	r3, r3, r2
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	440b      	add	r3, r1
 80025e2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d103      	bne.n	80025f2 <BlockL1+0x2f2>
		CanRotate = true;
 80025ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002628 <BlockL1+0x328>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]
 80025f0:	e003      	b.n	80025fa <BlockL1+0x2fa>
	else CanRotate = false;
 80025f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002628 <BlockL1+0x328>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX, tetrominoLocY + 3); cout << char(248);
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd90      	pop	{r4, r7, pc}
 8002602:	bf00      	nop
 8002604:	20000eac 	.word	0x20000eac
 8002608:	20000ea8 	.word	0x20000ea8
 800260c:	20000ea4 	.word	0x20000ea4
 8002610:	20000090 	.word	0x20000090
 8002614:	2000000c 	.word	0x2000000c
 8002618:	2000000f 	.word	0x2000000f
 800261c:	20000eb0 	.word	0x20000eb0
 8002620:	2000000e 	.word	0x2000000e
 8002624:	2000000d 	.word	0x2000000d
 8002628:	20000010 	.word	0x20000010

0800262c <BlockL2>:

void BlockL2(int x, int y)
{
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	3301      	adds	r3, #1
 800263e:	4619      	mov	r1, r3
 8002640:	4610      	mov	r0, r2
 8002642:	f003 f973 	bl	800592c <PrintXY>
	PrintXY(x + 1, y);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3301      	adds	r3, #1
 800264a:	6839      	ldr	r1, [r7, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f003 f96d 	bl	800592c <PrintXY>
	PrintXY(x + 1, y + 2);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	3302      	adds	r3, #2
 800265a:	4619      	mov	r1, r3
 800265c:	4610      	mov	r0, r2
 800265e:	f003 f965 	bl	800592c <PrintXY>
	PrintXY(x + 2, y + 2);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	1c9a      	adds	r2, r3, #2
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	3302      	adds	r3, #2
 800266a:	4619      	mov	r1, r3
 800266c:	4610      	mov	r0, r2
 800266e:	f003 f95d 	bl	800592c <PrintXY>

	CurrentState = 8;
 8002672:	4ba6      	ldr	r3, [pc, #664]	@ (800290c <BlockL2+0x2e0>)
 8002674:	2208      	movs	r2, #8
 8002676:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 8002678:	4ba5      	ldr	r3, [pc, #660]	@ (8002910 <BlockL2+0x2e4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b12      	cmp	r3, #18
 800267e:	dc1f      	bgt.n	80026c0 <BlockL2+0x94>
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 8002680:	4ba4      	ldr	r3, [pc, #656]	@ (8002914 <BlockL2+0x2e8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	4ba2      	ldr	r3, [pc, #648]	@ (8002910 <BlockL2+0x2e4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	1cd9      	adds	r1, r3, #3
 800268c:	48a2      	ldr	r0, [pc, #648]	@ (8002918 <BlockL2+0x2ec>)
 800268e:	4613      	mov	r3, r2
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	1a9b      	subs	r3, r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	440b      	add	r3, r1
 8002698:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10f      	bne.n	80026c0 <BlockL2+0x94>
		tetris[tetrominoLocX + 2][tetrominoLocY + 3] != 0)
 80026a0:	4b9c      	ldr	r3, [pc, #624]	@ (8002914 <BlockL2+0x2e8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	1c9a      	adds	r2, r3, #2
 80026a6:	4b9a      	ldr	r3, [pc, #616]	@ (8002910 <BlockL2+0x2e4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	1cd9      	adds	r1, r3, #3
 80026ac:	489a      	ldr	r0, [pc, #616]	@ (8002918 <BlockL2+0x2ec>)
 80026ae:	4613      	mov	r3, r2
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	1a9b      	subs	r3, r3, r2
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	440b      	add	r3, r1
 80026b8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d04f      	beq.n	8002760 <BlockL2+0x134>
	{
		while (isDownKey() == 1);
 80026c0:	bf00      	nop
 80026c2:	f003 f8ad 	bl	8005820 <isDownKey>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d0fa      	beq.n	80026c2 <BlockL2+0x96>
		NewTetromino = true;
 80026cc:	4b93      	ldr	r3, [pc, #588]	@ (800291c <BlockL2+0x2f0>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 80026d2:	4b93      	ldr	r3, [pc, #588]	@ (8002920 <BlockL2+0x2f4>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 80026d8:	4b92      	ldr	r3, [pc, #584]	@ (8002924 <BlockL2+0x2f8>)
 80026da:	8818      	ldrh	r0, [r3, #0]
 80026dc:	4b8d      	ldr	r3, [pc, #564]	@ (8002914 <BlockL2+0x2e8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	1c5a      	adds	r2, r3, #1
 80026e2:	4b8b      	ldr	r3, [pc, #556]	@ (8002910 <BlockL2+0x2e4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	1c59      	adds	r1, r3, #1
 80026e8:	4604      	mov	r4, r0
 80026ea:	488b      	ldr	r0, [pc, #556]	@ (8002918 <BlockL2+0x2ec>)
 80026ec:	4613      	mov	r3, r2
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	1a9b      	subs	r3, r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	440b      	add	r3, r1
 80026f6:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] = colour;
 80026fa:	4b8a      	ldr	r3, [pc, #552]	@ (8002924 <BlockL2+0x2f8>)
 80026fc:	8818      	ldrh	r0, [r3, #0]
 80026fe:	4b85      	ldr	r3, [pc, #532]	@ (8002914 <BlockL2+0x2e8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	4b82      	ldr	r3, [pc, #520]	@ (8002910 <BlockL2+0x2e4>)
 8002706:	6819      	ldr	r1, [r3, #0]
 8002708:	4604      	mov	r4, r0
 800270a:	4883      	ldr	r0, [pc, #524]	@ (8002918 <BlockL2+0x2ec>)
 800270c:	4613      	mov	r3, r2
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	1a9b      	subs	r3, r3, r2
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	440b      	add	r3, r1
 8002716:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] = colour;
 800271a:	4b82      	ldr	r3, [pc, #520]	@ (8002924 <BlockL2+0x2f8>)
 800271c:	8818      	ldrh	r0, [r3, #0]
 800271e:	4b7d      	ldr	r3, [pc, #500]	@ (8002914 <BlockL2+0x2e8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	4b7a      	ldr	r3, [pc, #488]	@ (8002910 <BlockL2+0x2e4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	1c99      	adds	r1, r3, #2
 800272a:	4604      	mov	r4, r0
 800272c:	487a      	ldr	r0, [pc, #488]	@ (8002918 <BlockL2+0x2ec>)
 800272e:	4613      	mov	r3, r2
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	440b      	add	r3, r1
 8002738:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] = colour;
 800273c:	4b79      	ldr	r3, [pc, #484]	@ (8002924 <BlockL2+0x2f8>)
 800273e:	8818      	ldrh	r0, [r3, #0]
 8002740:	4b74      	ldr	r3, [pc, #464]	@ (8002914 <BlockL2+0x2e8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	1c9a      	adds	r2, r3, #2
 8002746:	4b72      	ldr	r3, [pc, #456]	@ (8002910 <BlockL2+0x2e4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	1c99      	adds	r1, r3, #2
 800274c:	4604      	mov	r4, r0
 800274e:	4872      	ldr	r0, [pc, #456]	@ (8002918 <BlockL2+0x2ec>)
 8002750:	4613      	mov	r3, r2
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	1a9b      	subs	r3, r3, r2
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	440b      	add	r3, r1
 800275a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 800275e:	e002      	b.n	8002766 <BlockL2+0x13a>
	}
	else CanMoveDown = true;
 8002760:	4b6f      	ldr	r3, [pc, #444]	@ (8002920 <BlockL2+0x2f4>)
 8002762:	2201      	movs	r2, #1
 8002764:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8002766:	4b6b      	ldr	r3, [pc, #428]	@ (8002914 <BlockL2+0x2e8>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	4b69      	ldr	r3, [pc, #420]	@ (8002910 <BlockL2+0x2e4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	1c59      	adds	r1, r3, #1
 8002770:	4869      	ldr	r0, [pc, #420]	@ (8002918 <BlockL2+0x2ec>)
 8002772:	4613      	mov	r3, r2
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	440b      	add	r3, r1
 800277c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d130      	bne.n	80027e6 <BlockL2+0x1ba>
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 8002784:	4b63      	ldr	r3, [pc, #396]	@ (8002914 <BlockL2+0x2e8>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4b61      	ldr	r3, [pc, #388]	@ (8002910 <BlockL2+0x2e4>)
 800278a:	6819      	ldr	r1, [r3, #0]
 800278c:	4862      	ldr	r0, [pc, #392]	@ (8002918 <BlockL2+0x2ec>)
 800278e:	4613      	mov	r3, r2
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	1a9b      	subs	r3, r3, r2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	440b      	add	r3, r1
 8002798:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 800279c:	2b00      	cmp	r3, #0
 800279e:	d122      	bne.n	80027e6 <BlockL2+0x1ba>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 80027a0:	4b5c      	ldr	r3, [pc, #368]	@ (8002914 <BlockL2+0x2e8>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b5a      	ldr	r3, [pc, #360]	@ (8002910 <BlockL2+0x2e4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	1c99      	adds	r1, r3, #2
 80027aa:	485b      	ldr	r0, [pc, #364]	@ (8002918 <BlockL2+0x2ec>)
 80027ac:	4613      	mov	r3, r2
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	440b      	add	r3, r1
 80027b6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d113      	bne.n	80027e6 <BlockL2+0x1ba>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0
 80027be:	4b55      	ldr	r3, [pc, #340]	@ (8002914 <BlockL2+0x2e8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	4b52      	ldr	r3, [pc, #328]	@ (8002910 <BlockL2+0x2e4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	1c99      	adds	r1, r3, #2
 80027ca:	4853      	ldr	r0, [pc, #332]	@ (8002918 <BlockL2+0x2ec>)
 80027cc:	4613      	mov	r3, r2
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	440b      	add	r3, r1
 80027d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d103      	bne.n	80027e6 <BlockL2+0x1ba>
	)
		CanMoveLeft = true;
 80027de:	4b52      	ldr	r3, [pc, #328]	@ (8002928 <BlockL2+0x2fc>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	701a      	strb	r2, [r3, #0]
 80027e4:	e002      	b.n	80027ec <BlockL2+0x1c0>
	else CanMoveLeft = false;
 80027e6:	4b50      	ldr	r3, [pc, #320]	@ (8002928 <BlockL2+0x2fc>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80027ec:	4b49      	ldr	r3, [pc, #292]	@ (8002914 <BlockL2+0x2e8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	1c9a      	adds	r2, r3, #2
 80027f2:	4b47      	ldr	r3, [pc, #284]	@ (8002910 <BlockL2+0x2e4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	1c59      	adds	r1, r3, #1
 80027f8:	4847      	ldr	r0, [pc, #284]	@ (8002918 <BlockL2+0x2ec>)
 80027fa:	4613      	mov	r3, r2
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	440b      	add	r3, r1
 8002804:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d132      	bne.n	8002872 <BlockL2+0x246>
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 800280c:	4b41      	ldr	r3, [pc, #260]	@ (8002914 <BlockL2+0x2e8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	1c9a      	adds	r2, r3, #2
 8002812:	4b3f      	ldr	r3, [pc, #252]	@ (8002910 <BlockL2+0x2e4>)
 8002814:	6819      	ldr	r1, [r3, #0]
 8002816:	4840      	ldr	r0, [pc, #256]	@ (8002918 <BlockL2+0x2ec>)
 8002818:	4613      	mov	r3, r2
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	1a9b      	subs	r3, r3, r2
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	440b      	add	r3, r1
 8002822:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8002826:	2b00      	cmp	r3, #0
 8002828:	d123      	bne.n	8002872 <BlockL2+0x246>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 800282a:	4b3a      	ldr	r3, [pc, #232]	@ (8002914 <BlockL2+0x2e8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	1c9a      	adds	r2, r3, #2
 8002830:	4b37      	ldr	r3, [pc, #220]	@ (8002910 <BlockL2+0x2e4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	1c99      	adds	r1, r3, #2
 8002836:	4838      	ldr	r0, [pc, #224]	@ (8002918 <BlockL2+0x2ec>)
 8002838:	4613      	mov	r3, r2
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	1a9b      	subs	r3, r3, r2
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	440b      	add	r3, r1
 8002842:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 8002846:	2b00      	cmp	r3, #0
 8002848:	d113      	bne.n	8002872 <BlockL2+0x246>
		tetris[tetrominoLocX + 3][tetrominoLocY + 2] == 0
 800284a:	4b32      	ldr	r3, [pc, #200]	@ (8002914 <BlockL2+0x2e8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	1cda      	adds	r2, r3, #3
 8002850:	4b2f      	ldr	r3, [pc, #188]	@ (8002910 <BlockL2+0x2e4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	1c99      	adds	r1, r3, #2
 8002856:	4830      	ldr	r0, [pc, #192]	@ (8002918 <BlockL2+0x2ec>)
 8002858:	4613      	mov	r3, r2
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	1a9b      	subs	r3, r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	440b      	add	r3, r1
 8002862:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 8002866:	2b00      	cmp	r3, #0
 8002868:	d103      	bne.n	8002872 <BlockL2+0x246>
	)
		CanMoveRight = true;
 800286a:	4b30      	ldr	r3, [pc, #192]	@ (800292c <BlockL2+0x300>)
 800286c:	2201      	movs	r2, #1
 800286e:	701a      	strb	r2, [r3, #0]
 8002870:	e002      	b.n	8002878 <BlockL2+0x24c>
	else CanMoveRight = false;
 8002872:	4b2e      	ldr	r3, [pc, #184]	@ (800292c <BlockL2+0x300>)
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8002878:	4b26      	ldr	r3, [pc, #152]	@ (8002914 <BlockL2+0x2e8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	4b24      	ldr	r3, [pc, #144]	@ (8002910 <BlockL2+0x2e4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	1c59      	adds	r1, r3, #1
 8002884:	4824      	ldr	r0, [pc, #144]	@ (8002918 <BlockL2+0x2ec>)
 8002886:	4613      	mov	r3, r2
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	1a9b      	subs	r3, r3, r2
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	440b      	add	r3, r1
 8002890:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d131      	bne.n	80028fc <BlockL2+0x2d0>
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8002898:	4b1e      	ldr	r3, [pc, #120]	@ (8002914 <BlockL2+0x2e8>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b1c      	ldr	r3, [pc, #112]	@ (8002910 <BlockL2+0x2e4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	1c59      	adds	r1, r3, #1
 80028a2:	481d      	ldr	r0, [pc, #116]	@ (8002918 <BlockL2+0x2ec>)
 80028a4:	4613      	mov	r3, r2
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	440b      	add	r3, r1
 80028ae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d122      	bne.n	80028fc <BlockL2+0x2d0>
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80028b6:	4b17      	ldr	r3, [pc, #92]	@ (8002914 <BlockL2+0x2e8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	1c9a      	adds	r2, r3, #2
 80028bc:	4b14      	ldr	r3, [pc, #80]	@ (8002910 <BlockL2+0x2e4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	1c59      	adds	r1, r3, #1
 80028c2:	4815      	ldr	r0, [pc, #84]	@ (8002918 <BlockL2+0x2ec>)
 80028c4:	4613      	mov	r3, r2
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	440b      	add	r3, r1
 80028ce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d112      	bne.n	80028fc <BlockL2+0x2d0>
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0)
 80028d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002914 <BlockL2+0x2e8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	1c9a      	adds	r2, r3, #2
 80028dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002910 <BlockL2+0x2e4>)
 80028de:	6819      	ldr	r1, [r3, #0]
 80028e0:	480d      	ldr	r0, [pc, #52]	@ (8002918 <BlockL2+0x2ec>)
 80028e2:	4613      	mov	r3, r2
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	1a9b      	subs	r3, r3, r2
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	440b      	add	r3, r1
 80028ec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d103      	bne.n	80028fc <BlockL2+0x2d0>
		CanRotate = true;
 80028f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002930 <BlockL2+0x304>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	701a      	strb	r2, [r3, #0]
 80028fa:	e003      	b.n	8002904 <BlockL2+0x2d8>
	else CanRotate = false;
 80028fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002930 <BlockL2+0x304>)
 80028fe:	2200      	movs	r2, #0
 8002900:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 3); cout << char(248);
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 3); cout << char(248);
}
 8002902:	bf00      	nop
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	bd90      	pop	{r4, r7, pc}
 800290c:	20000eac 	.word	0x20000eac
 8002910:	20000ea8 	.word	0x20000ea8
 8002914:	20000ea4 	.word	0x20000ea4
 8002918:	20000090 	.word	0x20000090
 800291c:	2000000c 	.word	0x2000000c
 8002920:	2000000f 	.word	0x2000000f
 8002924:	20000eb0 	.word	0x20000eb0
 8002928:	2000000e 	.word	0x2000000e
 800292c:	2000000d 	.word	0x2000000d
 8002930:	20000010 	.word	0x20000010

08002934 <BlockL3>:

void BlockL3(int x, int y)
{
 8002934:	b590      	push	{r4, r7, lr}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	3301      	adds	r3, #1
 8002946:	4619      	mov	r1, r3
 8002948:	4610      	mov	r0, r2
 800294a:	f002 ffef 	bl	800592c <PrintXY>
	PrintXY(x, y + 1);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	3301      	adds	r3, #1
 8002952:	4619      	mov	r1, r3
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f002 ffe9 	bl	800592c <PrintXY>
	PrintXY(x + 2, y + 1);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	1c9a      	adds	r2, r3, #2
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	3301      	adds	r3, #1
 8002962:	4619      	mov	r1, r3
 8002964:	4610      	mov	r0, r2
 8002966:	f002 ffe1 	bl	800592c <PrintXY>
	PrintXY(x + 2, y);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3302      	adds	r3, #2
 800296e:	6839      	ldr	r1, [r7, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f002 ffdb 	bl	800592c <PrintXY>

	CurrentState = 9;
 8002976:	4bae      	ldr	r3, [pc, #696]	@ (8002c30 <BlockL3+0x2fc>)
 8002978:	2209      	movs	r2, #9
 800297a:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 20 ||
 800297c:	4bad      	ldr	r3, [pc, #692]	@ (8002c34 <BlockL3+0x300>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b13      	cmp	r3, #19
 8002982:	dc2e      	bgt.n	80029e2 <BlockL3+0xae>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 8002984:	4bac      	ldr	r3, [pc, #688]	@ (8002c38 <BlockL3+0x304>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	4baa      	ldr	r3, [pc, #680]	@ (8002c34 <BlockL3+0x300>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	1c99      	adds	r1, r3, #2
 8002990:	48aa      	ldr	r0, [pc, #680]	@ (8002c3c <BlockL3+0x308>)
 8002992:	4613      	mov	r3, r2
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	1a9b      	subs	r3, r3, r2
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	440b      	add	r3, r1
 800299c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 20 ||
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d11e      	bne.n	80029e2 <BlockL3+0xae>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] != 0 ||
 80029a4:	4ba4      	ldr	r3, [pc, #656]	@ (8002c38 <BlockL3+0x304>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	1c9a      	adds	r2, r3, #2
 80029aa:	4ba2      	ldr	r3, [pc, #648]	@ (8002c34 <BlockL3+0x300>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	1c99      	adds	r1, r3, #2
 80029b0:	48a2      	ldr	r0, [pc, #648]	@ (8002c3c <BlockL3+0x308>)
 80029b2:	4613      	mov	r3, r2
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	1a9b      	subs	r3, r3, r2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	440b      	add	r3, r1
 80029bc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10e      	bne.n	80029e2 <BlockL3+0xae>
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0)
 80029c4:	4b9c      	ldr	r3, [pc, #624]	@ (8002c38 <BlockL3+0x304>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	4b9a      	ldr	r3, [pc, #616]	@ (8002c34 <BlockL3+0x300>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	1c99      	adds	r1, r3, #2
 80029ce:	489b      	ldr	r0, [pc, #620]	@ (8002c3c <BlockL3+0x308>)
 80029d0:	4613      	mov	r3, r2
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	1a9b      	subs	r3, r3, r2
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	440b      	add	r3, r1
 80029da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] != 0 ||
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d04e      	beq.n	8002a80 <BlockL3+0x14c>
	{
		while (isDownKey() == 1);
 80029e2:	bf00      	nop
 80029e4:	f002 ff1c 	bl	8005820 <isDownKey>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d0fa      	beq.n	80029e4 <BlockL3+0xb0>
		NewTetromino = true;
 80029ee:	4b94      	ldr	r3, [pc, #592]	@ (8002c40 <BlockL3+0x30c>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 80029f4:	4b93      	ldr	r3, [pc, #588]	@ (8002c44 <BlockL3+0x310>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 80029fa:	4b93      	ldr	r3, [pc, #588]	@ (8002c48 <BlockL3+0x314>)
 80029fc:	8818      	ldrh	r0, [r3, #0]
 80029fe:	4b8e      	ldr	r3, [pc, #568]	@ (8002c38 <BlockL3+0x304>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	4b8b      	ldr	r3, [pc, #556]	@ (8002c34 <BlockL3+0x300>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	1c59      	adds	r1, r3, #1
 8002a0a:	4604      	mov	r4, r0
 8002a0c:	488b      	ldr	r0, [pc, #556]	@ (8002c3c <BlockL3+0x308>)
 8002a0e:	4613      	mov	r3, r2
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	440b      	add	r3, r1
 8002a18:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] = colour;
 8002a1c:	4b8a      	ldr	r3, [pc, #552]	@ (8002c48 <BlockL3+0x314>)
 8002a1e:	8818      	ldrh	r0, [r3, #0]
 8002a20:	4b85      	ldr	r3, [pc, #532]	@ (8002c38 <BlockL3+0x304>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4b83      	ldr	r3, [pc, #524]	@ (8002c34 <BlockL3+0x300>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	1c59      	adds	r1, r3, #1
 8002a2a:	4604      	mov	r4, r0
 8002a2c:	4883      	ldr	r0, [pc, #524]	@ (8002c3c <BlockL3+0x308>)
 8002a2e:	4613      	mov	r3, r2
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	440b      	add	r3, r1
 8002a38:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] = colour;
 8002a3c:	4b82      	ldr	r3, [pc, #520]	@ (8002c48 <BlockL3+0x314>)
 8002a3e:	8818      	ldrh	r0, [r3, #0]
 8002a40:	4b7d      	ldr	r3, [pc, #500]	@ (8002c38 <BlockL3+0x304>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	1c9a      	adds	r2, r3, #2
 8002a46:	4b7b      	ldr	r3, [pc, #492]	@ (8002c34 <BlockL3+0x300>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	1c59      	adds	r1, r3, #1
 8002a4c:	4604      	mov	r4, r0
 8002a4e:	487b      	ldr	r0, [pc, #492]	@ (8002c3c <BlockL3+0x308>)
 8002a50:	4613      	mov	r3, r2
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	440b      	add	r3, r1
 8002a5a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY] = colour;
 8002a5e:	4b7a      	ldr	r3, [pc, #488]	@ (8002c48 <BlockL3+0x314>)
 8002a60:	8818      	ldrh	r0, [r3, #0]
 8002a62:	4b75      	ldr	r3, [pc, #468]	@ (8002c38 <BlockL3+0x304>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	1c9a      	adds	r2, r3, #2
 8002a68:	4b72      	ldr	r3, [pc, #456]	@ (8002c34 <BlockL3+0x300>)
 8002a6a:	6819      	ldr	r1, [r3, #0]
 8002a6c:	4604      	mov	r4, r0
 8002a6e:	4873      	ldr	r0, [pc, #460]	@ (8002c3c <BlockL3+0x308>)
 8002a70:	4613      	mov	r3, r2
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	440b      	add	r3, r1
 8002a7a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8002a7e:	e002      	b.n	8002a86 <BlockL3+0x152>
	}
	else CanMoveDown = true;
 8002a80:	4b70      	ldr	r3, [pc, #448]	@ (8002c44 <BlockL3+0x310>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8002a86:	4b6c      	ldr	r3, [pc, #432]	@ (8002c38 <BlockL3+0x304>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	4b6a      	ldr	r3, [pc, #424]	@ (8002c34 <BlockL3+0x300>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	1c59      	adds	r1, r3, #1
 8002a90:	486a      	ldr	r0, [pc, #424]	@ (8002c3c <BlockL3+0x308>)
 8002a92:	4613      	mov	r3, r2
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	1a9b      	subs	r3, r3, r2
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	440b      	add	r3, r1
 8002a9c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d132      	bne.n	8002b0a <BlockL3+0x1d6>
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 8002aa4:	4b64      	ldr	r3, [pc, #400]	@ (8002c38 <BlockL3+0x304>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	1e5a      	subs	r2, r3, #1
 8002aaa:	4b62      	ldr	r3, [pc, #392]	@ (8002c34 <BlockL3+0x300>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	1c59      	adds	r1, r3, #1
 8002ab0:	4862      	ldr	r0, [pc, #392]	@ (8002c3c <BlockL3+0x308>)
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	1a9b      	subs	r3, r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	440b      	add	r3, r1
 8002abc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d122      	bne.n	8002b0a <BlockL3+0x1d6>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8002ac4:	4b5c      	ldr	r3, [pc, #368]	@ (8002c38 <BlockL3+0x304>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	1c5a      	adds	r2, r3, #1
 8002aca:	4b5a      	ldr	r3, [pc, #360]	@ (8002c34 <BlockL3+0x300>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	1c59      	adds	r1, r3, #1
 8002ad0:	485a      	ldr	r0, [pc, #360]	@ (8002c3c <BlockL3+0x308>)
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	1a9b      	subs	r3, r3, r2
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	440b      	add	r3, r1
 8002adc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d112      	bne.n	8002b0a <BlockL3+0x1d6>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0
 8002ae4:	4b54      	ldr	r3, [pc, #336]	@ (8002c38 <BlockL3+0x304>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	4b52      	ldr	r3, [pc, #328]	@ (8002c34 <BlockL3+0x300>)
 8002aec:	6819      	ldr	r1, [r3, #0]
 8002aee:	4853      	ldr	r0, [pc, #332]	@ (8002c3c <BlockL3+0x308>)
 8002af0:	4613      	mov	r3, r2
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	440b      	add	r3, r1
 8002afa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d103      	bne.n	8002b0a <BlockL3+0x1d6>
	)
		CanMoveLeft = true;
 8002b02:	4b52      	ldr	r3, [pc, #328]	@ (8002c4c <BlockL3+0x318>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	e002      	b.n	8002b10 <BlockL3+0x1dc>
	else CanMoveLeft = false;
 8002b0a:	4b50      	ldr	r3, [pc, #320]	@ (8002c4c <BlockL3+0x318>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8002b10:	4b49      	ldr	r3, [pc, #292]	@ (8002c38 <BlockL3+0x304>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	1c9a      	adds	r2, r3, #2
 8002b16:	4b47      	ldr	r3, [pc, #284]	@ (8002c34 <BlockL3+0x300>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	1c59      	adds	r1, r3, #1
 8002b1c:	4847      	ldr	r0, [pc, #284]	@ (8002c3c <BlockL3+0x308>)
 8002b1e:	4613      	mov	r3, r2
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	1a9b      	subs	r3, r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	440b      	add	r3, r1
 8002b28:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d132      	bne.n	8002b96 <BlockL3+0x262>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8002b30:	4b41      	ldr	r3, [pc, #260]	@ (8002c38 <BlockL3+0x304>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	4b3f      	ldr	r3, [pc, #252]	@ (8002c34 <BlockL3+0x300>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	1c59      	adds	r1, r3, #1
 8002b3c:	483f      	ldr	r0, [pc, #252]	@ (8002c3c <BlockL3+0x308>)
 8002b3e:	4613      	mov	r3, r2
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	1a9b      	subs	r3, r3, r2
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	440b      	add	r3, r1
 8002b48:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d122      	bne.n	8002b96 <BlockL3+0x262>
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 8002b50:	4b39      	ldr	r3, [pc, #228]	@ (8002c38 <BlockL3+0x304>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	1cda      	adds	r2, r3, #3
 8002b56:	4b37      	ldr	r3, [pc, #220]	@ (8002c34 <BlockL3+0x300>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	1c59      	adds	r1, r3, #1
 8002b5c:	4837      	ldr	r0, [pc, #220]	@ (8002c3c <BlockL3+0x308>)
 8002b5e:	4613      	mov	r3, r2
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	1a9b      	subs	r3, r3, r2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	440b      	add	r3, r1
 8002b68:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d112      	bne.n	8002b96 <BlockL3+0x262>
		tetris[tetrominoLocX + 3][tetrominoLocY] == 0
 8002b70:	4b31      	ldr	r3, [pc, #196]	@ (8002c38 <BlockL3+0x304>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	1cda      	adds	r2, r3, #3
 8002b76:	4b2f      	ldr	r3, [pc, #188]	@ (8002c34 <BlockL3+0x300>)
 8002b78:	6819      	ldr	r1, [r3, #0]
 8002b7a:	4830      	ldr	r0, [pc, #192]	@ (8002c3c <BlockL3+0x308>)
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	440b      	add	r3, r1
 8002b86:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d103      	bne.n	8002b96 <BlockL3+0x262>
	)
		CanMoveRight = true;
 8002b8e:	4b30      	ldr	r3, [pc, #192]	@ (8002c50 <BlockL3+0x31c>)
 8002b90:	2201      	movs	r2, #1
 8002b92:	701a      	strb	r2, [r3, #0]
 8002b94:	e002      	b.n	8002b9c <BlockL3+0x268>
	else CanMoveRight = false;
 8002b96:	4b2e      	ldr	r3, [pc, #184]	@ (8002c50 <BlockL3+0x31c>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8002b9c:	4b26      	ldr	r3, [pc, #152]	@ (8002c38 <BlockL3+0x304>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	4b24      	ldr	r3, [pc, #144]	@ (8002c34 <BlockL3+0x300>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	1c59      	adds	r1, r3, #1
 8002ba8:	4824      	ldr	r0, [pc, #144]	@ (8002c3c <BlockL3+0x308>)
 8002baa:	4613      	mov	r3, r2
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	1a9b      	subs	r3, r3, r2
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	440b      	add	r3, r1
 8002bb4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d130      	bne.n	8002c1e <BlockL3+0x2ea>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 8002bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8002c38 <BlockL3+0x304>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8002c34 <BlockL3+0x300>)
 8002bc4:	6819      	ldr	r1, [r3, #0]
 8002bc6:	481d      	ldr	r0, [pc, #116]	@ (8002c3c <BlockL3+0x308>)
 8002bc8:	4613      	mov	r3, r2
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	440b      	add	r3, r1
 8002bd2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d121      	bne.n	8002c1e <BlockL3+0x2ea>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 8002bda:	4b17      	ldr	r3, [pc, #92]	@ (8002c38 <BlockL3+0x304>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	4b14      	ldr	r3, [pc, #80]	@ (8002c34 <BlockL3+0x300>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	1c99      	adds	r1, r3, #2
 8002be6:	4815      	ldr	r0, [pc, #84]	@ (8002c3c <BlockL3+0x308>)
 8002be8:	4613      	mov	r3, r2
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	440b      	add	r3, r1
 8002bf2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d111      	bne.n	8002c1e <BlockL3+0x2ea>
		tetris[tetrominoLocX][tetrominoLocY] == 0)
 8002bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8002c38 <BlockL3+0x304>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8002c34 <BlockL3+0x300>)
 8002c00:	6819      	ldr	r1, [r3, #0]
 8002c02:	480e      	ldr	r0, [pc, #56]	@ (8002c3c <BlockL3+0x308>)
 8002c04:	4613      	mov	r3, r2
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	440b      	add	r3, r1
 8002c0e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d103      	bne.n	8002c1e <BlockL3+0x2ea>
		CanRotate = true;
 8002c16:	4b0f      	ldr	r3, [pc, #60]	@ (8002c54 <BlockL3+0x320>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	701a      	strb	r2, [r3, #0]
 8002c1c:	e003      	b.n	8002c26 <BlockL3+0x2f2>
	else CanRotate = false;
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c54 <BlockL3+0x320>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX, tetrominoLocY + 2); cout << char(248);
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd90      	pop	{r4, r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000eac 	.word	0x20000eac
 8002c34:	20000ea8 	.word	0x20000ea8
 8002c38:	20000ea4 	.word	0x20000ea4
 8002c3c:	20000090 	.word	0x20000090
 8002c40:	2000000c 	.word	0x2000000c
 8002c44:	2000000f 	.word	0x2000000f
 8002c48:	20000eb0 	.word	0x20000eb0
 8002c4c:	2000000e 	.word	0x2000000e
 8002c50:	2000000d 	.word	0x2000000d
 8002c54:	20000010 	.word	0x20000010

08002c58 <BlockL4>:

void BlockL4(int x, int y)
{
 8002c58:	b590      	push	{r4, r7, lr}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4610      	mov	r0, r2
 8002c6e:	f002 fe5d 	bl	800592c <PrintXY>
	PrintXY(x + 1, y);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3301      	adds	r3, #1
 8002c76:	6839      	ldr	r1, [r7, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f002 fe57 	bl	800592c <PrintXY>
	PrintXY(x + 1, y + 2);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	3302      	adds	r3, #2
 8002c86:	4619      	mov	r1, r3
 8002c88:	4610      	mov	r0, r2
 8002c8a:	f002 fe4f 	bl	800592c <PrintXY>
	PrintXY(x, y);
 8002c8e:	6839      	ldr	r1, [r7, #0]
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f002 fe4b 	bl	800592c <PrintXY>

	CurrentState = 10;
 8002c96:	4ba4      	ldr	r3, [pc, #656]	@ (8002f28 <BlockL4+0x2d0>)
 8002c98:	220a      	movs	r2, #10
 8002c9a:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 8002c9c:	4ba3      	ldr	r3, [pc, #652]	@ (8002f2c <BlockL4+0x2d4>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b12      	cmp	r3, #18
 8002ca2:	dc1e      	bgt.n	8002ce2 <BlockL4+0x8a>
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 8002ca4:	4ba2      	ldr	r3, [pc, #648]	@ (8002f30 <BlockL4+0x2d8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	1c5a      	adds	r2, r3, #1
 8002caa:	4ba0      	ldr	r3, [pc, #640]	@ (8002f2c <BlockL4+0x2d4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	1cd9      	adds	r1, r3, #3
 8002cb0:	48a0      	ldr	r0, [pc, #640]	@ (8002f34 <BlockL4+0x2dc>)
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	1a9b      	subs	r3, r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	440b      	add	r3, r1
 8002cbc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10e      	bne.n	8002ce2 <BlockL4+0x8a>
		tetris[tetrominoLocX][tetrominoLocY + 1] != 0)
 8002cc4:	4b9a      	ldr	r3, [pc, #616]	@ (8002f30 <BlockL4+0x2d8>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	4b98      	ldr	r3, [pc, #608]	@ (8002f2c <BlockL4+0x2d4>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	1c59      	adds	r1, r3, #1
 8002cce:	4899      	ldr	r0, [pc, #612]	@ (8002f34 <BlockL4+0x2dc>)
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	1a9b      	subs	r3, r3, r2
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	440b      	add	r3, r1
 8002cda:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d04d      	beq.n	8002d7e <BlockL4+0x126>
	{
		while (isDownKey() == 1);
 8002ce2:	bf00      	nop
 8002ce4:	f002 fd9c 	bl	8005820 <isDownKey>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d0fa      	beq.n	8002ce4 <BlockL4+0x8c>
		NewTetromino = true;
 8002cee:	4b92      	ldr	r3, [pc, #584]	@ (8002f38 <BlockL4+0x2e0>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 8002cf4:	4b91      	ldr	r3, [pc, #580]	@ (8002f3c <BlockL4+0x2e4>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 8002cfa:	4b91      	ldr	r3, [pc, #580]	@ (8002f40 <BlockL4+0x2e8>)
 8002cfc:	8818      	ldrh	r0, [r3, #0]
 8002cfe:	4b8c      	ldr	r3, [pc, #560]	@ (8002f30 <BlockL4+0x2d8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	4b89      	ldr	r3, [pc, #548]	@ (8002f2c <BlockL4+0x2d4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	1c59      	adds	r1, r3, #1
 8002d0a:	4604      	mov	r4, r0
 8002d0c:	4889      	ldr	r0, [pc, #548]	@ (8002f34 <BlockL4+0x2dc>)
 8002d0e:	4613      	mov	r3, r2
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	1a9b      	subs	r3, r3, r2
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	440b      	add	r3, r1
 8002d18:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] = colour;
 8002d1c:	4b88      	ldr	r3, [pc, #544]	@ (8002f40 <BlockL4+0x2e8>)
 8002d1e:	8818      	ldrh	r0, [r3, #0]
 8002d20:	4b83      	ldr	r3, [pc, #524]	@ (8002f30 <BlockL4+0x2d8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	4b81      	ldr	r3, [pc, #516]	@ (8002f2c <BlockL4+0x2d4>)
 8002d28:	6819      	ldr	r1, [r3, #0]
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	4881      	ldr	r0, [pc, #516]	@ (8002f34 <BlockL4+0x2dc>)
 8002d2e:	4613      	mov	r3, r2
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	440b      	add	r3, r1
 8002d38:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] = colour;
 8002d3c:	4b80      	ldr	r3, [pc, #512]	@ (8002f40 <BlockL4+0x2e8>)
 8002d3e:	8818      	ldrh	r0, [r3, #0]
 8002d40:	4b7b      	ldr	r3, [pc, #492]	@ (8002f30 <BlockL4+0x2d8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	4b79      	ldr	r3, [pc, #484]	@ (8002f2c <BlockL4+0x2d4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	1c99      	adds	r1, r3, #2
 8002d4c:	4604      	mov	r4, r0
 8002d4e:	4879      	ldr	r0, [pc, #484]	@ (8002f34 <BlockL4+0x2dc>)
 8002d50:	4613      	mov	r3, r2
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	440b      	add	r3, r1
 8002d5a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY] = colour;
 8002d5e:	4b78      	ldr	r3, [pc, #480]	@ (8002f40 <BlockL4+0x2e8>)
 8002d60:	8818      	ldrh	r0, [r3, #0]
 8002d62:	4b73      	ldr	r3, [pc, #460]	@ (8002f30 <BlockL4+0x2d8>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	4b71      	ldr	r3, [pc, #452]	@ (8002f2c <BlockL4+0x2d4>)
 8002d68:	6819      	ldr	r1, [r3, #0]
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	4871      	ldr	r0, [pc, #452]	@ (8002f34 <BlockL4+0x2dc>)
 8002d6e:	4613      	mov	r3, r2
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	440b      	add	r3, r1
 8002d78:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8002d7c:	e002      	b.n	8002d84 <BlockL4+0x12c>
	}
	else CanMoveDown = true;
 8002d7e:	4b6f      	ldr	r3, [pc, #444]	@ (8002f3c <BlockL4+0x2e4>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8002d84:	4b6a      	ldr	r3, [pc, #424]	@ (8002f30 <BlockL4+0x2d8>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b68      	ldr	r3, [pc, #416]	@ (8002f2c <BlockL4+0x2d4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	1c59      	adds	r1, r3, #1
 8002d8e:	4869      	ldr	r0, [pc, #420]	@ (8002f34 <BlockL4+0x2dc>)
 8002d90:	4613      	mov	r3, r2
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	440b      	add	r3, r1
 8002d9a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d12f      	bne.n	8002e02 <BlockL4+0x1aa>
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 8002da2:	4b63      	ldr	r3, [pc, #396]	@ (8002f30 <BlockL4+0x2d8>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	4b61      	ldr	r3, [pc, #388]	@ (8002f2c <BlockL4+0x2d4>)
 8002da8:	6819      	ldr	r1, [r3, #0]
 8002daa:	4862      	ldr	r0, [pc, #392]	@ (8002f34 <BlockL4+0x2dc>)
 8002dac:	4613      	mov	r3, r2
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	1a9b      	subs	r3, r3, r2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	440b      	add	r3, r1
 8002db6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d121      	bne.n	8002e02 <BlockL4+0x1aa>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 8002dbe:	4b5c      	ldr	r3, [pc, #368]	@ (8002f30 <BlockL4+0x2d8>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	4b5a      	ldr	r3, [pc, #360]	@ (8002f2c <BlockL4+0x2d4>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	1c99      	adds	r1, r3, #2
 8002dc8:	485a      	ldr	r0, [pc, #360]	@ (8002f34 <BlockL4+0x2dc>)
 8002dca:	4613      	mov	r3, r2
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	1a9b      	subs	r3, r3, r2
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	440b      	add	r3, r1
 8002dd4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d112      	bne.n	8002e02 <BlockL4+0x1aa>
		tetris[tetrominoLocX - 1][tetrominoLocY] == 0
 8002ddc:	4b54      	ldr	r3, [pc, #336]	@ (8002f30 <BlockL4+0x2d8>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	1e5a      	subs	r2, r3, #1
 8002de2:	4b52      	ldr	r3, [pc, #328]	@ (8002f2c <BlockL4+0x2d4>)
 8002de4:	6819      	ldr	r1, [r3, #0]
 8002de6:	4853      	ldr	r0, [pc, #332]	@ (8002f34 <BlockL4+0x2dc>)
 8002de8:	4613      	mov	r3, r2
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	440b      	add	r3, r1
 8002df2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d103      	bne.n	8002e02 <BlockL4+0x1aa>
	)
		CanMoveLeft = true;
 8002dfa:	4b52      	ldr	r3, [pc, #328]	@ (8002f44 <BlockL4+0x2ec>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	701a      	strb	r2, [r3, #0]
 8002e00:	e002      	b.n	8002e08 <BlockL4+0x1b0>
	else CanMoveLeft = false;
 8002e02:	4b50      	ldr	r3, [pc, #320]	@ (8002f44 <BlockL4+0x2ec>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8002e08:	4b49      	ldr	r3, [pc, #292]	@ (8002f30 <BlockL4+0x2d8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	1c9a      	adds	r2, r3, #2
 8002e0e:	4b47      	ldr	r3, [pc, #284]	@ (8002f2c <BlockL4+0x2d4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	1c59      	adds	r1, r3, #1
 8002e14:	4847      	ldr	r0, [pc, #284]	@ (8002f34 <BlockL4+0x2dc>)
 8002e16:	4613      	mov	r3, r2
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	1a9b      	subs	r3, r3, r2
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	440b      	add	r3, r1
 8002e20:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d131      	bne.n	8002e8c <BlockL4+0x234>
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 8002e28:	4b41      	ldr	r3, [pc, #260]	@ (8002f30 <BlockL4+0x2d8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	1c9a      	adds	r2, r3, #2
 8002e2e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f2c <BlockL4+0x2d4>)
 8002e30:	6819      	ldr	r1, [r3, #0]
 8002e32:	4840      	ldr	r0, [pc, #256]	@ (8002f34 <BlockL4+0x2dc>)
 8002e34:	4613      	mov	r3, r2
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	1a9b      	subs	r3, r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	440b      	add	r3, r1
 8002e3e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d122      	bne.n	8002e8c <BlockL4+0x234>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 8002e46:	4b3a      	ldr	r3, [pc, #232]	@ (8002f30 <BlockL4+0x2d8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	1c9a      	adds	r2, r3, #2
 8002e4c:	4b37      	ldr	r3, [pc, #220]	@ (8002f2c <BlockL4+0x2d4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	1c99      	adds	r1, r3, #2
 8002e52:	4838      	ldr	r0, [pc, #224]	@ (8002f34 <BlockL4+0x2dc>)
 8002e54:	4613      	mov	r3, r2
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	1a9b      	subs	r3, r3, r2
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	440b      	add	r3, r1
 8002e5e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d112      	bne.n	8002e8c <BlockL4+0x234>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0
 8002e66:	4b32      	ldr	r3, [pc, #200]	@ (8002f30 <BlockL4+0x2d8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	4b2f      	ldr	r3, [pc, #188]	@ (8002f2c <BlockL4+0x2d4>)
 8002e6e:	6819      	ldr	r1, [r3, #0]
 8002e70:	4830      	ldr	r0, [pc, #192]	@ (8002f34 <BlockL4+0x2dc>)
 8002e72:	4613      	mov	r3, r2
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	1a9b      	subs	r3, r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	440b      	add	r3, r1
 8002e7c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d103      	bne.n	8002e8c <BlockL4+0x234>
	)
		CanMoveRight = true;
 8002e84:	4b30      	ldr	r3, [pc, #192]	@ (8002f48 <BlockL4+0x2f0>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	701a      	strb	r2, [r3, #0]
 8002e8a:	e002      	b.n	8002e92 <BlockL4+0x23a>
	else CanMoveRight = false;
 8002e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f48 <BlockL4+0x2f0>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8002e92:	4b27      	ldr	r3, [pc, #156]	@ (8002f30 <BlockL4+0x2d8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	4b24      	ldr	r3, [pc, #144]	@ (8002f2c <BlockL4+0x2d4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	1c59      	adds	r1, r3, #1
 8002e9e:	4825      	ldr	r0, [pc, #148]	@ (8002f34 <BlockL4+0x2dc>)
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	440b      	add	r3, r1
 8002eaa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d131      	bne.n	8002f16 <BlockL4+0x2be>
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8002eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8002f30 <BlockL4+0x2d8>)
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f2c <BlockL4+0x2d4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	1c59      	adds	r1, r3, #1
 8002ebc:	481d      	ldr	r0, [pc, #116]	@ (8002f34 <BlockL4+0x2dc>)
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	1a9b      	subs	r3, r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	440b      	add	r3, r1
 8002ec8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d122      	bne.n	8002f16 <BlockL4+0x2be>
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8002ed0:	4b17      	ldr	r3, [pc, #92]	@ (8002f30 <BlockL4+0x2d8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	1c9a      	adds	r2, r3, #2
 8002ed6:	4b15      	ldr	r3, [pc, #84]	@ (8002f2c <BlockL4+0x2d4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	1c59      	adds	r1, r3, #1
 8002edc:	4815      	ldr	r0, [pc, #84]	@ (8002f34 <BlockL4+0x2dc>)
 8002ede:	4613      	mov	r3, r2
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	440b      	add	r3, r1
 8002ee8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d112      	bne.n	8002f16 <BlockL4+0x2be>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0)
 8002ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8002f30 <BlockL4+0x2d8>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8002f2c <BlockL4+0x2d4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	1c99      	adds	r1, r3, #2
 8002efa:	480e      	ldr	r0, [pc, #56]	@ (8002f34 <BlockL4+0x2dc>)
 8002efc:	4613      	mov	r3, r2
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	440b      	add	r3, r1
 8002f06:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d103      	bne.n	8002f16 <BlockL4+0x2be>
		CanRotate = true;
 8002f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8002f4c <BlockL4+0x2f4>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	701a      	strb	r2, [r3, #0]
 8002f14:	e003      	b.n	8002f1e <BlockL4+0x2c6>
	else CanRotate = false;
 8002f16:	4b0d      	ldr	r3, [pc, #52]	@ (8002f4c <BlockL4+0x2f4>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 3); cout << char(248);
	//PrintXY(tetrominoLocX, tetrominoLocY + 1); cout << char(248);
}
 8002f1c:	bf00      	nop
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd90      	pop	{r4, r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000eac 	.word	0x20000eac
 8002f2c:	20000ea8 	.word	0x20000ea8
 8002f30:	20000ea4 	.word	0x20000ea4
 8002f34:	20000090 	.word	0x20000090
 8002f38:	2000000c 	.word	0x2000000c
 8002f3c:	2000000f 	.word	0x2000000f
 8002f40:	20000eb0 	.word	0x20000eb0
 8002f44:	2000000e 	.word	0x2000000e
 8002f48:	2000000d 	.word	0x2000000d
 8002f4c:	20000010 	.word	0x20000010

08002f50 <BlockO>:

void BlockO(int x, int y)
{
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	3301      	adds	r3, #1
 8002f62:	4619      	mov	r1, r3
 8002f64:	4610      	mov	r0, r2
 8002f66:	f002 fce1 	bl	800592c <PrintXY>
	PrintXY(x + 2, y + 1);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	1c9a      	adds	r2, r3, #2
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	3301      	adds	r3, #1
 8002f72:	4619      	mov	r1, r3
 8002f74:	4610      	mov	r0, r2
 8002f76:	f002 fcd9 	bl	800592c <PrintXY>
	PrintXY(x + 1, y + 2);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	3302      	adds	r3, #2
 8002f82:	4619      	mov	r1, r3
 8002f84:	4610      	mov	r0, r2
 8002f86:	f002 fcd1 	bl	800592c <PrintXY>
	PrintXY(x + 2, y + 2);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	1c9a      	adds	r2, r3, #2
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	3302      	adds	r3, #2
 8002f92:	4619      	mov	r1, r3
 8002f94:	4610      	mov	r0, r2
 8002f96:	f002 fcc9 	bl	800592c <PrintXY>

	CurrentState = 0;
 8002f9a:	4b87      	ldr	r3, [pc, #540]	@ (80031b8 <BlockO+0x268>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 8002fa0:	4b86      	ldr	r3, [pc, #536]	@ (80031bc <BlockO+0x26c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b12      	cmp	r3, #18
 8002fa6:	dc1f      	bgt.n	8002fe8 <BlockO+0x98>
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 8002fa8:	4b85      	ldr	r3, [pc, #532]	@ (80031c0 <BlockO+0x270>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	4b83      	ldr	r3, [pc, #524]	@ (80031bc <BlockO+0x26c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	1cd9      	adds	r1, r3, #3
 8002fb4:	4883      	ldr	r0, [pc, #524]	@ (80031c4 <BlockO+0x274>)
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	440b      	add	r3, r1
 8002fc0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10f      	bne.n	8002fe8 <BlockO+0x98>
		tetris[tetrominoLocX + 2][tetrominoLocY + 3] != 0)
 8002fc8:	4b7d      	ldr	r3, [pc, #500]	@ (80031c0 <BlockO+0x270>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	1c9a      	adds	r2, r3, #2
 8002fce:	4b7b      	ldr	r3, [pc, #492]	@ (80031bc <BlockO+0x26c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	1cd9      	adds	r1, r3, #3
 8002fd4:	487b      	ldr	r0, [pc, #492]	@ (80031c4 <BlockO+0x274>)
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	440b      	add	r3, r1
 8002fe0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d050      	beq.n	800308a <BlockO+0x13a>
	{
		while (isDownKey() == 1);
 8002fe8:	bf00      	nop
 8002fea:	f002 fc19 	bl	8005820 <isDownKey>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d0fa      	beq.n	8002fea <BlockO+0x9a>
		NewTetromino = true;
 8002ff4:	4b74      	ldr	r3, [pc, #464]	@ (80031c8 <BlockO+0x278>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 8002ffa:	4b74      	ldr	r3, [pc, #464]	@ (80031cc <BlockO+0x27c>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 8003000:	4b73      	ldr	r3, [pc, #460]	@ (80031d0 <BlockO+0x280>)
 8003002:	8818      	ldrh	r0, [r3, #0]
 8003004:	4b6e      	ldr	r3, [pc, #440]	@ (80031c0 <BlockO+0x270>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	1c5a      	adds	r2, r3, #1
 800300a:	4b6c      	ldr	r3, [pc, #432]	@ (80031bc <BlockO+0x26c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	1c59      	adds	r1, r3, #1
 8003010:	4604      	mov	r4, r0
 8003012:	486c      	ldr	r0, [pc, #432]	@ (80031c4 <BlockO+0x274>)
 8003014:	4613      	mov	r3, r2
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	1a9b      	subs	r3, r3, r2
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	440b      	add	r3, r1
 800301e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] = colour;
 8003022:	4b6b      	ldr	r3, [pc, #428]	@ (80031d0 <BlockO+0x280>)
 8003024:	8818      	ldrh	r0, [r3, #0]
 8003026:	4b66      	ldr	r3, [pc, #408]	@ (80031c0 <BlockO+0x270>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	1c9a      	adds	r2, r3, #2
 800302c:	4b63      	ldr	r3, [pc, #396]	@ (80031bc <BlockO+0x26c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	1c59      	adds	r1, r3, #1
 8003032:	4604      	mov	r4, r0
 8003034:	4863      	ldr	r0, [pc, #396]	@ (80031c4 <BlockO+0x274>)
 8003036:	4613      	mov	r3, r2
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	440b      	add	r3, r1
 8003040:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] = colour;
 8003044:	4b62      	ldr	r3, [pc, #392]	@ (80031d0 <BlockO+0x280>)
 8003046:	8818      	ldrh	r0, [r3, #0]
 8003048:	4b5d      	ldr	r3, [pc, #372]	@ (80031c0 <BlockO+0x270>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	4b5b      	ldr	r3, [pc, #364]	@ (80031bc <BlockO+0x26c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	1c99      	adds	r1, r3, #2
 8003054:	4604      	mov	r4, r0
 8003056:	485b      	ldr	r0, [pc, #364]	@ (80031c4 <BlockO+0x274>)
 8003058:	4613      	mov	r3, r2
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	440b      	add	r3, r1
 8003062:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] = colour;
 8003066:	4b5a      	ldr	r3, [pc, #360]	@ (80031d0 <BlockO+0x280>)
 8003068:	8818      	ldrh	r0, [r3, #0]
 800306a:	4b55      	ldr	r3, [pc, #340]	@ (80031c0 <BlockO+0x270>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	1c9a      	adds	r2, r3, #2
 8003070:	4b52      	ldr	r3, [pc, #328]	@ (80031bc <BlockO+0x26c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	1c99      	adds	r1, r3, #2
 8003076:	4604      	mov	r4, r0
 8003078:	4852      	ldr	r0, [pc, #328]	@ (80031c4 <BlockO+0x274>)
 800307a:	4613      	mov	r3, r2
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	1a9b      	subs	r3, r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	440b      	add	r3, r1
 8003084:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8003088:	e002      	b.n	8003090 <BlockO+0x140>
	}
	else CanMoveDown = true;
 800308a:	4b50      	ldr	r3, [pc, #320]	@ (80031cc <BlockO+0x27c>)
 800308c:	2201      	movs	r2, #1
 800308e:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8003090:	4b4b      	ldr	r3, [pc, #300]	@ (80031c0 <BlockO+0x270>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4b49      	ldr	r3, [pc, #292]	@ (80031bc <BlockO+0x26c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	1c59      	adds	r1, r3, #1
 800309a:	484a      	ldr	r0, [pc, #296]	@ (80031c4 <BlockO+0x274>)
 800309c:	4613      	mov	r3, r2
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	1a9b      	subs	r3, r3, r2
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	440b      	add	r3, r1
 80030a6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d132      	bne.n	8003114 <BlockO+0x1c4>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80030ae:	4b44      	ldr	r3, [pc, #272]	@ (80031c0 <BlockO+0x270>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	4b41      	ldr	r3, [pc, #260]	@ (80031bc <BlockO+0x26c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	1c59      	adds	r1, r3, #1
 80030ba:	4842      	ldr	r0, [pc, #264]	@ (80031c4 <BlockO+0x274>)
 80030bc:	4613      	mov	r3, r2
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	1a9b      	subs	r3, r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	440b      	add	r3, r1
 80030c6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d122      	bne.n	8003114 <BlockO+0x1c4>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 80030ce:	4b3c      	ldr	r3, [pc, #240]	@ (80031c0 <BlockO+0x270>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	4b3a      	ldr	r3, [pc, #232]	@ (80031bc <BlockO+0x26c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	1c99      	adds	r1, r3, #2
 80030d8:	483a      	ldr	r0, [pc, #232]	@ (80031c4 <BlockO+0x274>)
 80030da:	4613      	mov	r3, r2
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	1a9b      	subs	r3, r3, r2
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	440b      	add	r3, r1
 80030e4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d113      	bne.n	8003114 <BlockO+0x1c4>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0
 80030ec:	4b34      	ldr	r3, [pc, #208]	@ (80031c0 <BlockO+0x270>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	4b32      	ldr	r3, [pc, #200]	@ (80031bc <BlockO+0x26c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	1c99      	adds	r1, r3, #2
 80030f8:	4832      	ldr	r0, [pc, #200]	@ (80031c4 <BlockO+0x274>)
 80030fa:	4613      	mov	r3, r2
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	440b      	add	r3, r1
 8003104:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 8003108:	2b00      	cmp	r3, #0
 800310a:	d103      	bne.n	8003114 <BlockO+0x1c4>
	)
		CanMoveLeft = true;
 800310c:	4b31      	ldr	r3, [pc, #196]	@ (80031d4 <BlockO+0x284>)
 800310e:	2201      	movs	r2, #1
 8003110:	701a      	strb	r2, [r3, #0]
 8003112:	e002      	b.n	800311a <BlockO+0x1ca>
	else CanMoveLeft = false;
 8003114:	4b2f      	ldr	r3, [pc, #188]	@ (80031d4 <BlockO+0x284>)
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 800311a:	4b29      	ldr	r3, [pc, #164]	@ (80031c0 <BlockO+0x270>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	1c9a      	adds	r2, r3, #2
 8003120:	4b26      	ldr	r3, [pc, #152]	@ (80031bc <BlockO+0x26c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	1c59      	adds	r1, r3, #1
 8003126:	4827      	ldr	r0, [pc, #156]	@ (80031c4 <BlockO+0x274>)
 8003128:	4613      	mov	r3, r2
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	440b      	add	r3, r1
 8003132:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d133      	bne.n	80031a2 <BlockO+0x252>
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 800313a:	4b21      	ldr	r3, [pc, #132]	@ (80031c0 <BlockO+0x270>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	1cda      	adds	r2, r3, #3
 8003140:	4b1e      	ldr	r3, [pc, #120]	@ (80031bc <BlockO+0x26c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	1c59      	adds	r1, r3, #1
 8003146:	481f      	ldr	r0, [pc, #124]	@ (80031c4 <BlockO+0x274>)
 8003148:	4613      	mov	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	440b      	add	r3, r1
 8003152:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8003156:	2b00      	cmp	r3, #0
 8003158:	d123      	bne.n	80031a2 <BlockO+0x252>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 800315a:	4b19      	ldr	r3, [pc, #100]	@ (80031c0 <BlockO+0x270>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	1c9a      	adds	r2, r3, #2
 8003160:	4b16      	ldr	r3, [pc, #88]	@ (80031bc <BlockO+0x26c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	1c99      	adds	r1, r3, #2
 8003166:	4817      	ldr	r0, [pc, #92]	@ (80031c4 <BlockO+0x274>)
 8003168:	4613      	mov	r3, r2
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	440b      	add	r3, r1
 8003172:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 8003176:	2b00      	cmp	r3, #0
 8003178:	d113      	bne.n	80031a2 <BlockO+0x252>
		tetris[tetrominoLocX + 3][tetrominoLocY + 2] == 0
 800317a:	4b11      	ldr	r3, [pc, #68]	@ (80031c0 <BlockO+0x270>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	1cda      	adds	r2, r3, #3
 8003180:	4b0e      	ldr	r3, [pc, #56]	@ (80031bc <BlockO+0x26c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	1c99      	adds	r1, r3, #2
 8003186:	480f      	ldr	r0, [pc, #60]	@ (80031c4 <BlockO+0x274>)
 8003188:	4613      	mov	r3, r2
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	1a9b      	subs	r3, r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	440b      	add	r3, r1
 8003192:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 8003196:	2b00      	cmp	r3, #0
 8003198:	d103      	bne.n	80031a2 <BlockO+0x252>
	)
		CanMoveRight = true;
 800319a:	4b0f      	ldr	r3, [pc, #60]	@ (80031d8 <BlockO+0x288>)
 800319c:	2201      	movs	r2, #1
 800319e:	701a      	strb	r2, [r3, #0]
 80031a0:	e002      	b.n	80031a8 <BlockO+0x258>
	else CanMoveRight = false;
 80031a2:	4b0d      	ldr	r3, [pc, #52]	@ (80031d8 <BlockO+0x288>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]

	CanRotate = true;
 80031a8:	4b0c      	ldr	r3, [pc, #48]	@ (80031dc <BlockO+0x28c>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 3); cout << char(248);
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 3); cout << char(248);
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd90      	pop	{r4, r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000eac 	.word	0x20000eac
 80031bc:	20000ea8 	.word	0x20000ea8
 80031c0:	20000ea4 	.word	0x20000ea4
 80031c4:	20000090 	.word	0x20000090
 80031c8:	2000000c 	.word	0x2000000c
 80031cc:	2000000f 	.word	0x2000000f
 80031d0:	20000eb0 	.word	0x20000eb0
 80031d4:	2000000e 	.word	0x2000000e
 80031d8:	2000000d 	.word	0x2000000d
 80031dc:	20000010 	.word	0x20000010

080031e0 <BlockS1>:

void BlockS1(int x, int y)
{
 80031e0:	b590      	push	{r4, r7, lr}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	3301      	adds	r3, #1
 80031f2:	4619      	mov	r1, r3
 80031f4:	4610      	mov	r0, r2
 80031f6:	f002 fb99 	bl	800592c <PrintXY>
	PrintXY(x + 2, y + 1);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	1c9a      	adds	r2, r3, #2
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	3301      	adds	r3, #1
 8003202:	4619      	mov	r1, r3
 8003204:	4610      	mov	r0, r2
 8003206:	f002 fb91 	bl	800592c <PrintXY>
	PrintXY(x + 1, y + 2);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	3302      	adds	r3, #2
 8003212:	4619      	mov	r1, r3
 8003214:	4610      	mov	r0, r2
 8003216:	f002 fb89 	bl	800592c <PrintXY>
	PrintXY(x, y + 2);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	3302      	adds	r3, #2
 800321e:	4619      	mov	r1, r3
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f002 fb83 	bl	800592c <PrintXY>

	CurrentState = 11;
 8003226:	4bb0      	ldr	r3, [pc, #704]	@ (80034e8 <BlockS1+0x308>)
 8003228:	220b      	movs	r2, #11
 800322a:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 800322c:	4baf      	ldr	r3, [pc, #700]	@ (80034ec <BlockS1+0x30c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b12      	cmp	r3, #18
 8003232:	dc2e      	bgt.n	8003292 <BlockS1+0xb2>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] != 0 ||
 8003234:	4bae      	ldr	r3, [pc, #696]	@ (80034f0 <BlockS1+0x310>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	1c9a      	adds	r2, r3, #2
 800323a:	4bac      	ldr	r3, [pc, #688]	@ (80034ec <BlockS1+0x30c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	1c99      	adds	r1, r3, #2
 8003240:	48ac      	ldr	r0, [pc, #688]	@ (80034f4 <BlockS1+0x314>)
 8003242:	4613      	mov	r3, r2
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	440b      	add	r3, r1
 800324c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 8003250:	2b00      	cmp	r3, #0
 8003252:	d11e      	bne.n	8003292 <BlockS1+0xb2>
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 8003254:	4ba6      	ldr	r3, [pc, #664]	@ (80034f0 <BlockS1+0x310>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	4ba4      	ldr	r3, [pc, #656]	@ (80034ec <BlockS1+0x30c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	1cd9      	adds	r1, r3, #3
 8003260:	48a4      	ldr	r0, [pc, #656]	@ (80034f4 <BlockS1+0x314>)
 8003262:	4613      	mov	r3, r2
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	1a9b      	subs	r3, r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	440b      	add	r3, r1
 800326c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] != 0 ||
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10e      	bne.n	8003292 <BlockS1+0xb2>
		tetris[tetrominoLocX][tetrominoLocY + 3] != 0)
 8003274:	4b9e      	ldr	r3, [pc, #632]	@ (80034f0 <BlockS1+0x310>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	4b9c      	ldr	r3, [pc, #624]	@ (80034ec <BlockS1+0x30c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	1cd9      	adds	r1, r3, #3
 800327e:	489d      	ldr	r0, [pc, #628]	@ (80034f4 <BlockS1+0x314>)
 8003280:	4613      	mov	r3, r2
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	440b      	add	r3, r1
 800328a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 800328e:	2b00      	cmp	r3, #0
 8003290:	d04f      	beq.n	8003332 <BlockS1+0x152>
	{
		while (isDownKey() == 1);
 8003292:	bf00      	nop
 8003294:	f002 fac4 	bl	8005820 <isDownKey>
 8003298:	4603      	mov	r3, r0
 800329a:	2b01      	cmp	r3, #1
 800329c:	d0fa      	beq.n	8003294 <BlockS1+0xb4>
		NewTetromino = true;
 800329e:	4b96      	ldr	r3, [pc, #600]	@ (80034f8 <BlockS1+0x318>)
 80032a0:	2201      	movs	r2, #1
 80032a2:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 80032a4:	4b95      	ldr	r3, [pc, #596]	@ (80034fc <BlockS1+0x31c>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 80032aa:	4b95      	ldr	r3, [pc, #596]	@ (8003500 <BlockS1+0x320>)
 80032ac:	8818      	ldrh	r0, [r3, #0]
 80032ae:	4b90      	ldr	r3, [pc, #576]	@ (80034f0 <BlockS1+0x310>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	4b8d      	ldr	r3, [pc, #564]	@ (80034ec <BlockS1+0x30c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	1c59      	adds	r1, r3, #1
 80032ba:	4604      	mov	r4, r0
 80032bc:	488d      	ldr	r0, [pc, #564]	@ (80034f4 <BlockS1+0x314>)
 80032be:	4613      	mov	r3, r2
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	440b      	add	r3, r1
 80032c8:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] = colour;
 80032cc:	4b8c      	ldr	r3, [pc, #560]	@ (8003500 <BlockS1+0x320>)
 80032ce:	8818      	ldrh	r0, [r3, #0]
 80032d0:	4b87      	ldr	r3, [pc, #540]	@ (80034f0 <BlockS1+0x310>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	1c9a      	adds	r2, r3, #2
 80032d6:	4b85      	ldr	r3, [pc, #532]	@ (80034ec <BlockS1+0x30c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	1c59      	adds	r1, r3, #1
 80032dc:	4604      	mov	r4, r0
 80032de:	4885      	ldr	r0, [pc, #532]	@ (80034f4 <BlockS1+0x314>)
 80032e0:	4613      	mov	r3, r2
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	1a9b      	subs	r3, r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	440b      	add	r3, r1
 80032ea:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] = colour;
 80032ee:	4b84      	ldr	r3, [pc, #528]	@ (8003500 <BlockS1+0x320>)
 80032f0:	8818      	ldrh	r0, [r3, #0]
 80032f2:	4b7f      	ldr	r3, [pc, #508]	@ (80034f0 <BlockS1+0x310>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	1c5a      	adds	r2, r3, #1
 80032f8:	4b7c      	ldr	r3, [pc, #496]	@ (80034ec <BlockS1+0x30c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	1c99      	adds	r1, r3, #2
 80032fe:	4604      	mov	r4, r0
 8003300:	487c      	ldr	r0, [pc, #496]	@ (80034f4 <BlockS1+0x314>)
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	440b      	add	r3, r1
 800330c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] = colour;
 8003310:	4b7b      	ldr	r3, [pc, #492]	@ (8003500 <BlockS1+0x320>)
 8003312:	8818      	ldrh	r0, [r3, #0]
 8003314:	4b76      	ldr	r3, [pc, #472]	@ (80034f0 <BlockS1+0x310>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	4b74      	ldr	r3, [pc, #464]	@ (80034ec <BlockS1+0x30c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	1c99      	adds	r1, r3, #2
 800331e:	4604      	mov	r4, r0
 8003320:	4874      	ldr	r0, [pc, #464]	@ (80034f4 <BlockS1+0x314>)
 8003322:	4613      	mov	r3, r2
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	1a9b      	subs	r3, r3, r2
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	440b      	add	r3, r1
 800332c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8003330:	e002      	b.n	8003338 <BlockS1+0x158>
	}
	else CanMoveDown = true;
 8003332:	4b72      	ldr	r3, [pc, #456]	@ (80034fc <BlockS1+0x31c>)
 8003334:	2201      	movs	r2, #1
 8003336:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8003338:	4b6d      	ldr	r3, [pc, #436]	@ (80034f0 <BlockS1+0x310>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4b6b      	ldr	r3, [pc, #428]	@ (80034ec <BlockS1+0x30c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	1c59      	adds	r1, r3, #1
 8003342:	486c      	ldr	r0, [pc, #432]	@ (80034f4 <BlockS1+0x314>)
 8003344:	4613      	mov	r3, r2
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	440b      	add	r3, r1
 800334e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d132      	bne.n	80033bc <BlockS1+0x1dc>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8003356:	4b66      	ldr	r3, [pc, #408]	@ (80034f0 <BlockS1+0x310>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	4b63      	ldr	r3, [pc, #396]	@ (80034ec <BlockS1+0x30c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	1c59      	adds	r1, r3, #1
 8003362:	4864      	ldr	r0, [pc, #400]	@ (80034f4 <BlockS1+0x314>)
 8003364:	4613      	mov	r3, r2
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	440b      	add	r3, r1
 800336e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8003372:	2b00      	cmp	r3, #0
 8003374:	d122      	bne.n	80033bc <BlockS1+0x1dc>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 8003376:	4b5e      	ldr	r3, [pc, #376]	@ (80034f0 <BlockS1+0x310>)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	4b5c      	ldr	r3, [pc, #368]	@ (80034ec <BlockS1+0x30c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	1c99      	adds	r1, r3, #2
 8003380:	485c      	ldr	r0, [pc, #368]	@ (80034f4 <BlockS1+0x314>)
 8003382:	4613      	mov	r3, r2
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	1a9b      	subs	r3, r3, r2
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	440b      	add	r3, r1
 800338c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8003390:	2b00      	cmp	r3, #0
 8003392:	d113      	bne.n	80033bc <BlockS1+0x1dc>
		tetris[tetrominoLocX - 1][tetrominoLocY + 2] == 0
 8003394:	4b56      	ldr	r3, [pc, #344]	@ (80034f0 <BlockS1+0x310>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	1e5a      	subs	r2, r3, #1
 800339a:	4b54      	ldr	r3, [pc, #336]	@ (80034ec <BlockS1+0x30c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	1c99      	adds	r1, r3, #2
 80033a0:	4854      	ldr	r0, [pc, #336]	@ (80034f4 <BlockS1+0x314>)
 80033a2:	4613      	mov	r3, r2
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	1a9b      	subs	r3, r3, r2
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	440b      	add	r3, r1
 80033ac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d103      	bne.n	80033bc <BlockS1+0x1dc>
	)
		CanMoveLeft = true;
 80033b4:	4b53      	ldr	r3, [pc, #332]	@ (8003504 <BlockS1+0x324>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	701a      	strb	r2, [r3, #0]
 80033ba:	e002      	b.n	80033c2 <BlockS1+0x1e2>
	else CanMoveLeft = false;
 80033bc:	4b51      	ldr	r3, [pc, #324]	@ (8003504 <BlockS1+0x324>)
 80033be:	2200      	movs	r2, #0
 80033c0:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80033c2:	4b4b      	ldr	r3, [pc, #300]	@ (80034f0 <BlockS1+0x310>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	1c9a      	adds	r2, r3, #2
 80033c8:	4b48      	ldr	r3, [pc, #288]	@ (80034ec <BlockS1+0x30c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	1c59      	adds	r1, r3, #1
 80033ce:	4849      	ldr	r0, [pc, #292]	@ (80034f4 <BlockS1+0x314>)
 80033d0:	4613      	mov	r3, r2
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	1a9b      	subs	r3, r3, r2
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	440b      	add	r3, r1
 80033da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d133      	bne.n	800344a <BlockS1+0x26a>
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 80033e2:	4b43      	ldr	r3, [pc, #268]	@ (80034f0 <BlockS1+0x310>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	1cda      	adds	r2, r3, #3
 80033e8:	4b40      	ldr	r3, [pc, #256]	@ (80034ec <BlockS1+0x30c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	1c59      	adds	r1, r3, #1
 80033ee:	4841      	ldr	r0, [pc, #260]	@ (80034f4 <BlockS1+0x314>)
 80033f0:	4613      	mov	r3, r2
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	440b      	add	r3, r1
 80033fa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d123      	bne.n	800344a <BlockS1+0x26a>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 8003402:	4b3b      	ldr	r3, [pc, #236]	@ (80034f0 <BlockS1+0x310>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	1c9a      	adds	r2, r3, #2
 8003408:	4b38      	ldr	r3, [pc, #224]	@ (80034ec <BlockS1+0x30c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	1c99      	adds	r1, r3, #2
 800340e:	4839      	ldr	r0, [pc, #228]	@ (80034f4 <BlockS1+0x314>)
 8003410:	4613      	mov	r3, r2
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	440b      	add	r3, r1
 800341a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 800341e:	2b00      	cmp	r3, #0
 8003420:	d113      	bne.n	800344a <BlockS1+0x26a>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0
 8003422:	4b33      	ldr	r3, [pc, #204]	@ (80034f0 <BlockS1+0x310>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	4b30      	ldr	r3, [pc, #192]	@ (80034ec <BlockS1+0x30c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	1c99      	adds	r1, r3, #2
 800342e:	4831      	ldr	r0, [pc, #196]	@ (80034f4 <BlockS1+0x314>)
 8003430:	4613      	mov	r3, r2
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	1a9b      	subs	r3, r3, r2
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	440b      	add	r3, r1
 800343a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 800343e:	2b00      	cmp	r3, #0
 8003440:	d103      	bne.n	800344a <BlockS1+0x26a>
	)
		CanMoveRight = true;
 8003442:	4b31      	ldr	r3, [pc, #196]	@ (8003508 <BlockS1+0x328>)
 8003444:	2201      	movs	r2, #1
 8003446:	701a      	strb	r2, [r3, #0]
 8003448:	e002      	b.n	8003450 <BlockS1+0x270>
	else CanMoveRight = false;
 800344a:	4b2f      	ldr	r3, [pc, #188]	@ (8003508 <BlockS1+0x328>)
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8003450:	4b27      	ldr	r3, [pc, #156]	@ (80034f0 <BlockS1+0x310>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	4b25      	ldr	r3, [pc, #148]	@ (80034ec <BlockS1+0x30c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	1c59      	adds	r1, r3, #1
 800345c:	4825      	ldr	r0, [pc, #148]	@ (80034f4 <BlockS1+0x314>)
 800345e:	4613      	mov	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	440b      	add	r3, r1
 8003468:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d132      	bne.n	80034d6 <BlockS1+0x2f6>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 8003470:	4b1f      	ldr	r3, [pc, #124]	@ (80034f0 <BlockS1+0x310>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	4b1d      	ldr	r3, [pc, #116]	@ (80034ec <BlockS1+0x30c>)
 8003478:	6819      	ldr	r1, [r3, #0]
 800347a:	481e      	ldr	r0, [pc, #120]	@ (80034f4 <BlockS1+0x314>)
 800347c:	4613      	mov	r3, r2
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	440b      	add	r3, r1
 8003486:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 800348a:	2b00      	cmp	r3, #0
 800348c:	d123      	bne.n	80034d6 <BlockS1+0x2f6>
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 800348e:	4b18      	ldr	r3, [pc, #96]	@ (80034f0 <BlockS1+0x310>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	1c9a      	adds	r2, r3, #2
 8003494:	4b15      	ldr	r3, [pc, #84]	@ (80034ec <BlockS1+0x30c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	1c59      	adds	r1, r3, #1
 800349a:	4816      	ldr	r0, [pc, #88]	@ (80034f4 <BlockS1+0x314>)
 800349c:	4613      	mov	r3, r2
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	1a9b      	subs	r3, r3, r2
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	440b      	add	r3, r1
 80034a6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d113      	bne.n	80034d6 <BlockS1+0x2f6>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0)
 80034ae:	4b10      	ldr	r3, [pc, #64]	@ (80034f0 <BlockS1+0x310>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	1c9a      	adds	r2, r3, #2
 80034b4:	4b0d      	ldr	r3, [pc, #52]	@ (80034ec <BlockS1+0x30c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	1c99      	adds	r1, r3, #2
 80034ba:	480e      	ldr	r0, [pc, #56]	@ (80034f4 <BlockS1+0x314>)
 80034bc:	4613      	mov	r3, r2
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	440b      	add	r3, r1
 80034c6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d103      	bne.n	80034d6 <BlockS1+0x2f6>
		CanRotate = true;
 80034ce:	4b0f      	ldr	r3, [pc, #60]	@ (800350c <BlockS1+0x32c>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	701a      	strb	r2, [r3, #0]
 80034d4:	e003      	b.n	80034de <BlockS1+0x2fe>
	else CanRotate = false;
 80034d6:	4b0d      	ldr	r3, [pc, #52]	@ (800350c <BlockS1+0x32c>)
 80034d8:	2200      	movs	r2, #0
 80034da:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 3); cout << char(248);
	//PrintXY(tetrominoLocX, tetrominoLocY + 3); cout << char(248);
}
 80034dc:	bf00      	nop
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd90      	pop	{r4, r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000eac 	.word	0x20000eac
 80034ec:	20000ea8 	.word	0x20000ea8
 80034f0:	20000ea4 	.word	0x20000ea4
 80034f4:	20000090 	.word	0x20000090
 80034f8:	2000000c 	.word	0x2000000c
 80034fc:	2000000f 	.word	0x2000000f
 8003500:	20000eb0 	.word	0x20000eb0
 8003504:	2000000e 	.word	0x2000000e
 8003508:	2000000d 	.word	0x2000000d
 800350c:	20000010 	.word	0x20000010

08003510 <BlockS2>:

void BlockS2(int x, int y)
{
 8003510:	b590      	push	{r4, r7, lr}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	3301      	adds	r3, #1
 8003522:	4619      	mov	r1, r3
 8003524:	4610      	mov	r0, r2
 8003526:	f002 fa01 	bl	800592c <PrintXY>
	PrintXY(x + 1, y);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3301      	adds	r3, #1
 800352e:	6839      	ldr	r1, [r7, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f002 f9fb 	bl	800592c <PrintXY>
	PrintXY(x + 2, y + 1);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	1c9a      	adds	r2, r3, #2
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	3301      	adds	r3, #1
 800353e:	4619      	mov	r1, r3
 8003540:	4610      	mov	r0, r2
 8003542:	f002 f9f3 	bl	800592c <PrintXY>
	PrintXY(x + 2, y + 2);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	1c9a      	adds	r2, r3, #2
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	3302      	adds	r3, #2
 800354e:	4619      	mov	r1, r3
 8003550:	4610      	mov	r0, r2
 8003552:	f002 f9eb 	bl	800592c <PrintXY>

	CurrentState = 12;
 8003556:	4ba7      	ldr	r3, [pc, #668]	@ (80037f4 <BlockS2+0x2e4>)
 8003558:	220c      	movs	r2, #12
 800355a:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 800355c:	4ba6      	ldr	r3, [pc, #664]	@ (80037f8 <BlockS2+0x2e8>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b12      	cmp	r3, #18
 8003562:	dc1f      	bgt.n	80035a4 <BlockS2+0x94>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 8003564:	4ba5      	ldr	r3, [pc, #660]	@ (80037fc <BlockS2+0x2ec>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	4ba3      	ldr	r3, [pc, #652]	@ (80037f8 <BlockS2+0x2e8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	1c99      	adds	r1, r3, #2
 8003570:	48a3      	ldr	r0, [pc, #652]	@ (8003800 <BlockS2+0x2f0>)
 8003572:	4613      	mov	r3, r2
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	1a9b      	subs	r3, r3, r2
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	440b      	add	r3, r1
 800357c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10f      	bne.n	80035a4 <BlockS2+0x94>
		tetris[tetrominoLocX + 2][tetrominoLocY + 3] != 0)
 8003584:	4b9d      	ldr	r3, [pc, #628]	@ (80037fc <BlockS2+0x2ec>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	1c9a      	adds	r2, r3, #2
 800358a:	4b9b      	ldr	r3, [pc, #620]	@ (80037f8 <BlockS2+0x2e8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	1cd9      	adds	r1, r3, #3
 8003590:	489b      	ldr	r0, [pc, #620]	@ (8003800 <BlockS2+0x2f0>)
 8003592:	4613      	mov	r3, r2
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	440b      	add	r3, r1
 800359c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d04f      	beq.n	8003644 <BlockS2+0x134>
	{
		while (isDownKey() == 1);
 80035a4:	bf00      	nop
 80035a6:	f002 f93b 	bl	8005820 <isDownKey>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d0fa      	beq.n	80035a6 <BlockS2+0x96>
		NewTetromino = true;
 80035b0:	4b94      	ldr	r3, [pc, #592]	@ (8003804 <BlockS2+0x2f4>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 80035b6:	4b94      	ldr	r3, [pc, #592]	@ (8003808 <BlockS2+0x2f8>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 80035bc:	4b93      	ldr	r3, [pc, #588]	@ (800380c <BlockS2+0x2fc>)
 80035be:	8818      	ldrh	r0, [r3, #0]
 80035c0:	4b8e      	ldr	r3, [pc, #568]	@ (80037fc <BlockS2+0x2ec>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	4b8c      	ldr	r3, [pc, #560]	@ (80037f8 <BlockS2+0x2e8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	1c59      	adds	r1, r3, #1
 80035cc:	4604      	mov	r4, r0
 80035ce:	488c      	ldr	r0, [pc, #560]	@ (8003800 <BlockS2+0x2f0>)
 80035d0:	4613      	mov	r3, r2
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	440b      	add	r3, r1
 80035da:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] = colour;
 80035de:	4b8b      	ldr	r3, [pc, #556]	@ (800380c <BlockS2+0x2fc>)
 80035e0:	8818      	ldrh	r0, [r3, #0]
 80035e2:	4b86      	ldr	r3, [pc, #536]	@ (80037fc <BlockS2+0x2ec>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	4b83      	ldr	r3, [pc, #524]	@ (80037f8 <BlockS2+0x2e8>)
 80035ea:	6819      	ldr	r1, [r3, #0]
 80035ec:	4604      	mov	r4, r0
 80035ee:	4884      	ldr	r0, [pc, #528]	@ (8003800 <BlockS2+0x2f0>)
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	440b      	add	r3, r1
 80035fa:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] = colour;
 80035fe:	4b83      	ldr	r3, [pc, #524]	@ (800380c <BlockS2+0x2fc>)
 8003600:	8818      	ldrh	r0, [r3, #0]
 8003602:	4b7e      	ldr	r3, [pc, #504]	@ (80037fc <BlockS2+0x2ec>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	1c9a      	adds	r2, r3, #2
 8003608:	4b7b      	ldr	r3, [pc, #492]	@ (80037f8 <BlockS2+0x2e8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	1c59      	adds	r1, r3, #1
 800360e:	4604      	mov	r4, r0
 8003610:	487b      	ldr	r0, [pc, #492]	@ (8003800 <BlockS2+0x2f0>)
 8003612:	4613      	mov	r3, r2
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	1a9b      	subs	r3, r3, r2
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	440b      	add	r3, r1
 800361c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] = colour;
 8003620:	4b7a      	ldr	r3, [pc, #488]	@ (800380c <BlockS2+0x2fc>)
 8003622:	8818      	ldrh	r0, [r3, #0]
 8003624:	4b75      	ldr	r3, [pc, #468]	@ (80037fc <BlockS2+0x2ec>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	1c9a      	adds	r2, r3, #2
 800362a:	4b73      	ldr	r3, [pc, #460]	@ (80037f8 <BlockS2+0x2e8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	1c99      	adds	r1, r3, #2
 8003630:	4604      	mov	r4, r0
 8003632:	4873      	ldr	r0, [pc, #460]	@ (8003800 <BlockS2+0x2f0>)
 8003634:	4613      	mov	r3, r2
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	1a9b      	subs	r3, r3, r2
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	440b      	add	r3, r1
 800363e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8003642:	e002      	b.n	800364a <BlockS2+0x13a>
	}
	else CanMoveDown = true;
 8003644:	4b70      	ldr	r3, [pc, #448]	@ (8003808 <BlockS2+0x2f8>)
 8003646:	2201      	movs	r2, #1
 8003648:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 800364a:	4b6c      	ldr	r3, [pc, #432]	@ (80037fc <BlockS2+0x2ec>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	4b6a      	ldr	r3, [pc, #424]	@ (80037f8 <BlockS2+0x2e8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	1c59      	adds	r1, r3, #1
 8003654:	486a      	ldr	r0, [pc, #424]	@ (8003800 <BlockS2+0x2f0>)
 8003656:	4613      	mov	r3, r2
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	440b      	add	r3, r1
 8003660:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d131      	bne.n	80036cc <BlockS2+0x1bc>
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 8003668:	4b64      	ldr	r3, [pc, #400]	@ (80037fc <BlockS2+0x2ec>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	4b62      	ldr	r3, [pc, #392]	@ (80037f8 <BlockS2+0x2e8>)
 800366e:	6819      	ldr	r1, [r3, #0]
 8003670:	4863      	ldr	r0, [pc, #396]	@ (8003800 <BlockS2+0x2f0>)
 8003672:	4613      	mov	r3, r2
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	1a9b      	subs	r3, r3, r2
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	440b      	add	r3, r1
 800367c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8003680:	2b00      	cmp	r3, #0
 8003682:	d123      	bne.n	80036cc <BlockS2+0x1bc>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8003684:	4b5d      	ldr	r3, [pc, #372]	@ (80037fc <BlockS2+0x2ec>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	4b5b      	ldr	r3, [pc, #364]	@ (80037f8 <BlockS2+0x2e8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c59      	adds	r1, r3, #1
 8003690:	485b      	ldr	r0, [pc, #364]	@ (8003800 <BlockS2+0x2f0>)
 8003692:	4613      	mov	r3, r2
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	440b      	add	r3, r1
 800369c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d113      	bne.n	80036cc <BlockS2+0x1bc>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0
 80036a4:	4b55      	ldr	r3, [pc, #340]	@ (80037fc <BlockS2+0x2ec>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	4b53      	ldr	r3, [pc, #332]	@ (80037f8 <BlockS2+0x2e8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	1c99      	adds	r1, r3, #2
 80036b0:	4853      	ldr	r0, [pc, #332]	@ (8003800 <BlockS2+0x2f0>)
 80036b2:	4613      	mov	r3, r2
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	1a9b      	subs	r3, r3, r2
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	440b      	add	r3, r1
 80036bc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d103      	bne.n	80036cc <BlockS2+0x1bc>
	)
		CanMoveLeft = true;
 80036c4:	4b52      	ldr	r3, [pc, #328]	@ (8003810 <BlockS2+0x300>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	701a      	strb	r2, [r3, #0]
 80036ca:	e002      	b.n	80036d2 <BlockS2+0x1c2>
	else CanMoveLeft = false;
 80036cc:	4b50      	ldr	r3, [pc, #320]	@ (8003810 <BlockS2+0x300>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80036d2:	4b4a      	ldr	r3, [pc, #296]	@ (80037fc <BlockS2+0x2ec>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	1c9a      	adds	r2, r3, #2
 80036d8:	4b47      	ldr	r3, [pc, #284]	@ (80037f8 <BlockS2+0x2e8>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	1c59      	adds	r1, r3, #1
 80036de:	4848      	ldr	r0, [pc, #288]	@ (8003800 <BlockS2+0x2f0>)
 80036e0:	4613      	mov	r3, r2
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	1a9b      	subs	r3, r3, r2
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	440b      	add	r3, r1
 80036ea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d132      	bne.n	8003758 <BlockS2+0x248>
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 80036f2:	4b42      	ldr	r3, [pc, #264]	@ (80037fc <BlockS2+0x2ec>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	1c9a      	adds	r2, r3, #2
 80036f8:	4b3f      	ldr	r3, [pc, #252]	@ (80037f8 <BlockS2+0x2e8>)
 80036fa:	6819      	ldr	r1, [r3, #0]
 80036fc:	4840      	ldr	r0, [pc, #256]	@ (8003800 <BlockS2+0x2f0>)
 80036fe:	4613      	mov	r3, r2
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	440b      	add	r3, r1
 8003708:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 800370c:	2b00      	cmp	r3, #0
 800370e:	d123      	bne.n	8003758 <BlockS2+0x248>
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 8003710:	4b3a      	ldr	r3, [pc, #232]	@ (80037fc <BlockS2+0x2ec>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	1cda      	adds	r2, r3, #3
 8003716:	4b38      	ldr	r3, [pc, #224]	@ (80037f8 <BlockS2+0x2e8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	1c59      	adds	r1, r3, #1
 800371c:	4838      	ldr	r0, [pc, #224]	@ (8003800 <BlockS2+0x2f0>)
 800371e:	4613      	mov	r3, r2
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	1a9b      	subs	r3, r3, r2
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	440b      	add	r3, r1
 8003728:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 800372c:	2b00      	cmp	r3, #0
 800372e:	d113      	bne.n	8003758 <BlockS2+0x248>
		tetris[tetrominoLocX + 3][tetrominoLocY + 2] == 0
 8003730:	4b32      	ldr	r3, [pc, #200]	@ (80037fc <BlockS2+0x2ec>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	1cda      	adds	r2, r3, #3
 8003736:	4b30      	ldr	r3, [pc, #192]	@ (80037f8 <BlockS2+0x2e8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	1c99      	adds	r1, r3, #2
 800373c:	4830      	ldr	r0, [pc, #192]	@ (8003800 <BlockS2+0x2f0>)
 800373e:	4613      	mov	r3, r2
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	440b      	add	r3, r1
 8003748:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 800374c:	2b00      	cmp	r3, #0
 800374e:	d103      	bne.n	8003758 <BlockS2+0x248>
	)
		CanMoveRight = true;
 8003750:	4b30      	ldr	r3, [pc, #192]	@ (8003814 <BlockS2+0x304>)
 8003752:	2201      	movs	r2, #1
 8003754:	701a      	strb	r2, [r3, #0]
 8003756:	e002      	b.n	800375e <BlockS2+0x24e>
	else CanMoveRight = false;
 8003758:	4b2e      	ldr	r3, [pc, #184]	@ (8003814 <BlockS2+0x304>)
 800375a:	2200      	movs	r2, #0
 800375c:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 800375e:	4b27      	ldr	r3, [pc, #156]	@ (80037fc <BlockS2+0x2ec>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	4b24      	ldr	r3, [pc, #144]	@ (80037f8 <BlockS2+0x2e8>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	1c59      	adds	r1, r3, #1
 800376a:	4825      	ldr	r0, [pc, #148]	@ (8003800 <BlockS2+0x2f0>)
 800376c:	4613      	mov	r3, r2
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	440b      	add	r3, r1
 8003776:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d132      	bne.n	80037e4 <BlockS2+0x2d4>
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 800377e:	4b1f      	ldr	r3, [pc, #124]	@ (80037fc <BlockS2+0x2ec>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	1c9a      	adds	r2, r3, #2
 8003784:	4b1c      	ldr	r3, [pc, #112]	@ (80037f8 <BlockS2+0x2e8>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	1c59      	adds	r1, r3, #1
 800378a:	481d      	ldr	r0, [pc, #116]	@ (8003800 <BlockS2+0x2f0>)
 800378c:	4613      	mov	r3, r2
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	1a9b      	subs	r3, r3, r2
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	440b      	add	r3, r1
 8003796:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 800379a:	2b00      	cmp	r3, #0
 800379c:	d122      	bne.n	80037e4 <BlockS2+0x2d4>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 800379e:	4b17      	ldr	r3, [pc, #92]	@ (80037fc <BlockS2+0x2ec>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	4b14      	ldr	r3, [pc, #80]	@ (80037f8 <BlockS2+0x2e8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	1c99      	adds	r1, r3, #2
 80037aa:	4815      	ldr	r0, [pc, #84]	@ (8003800 <BlockS2+0x2f0>)
 80037ac:	4613      	mov	r3, r2
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	440b      	add	r3, r1
 80037b6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d112      	bne.n	80037e4 <BlockS2+0x2d4>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0)
 80037be:	4b0f      	ldr	r3, [pc, #60]	@ (80037fc <BlockS2+0x2ec>)
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	4b0d      	ldr	r3, [pc, #52]	@ (80037f8 <BlockS2+0x2e8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	1c99      	adds	r1, r3, #2
 80037c8:	480d      	ldr	r0, [pc, #52]	@ (8003800 <BlockS2+0x2f0>)
 80037ca:	4613      	mov	r3, r2
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	1a9b      	subs	r3, r3, r2
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	440b      	add	r3, r1
 80037d4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d103      	bne.n	80037e4 <BlockS2+0x2d4>
		CanRotate = true;
 80037dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003818 <BlockS2+0x308>)
 80037de:	2201      	movs	r2, #1
 80037e0:	701a      	strb	r2, [r3, #0]
 80037e2:	e003      	b.n	80037ec <BlockS2+0x2dc>
	else CanRotate = false;
 80037e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003818 <BlockS2+0x308>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 3); cout << char(248);
}
 80037ea:	bf00      	nop
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd90      	pop	{r4, r7, pc}
 80037f4:	20000eac 	.word	0x20000eac
 80037f8:	20000ea8 	.word	0x20000ea8
 80037fc:	20000ea4 	.word	0x20000ea4
 8003800:	20000090 	.word	0x20000090
 8003804:	2000000c 	.word	0x2000000c
 8003808:	2000000f 	.word	0x2000000f
 800380c:	20000eb0 	.word	0x20000eb0
 8003810:	2000000e 	.word	0x2000000e
 8003814:	2000000d 	.word	0x2000000d
 8003818:	20000010 	.word	0x20000010

0800381c <BlockT1>:

void BlockT1(int x, int y)
{
 800381c:	b590      	push	{r4, r7, lr}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	3301      	adds	r3, #1
 800382e:	4619      	mov	r1, r3
 8003830:	4610      	mov	r0, r2
 8003832:	f002 f87b 	bl	800592c <PrintXY>
	PrintXY(x, y + 1);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	3301      	adds	r3, #1
 800383a:	4619      	mov	r1, r3
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f002 f875 	bl	800592c <PrintXY>
	PrintXY(x + 2, y + 1);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	1c9a      	adds	r2, r3, #2
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	3301      	adds	r3, #1
 800384a:	4619      	mov	r1, r3
 800384c:	4610      	mov	r0, r2
 800384e:	f002 f86d 	bl	800592c <PrintXY>
	PrintXY(x + 1, y + 2);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	3302      	adds	r3, #2
 800385a:	4619      	mov	r1, r3
 800385c:	4610      	mov	r0, r2
 800385e:	f002 f865 	bl	800592c <PrintXY>

	CurrentState = 13;
 8003862:	4bb0      	ldr	r3, [pc, #704]	@ (8003b24 <BlockT1+0x308>)
 8003864:	220d      	movs	r2, #13
 8003866:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 8003868:	4baf      	ldr	r3, [pc, #700]	@ (8003b28 <BlockT1+0x30c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b12      	cmp	r3, #18
 800386e:	dc2e      	bgt.n	80038ce <BlockT1+0xb2>
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0 ||
 8003870:	4bae      	ldr	r3, [pc, #696]	@ (8003b2c <BlockT1+0x310>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	4bac      	ldr	r3, [pc, #688]	@ (8003b28 <BlockT1+0x30c>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	1c99      	adds	r1, r3, #2
 800387a:	48ad      	ldr	r0, [pc, #692]	@ (8003b30 <BlockT1+0x314>)
 800387c:	4613      	mov	r3, r2
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	440b      	add	r3, r1
 8003886:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 800388a:	2b00      	cmp	r3, #0
 800388c:	d11f      	bne.n	80038ce <BlockT1+0xb2>
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 800388e:	4ba7      	ldr	r3, [pc, #668]	@ (8003b2c <BlockT1+0x310>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	4ba4      	ldr	r3, [pc, #656]	@ (8003b28 <BlockT1+0x30c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	1cd9      	adds	r1, r3, #3
 800389a:	48a5      	ldr	r0, [pc, #660]	@ (8003b30 <BlockT1+0x314>)
 800389c:	4613      	mov	r3, r2
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	1a9b      	subs	r3, r3, r2
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	440b      	add	r3, r1
 80038a6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0 ||
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10f      	bne.n	80038ce <BlockT1+0xb2>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] != 0)
 80038ae:	4b9f      	ldr	r3, [pc, #636]	@ (8003b2c <BlockT1+0x310>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	1c9a      	adds	r2, r3, #2
 80038b4:	4b9c      	ldr	r3, [pc, #624]	@ (8003b28 <BlockT1+0x30c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	1c99      	adds	r1, r3, #2
 80038ba:	489d      	ldr	r0, [pc, #628]	@ (8003b30 <BlockT1+0x314>)
 80038bc:	4613      	mov	r3, r2
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	1a9b      	subs	r3, r3, r2
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	440b      	add	r3, r1
 80038c6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d04f      	beq.n	800396e <BlockT1+0x152>
	{
		while (isDownKey() == 1);
 80038ce:	bf00      	nop
 80038d0:	f001 ffa6 	bl	8005820 <isDownKey>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d0fa      	beq.n	80038d0 <BlockT1+0xb4>
		NewTetromino = true;
 80038da:	4b96      	ldr	r3, [pc, #600]	@ (8003b34 <BlockT1+0x318>)
 80038dc:	2201      	movs	r2, #1
 80038de:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 80038e0:	4b95      	ldr	r3, [pc, #596]	@ (8003b38 <BlockT1+0x31c>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 80038e6:	4b95      	ldr	r3, [pc, #596]	@ (8003b3c <BlockT1+0x320>)
 80038e8:	8818      	ldrh	r0, [r3, #0]
 80038ea:	4b90      	ldr	r3, [pc, #576]	@ (8003b2c <BlockT1+0x310>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	4b8d      	ldr	r3, [pc, #564]	@ (8003b28 <BlockT1+0x30c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	1c59      	adds	r1, r3, #1
 80038f6:	4604      	mov	r4, r0
 80038f8:	488d      	ldr	r0, [pc, #564]	@ (8003b30 <BlockT1+0x314>)
 80038fa:	4613      	mov	r3, r2
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	1a9b      	subs	r3, r3, r2
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	440b      	add	r3, r1
 8003904:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] = colour;
 8003908:	4b8c      	ldr	r3, [pc, #560]	@ (8003b3c <BlockT1+0x320>)
 800390a:	8818      	ldrh	r0, [r3, #0]
 800390c:	4b87      	ldr	r3, [pc, #540]	@ (8003b2c <BlockT1+0x310>)
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	4b85      	ldr	r3, [pc, #532]	@ (8003b28 <BlockT1+0x30c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	1c59      	adds	r1, r3, #1
 8003916:	4604      	mov	r4, r0
 8003918:	4885      	ldr	r0, [pc, #532]	@ (8003b30 <BlockT1+0x314>)
 800391a:	4613      	mov	r3, r2
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	1a9b      	subs	r3, r3, r2
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	440b      	add	r3, r1
 8003924:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] = colour;
 8003928:	4b84      	ldr	r3, [pc, #528]	@ (8003b3c <BlockT1+0x320>)
 800392a:	8818      	ldrh	r0, [r3, #0]
 800392c:	4b7f      	ldr	r3, [pc, #508]	@ (8003b2c <BlockT1+0x310>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	1c9a      	adds	r2, r3, #2
 8003932:	4b7d      	ldr	r3, [pc, #500]	@ (8003b28 <BlockT1+0x30c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	1c59      	adds	r1, r3, #1
 8003938:	4604      	mov	r4, r0
 800393a:	487d      	ldr	r0, [pc, #500]	@ (8003b30 <BlockT1+0x314>)
 800393c:	4613      	mov	r3, r2
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	440b      	add	r3, r1
 8003946:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] = colour;
 800394a:	4b7c      	ldr	r3, [pc, #496]	@ (8003b3c <BlockT1+0x320>)
 800394c:	8818      	ldrh	r0, [r3, #0]
 800394e:	4b77      	ldr	r3, [pc, #476]	@ (8003b2c <BlockT1+0x310>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	1c5a      	adds	r2, r3, #1
 8003954:	4b74      	ldr	r3, [pc, #464]	@ (8003b28 <BlockT1+0x30c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	1c99      	adds	r1, r3, #2
 800395a:	4604      	mov	r4, r0
 800395c:	4874      	ldr	r0, [pc, #464]	@ (8003b30 <BlockT1+0x314>)
 800395e:	4613      	mov	r3, r2
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	1a9b      	subs	r3, r3, r2
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	440b      	add	r3, r1
 8003968:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 800396c:	e002      	b.n	8003974 <BlockT1+0x158>
	}
	else CanMoveDown = true;
 800396e:	4b72      	ldr	r3, [pc, #456]	@ (8003b38 <BlockT1+0x31c>)
 8003970:	2201      	movs	r2, #1
 8003972:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8003974:	4b6d      	ldr	r3, [pc, #436]	@ (8003b2c <BlockT1+0x310>)
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	4b6b      	ldr	r3, [pc, #428]	@ (8003b28 <BlockT1+0x30c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	1c59      	adds	r1, r3, #1
 800397e:	486c      	ldr	r0, [pc, #432]	@ (8003b30 <BlockT1+0x314>)
 8003980:	4613      	mov	r3, r2
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	1a9b      	subs	r3, r3, r2
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	440b      	add	r3, r1
 800398a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d132      	bne.n	80039f8 <BlockT1+0x1dc>
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 8003992:	4b66      	ldr	r3, [pc, #408]	@ (8003b2c <BlockT1+0x310>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	1e5a      	subs	r2, r3, #1
 8003998:	4b63      	ldr	r3, [pc, #396]	@ (8003b28 <BlockT1+0x30c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	1c59      	adds	r1, r3, #1
 800399e:	4864      	ldr	r0, [pc, #400]	@ (8003b30 <BlockT1+0x314>)
 80039a0:	4613      	mov	r3, r2
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	1a9b      	subs	r3, r3, r2
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	440b      	add	r3, r1
 80039aa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d122      	bne.n	80039f8 <BlockT1+0x1dc>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80039b2:	4b5e      	ldr	r3, [pc, #376]	@ (8003b2c <BlockT1+0x310>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	4b5b      	ldr	r3, [pc, #364]	@ (8003b28 <BlockT1+0x30c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	1c59      	adds	r1, r3, #1
 80039be:	485c      	ldr	r0, [pc, #368]	@ (8003b30 <BlockT1+0x314>)
 80039c0:	4613      	mov	r3, r2
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	440b      	add	r3, r1
 80039ca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d112      	bne.n	80039f8 <BlockT1+0x1dc>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0
 80039d2:	4b56      	ldr	r3, [pc, #344]	@ (8003b2c <BlockT1+0x310>)
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	4b54      	ldr	r3, [pc, #336]	@ (8003b28 <BlockT1+0x30c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	1c99      	adds	r1, r3, #2
 80039dc:	4854      	ldr	r0, [pc, #336]	@ (8003b30 <BlockT1+0x314>)
 80039de:	4613      	mov	r3, r2
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	1a9b      	subs	r3, r3, r2
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	440b      	add	r3, r1
 80039e8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d103      	bne.n	80039f8 <BlockT1+0x1dc>
	)
		CanMoveLeft = true;
 80039f0:	4b53      	ldr	r3, [pc, #332]	@ (8003b40 <BlockT1+0x324>)
 80039f2:	2201      	movs	r2, #1
 80039f4:	701a      	strb	r2, [r3, #0]
 80039f6:	e002      	b.n	80039fe <BlockT1+0x1e2>
	else CanMoveLeft = false;
 80039f8:	4b51      	ldr	r3, [pc, #324]	@ (8003b40 <BlockT1+0x324>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80039fe:	4b4b      	ldr	r3, [pc, #300]	@ (8003b2c <BlockT1+0x310>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	1c9a      	adds	r2, r3, #2
 8003a04:	4b48      	ldr	r3, [pc, #288]	@ (8003b28 <BlockT1+0x30c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	1c59      	adds	r1, r3, #1
 8003a0a:	4849      	ldr	r0, [pc, #292]	@ (8003b30 <BlockT1+0x314>)
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	1a9b      	subs	r3, r3, r2
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	440b      	add	r3, r1
 8003a16:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d133      	bne.n	8003a86 <BlockT1+0x26a>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8003a1e:	4b43      	ldr	r3, [pc, #268]	@ (8003b2c <BlockT1+0x310>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	4b40      	ldr	r3, [pc, #256]	@ (8003b28 <BlockT1+0x30c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	1c59      	adds	r1, r3, #1
 8003a2a:	4841      	ldr	r0, [pc, #260]	@ (8003b30 <BlockT1+0x314>)
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	1a9b      	subs	r3, r3, r2
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	440b      	add	r3, r1
 8003a36:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d123      	bne.n	8003a86 <BlockT1+0x26a>
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 8003a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b2c <BlockT1+0x310>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	1cda      	adds	r2, r3, #3
 8003a44:	4b38      	ldr	r3, [pc, #224]	@ (8003b28 <BlockT1+0x30c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	1c59      	adds	r1, r3, #1
 8003a4a:	4839      	ldr	r0, [pc, #228]	@ (8003b30 <BlockT1+0x314>)
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	440b      	add	r3, r1
 8003a56:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d113      	bne.n	8003a86 <BlockT1+0x26a>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0
 8003a5e:	4b33      	ldr	r3, [pc, #204]	@ (8003b2c <BlockT1+0x310>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	1c9a      	adds	r2, r3, #2
 8003a64:	4b30      	ldr	r3, [pc, #192]	@ (8003b28 <BlockT1+0x30c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	1c99      	adds	r1, r3, #2
 8003a6a:	4831      	ldr	r0, [pc, #196]	@ (8003b30 <BlockT1+0x314>)
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	440b      	add	r3, r1
 8003a76:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d103      	bne.n	8003a86 <BlockT1+0x26a>
	)
		CanMoveRight = true;
 8003a7e:	4b31      	ldr	r3, [pc, #196]	@ (8003b44 <BlockT1+0x328>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	701a      	strb	r2, [r3, #0]
 8003a84:	e002      	b.n	8003a8c <BlockT1+0x270>
	else CanMoveRight = false;
 8003a86:	4b2f      	ldr	r3, [pc, #188]	@ (8003b44 <BlockT1+0x328>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8003a8c:	4b27      	ldr	r3, [pc, #156]	@ (8003b2c <BlockT1+0x310>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	4b25      	ldr	r3, [pc, #148]	@ (8003b28 <BlockT1+0x30c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	1c59      	adds	r1, r3, #1
 8003a98:	4825      	ldr	r0, [pc, #148]	@ (8003b30 <BlockT1+0x314>)
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	440b      	add	r3, r1
 8003aa4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d132      	bne.n	8003b12 <BlockT1+0x2f6>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 8003aac:	4b1f      	ldr	r3, [pc, #124]	@ (8003b2c <BlockT1+0x310>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	1c5a      	adds	r2, r3, #1
 8003ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8003b28 <BlockT1+0x30c>)
 8003ab4:	6819      	ldr	r1, [r3, #0]
 8003ab6:	481e      	ldr	r0, [pc, #120]	@ (8003b30 <BlockT1+0x314>)
 8003ab8:	4613      	mov	r3, r2
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	1a9b      	subs	r3, r3, r2
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	440b      	add	r3, r1
 8003ac2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d123      	bne.n	8003b12 <BlockT1+0x2f6>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 8003aca:	4b18      	ldr	r3, [pc, #96]	@ (8003b2c <BlockT1+0x310>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	4b15      	ldr	r3, [pc, #84]	@ (8003b28 <BlockT1+0x30c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	1c99      	adds	r1, r3, #2
 8003ad6:	4816      	ldr	r0, [pc, #88]	@ (8003b30 <BlockT1+0x314>)
 8003ad8:	4613      	mov	r3, r2
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	440b      	add	r3, r1
 8003ae2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d113      	bne.n	8003b12 <BlockT1+0x2f6>
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0)
 8003aea:	4b10      	ldr	r3, [pc, #64]	@ (8003b2c <BlockT1+0x310>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	1c9a      	adds	r2, r3, #2
 8003af0:	4b0d      	ldr	r3, [pc, #52]	@ (8003b28 <BlockT1+0x30c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	1c59      	adds	r1, r3, #1
 8003af6:	480e      	ldr	r0, [pc, #56]	@ (8003b30 <BlockT1+0x314>)
 8003af8:	4613      	mov	r3, r2
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	1a9b      	subs	r3, r3, r2
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	440b      	add	r3, r1
 8003b02:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d103      	bne.n	8003b12 <BlockT1+0x2f6>
		CanRotate = true;
 8003b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8003b48 <BlockT1+0x32c>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	701a      	strb	r2, [r3, #0]
 8003b10:	e003      	b.n	8003b1a <BlockT1+0x2fe>
	else CanRotate = false;
 8003b12:	4b0d      	ldr	r3, [pc, #52]	@ (8003b48 <BlockT1+0x32c>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 3); cout << char(248);
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 2); cout << char(248);
}
 8003b18:	bf00      	nop
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd90      	pop	{r4, r7, pc}
 8003b22:	bf00      	nop
 8003b24:	20000eac 	.word	0x20000eac
 8003b28:	20000ea8 	.word	0x20000ea8
 8003b2c:	20000ea4 	.word	0x20000ea4
 8003b30:	20000090 	.word	0x20000090
 8003b34:	2000000c 	.word	0x2000000c
 8003b38:	2000000f 	.word	0x2000000f
 8003b3c:	20000eb0 	.word	0x20000eb0
 8003b40:	2000000e 	.word	0x2000000e
 8003b44:	2000000d 	.word	0x2000000d
 8003b48:	20000010 	.word	0x20000010

08003b4c <BlockT2>:

void BlockT2(int x, int y)
{
 8003b4c:	b590      	push	{r4, r7, lr}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4610      	mov	r0, r2
 8003b62:	f001 fee3 	bl	800592c <PrintXY>
	PrintXY(x + 1, y);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	6839      	ldr	r1, [r7, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f001 fedd 	bl	800592c <PrintXY>
	PrintXY(x + 1, y + 2);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	3302      	adds	r3, #2
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	f001 fed5 	bl	800592c <PrintXY>
	PrintXY(x + 2, y + 1);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	1c9a      	adds	r2, r3, #2
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	f001 fecd 	bl	800592c <PrintXY>

	CurrentState = 14;
 8003b92:	4ba6      	ldr	r3, [pc, #664]	@ (8003e2c <BlockT2+0x2e0>)
 8003b94:	220e      	movs	r2, #14
 8003b96:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 8003b98:	4ba5      	ldr	r3, [pc, #660]	@ (8003e30 <BlockT2+0x2e4>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b12      	cmp	r3, #18
 8003b9e:	dc1f      	bgt.n	8003be0 <BlockT2+0x94>
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 8003ba0:	4ba4      	ldr	r3, [pc, #656]	@ (8003e34 <BlockT2+0x2e8>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	4ba2      	ldr	r3, [pc, #648]	@ (8003e30 <BlockT2+0x2e4>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	1cd9      	adds	r1, r3, #3
 8003bac:	48a2      	ldr	r0, [pc, #648]	@ (8003e38 <BlockT2+0x2ec>)
 8003bae:	4613      	mov	r3, r2
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	440b      	add	r3, r1
 8003bb8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10f      	bne.n	8003be0 <BlockT2+0x94>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] != 0)
 8003bc0:	4b9c      	ldr	r3, [pc, #624]	@ (8003e34 <BlockT2+0x2e8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	1c9a      	adds	r2, r3, #2
 8003bc6:	4b9a      	ldr	r3, [pc, #616]	@ (8003e30 <BlockT2+0x2e4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	1c99      	adds	r1, r3, #2
 8003bcc:	489a      	ldr	r0, [pc, #616]	@ (8003e38 <BlockT2+0x2ec>)
 8003bce:	4613      	mov	r3, r2
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	1a9b      	subs	r3, r3, r2
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	440b      	add	r3, r1
 8003bd8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d04f      	beq.n	8003c80 <BlockT2+0x134>
	{
		while (isDownKey() == 1);
 8003be0:	bf00      	nop
 8003be2:	f001 fe1d 	bl	8005820 <isDownKey>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d0fa      	beq.n	8003be2 <BlockT2+0x96>
		NewTetromino = true;
 8003bec:	4b93      	ldr	r3, [pc, #588]	@ (8003e3c <BlockT2+0x2f0>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 8003bf2:	4b93      	ldr	r3, [pc, #588]	@ (8003e40 <BlockT2+0x2f4>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 8003bf8:	4b92      	ldr	r3, [pc, #584]	@ (8003e44 <BlockT2+0x2f8>)
 8003bfa:	8818      	ldrh	r0, [r3, #0]
 8003bfc:	4b8d      	ldr	r3, [pc, #564]	@ (8003e34 <BlockT2+0x2e8>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	1c5a      	adds	r2, r3, #1
 8003c02:	4b8b      	ldr	r3, [pc, #556]	@ (8003e30 <BlockT2+0x2e4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	1c59      	adds	r1, r3, #1
 8003c08:	4604      	mov	r4, r0
 8003c0a:	488b      	ldr	r0, [pc, #556]	@ (8003e38 <BlockT2+0x2ec>)
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	1a9b      	subs	r3, r3, r2
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	440b      	add	r3, r1
 8003c16:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] = colour;
 8003c1a:	4b8a      	ldr	r3, [pc, #552]	@ (8003e44 <BlockT2+0x2f8>)
 8003c1c:	8818      	ldrh	r0, [r3, #0]
 8003c1e:	4b85      	ldr	r3, [pc, #532]	@ (8003e34 <BlockT2+0x2e8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	4b82      	ldr	r3, [pc, #520]	@ (8003e30 <BlockT2+0x2e4>)
 8003c26:	6819      	ldr	r1, [r3, #0]
 8003c28:	4604      	mov	r4, r0
 8003c2a:	4883      	ldr	r0, [pc, #524]	@ (8003e38 <BlockT2+0x2ec>)
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	1a9b      	subs	r3, r3, r2
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	440b      	add	r3, r1
 8003c36:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] = colour;
 8003c3a:	4b82      	ldr	r3, [pc, #520]	@ (8003e44 <BlockT2+0x2f8>)
 8003c3c:	8818      	ldrh	r0, [r3, #0]
 8003c3e:	4b7d      	ldr	r3, [pc, #500]	@ (8003e34 <BlockT2+0x2e8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	4b7a      	ldr	r3, [pc, #488]	@ (8003e30 <BlockT2+0x2e4>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	1c99      	adds	r1, r3, #2
 8003c4a:	4604      	mov	r4, r0
 8003c4c:	487a      	ldr	r0, [pc, #488]	@ (8003e38 <BlockT2+0x2ec>)
 8003c4e:	4613      	mov	r3, r2
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	440b      	add	r3, r1
 8003c58:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] = colour;
 8003c5c:	4b79      	ldr	r3, [pc, #484]	@ (8003e44 <BlockT2+0x2f8>)
 8003c5e:	8818      	ldrh	r0, [r3, #0]
 8003c60:	4b74      	ldr	r3, [pc, #464]	@ (8003e34 <BlockT2+0x2e8>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	1c9a      	adds	r2, r3, #2
 8003c66:	4b72      	ldr	r3, [pc, #456]	@ (8003e30 <BlockT2+0x2e4>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	1c59      	adds	r1, r3, #1
 8003c6c:	4604      	mov	r4, r0
 8003c6e:	4872      	ldr	r0, [pc, #456]	@ (8003e38 <BlockT2+0x2ec>)
 8003c70:	4613      	mov	r3, r2
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	1a9b      	subs	r3, r3, r2
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	440b      	add	r3, r1
 8003c7a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8003c7e:	e002      	b.n	8003c86 <BlockT2+0x13a>
	}
	else CanMoveDown = true;
 8003c80:	4b6f      	ldr	r3, [pc, #444]	@ (8003e40 <BlockT2+0x2f4>)
 8003c82:	2201      	movs	r2, #1
 8003c84:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8003c86:	4b6b      	ldr	r3, [pc, #428]	@ (8003e34 <BlockT2+0x2e8>)
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	4b69      	ldr	r3, [pc, #420]	@ (8003e30 <BlockT2+0x2e4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	1c59      	adds	r1, r3, #1
 8003c90:	4869      	ldr	r0, [pc, #420]	@ (8003e38 <BlockT2+0x2ec>)
 8003c92:	4613      	mov	r3, r2
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	440b      	add	r3, r1
 8003c9c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d130      	bne.n	8003d06 <BlockT2+0x1ba>
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 8003ca4:	4b63      	ldr	r3, [pc, #396]	@ (8003e34 <BlockT2+0x2e8>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4b61      	ldr	r3, [pc, #388]	@ (8003e30 <BlockT2+0x2e4>)
 8003caa:	6819      	ldr	r1, [r3, #0]
 8003cac:	4862      	ldr	r0, [pc, #392]	@ (8003e38 <BlockT2+0x2ec>)
 8003cae:	4613      	mov	r3, r2
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	1a9b      	subs	r3, r3, r2
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	440b      	add	r3, r1
 8003cb8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d122      	bne.n	8003d06 <BlockT2+0x1ba>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 8003cc0:	4b5c      	ldr	r3, [pc, #368]	@ (8003e34 <BlockT2+0x2e8>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	4b5a      	ldr	r3, [pc, #360]	@ (8003e30 <BlockT2+0x2e4>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	1c99      	adds	r1, r3, #2
 8003cca:	485b      	ldr	r0, [pc, #364]	@ (8003e38 <BlockT2+0x2ec>)
 8003ccc:	4613      	mov	r3, r2
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	1a9b      	subs	r3, r3, r2
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	440b      	add	r3, r1
 8003cd6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d113      	bne.n	8003d06 <BlockT2+0x1ba>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0
 8003cde:	4b55      	ldr	r3, [pc, #340]	@ (8003e34 <BlockT2+0x2e8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	4b52      	ldr	r3, [pc, #328]	@ (8003e30 <BlockT2+0x2e4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	1c59      	adds	r1, r3, #1
 8003cea:	4853      	ldr	r0, [pc, #332]	@ (8003e38 <BlockT2+0x2ec>)
 8003cec:	4613      	mov	r3, r2
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	1a9b      	subs	r3, r3, r2
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	440b      	add	r3, r1
 8003cf6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d103      	bne.n	8003d06 <BlockT2+0x1ba>
	)
		CanMoveLeft = true;
 8003cfe:	4b52      	ldr	r3, [pc, #328]	@ (8003e48 <BlockT2+0x2fc>)
 8003d00:	2201      	movs	r2, #1
 8003d02:	701a      	strb	r2, [r3, #0]
 8003d04:	e002      	b.n	8003d0c <BlockT2+0x1c0>
	else CanMoveLeft = false;
 8003d06:	4b50      	ldr	r3, [pc, #320]	@ (8003e48 <BlockT2+0x2fc>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8003d0c:	4b49      	ldr	r3, [pc, #292]	@ (8003e34 <BlockT2+0x2e8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	1c9a      	adds	r2, r3, #2
 8003d12:	4b47      	ldr	r3, [pc, #284]	@ (8003e30 <BlockT2+0x2e4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	1c59      	adds	r1, r3, #1
 8003d18:	4847      	ldr	r0, [pc, #284]	@ (8003e38 <BlockT2+0x2ec>)
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	440b      	add	r3, r1
 8003d24:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d132      	bne.n	8003d92 <BlockT2+0x246>
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 8003d2c:	4b41      	ldr	r3, [pc, #260]	@ (8003e34 <BlockT2+0x2e8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	1c9a      	adds	r2, r3, #2
 8003d32:	4b3f      	ldr	r3, [pc, #252]	@ (8003e30 <BlockT2+0x2e4>)
 8003d34:	6819      	ldr	r1, [r3, #0]
 8003d36:	4840      	ldr	r0, [pc, #256]	@ (8003e38 <BlockT2+0x2ec>)
 8003d38:	4613      	mov	r3, r2
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	1a9b      	subs	r3, r3, r2
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	440b      	add	r3, r1
 8003d42:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d123      	bne.n	8003d92 <BlockT2+0x246>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 8003d4a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e34 <BlockT2+0x2e8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	1c9a      	adds	r2, r3, #2
 8003d50:	4b37      	ldr	r3, [pc, #220]	@ (8003e30 <BlockT2+0x2e4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	1c99      	adds	r1, r3, #2
 8003d56:	4838      	ldr	r0, [pc, #224]	@ (8003e38 <BlockT2+0x2ec>)
 8003d58:	4613      	mov	r3, r2
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	1a9b      	subs	r3, r3, r2
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	440b      	add	r3, r1
 8003d62:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d113      	bne.n	8003d92 <BlockT2+0x246>
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0
 8003d6a:	4b32      	ldr	r3, [pc, #200]	@ (8003e34 <BlockT2+0x2e8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	1cda      	adds	r2, r3, #3
 8003d70:	4b2f      	ldr	r3, [pc, #188]	@ (8003e30 <BlockT2+0x2e4>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	1c59      	adds	r1, r3, #1
 8003d76:	4830      	ldr	r0, [pc, #192]	@ (8003e38 <BlockT2+0x2ec>)
 8003d78:	4613      	mov	r3, r2
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	1a9b      	subs	r3, r3, r2
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	440b      	add	r3, r1
 8003d82:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d103      	bne.n	8003d92 <BlockT2+0x246>
	)
		CanMoveRight = true;
 8003d8a:	4b30      	ldr	r3, [pc, #192]	@ (8003e4c <BlockT2+0x300>)
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	701a      	strb	r2, [r3, #0]
 8003d90:	e002      	b.n	8003d98 <BlockT2+0x24c>
	else CanMoveRight = false;
 8003d92:	4b2e      	ldr	r3, [pc, #184]	@ (8003e4c <BlockT2+0x300>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8003d98:	4b26      	ldr	r3, [pc, #152]	@ (8003e34 <BlockT2+0x2e8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	4b24      	ldr	r3, [pc, #144]	@ (8003e30 <BlockT2+0x2e4>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	1c59      	adds	r1, r3, #1
 8003da4:	4824      	ldr	r0, [pc, #144]	@ (8003e38 <BlockT2+0x2ec>)
 8003da6:	4613      	mov	r3, r2
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	1a9b      	subs	r3, r3, r2
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	440b      	add	r3, r1
 8003db0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d131      	bne.n	8003e1c <BlockT2+0x2d0>
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8003db8:	4b1e      	ldr	r3, [pc, #120]	@ (8003e34 <BlockT2+0x2e8>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8003e30 <BlockT2+0x2e4>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	1c59      	adds	r1, r3, #1
 8003dc2:	481d      	ldr	r0, [pc, #116]	@ (8003e38 <BlockT2+0x2ec>)
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	1a9b      	subs	r3, r3, r2
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	440b      	add	r3, r1
 8003dce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d122      	bne.n	8003e1c <BlockT2+0x2d0>
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8003dd6:	4b17      	ldr	r3, [pc, #92]	@ (8003e34 <BlockT2+0x2e8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	1c9a      	adds	r2, r3, #2
 8003ddc:	4b14      	ldr	r3, [pc, #80]	@ (8003e30 <BlockT2+0x2e4>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	1c59      	adds	r1, r3, #1
 8003de2:	4815      	ldr	r0, [pc, #84]	@ (8003e38 <BlockT2+0x2ec>)
 8003de4:	4613      	mov	r3, r2
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	1a9b      	subs	r3, r3, r2
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	440b      	add	r3, r1
 8003dee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d112      	bne.n	8003e1c <BlockT2+0x2d0>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0)
 8003df6:	4b0f      	ldr	r3, [pc, #60]	@ (8003e34 <BlockT2+0x2e8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8003e30 <BlockT2+0x2e4>)
 8003dfe:	6819      	ldr	r1, [r3, #0]
 8003e00:	480d      	ldr	r0, [pc, #52]	@ (8003e38 <BlockT2+0x2ec>)
 8003e02:	4613      	mov	r3, r2
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	1a9b      	subs	r3, r3, r2
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	440b      	add	r3, r1
 8003e0c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d103      	bne.n	8003e1c <BlockT2+0x2d0>
		CanRotate = true;
 8003e14:	4b0e      	ldr	r3, [pc, #56]	@ (8003e50 <BlockT2+0x304>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	701a      	strb	r2, [r3, #0]
 8003e1a:	e003      	b.n	8003e24 <BlockT2+0x2d8>
	else CanRotate = false;
 8003e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e50 <BlockT2+0x304>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 3); cout << char(248);
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 2); cout << char(248);
}
 8003e22:	bf00      	nop
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd90      	pop	{r4, r7, pc}
 8003e2c:	20000eac 	.word	0x20000eac
 8003e30:	20000ea8 	.word	0x20000ea8
 8003e34:	20000ea4 	.word	0x20000ea4
 8003e38:	20000090 	.word	0x20000090
 8003e3c:	2000000c 	.word	0x2000000c
 8003e40:	2000000f 	.word	0x2000000f
 8003e44:	20000eb0 	.word	0x20000eb0
 8003e48:	2000000e 	.word	0x2000000e
 8003e4c:	2000000d 	.word	0x2000000d
 8003e50:	20000010 	.word	0x20000010

08003e54 <BlockT3>:

void BlockT3(int x, int y)
{
 8003e54:	b590      	push	{r4, r7, lr}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	3301      	adds	r3, #1
 8003e66:	4619      	mov	r1, r3
 8003e68:	4610      	mov	r0, r2
 8003e6a:	f001 fd5f 	bl	800592c <PrintXY>
	PrintXY(x, y + 1);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	3301      	adds	r3, #1
 8003e72:	4619      	mov	r1, r3
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f001 fd59 	bl	800592c <PrintXY>
	PrintXY(x + 1, y);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	6839      	ldr	r1, [r7, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f001 fd53 	bl	800592c <PrintXY>
	PrintXY(x + 2, y + 1);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	1c9a      	adds	r2, r3, #2
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4610      	mov	r0, r2
 8003e92:	f001 fd4b 	bl	800592c <PrintXY>

	CurrentState = 15;
 8003e96:	4bae      	ldr	r3, [pc, #696]	@ (8004150 <BlockT3+0x2fc>)
 8003e98:	220f      	movs	r2, #15
 8003e9a:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 20 ||
 8003e9c:	4bad      	ldr	r3, [pc, #692]	@ (8004154 <BlockT3+0x300>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b13      	cmp	r3, #19
 8003ea2:	dc2e      	bgt.n	8003f02 <BlockT3+0xae>
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0 ||
 8003ea4:	4bac      	ldr	r3, [pc, #688]	@ (8004158 <BlockT3+0x304>)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	4baa      	ldr	r3, [pc, #680]	@ (8004154 <BlockT3+0x300>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	1c99      	adds	r1, r3, #2
 8003eae:	48ab      	ldr	r0, [pc, #684]	@ (800415c <BlockT3+0x308>)
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	1a9b      	subs	r3, r3, r2
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	440b      	add	r3, r1
 8003eba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 20 ||
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d11f      	bne.n	8003f02 <BlockT3+0xae>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 8003ec2:	4ba5      	ldr	r3, [pc, #660]	@ (8004158 <BlockT3+0x304>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	4ba2      	ldr	r3, [pc, #648]	@ (8004154 <BlockT3+0x300>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	1c99      	adds	r1, r3, #2
 8003ece:	48a3      	ldr	r0, [pc, #652]	@ (800415c <BlockT3+0x308>)
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	1a9b      	subs	r3, r3, r2
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	440b      	add	r3, r1
 8003eda:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0 ||
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10f      	bne.n	8003f02 <BlockT3+0xae>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] != 0)
 8003ee2:	4b9d      	ldr	r3, [pc, #628]	@ (8004158 <BlockT3+0x304>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	1c9a      	adds	r2, r3, #2
 8003ee8:	4b9a      	ldr	r3, [pc, #616]	@ (8004154 <BlockT3+0x300>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	1c99      	adds	r1, r3, #2
 8003eee:	489b      	ldr	r0, [pc, #620]	@ (800415c <BlockT3+0x308>)
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	1a9b      	subs	r3, r3, r2
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	440b      	add	r3, r1
 8003efa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d04e      	beq.n	8003fa0 <BlockT3+0x14c>
	{
		while (isDownKey() == 1);
 8003f02:	bf00      	nop
 8003f04:	f001 fc8c 	bl	8005820 <isDownKey>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d0fa      	beq.n	8003f04 <BlockT3+0xb0>
		NewTetromino = true;
 8003f0e:	4b94      	ldr	r3, [pc, #592]	@ (8004160 <BlockT3+0x30c>)
 8003f10:	2201      	movs	r2, #1
 8003f12:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 8003f14:	4b93      	ldr	r3, [pc, #588]	@ (8004164 <BlockT3+0x310>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 8003f1a:	4b93      	ldr	r3, [pc, #588]	@ (8004168 <BlockT3+0x314>)
 8003f1c:	8818      	ldrh	r0, [r3, #0]
 8003f1e:	4b8e      	ldr	r3, [pc, #568]	@ (8004158 <BlockT3+0x304>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	4b8b      	ldr	r3, [pc, #556]	@ (8004154 <BlockT3+0x300>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	1c59      	adds	r1, r3, #1
 8003f2a:	4604      	mov	r4, r0
 8003f2c:	488b      	ldr	r0, [pc, #556]	@ (800415c <BlockT3+0x308>)
 8003f2e:	4613      	mov	r3, r2
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	1a9b      	subs	r3, r3, r2
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	440b      	add	r3, r1
 8003f38:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] = colour;
 8003f3c:	4b8a      	ldr	r3, [pc, #552]	@ (8004168 <BlockT3+0x314>)
 8003f3e:	8818      	ldrh	r0, [r3, #0]
 8003f40:	4b85      	ldr	r3, [pc, #532]	@ (8004158 <BlockT3+0x304>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b83      	ldr	r3, [pc, #524]	@ (8004154 <BlockT3+0x300>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	1c59      	adds	r1, r3, #1
 8003f4a:	4604      	mov	r4, r0
 8003f4c:	4883      	ldr	r0, [pc, #524]	@ (800415c <BlockT3+0x308>)
 8003f4e:	4613      	mov	r3, r2
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	1a9b      	subs	r3, r3, r2
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	440b      	add	r3, r1
 8003f58:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] = colour;
 8003f5c:	4b82      	ldr	r3, [pc, #520]	@ (8004168 <BlockT3+0x314>)
 8003f5e:	8818      	ldrh	r0, [r3, #0]
 8003f60:	4b7d      	ldr	r3, [pc, #500]	@ (8004158 <BlockT3+0x304>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	1c9a      	adds	r2, r3, #2
 8003f66:	4b7b      	ldr	r3, [pc, #492]	@ (8004154 <BlockT3+0x300>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	1c59      	adds	r1, r3, #1
 8003f6c:	4604      	mov	r4, r0
 8003f6e:	487b      	ldr	r0, [pc, #492]	@ (800415c <BlockT3+0x308>)
 8003f70:	4613      	mov	r3, r2
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	1a9b      	subs	r3, r3, r2
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	440b      	add	r3, r1
 8003f7a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] = colour;
 8003f7e:	4b7a      	ldr	r3, [pc, #488]	@ (8004168 <BlockT3+0x314>)
 8003f80:	8818      	ldrh	r0, [r3, #0]
 8003f82:	4b75      	ldr	r3, [pc, #468]	@ (8004158 <BlockT3+0x304>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	4b72      	ldr	r3, [pc, #456]	@ (8004154 <BlockT3+0x300>)
 8003f8a:	6819      	ldr	r1, [r3, #0]
 8003f8c:	4604      	mov	r4, r0
 8003f8e:	4873      	ldr	r0, [pc, #460]	@ (800415c <BlockT3+0x308>)
 8003f90:	4613      	mov	r3, r2
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	1a9b      	subs	r3, r3, r2
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	440b      	add	r3, r1
 8003f9a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8003f9e:	e002      	b.n	8003fa6 <BlockT3+0x152>
	}
	else CanMoveDown = true;
 8003fa0:	4b70      	ldr	r3, [pc, #448]	@ (8004164 <BlockT3+0x310>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8003fa6:	4b6c      	ldr	r3, [pc, #432]	@ (8004158 <BlockT3+0x304>)
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	4b6a      	ldr	r3, [pc, #424]	@ (8004154 <BlockT3+0x300>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	1c59      	adds	r1, r3, #1
 8003fb0:	486a      	ldr	r0, [pc, #424]	@ (800415c <BlockT3+0x308>)
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	1a9b      	subs	r3, r3, r2
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	440b      	add	r3, r1
 8003fbc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d131      	bne.n	8004028 <BlockT3+0x1d4>
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 8003fc4:	4b64      	ldr	r3, [pc, #400]	@ (8004158 <BlockT3+0x304>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	1e5a      	subs	r2, r3, #1
 8003fca:	4b62      	ldr	r3, [pc, #392]	@ (8004154 <BlockT3+0x300>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	1c59      	adds	r1, r3, #1
 8003fd0:	4862      	ldr	r0, [pc, #392]	@ (800415c <BlockT3+0x308>)
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	1a9b      	subs	r3, r3, r2
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	440b      	add	r3, r1
 8003fdc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d121      	bne.n	8004028 <BlockT3+0x1d4>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8003fe4:	4b5c      	ldr	r3, [pc, #368]	@ (8004158 <BlockT3+0x304>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	4b5a      	ldr	r3, [pc, #360]	@ (8004154 <BlockT3+0x300>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	1c59      	adds	r1, r3, #1
 8003ff0:	485a      	ldr	r0, [pc, #360]	@ (800415c <BlockT3+0x308>)
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	1a9b      	subs	r3, r3, r2
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	440b      	add	r3, r1
 8003ffc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 8004000:	2b00      	cmp	r3, #0
 8004002:	d111      	bne.n	8004028 <BlockT3+0x1d4>
		tetris[tetrominoLocX][tetrominoLocY] == 0
 8004004:	4b54      	ldr	r3, [pc, #336]	@ (8004158 <BlockT3+0x304>)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	4b52      	ldr	r3, [pc, #328]	@ (8004154 <BlockT3+0x300>)
 800400a:	6819      	ldr	r1, [r3, #0]
 800400c:	4853      	ldr	r0, [pc, #332]	@ (800415c <BlockT3+0x308>)
 800400e:	4613      	mov	r3, r2
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	1a9b      	subs	r3, r3, r2
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	440b      	add	r3, r1
 8004018:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 800401c:	2b00      	cmp	r3, #0
 800401e:	d103      	bne.n	8004028 <BlockT3+0x1d4>
	)
		CanMoveLeft = true;
 8004020:	4b52      	ldr	r3, [pc, #328]	@ (800416c <BlockT3+0x318>)
 8004022:	2201      	movs	r2, #1
 8004024:	701a      	strb	r2, [r3, #0]
 8004026:	e002      	b.n	800402e <BlockT3+0x1da>
	else CanMoveLeft = false;
 8004028:	4b50      	ldr	r3, [pc, #320]	@ (800416c <BlockT3+0x318>)
 800402a:	2200      	movs	r2, #0
 800402c:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 800402e:	4b4a      	ldr	r3, [pc, #296]	@ (8004158 <BlockT3+0x304>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	1c9a      	adds	r2, r3, #2
 8004034:	4b47      	ldr	r3, [pc, #284]	@ (8004154 <BlockT3+0x300>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	1c59      	adds	r1, r3, #1
 800403a:	4848      	ldr	r0, [pc, #288]	@ (800415c <BlockT3+0x308>)
 800403c:	4613      	mov	r3, r2
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	1a9b      	subs	r3, r3, r2
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	440b      	add	r3, r1
 8004046:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d132      	bne.n	80040b4 <BlockT3+0x260>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 800404e:	4b42      	ldr	r3, [pc, #264]	@ (8004158 <BlockT3+0x304>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	4b3f      	ldr	r3, [pc, #252]	@ (8004154 <BlockT3+0x300>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	1c59      	adds	r1, r3, #1
 800405a:	4840      	ldr	r0, [pc, #256]	@ (800415c <BlockT3+0x308>)
 800405c:	4613      	mov	r3, r2
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	1a9b      	subs	r3, r3, r2
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	440b      	add	r3, r1
 8004066:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 800406a:	2b00      	cmp	r3, #0
 800406c:	d122      	bne.n	80040b4 <BlockT3+0x260>
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 800406e:	4b3a      	ldr	r3, [pc, #232]	@ (8004158 <BlockT3+0x304>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	1cda      	adds	r2, r3, #3
 8004074:	4b37      	ldr	r3, [pc, #220]	@ (8004154 <BlockT3+0x300>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	1c59      	adds	r1, r3, #1
 800407a:	4838      	ldr	r0, [pc, #224]	@ (800415c <BlockT3+0x308>)
 800407c:	4613      	mov	r3, r2
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	1a9b      	subs	r3, r3, r2
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	440b      	add	r3, r1
 8004086:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 800408a:	2b00      	cmp	r3, #0
 800408c:	d112      	bne.n	80040b4 <BlockT3+0x260>
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0
 800408e:	4b32      	ldr	r3, [pc, #200]	@ (8004158 <BlockT3+0x304>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	1c9a      	adds	r2, r3, #2
 8004094:	4b2f      	ldr	r3, [pc, #188]	@ (8004154 <BlockT3+0x300>)
 8004096:	6819      	ldr	r1, [r3, #0]
 8004098:	4830      	ldr	r0, [pc, #192]	@ (800415c <BlockT3+0x308>)
 800409a:	4613      	mov	r3, r2
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	1a9b      	subs	r3, r3, r2
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	440b      	add	r3, r1
 80040a4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 3][tetrominoLocY + 1] == 0 &&
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d103      	bne.n	80040b4 <BlockT3+0x260>
	)
		CanMoveRight = true;
 80040ac:	4b30      	ldr	r3, [pc, #192]	@ (8004170 <BlockT3+0x31c>)
 80040ae:	2201      	movs	r2, #1
 80040b0:	701a      	strb	r2, [r3, #0]
 80040b2:	e002      	b.n	80040ba <BlockT3+0x266>
	else CanMoveRight = false;
 80040b4:	4b2e      	ldr	r3, [pc, #184]	@ (8004170 <BlockT3+0x31c>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80040ba:	4b27      	ldr	r3, [pc, #156]	@ (8004158 <BlockT3+0x304>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	4b24      	ldr	r3, [pc, #144]	@ (8004154 <BlockT3+0x300>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	1c59      	adds	r1, r3, #1
 80040c6:	4825      	ldr	r0, [pc, #148]	@ (800415c <BlockT3+0x308>)
 80040c8:	4613      	mov	r3, r2
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	440b      	add	r3, r1
 80040d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d131      	bne.n	800413e <BlockT3+0x2ea>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 80040da:	4b1f      	ldr	r3, [pc, #124]	@ (8004158 <BlockT3+0x304>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	4b1c      	ldr	r3, [pc, #112]	@ (8004154 <BlockT3+0x300>)
 80040e2:	6819      	ldr	r1, [r3, #0]
 80040e4:	481d      	ldr	r0, [pc, #116]	@ (800415c <BlockT3+0x308>)
 80040e6:	4613      	mov	r3, r2
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	1a9b      	subs	r3, r3, r2
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	440b      	add	r3, r1
 80040f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d122      	bne.n	800413e <BlockT3+0x2ea>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 80040f8:	4b17      	ldr	r3, [pc, #92]	@ (8004158 <BlockT3+0x304>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	1c5a      	adds	r2, r3, #1
 80040fe:	4b15      	ldr	r3, [pc, #84]	@ (8004154 <BlockT3+0x300>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	1c99      	adds	r1, r3, #2
 8004104:	4815      	ldr	r0, [pc, #84]	@ (800415c <BlockT3+0x308>)
 8004106:	4613      	mov	r3, r2
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	440b      	add	r3, r1
 8004110:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 8004114:	2b00      	cmp	r3, #0
 8004116:	d112      	bne.n	800413e <BlockT3+0x2ea>
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0)
 8004118:	4b0f      	ldr	r3, [pc, #60]	@ (8004158 <BlockT3+0x304>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4b0d      	ldr	r3, [pc, #52]	@ (8004154 <BlockT3+0x300>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	1c59      	adds	r1, r3, #1
 8004122:	480e      	ldr	r0, [pc, #56]	@ (800415c <BlockT3+0x308>)
 8004124:	4613      	mov	r3, r2
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	1a9b      	subs	r3, r3, r2
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	440b      	add	r3, r1
 800412e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 8004132:	2b00      	cmp	r3, #0
 8004134:	d103      	bne.n	800413e <BlockT3+0x2ea>
		CanRotate = true;
 8004136:	4b0f      	ldr	r3, [pc, #60]	@ (8004174 <BlockT3+0x320>)
 8004138:	2201      	movs	r2, #1
 800413a:	701a      	strb	r2, [r3, #0]
 800413c:	e003      	b.n	8004146 <BlockT3+0x2f2>
	else CanRotate = false;
 800413e:	4b0d      	ldr	r3, [pc, #52]	@ (8004174 <BlockT3+0x320>)
 8004140:	2200      	movs	r2, #0
 8004142:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 2); cout << char(248);
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	bd90      	pop	{r4, r7, pc}
 800414e:	bf00      	nop
 8004150:	20000eac 	.word	0x20000eac
 8004154:	20000ea8 	.word	0x20000ea8
 8004158:	20000ea4 	.word	0x20000ea4
 800415c:	20000090 	.word	0x20000090
 8004160:	2000000c 	.word	0x2000000c
 8004164:	2000000f 	.word	0x2000000f
 8004168:	20000eb0 	.word	0x20000eb0
 800416c:	2000000e 	.word	0x2000000e
 8004170:	2000000d 	.word	0x2000000d
 8004174:	20000010 	.word	0x20000010

08004178 <BlockT4>:

void BlockT4(int x, int y)
{
 8004178:	b590      	push	{r4, r7, lr}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	3301      	adds	r3, #1
 800418a:	4619      	mov	r1, r3
 800418c:	4610      	mov	r0, r2
 800418e:	f001 fbcd 	bl	800592c <PrintXY>
	PrintXY(x + 1, y);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3301      	adds	r3, #1
 8004196:	6839      	ldr	r1, [r7, #0]
 8004198:	4618      	mov	r0, r3
 800419a:	f001 fbc7 	bl	800592c <PrintXY>
	PrintXY(x + 1, y + 2);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	3302      	adds	r3, #2
 80041a6:	4619      	mov	r1, r3
 80041a8:	4610      	mov	r0, r2
 80041aa:	f001 fbbf 	bl	800592c <PrintXY>
	PrintXY(x, y + 1);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	3301      	adds	r3, #1
 80041b2:	4619      	mov	r1, r3
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f001 fbb9 	bl	800592c <PrintXY>

	CurrentState = 16;
 80041ba:	4ba6      	ldr	r3, [pc, #664]	@ (8004454 <BlockT4+0x2dc>)
 80041bc:	2210      	movs	r2, #16
 80041be:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 80041c0:	4ba5      	ldr	r3, [pc, #660]	@ (8004458 <BlockT4+0x2e0>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b12      	cmp	r3, #18
 80041c6:	dc1e      	bgt.n	8004206 <BlockT4+0x8e>
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 80041c8:	4ba4      	ldr	r3, [pc, #656]	@ (800445c <BlockT4+0x2e4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	4ba2      	ldr	r3, [pc, #648]	@ (8004458 <BlockT4+0x2e0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	1cd9      	adds	r1, r3, #3
 80041d4:	48a2      	ldr	r0, [pc, #648]	@ (8004460 <BlockT4+0x2e8>)
 80041d6:	4613      	mov	r3, r2
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	1a9b      	subs	r3, r3, r2
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	440b      	add	r3, r1
 80041e0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10e      	bne.n	8004206 <BlockT4+0x8e>
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0)
 80041e8:	4b9c      	ldr	r3, [pc, #624]	@ (800445c <BlockT4+0x2e4>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	4b9a      	ldr	r3, [pc, #616]	@ (8004458 <BlockT4+0x2e0>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	1c99      	adds	r1, r3, #2
 80041f2:	489b      	ldr	r0, [pc, #620]	@ (8004460 <BlockT4+0x2e8>)
 80041f4:	4613      	mov	r3, r2
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	1a9b      	subs	r3, r3, r2
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	440b      	add	r3, r1
 80041fe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 8004202:	2b00      	cmp	r3, #0
 8004204:	d04e      	beq.n	80042a4 <BlockT4+0x12c>
	{
		while (isDownKey() == 1);
 8004206:	bf00      	nop
 8004208:	f001 fb0a 	bl	8005820 <isDownKey>
 800420c:	4603      	mov	r3, r0
 800420e:	2b01      	cmp	r3, #1
 8004210:	d0fa      	beq.n	8004208 <BlockT4+0x90>
		NewTetromino = true;
 8004212:	4b94      	ldr	r3, [pc, #592]	@ (8004464 <BlockT4+0x2ec>)
 8004214:	2201      	movs	r2, #1
 8004216:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 8004218:	4b93      	ldr	r3, [pc, #588]	@ (8004468 <BlockT4+0x2f0>)
 800421a:	2200      	movs	r2, #0
 800421c:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 800421e:	4b93      	ldr	r3, [pc, #588]	@ (800446c <BlockT4+0x2f4>)
 8004220:	8818      	ldrh	r0, [r3, #0]
 8004222:	4b8e      	ldr	r3, [pc, #568]	@ (800445c <BlockT4+0x2e4>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	4b8b      	ldr	r3, [pc, #556]	@ (8004458 <BlockT4+0x2e0>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	1c59      	adds	r1, r3, #1
 800422e:	4604      	mov	r4, r0
 8004230:	488b      	ldr	r0, [pc, #556]	@ (8004460 <BlockT4+0x2e8>)
 8004232:	4613      	mov	r3, r2
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	1a9b      	subs	r3, r3, r2
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	440b      	add	r3, r1
 800423c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] = colour;
 8004240:	4b8a      	ldr	r3, [pc, #552]	@ (800446c <BlockT4+0x2f4>)
 8004242:	8818      	ldrh	r0, [r3, #0]
 8004244:	4b85      	ldr	r3, [pc, #532]	@ (800445c <BlockT4+0x2e4>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	4b83      	ldr	r3, [pc, #524]	@ (8004458 <BlockT4+0x2e0>)
 800424c:	6819      	ldr	r1, [r3, #0]
 800424e:	4604      	mov	r4, r0
 8004250:	4883      	ldr	r0, [pc, #524]	@ (8004460 <BlockT4+0x2e8>)
 8004252:	4613      	mov	r3, r2
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	440b      	add	r3, r1
 800425c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] = colour;
 8004260:	4b82      	ldr	r3, [pc, #520]	@ (800446c <BlockT4+0x2f4>)
 8004262:	8818      	ldrh	r0, [r3, #0]
 8004264:	4b7d      	ldr	r3, [pc, #500]	@ (800445c <BlockT4+0x2e4>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	4b7b      	ldr	r3, [pc, #492]	@ (8004458 <BlockT4+0x2e0>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	1c99      	adds	r1, r3, #2
 8004270:	4604      	mov	r4, r0
 8004272:	487b      	ldr	r0, [pc, #492]	@ (8004460 <BlockT4+0x2e8>)
 8004274:	4613      	mov	r3, r2
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	440b      	add	r3, r1
 800427e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] = colour;
 8004282:	4b7a      	ldr	r3, [pc, #488]	@ (800446c <BlockT4+0x2f4>)
 8004284:	8818      	ldrh	r0, [r3, #0]
 8004286:	4b75      	ldr	r3, [pc, #468]	@ (800445c <BlockT4+0x2e4>)
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	4b73      	ldr	r3, [pc, #460]	@ (8004458 <BlockT4+0x2e0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	1c59      	adds	r1, r3, #1
 8004290:	4604      	mov	r4, r0
 8004292:	4873      	ldr	r0, [pc, #460]	@ (8004460 <BlockT4+0x2e8>)
 8004294:	4613      	mov	r3, r2
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	1a9b      	subs	r3, r3, r2
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	440b      	add	r3, r1
 800429e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 80042a2:	e002      	b.n	80042aa <BlockT4+0x132>
	}
	else CanMoveDown = true;
 80042a4:	4b70      	ldr	r3, [pc, #448]	@ (8004468 <BlockT4+0x2f0>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 80042aa:	4b6c      	ldr	r3, [pc, #432]	@ (800445c <BlockT4+0x2e4>)
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	4b6a      	ldr	r3, [pc, #424]	@ (8004458 <BlockT4+0x2e0>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	1c59      	adds	r1, r3, #1
 80042b4:	486a      	ldr	r0, [pc, #424]	@ (8004460 <BlockT4+0x2e8>)
 80042b6:	4613      	mov	r3, r2
 80042b8:	011b      	lsls	r3, r3, #4
 80042ba:	1a9b      	subs	r3, r3, r2
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	440b      	add	r3, r1
 80042c0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d130      	bne.n	800432a <BlockT4+0x1b2>
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 80042c8:	4b64      	ldr	r3, [pc, #400]	@ (800445c <BlockT4+0x2e4>)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	4b62      	ldr	r3, [pc, #392]	@ (8004458 <BlockT4+0x2e0>)
 80042ce:	6819      	ldr	r1, [r3, #0]
 80042d0:	4863      	ldr	r0, [pc, #396]	@ (8004460 <BlockT4+0x2e8>)
 80042d2:	4613      	mov	r3, r2
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	1a9b      	subs	r3, r3, r2
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	440b      	add	r3, r1
 80042dc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d122      	bne.n	800432a <BlockT4+0x1b2>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 80042e4:	4b5d      	ldr	r3, [pc, #372]	@ (800445c <BlockT4+0x2e4>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	4b5b      	ldr	r3, [pc, #364]	@ (8004458 <BlockT4+0x2e0>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	1c99      	adds	r1, r3, #2
 80042ee:	485c      	ldr	r0, [pc, #368]	@ (8004460 <BlockT4+0x2e8>)
 80042f0:	4613      	mov	r3, r2
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	440b      	add	r3, r1
 80042fa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d113      	bne.n	800432a <BlockT4+0x1b2>
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0
 8004302:	4b56      	ldr	r3, [pc, #344]	@ (800445c <BlockT4+0x2e4>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	1e5a      	subs	r2, r3, #1
 8004308:	4b53      	ldr	r3, [pc, #332]	@ (8004458 <BlockT4+0x2e0>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	1c59      	adds	r1, r3, #1
 800430e:	4854      	ldr	r0, [pc, #336]	@ (8004460 <BlockT4+0x2e8>)
 8004310:	4613      	mov	r3, r2
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	440b      	add	r3, r1
 800431a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 800431e:	2b00      	cmp	r3, #0
 8004320:	d103      	bne.n	800432a <BlockT4+0x1b2>
	)
		CanMoveLeft = true;
 8004322:	4b53      	ldr	r3, [pc, #332]	@ (8004470 <BlockT4+0x2f8>)
 8004324:	2201      	movs	r2, #1
 8004326:	701a      	strb	r2, [r3, #0]
 8004328:	e002      	b.n	8004330 <BlockT4+0x1b8>
	else CanMoveLeft = false;
 800432a:	4b51      	ldr	r3, [pc, #324]	@ (8004470 <BlockT4+0x2f8>)
 800432c:	2200      	movs	r2, #0
 800432e:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8004330:	4b4a      	ldr	r3, [pc, #296]	@ (800445c <BlockT4+0x2e4>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	1c9a      	adds	r2, r3, #2
 8004336:	4b48      	ldr	r3, [pc, #288]	@ (8004458 <BlockT4+0x2e0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	1c59      	adds	r1, r3, #1
 800433c:	4848      	ldr	r0, [pc, #288]	@ (8004460 <BlockT4+0x2e8>)
 800433e:	4613      	mov	r3, r2
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	1a9b      	subs	r3, r3, r2
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	440b      	add	r3, r1
 8004348:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d132      	bne.n	80043b6 <BlockT4+0x23e>
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 8004350:	4b42      	ldr	r3, [pc, #264]	@ (800445c <BlockT4+0x2e4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	1c9a      	adds	r2, r3, #2
 8004356:	4b40      	ldr	r3, [pc, #256]	@ (8004458 <BlockT4+0x2e0>)
 8004358:	6819      	ldr	r1, [r3, #0]
 800435a:	4841      	ldr	r0, [pc, #260]	@ (8004460 <BlockT4+0x2e8>)
 800435c:	4613      	mov	r3, r2
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	1a9b      	subs	r3, r3, r2
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	440b      	add	r3, r1
 8004366:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 800436a:	2b00      	cmp	r3, #0
 800436c:	d123      	bne.n	80043b6 <BlockT4+0x23e>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 800436e:	4b3b      	ldr	r3, [pc, #236]	@ (800445c <BlockT4+0x2e4>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	1c9a      	adds	r2, r3, #2
 8004374:	4b38      	ldr	r3, [pc, #224]	@ (8004458 <BlockT4+0x2e0>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	1c99      	adds	r1, r3, #2
 800437a:	4839      	ldr	r0, [pc, #228]	@ (8004460 <BlockT4+0x2e8>)
 800437c:	4613      	mov	r3, r2
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	1a9b      	subs	r3, r3, r2
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	440b      	add	r3, r1
 8004386:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 800438a:	2b00      	cmp	r3, #0
 800438c:	d113      	bne.n	80043b6 <BlockT4+0x23e>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0
 800438e:	4b33      	ldr	r3, [pc, #204]	@ (800445c <BlockT4+0x2e4>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	4b30      	ldr	r3, [pc, #192]	@ (8004458 <BlockT4+0x2e0>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	1c59      	adds	r1, r3, #1
 800439a:	4831      	ldr	r0, [pc, #196]	@ (8004460 <BlockT4+0x2e8>)
 800439c:	4613      	mov	r3, r2
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	1a9b      	subs	r3, r3, r2
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	440b      	add	r3, r1
 80043a6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d103      	bne.n	80043b6 <BlockT4+0x23e>
	)
		CanMoveRight = true;
 80043ae:	4b31      	ldr	r3, [pc, #196]	@ (8004474 <BlockT4+0x2fc>)
 80043b0:	2201      	movs	r2, #1
 80043b2:	701a      	strb	r2, [r3, #0]
 80043b4:	e002      	b.n	80043bc <BlockT4+0x244>
	else CanMoveRight = false;
 80043b6:	4b2f      	ldr	r3, [pc, #188]	@ (8004474 <BlockT4+0x2fc>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80043bc:	4b27      	ldr	r3, [pc, #156]	@ (800445c <BlockT4+0x2e4>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	4b25      	ldr	r3, [pc, #148]	@ (8004458 <BlockT4+0x2e0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	1c59      	adds	r1, r3, #1
 80043c8:	4825      	ldr	r0, [pc, #148]	@ (8004460 <BlockT4+0x2e8>)
 80043ca:	4613      	mov	r3, r2
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	1a9b      	subs	r3, r3, r2
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	440b      	add	r3, r1
 80043d4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d132      	bne.n	8004442 <BlockT4+0x2ca>
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 80043dc:	4b1f      	ldr	r3, [pc, #124]	@ (800445c <BlockT4+0x2e4>)
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004458 <BlockT4+0x2e0>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	1c59      	adds	r1, r3, #1
 80043e6:	481e      	ldr	r0, [pc, #120]	@ (8004460 <BlockT4+0x2e8>)
 80043e8:	4613      	mov	r3, r2
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	1a9b      	subs	r3, r3, r2
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	440b      	add	r3, r1
 80043f2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d123      	bne.n	8004442 <BlockT4+0x2ca>
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 80043fa:	4b18      	ldr	r3, [pc, #96]	@ (800445c <BlockT4+0x2e4>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	1c9a      	adds	r2, r3, #2
 8004400:	4b15      	ldr	r3, [pc, #84]	@ (8004458 <BlockT4+0x2e0>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	1c59      	adds	r1, r3, #1
 8004406:	4816      	ldr	r0, [pc, #88]	@ (8004460 <BlockT4+0x2e8>)
 8004408:	4613      	mov	r3, r2
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	1a9b      	subs	r3, r3, r2
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	440b      	add	r3, r1
 8004412:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8004416:	2b00      	cmp	r3, #0
 8004418:	d113      	bne.n	8004442 <BlockT4+0x2ca>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0)
 800441a:	4b10      	ldr	r3, [pc, #64]	@ (800445c <BlockT4+0x2e4>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	4b0d      	ldr	r3, [pc, #52]	@ (8004458 <BlockT4+0x2e0>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	1c99      	adds	r1, r3, #2
 8004426:	480e      	ldr	r0, [pc, #56]	@ (8004460 <BlockT4+0x2e8>)
 8004428:	4613      	mov	r3, r2
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	1a9b      	subs	r3, r3, r2
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	440b      	add	r3, r1
 8004432:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8004436:	2b00      	cmp	r3, #0
 8004438:	d103      	bne.n	8004442 <BlockT4+0x2ca>
		CanRotate = true;
 800443a:	4b0f      	ldr	r3, [pc, #60]	@ (8004478 <BlockT4+0x300>)
 800443c:	2201      	movs	r2, #1
 800443e:	701a      	strb	r2, [r3, #0]
 8004440:	e003      	b.n	800444a <BlockT4+0x2d2>
	else CanRotate = false;
 8004442:	4b0d      	ldr	r3, [pc, #52]	@ (8004478 <BlockT4+0x300>)
 8004444:	2200      	movs	r2, #0
 8004446:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 3); cout << char(248);
	//PrintXY(tetrominoLocX, tetrominoLocY + 2); cout << char(248);
}
 8004448:	bf00      	nop
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	bd90      	pop	{r4, r7, pc}
 8004452:	bf00      	nop
 8004454:	20000eac 	.word	0x20000eac
 8004458:	20000ea8 	.word	0x20000ea8
 800445c:	20000ea4 	.word	0x20000ea4
 8004460:	20000090 	.word	0x20000090
 8004464:	2000000c 	.word	0x2000000c
 8004468:	2000000f 	.word	0x2000000f
 800446c:	20000eb0 	.word	0x20000eb0
 8004470:	2000000e 	.word	0x2000000e
 8004474:	2000000d 	.word	0x2000000d
 8004478:	20000010 	.word	0x20000010

0800447c <BlockZ1>:

void BlockZ1(int x, int y)
{
 800447c:	b590      	push	{r4, r7, lr}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	3301      	adds	r3, #1
 800448e:	4619      	mov	r1, r3
 8004490:	4610      	mov	r0, r2
 8004492:	f001 fa4b 	bl	800592c <PrintXY>
	PrintXY(x, y + 1);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	3301      	adds	r3, #1
 800449a:	4619      	mov	r1, r3
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f001 fa45 	bl	800592c <PrintXY>
	PrintXY(x + 1, y + 2);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	3302      	adds	r3, #2
 80044aa:	4619      	mov	r1, r3
 80044ac:	4610      	mov	r0, r2
 80044ae:	f001 fa3d 	bl	800592c <PrintXY>
	PrintXY(x + 2, y + 2);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	1c9a      	adds	r2, r3, #2
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	3302      	adds	r3, #2
 80044ba:	4619      	mov	r1, r3
 80044bc:	4610      	mov	r0, r2
 80044be:	f001 fa35 	bl	800592c <PrintXY>

	CurrentState = 17;
 80044c2:	4baf      	ldr	r3, [pc, #700]	@ (8004780 <BlockZ1+0x304>)
 80044c4:	2211      	movs	r2, #17
 80044c6:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 80044c8:	4bae      	ldr	r3, [pc, #696]	@ (8004784 <BlockZ1+0x308>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b12      	cmp	r3, #18
 80044ce:	dc2e      	bgt.n	800452e <BlockZ1+0xb2>
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0 ||
 80044d0:	4bad      	ldr	r3, [pc, #692]	@ (8004788 <BlockZ1+0x30c>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	4bab      	ldr	r3, [pc, #684]	@ (8004784 <BlockZ1+0x308>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	1c99      	adds	r1, r3, #2
 80044da:	48ac      	ldr	r0, [pc, #688]	@ (800478c <BlockZ1+0x310>)
 80044dc:	4613      	mov	r3, r2
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	1a9b      	subs	r3, r3, r2
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	440b      	add	r3, r1
 80044e6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d11f      	bne.n	800452e <BlockZ1+0xb2>
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 80044ee:	4ba6      	ldr	r3, [pc, #664]	@ (8004788 <BlockZ1+0x30c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	4ba3      	ldr	r3, [pc, #652]	@ (8004784 <BlockZ1+0x308>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	1cd9      	adds	r1, r3, #3
 80044fa:	48a4      	ldr	r0, [pc, #656]	@ (800478c <BlockZ1+0x310>)
 80044fc:	4613      	mov	r3, r2
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	1a9b      	subs	r3, r3, r2
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	440b      	add	r3, r1
 8004506:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] != 0 ||
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10f      	bne.n	800452e <BlockZ1+0xb2>
		tetris[tetrominoLocX + 2][tetrominoLocY + 3] != 0)
 800450e:	4b9e      	ldr	r3, [pc, #632]	@ (8004788 <BlockZ1+0x30c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	1c9a      	adds	r2, r3, #2
 8004514:	4b9b      	ldr	r3, [pc, #620]	@ (8004784 <BlockZ1+0x308>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	1cd9      	adds	r1, r3, #3
 800451a:	489c      	ldr	r0, [pc, #624]	@ (800478c <BlockZ1+0x310>)
 800451c:	4613      	mov	r3, r2
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	1a9b      	subs	r3, r3, r2
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	440b      	add	r3, r1
 8004526:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 3] != 0 ||
 800452a:	2b00      	cmp	r3, #0
 800452c:	d04f      	beq.n	80045ce <BlockZ1+0x152>
	{
		while (isDownKey() == 1);
 800452e:	bf00      	nop
 8004530:	f001 f976 	bl	8005820 <isDownKey>
 8004534:	4603      	mov	r3, r0
 8004536:	2b01      	cmp	r3, #1
 8004538:	d0fa      	beq.n	8004530 <BlockZ1+0xb4>
		NewTetromino = true;
 800453a:	4b95      	ldr	r3, [pc, #596]	@ (8004790 <BlockZ1+0x314>)
 800453c:	2201      	movs	r2, #1
 800453e:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 8004540:	4b94      	ldr	r3, [pc, #592]	@ (8004794 <BlockZ1+0x318>)
 8004542:	2200      	movs	r2, #0
 8004544:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 8004546:	4b94      	ldr	r3, [pc, #592]	@ (8004798 <BlockZ1+0x31c>)
 8004548:	8818      	ldrh	r0, [r3, #0]
 800454a:	4b8f      	ldr	r3, [pc, #572]	@ (8004788 <BlockZ1+0x30c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	4b8c      	ldr	r3, [pc, #560]	@ (8004784 <BlockZ1+0x308>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	1c59      	adds	r1, r3, #1
 8004556:	4604      	mov	r4, r0
 8004558:	488c      	ldr	r0, [pc, #560]	@ (800478c <BlockZ1+0x310>)
 800455a:	4613      	mov	r3, r2
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	1a9b      	subs	r3, r3, r2
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	440b      	add	r3, r1
 8004564:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] = colour;
 8004568:	4b8b      	ldr	r3, [pc, #556]	@ (8004798 <BlockZ1+0x31c>)
 800456a:	8818      	ldrh	r0, [r3, #0]
 800456c:	4b86      	ldr	r3, [pc, #536]	@ (8004788 <BlockZ1+0x30c>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	4b84      	ldr	r3, [pc, #528]	@ (8004784 <BlockZ1+0x308>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	1c59      	adds	r1, r3, #1
 8004576:	4604      	mov	r4, r0
 8004578:	4884      	ldr	r0, [pc, #528]	@ (800478c <BlockZ1+0x310>)
 800457a:	4613      	mov	r3, r2
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	1a9b      	subs	r3, r3, r2
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	440b      	add	r3, r1
 8004584:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] = colour;
 8004588:	4b83      	ldr	r3, [pc, #524]	@ (8004798 <BlockZ1+0x31c>)
 800458a:	8818      	ldrh	r0, [r3, #0]
 800458c:	4b7e      	ldr	r3, [pc, #504]	@ (8004788 <BlockZ1+0x30c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	4b7c      	ldr	r3, [pc, #496]	@ (8004784 <BlockZ1+0x308>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	1c99      	adds	r1, r3, #2
 8004598:	4604      	mov	r4, r0
 800459a:	487c      	ldr	r0, [pc, #496]	@ (800478c <BlockZ1+0x310>)
 800459c:	4613      	mov	r3, r2
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	1a9b      	subs	r3, r3, r2
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	440b      	add	r3, r1
 80045a6:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] = colour;
 80045aa:	4b7b      	ldr	r3, [pc, #492]	@ (8004798 <BlockZ1+0x31c>)
 80045ac:	8818      	ldrh	r0, [r3, #0]
 80045ae:	4b76      	ldr	r3, [pc, #472]	@ (8004788 <BlockZ1+0x30c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	1c9a      	adds	r2, r3, #2
 80045b4:	4b73      	ldr	r3, [pc, #460]	@ (8004784 <BlockZ1+0x308>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	1c99      	adds	r1, r3, #2
 80045ba:	4604      	mov	r4, r0
 80045bc:	4873      	ldr	r0, [pc, #460]	@ (800478c <BlockZ1+0x310>)
 80045be:	4613      	mov	r3, r2
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	1a9b      	subs	r3, r3, r2
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	440b      	add	r3, r1
 80045c8:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 80045cc:	e002      	b.n	80045d4 <BlockZ1+0x158>
	}
	else CanMoveDown = true;
 80045ce:	4b71      	ldr	r3, [pc, #452]	@ (8004794 <BlockZ1+0x318>)
 80045d0:	2201      	movs	r2, #1
 80045d2:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 80045d4:	4b6c      	ldr	r3, [pc, #432]	@ (8004788 <BlockZ1+0x30c>)
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	4b6a      	ldr	r3, [pc, #424]	@ (8004784 <BlockZ1+0x308>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	1c59      	adds	r1, r3, #1
 80045de:	486b      	ldr	r0, [pc, #428]	@ (800478c <BlockZ1+0x310>)
 80045e0:	4613      	mov	r3, r2
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	1a9b      	subs	r3, r3, r2
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	440b      	add	r3, r1
 80045ea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d132      	bne.n	8004658 <BlockZ1+0x1dc>
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 80045f2:	4b65      	ldr	r3, [pc, #404]	@ (8004788 <BlockZ1+0x30c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	1e5a      	subs	r2, r3, #1
 80045f8:	4b62      	ldr	r3, [pc, #392]	@ (8004784 <BlockZ1+0x308>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	1c59      	adds	r1, r3, #1
 80045fe:	4863      	ldr	r0, [pc, #396]	@ (800478c <BlockZ1+0x310>)
 8004600:	4613      	mov	r3, r2
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	1a9b      	subs	r3, r3, r2
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	440b      	add	r3, r1
 800460a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 800460e:	2b00      	cmp	r3, #0
 8004610:	d122      	bne.n	8004658 <BlockZ1+0x1dc>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 8004612:	4b5d      	ldr	r3, [pc, #372]	@ (8004788 <BlockZ1+0x30c>)
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	4b5b      	ldr	r3, [pc, #364]	@ (8004784 <BlockZ1+0x308>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	1c99      	adds	r1, r3, #2
 800461c:	485b      	ldr	r0, [pc, #364]	@ (800478c <BlockZ1+0x310>)
 800461e:	4613      	mov	r3, r2
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	1a9b      	subs	r3, r3, r2
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	440b      	add	r3, r1
 8004628:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 800462c:	2b00      	cmp	r3, #0
 800462e:	d113      	bne.n	8004658 <BlockZ1+0x1dc>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0
 8004630:	4b55      	ldr	r3, [pc, #340]	@ (8004788 <BlockZ1+0x30c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	4b53      	ldr	r3, [pc, #332]	@ (8004784 <BlockZ1+0x308>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	1c99      	adds	r1, r3, #2
 800463c:	4853      	ldr	r0, [pc, #332]	@ (800478c <BlockZ1+0x310>)
 800463e:	4613      	mov	r3, r2
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	1a9b      	subs	r3, r3, r2
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	440b      	add	r3, r1
 8004648:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0 &&
 800464c:	2b00      	cmp	r3, #0
 800464e:	d103      	bne.n	8004658 <BlockZ1+0x1dc>
	)
		CanMoveLeft = true;
 8004650:	4b52      	ldr	r3, [pc, #328]	@ (800479c <BlockZ1+0x320>)
 8004652:	2201      	movs	r2, #1
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	e002      	b.n	800465e <BlockZ1+0x1e2>
	else CanMoveLeft = false;
 8004658:	4b50      	ldr	r3, [pc, #320]	@ (800479c <BlockZ1+0x320>)
 800465a:	2200      	movs	r2, #0
 800465c:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 800465e:	4b4a      	ldr	r3, [pc, #296]	@ (8004788 <BlockZ1+0x30c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	1c9a      	adds	r2, r3, #2
 8004664:	4b47      	ldr	r3, [pc, #284]	@ (8004784 <BlockZ1+0x308>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	1c59      	adds	r1, r3, #1
 800466a:	4848      	ldr	r0, [pc, #288]	@ (800478c <BlockZ1+0x310>)
 800466c:	4613      	mov	r3, r2
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	1a9b      	subs	r3, r3, r2
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	440b      	add	r3, r1
 8004676:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d133      	bne.n	80046e6 <BlockZ1+0x26a>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 800467e:	4b42      	ldr	r3, [pc, #264]	@ (8004788 <BlockZ1+0x30c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	4b3f      	ldr	r3, [pc, #252]	@ (8004784 <BlockZ1+0x308>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	1c59      	adds	r1, r3, #1
 800468a:	4840      	ldr	r0, [pc, #256]	@ (800478c <BlockZ1+0x310>)
 800468c:	4613      	mov	r3, r2
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	1a9b      	subs	r3, r3, r2
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	440b      	add	r3, r1
 8004696:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 800469a:	2b00      	cmp	r3, #0
 800469c:	d123      	bne.n	80046e6 <BlockZ1+0x26a>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 800469e:	4b3a      	ldr	r3, [pc, #232]	@ (8004788 <BlockZ1+0x30c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	1c9a      	adds	r2, r3, #2
 80046a4:	4b37      	ldr	r3, [pc, #220]	@ (8004784 <BlockZ1+0x308>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	1c99      	adds	r1, r3, #2
 80046aa:	4838      	ldr	r0, [pc, #224]	@ (800478c <BlockZ1+0x310>)
 80046ac:	4613      	mov	r3, r2
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	1a9b      	subs	r3, r3, r2
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	440b      	add	r3, r1
 80046b6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d113      	bne.n	80046e6 <BlockZ1+0x26a>
		tetris[tetrominoLocX + 3][tetrominoLocY + 2] == 0
 80046be:	4b32      	ldr	r3, [pc, #200]	@ (8004788 <BlockZ1+0x30c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	1cda      	adds	r2, r3, #3
 80046c4:	4b2f      	ldr	r3, [pc, #188]	@ (8004784 <BlockZ1+0x308>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	1c99      	adds	r1, r3, #2
 80046ca:	4830      	ldr	r0, [pc, #192]	@ (800478c <BlockZ1+0x310>)
 80046cc:	4613      	mov	r3, r2
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	1a9b      	subs	r3, r3, r2
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	440b      	add	r3, r1
 80046d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0 &&
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d103      	bne.n	80046e6 <BlockZ1+0x26a>
	)
		CanMoveRight = true;
 80046de:	4b30      	ldr	r3, [pc, #192]	@ (80047a0 <BlockZ1+0x324>)
 80046e0:	2201      	movs	r2, #1
 80046e2:	701a      	strb	r2, [r3, #0]
 80046e4:	e002      	b.n	80046ec <BlockZ1+0x270>
	else CanMoveRight = false;
 80046e6:	4b2e      	ldr	r3, [pc, #184]	@ (80047a0 <BlockZ1+0x324>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80046ec:	4b26      	ldr	r3, [pc, #152]	@ (8004788 <BlockZ1+0x30c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	4b24      	ldr	r3, [pc, #144]	@ (8004784 <BlockZ1+0x308>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	1c59      	adds	r1, r3, #1
 80046f8:	4824      	ldr	r0, [pc, #144]	@ (800478c <BlockZ1+0x310>)
 80046fa:	4613      	mov	r3, r2
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	1a9b      	subs	r3, r3, r2
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	440b      	add	r3, r1
 8004704:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d130      	bne.n	800476e <BlockZ1+0x2f2>
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 800470c:	4b1e      	ldr	r3, [pc, #120]	@ (8004788 <BlockZ1+0x30c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	4b1c      	ldr	r3, [pc, #112]	@ (8004784 <BlockZ1+0x308>)
 8004714:	6819      	ldr	r1, [r3, #0]
 8004716:	481d      	ldr	r0, [pc, #116]	@ (800478c <BlockZ1+0x310>)
 8004718:	4613      	mov	r3, r2
 800471a:	011b      	lsls	r3, r3, #4
 800471c:	1a9b      	subs	r3, r3, r2
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	440b      	add	r3, r1
 8004722:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8004726:	2b00      	cmp	r3, #0
 8004728:	d121      	bne.n	800476e <BlockZ1+0x2f2>
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 800472a:	4b17      	ldr	r3, [pc, #92]	@ (8004788 <BlockZ1+0x30c>)
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	4b15      	ldr	r3, [pc, #84]	@ (8004784 <BlockZ1+0x308>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	1c59      	adds	r1, r3, #1
 8004734:	4815      	ldr	r0, [pc, #84]	@ (800478c <BlockZ1+0x310>)
 8004736:	4613      	mov	r3, r2
 8004738:	011b      	lsls	r3, r3, #4
 800473a:	1a9b      	subs	r3, r3, r2
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	440b      	add	r3, r1
 8004740:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] == 0 &&
 8004744:	2b00      	cmp	r3, #0
 8004746:	d112      	bne.n	800476e <BlockZ1+0x2f2>
		tetris[tetrominoLocX][tetrominoLocY + 2] == 0)
 8004748:	4b0f      	ldr	r3, [pc, #60]	@ (8004788 <BlockZ1+0x30c>)
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	4b0d      	ldr	r3, [pc, #52]	@ (8004784 <BlockZ1+0x308>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	1c99      	adds	r1, r3, #2
 8004752:	480e      	ldr	r0, [pc, #56]	@ (800478c <BlockZ1+0x310>)
 8004754:	4613      	mov	r3, r2
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	1a9b      	subs	r3, r3, r2
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	440b      	add	r3, r1
 800475e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8004762:	2b00      	cmp	r3, #0
 8004764:	d103      	bne.n	800476e <BlockZ1+0x2f2>
		CanRotate = true;
 8004766:	4b0f      	ldr	r3, [pc, #60]	@ (80047a4 <BlockZ1+0x328>)
 8004768:	2201      	movs	r2, #1
 800476a:	701a      	strb	r2, [r3, #0]
 800476c:	e003      	b.n	8004776 <BlockZ1+0x2fa>
	else CanRotate = false;
 800476e:	4b0d      	ldr	r3, [pc, #52]	@ (80047a4 <BlockZ1+0x328>)
 8004770:	2200      	movs	r2, #0
 8004772:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 3); cout << char(248);
	//PrintXY(tetrominoLocX + 2, tetrominoLocY + 3); cout << char(248);
}
 8004774:	bf00      	nop
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	bd90      	pop	{r4, r7, pc}
 800477e:	bf00      	nop
 8004780:	20000eac 	.word	0x20000eac
 8004784:	20000ea8 	.word	0x20000ea8
 8004788:	20000ea4 	.word	0x20000ea4
 800478c:	20000090 	.word	0x20000090
 8004790:	2000000c 	.word	0x2000000c
 8004794:	2000000f 	.word	0x2000000f
 8004798:	20000eb0 	.word	0x20000eb0
 800479c:	2000000e 	.word	0x2000000e
 80047a0:	2000000d 	.word	0x2000000d
 80047a4:	20000010 	.word	0x20000010

080047a8 <BlockZ2>:

void BlockZ2(int x, int y)
{
 80047a8:	b590      	push	{r4, r7, lr}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
	PrintXY(x + 1, y + 1);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	3301      	adds	r3, #1
 80047ba:	4619      	mov	r1, r3
 80047bc:	4610      	mov	r0, r2
 80047be:	f001 f8b5 	bl	800592c <PrintXY>
	PrintXY(x + 1, y);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3301      	adds	r3, #1
 80047c6:	6839      	ldr	r1, [r7, #0]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f001 f8af 	bl	800592c <PrintXY>
	PrintXY(x, y + 1);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	3301      	adds	r3, #1
 80047d2:	4619      	mov	r1, r3
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f001 f8a9 	bl	800592c <PrintXY>
	PrintXY(x, y + 2);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	3302      	adds	r3, #2
 80047de:	4619      	mov	r1, r3
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f001 f8a3 	bl	800592c <PrintXY>

	CurrentState = 18;
 80047e6:	4ba6      	ldr	r3, [pc, #664]	@ (8004a80 <BlockZ2+0x2d8>)
 80047e8:	2212      	movs	r2, #18
 80047ea:	801a      	strh	r2, [r3, #0]

	if (tetrominoLocY >= 19 ||
 80047ec:	4ba5      	ldr	r3, [pc, #660]	@ (8004a84 <BlockZ2+0x2dc>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b12      	cmp	r3, #18
 80047f2:	dc1e      	bgt.n	8004832 <BlockZ2+0x8a>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 80047f4:	4ba4      	ldr	r3, [pc, #656]	@ (8004a88 <BlockZ2+0x2e0>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	4ba2      	ldr	r3, [pc, #648]	@ (8004a84 <BlockZ2+0x2dc>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	1c99      	adds	r1, r3, #2
 8004800:	48a2      	ldr	r0, [pc, #648]	@ (8004a8c <BlockZ2+0x2e4>)
 8004802:	4613      	mov	r3, r2
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	1a9b      	subs	r3, r3, r2
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	440b      	add	r3, r1
 800480c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetrominoLocY >= 19 ||
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10e      	bne.n	8004832 <BlockZ2+0x8a>
		tetris[tetrominoLocX][tetrominoLocY + 3] != 0)
 8004814:	4b9c      	ldr	r3, [pc, #624]	@ (8004a88 <BlockZ2+0x2e0>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	4b9a      	ldr	r3, [pc, #616]	@ (8004a84 <BlockZ2+0x2dc>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	1cd9      	adds	r1, r3, #3
 800481e:	489b      	ldr	r0, [pc, #620]	@ (8004a8c <BlockZ2+0x2e4>)
 8004820:	4613      	mov	r3, r2
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	1a9b      	subs	r3, r3, r2
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	440b      	add	r3, r1
 800482a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] != 0 ||
 800482e:	2b00      	cmp	r3, #0
 8004830:	d04d      	beq.n	80048ce <BlockZ2+0x126>
	{
		while (isDownKey() == 1);
 8004832:	bf00      	nop
 8004834:	f000 fff4 	bl	8005820 <isDownKey>
 8004838:	4603      	mov	r3, r0
 800483a:	2b01      	cmp	r3, #1
 800483c:	d0fa      	beq.n	8004834 <BlockZ2+0x8c>
		NewTetromino = true;
 800483e:	4b94      	ldr	r3, [pc, #592]	@ (8004a90 <BlockZ2+0x2e8>)
 8004840:	2201      	movs	r2, #1
 8004842:	701a      	strb	r2, [r3, #0]
		CanMoveDown = false;
 8004844:	4b93      	ldr	r3, [pc, #588]	@ (8004a94 <BlockZ2+0x2ec>)
 8004846:	2200      	movs	r2, #0
 8004848:	701a      	strb	r2, [r3, #0]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] = colour;
 800484a:	4b93      	ldr	r3, [pc, #588]	@ (8004a98 <BlockZ2+0x2f0>)
 800484c:	8818      	ldrh	r0, [r3, #0]
 800484e:	4b8e      	ldr	r3, [pc, #568]	@ (8004a88 <BlockZ2+0x2e0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	4b8b      	ldr	r3, [pc, #556]	@ (8004a84 <BlockZ2+0x2dc>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	1c59      	adds	r1, r3, #1
 800485a:	4604      	mov	r4, r0
 800485c:	488b      	ldr	r0, [pc, #556]	@ (8004a8c <BlockZ2+0x2e4>)
 800485e:	4613      	mov	r3, r2
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	1a9b      	subs	r3, r3, r2
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	440b      	add	r3, r1
 8004868:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY] = colour;
 800486c:	4b8a      	ldr	r3, [pc, #552]	@ (8004a98 <BlockZ2+0x2f0>)
 800486e:	8818      	ldrh	r0, [r3, #0]
 8004870:	4b85      	ldr	r3, [pc, #532]	@ (8004a88 <BlockZ2+0x2e0>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	4b83      	ldr	r3, [pc, #524]	@ (8004a84 <BlockZ2+0x2dc>)
 8004878:	6819      	ldr	r1, [r3, #0]
 800487a:	4604      	mov	r4, r0
 800487c:	4883      	ldr	r0, [pc, #524]	@ (8004a8c <BlockZ2+0x2e4>)
 800487e:	4613      	mov	r3, r2
 8004880:	011b      	lsls	r3, r3, #4
 8004882:	1a9b      	subs	r3, r3, r2
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	440b      	add	r3, r1
 8004888:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] = colour;
 800488c:	4b82      	ldr	r3, [pc, #520]	@ (8004a98 <BlockZ2+0x2f0>)
 800488e:	8818      	ldrh	r0, [r3, #0]
 8004890:	4b7d      	ldr	r3, [pc, #500]	@ (8004a88 <BlockZ2+0x2e0>)
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	4b7b      	ldr	r3, [pc, #492]	@ (8004a84 <BlockZ2+0x2dc>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	1c59      	adds	r1, r3, #1
 800489a:	4604      	mov	r4, r0
 800489c:	487b      	ldr	r0, [pc, #492]	@ (8004a8c <BlockZ2+0x2e4>)
 800489e:	4613      	mov	r3, r2
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	1a9b      	subs	r3, r3, r2
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	440b      	add	r3, r1
 80048a8:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 2] = colour;
 80048ac:	4b7a      	ldr	r3, [pc, #488]	@ (8004a98 <BlockZ2+0x2f0>)
 80048ae:	8818      	ldrh	r0, [r3, #0]
 80048b0:	4b75      	ldr	r3, [pc, #468]	@ (8004a88 <BlockZ2+0x2e0>)
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	4b73      	ldr	r3, [pc, #460]	@ (8004a84 <BlockZ2+0x2dc>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	1c99      	adds	r1, r3, #2
 80048ba:	4604      	mov	r4, r0
 80048bc:	4873      	ldr	r0, [pc, #460]	@ (8004a8c <BlockZ2+0x2e4>)
 80048be:	4613      	mov	r3, r2
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	440b      	add	r3, r1
 80048c8:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 80048cc:	e002      	b.n	80048d4 <BlockZ2+0x12c>
	}
	else CanMoveDown = true;
 80048ce:	4b71      	ldr	r3, [pc, #452]	@ (8004a94 <BlockZ2+0x2ec>)
 80048d0:	2201      	movs	r2, #1
 80048d2:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 80048d4:	4b6c      	ldr	r3, [pc, #432]	@ (8004a88 <BlockZ2+0x2e0>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	4b6a      	ldr	r3, [pc, #424]	@ (8004a84 <BlockZ2+0x2dc>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	1c59      	adds	r1, r3, #1
 80048de:	486b      	ldr	r0, [pc, #428]	@ (8004a8c <BlockZ2+0x2e4>)
 80048e0:	4613      	mov	r3, r2
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	1a9b      	subs	r3, r3, r2
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	440b      	add	r3, r1
 80048ea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d131      	bne.n	8004956 <BlockZ2+0x1ae>
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 80048f2:	4b65      	ldr	r3, [pc, #404]	@ (8004a88 <BlockZ2+0x2e0>)
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	4b63      	ldr	r3, [pc, #396]	@ (8004a84 <BlockZ2+0x2dc>)
 80048f8:	6819      	ldr	r1, [r3, #0]
 80048fa:	4864      	ldr	r0, [pc, #400]	@ (8004a8c <BlockZ2+0x2e4>)
 80048fc:	4613      	mov	r3, r2
 80048fe:	011b      	lsls	r3, r3, #4
 8004900:	1a9b      	subs	r3, r3, r2
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	440b      	add	r3, r1
 8004906:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 800490a:	2b00      	cmp	r3, #0
 800490c:	d123      	bne.n	8004956 <BlockZ2+0x1ae>
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 800490e:	4b5e      	ldr	r3, [pc, #376]	@ (8004a88 <BlockZ2+0x2e0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	1e5a      	subs	r2, r3, #1
 8004914:	4b5b      	ldr	r3, [pc, #364]	@ (8004a84 <BlockZ2+0x2dc>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	1c59      	adds	r1, r3, #1
 800491a:	485c      	ldr	r0, [pc, #368]	@ (8004a8c <BlockZ2+0x2e4>)
 800491c:	4613      	mov	r3, r2
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	1a9b      	subs	r3, r3, r2
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	440b      	add	r3, r1
 8004926:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY] == 0 &&
 800492a:	2b00      	cmp	r3, #0
 800492c:	d113      	bne.n	8004956 <BlockZ2+0x1ae>
		tetris[tetrominoLocX - 1][tetrominoLocY + 2] == 0
 800492e:	4b56      	ldr	r3, [pc, #344]	@ (8004a88 <BlockZ2+0x2e0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	1e5a      	subs	r2, r3, #1
 8004934:	4b53      	ldr	r3, [pc, #332]	@ (8004a84 <BlockZ2+0x2dc>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	1c99      	adds	r1, r3, #2
 800493a:	4854      	ldr	r0, [pc, #336]	@ (8004a8c <BlockZ2+0x2e4>)
 800493c:	4613      	mov	r3, r2
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	1a9b      	subs	r3, r3, r2
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	440b      	add	r3, r1
 8004946:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX - 1][tetrominoLocY + 1] == 0 &&
 800494a:	2b00      	cmp	r3, #0
 800494c:	d103      	bne.n	8004956 <BlockZ2+0x1ae>
	)
		CanMoveLeft = true;
 800494e:	4b53      	ldr	r3, [pc, #332]	@ (8004a9c <BlockZ2+0x2f4>)
 8004950:	2201      	movs	r2, #1
 8004952:	701a      	strb	r2, [r3, #0]
 8004954:	e002      	b.n	800495c <BlockZ2+0x1b4>
	else CanMoveLeft = false;
 8004956:	4b51      	ldr	r3, [pc, #324]	@ (8004a9c <BlockZ2+0x2f4>)
 8004958:	2200      	movs	r2, #0
 800495a:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 800495c:	4b4a      	ldr	r3, [pc, #296]	@ (8004a88 <BlockZ2+0x2e0>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	1c9a      	adds	r2, r3, #2
 8004962:	4b48      	ldr	r3, [pc, #288]	@ (8004a84 <BlockZ2+0x2dc>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	1c59      	adds	r1, r3, #1
 8004968:	4848      	ldr	r0, [pc, #288]	@ (8004a8c <BlockZ2+0x2e4>)
 800496a:	4613      	mov	r3, r2
 800496c:	011b      	lsls	r3, r3, #4
 800496e:	1a9b      	subs	r3, r3, r2
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	440b      	add	r3, r1
 8004974:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d132      	bne.n	80049e2 <BlockZ2+0x23a>
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 800497c:	4b42      	ldr	r3, [pc, #264]	@ (8004a88 <BlockZ2+0x2e0>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	1c9a      	adds	r2, r3, #2
 8004982:	4b40      	ldr	r3, [pc, #256]	@ (8004a84 <BlockZ2+0x2dc>)
 8004984:	6819      	ldr	r1, [r3, #0]
 8004986:	4841      	ldr	r0, [pc, #260]	@ (8004a8c <BlockZ2+0x2e4>)
 8004988:	4613      	mov	r3, r2
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	1a9b      	subs	r3, r3, r2
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	440b      	add	r3, r1
 8004992:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 2][tetrominoLocY + 1] == 0 &&
 8004996:	2b00      	cmp	r3, #0
 8004998:	d123      	bne.n	80049e2 <BlockZ2+0x23a>
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 800499a:	4b3b      	ldr	r3, [pc, #236]	@ (8004a88 <BlockZ2+0x2e0>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	4b38      	ldr	r3, [pc, #224]	@ (8004a84 <BlockZ2+0x2dc>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	1c59      	adds	r1, r3, #1
 80049a6:	4839      	ldr	r0, [pc, #228]	@ (8004a8c <BlockZ2+0x2e4>)
 80049a8:	4613      	mov	r3, r2
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	1a9b      	subs	r3, r3, r2
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	440b      	add	r3, r1
 80049b2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 2][tetrominoLocY] == 0 &&
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d113      	bne.n	80049e2 <BlockZ2+0x23a>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0
 80049ba:	4b33      	ldr	r3, [pc, #204]	@ (8004a88 <BlockZ2+0x2e0>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	4b30      	ldr	r3, [pc, #192]	@ (8004a84 <BlockZ2+0x2dc>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	1c99      	adds	r1, r3, #2
 80049c6:	4831      	ldr	r0, [pc, #196]	@ (8004a8c <BlockZ2+0x2e4>)
 80049c8:	4613      	mov	r3, r2
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	1a9b      	subs	r3, r3, r2
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	440b      	add	r3, r1
 80049d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d103      	bne.n	80049e2 <BlockZ2+0x23a>
	)
		CanMoveRight = true;
 80049da:	4b31      	ldr	r3, [pc, #196]	@ (8004aa0 <BlockZ2+0x2f8>)
 80049dc:	2201      	movs	r2, #1
 80049de:	701a      	strb	r2, [r3, #0]
 80049e0:	e002      	b.n	80049e8 <BlockZ2+0x240>
	else CanMoveRight = false;
 80049e2:	4b2f      	ldr	r3, [pc, #188]	@ (8004aa0 <BlockZ2+0x2f8>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	701a      	strb	r2, [r3, #0]

	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 80049e8:	4b27      	ldr	r3, [pc, #156]	@ (8004a88 <BlockZ2+0x2e0>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	4b25      	ldr	r3, [pc, #148]	@ (8004a84 <BlockZ2+0x2dc>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	1c59      	adds	r1, r3, #1
 80049f4:	4825      	ldr	r0, [pc, #148]	@ (8004a8c <BlockZ2+0x2e4>)
 80049f6:	4613      	mov	r3, r2
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	1a9b      	subs	r3, r3, r2
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	440b      	add	r3, r1
 8004a00:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d132      	bne.n	8004a6e <BlockZ2+0x2c6>
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8004a08:	4b1f      	ldr	r3, [pc, #124]	@ (8004a88 <BlockZ2+0x2e0>)
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8004a84 <BlockZ2+0x2dc>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	1c59      	adds	r1, r3, #1
 8004a12:	481e      	ldr	r0, [pc, #120]	@ (8004a8c <BlockZ2+0x2e4>)
 8004a14:	4613      	mov	r3, r2
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	1a9b      	subs	r3, r3, r2
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	440b      	add	r3, r1
 8004a1e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (tetris[tetrominoLocX + 1][tetrominoLocY + 1] == 0 &&
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d123      	bne.n	8004a6e <BlockZ2+0x2c6>
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 8004a26:	4b18      	ldr	r3, [pc, #96]	@ (8004a88 <BlockZ2+0x2e0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	4b15      	ldr	r3, [pc, #84]	@ (8004a84 <BlockZ2+0x2dc>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	1c99      	adds	r1, r3, #2
 8004a32:	4816      	ldr	r0, [pc, #88]	@ (8004a8c <BlockZ2+0x2e4>)
 8004a34:	4613      	mov	r3, r2
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	1a9b      	subs	r3, r3, r2
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	440b      	add	r3, r1
 8004a3e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX][tetrominoLocY + 1] == 0 &&
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d113      	bne.n	8004a6e <BlockZ2+0x2c6>
		tetris[tetrominoLocX + 2][tetrominoLocY + 2] == 0)
 8004a46:	4b10      	ldr	r3, [pc, #64]	@ (8004a88 <BlockZ2+0x2e0>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	1c9a      	adds	r2, r3, #2
 8004a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8004a84 <BlockZ2+0x2dc>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	1c99      	adds	r1, r3, #2
 8004a52:	480e      	ldr	r0, [pc, #56]	@ (8004a8c <BlockZ2+0x2e4>)
 8004a54:	4613      	mov	r3, r2
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	1a9b      	subs	r3, r3, r2
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	440b      	add	r3, r1
 8004a5e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		tetris[tetrominoLocX + 1][tetrominoLocY + 2] == 0 &&
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d103      	bne.n	8004a6e <BlockZ2+0x2c6>
		CanRotate = true;
 8004a66:	4b0f      	ldr	r3, [pc, #60]	@ (8004aa4 <BlockZ2+0x2fc>)
 8004a68:	2201      	movs	r2, #1
 8004a6a:	701a      	strb	r2, [r3, #0]
 8004a6c:	e003      	b.n	8004a76 <BlockZ2+0x2ce>
	else CanRotate = false;
 8004a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa4 <BlockZ2+0x2fc>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	701a      	strb	r2, [r3, #0]

	// Print collision points
	//PrintXY(tetrominoLocX + 1, tetrominoLocY + 2); cout << char(248);
	//PrintXY(tetrominoLocX, tetrominoLocY + 3); cout << char(248);
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd90      	pop	{r4, r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000eac 	.word	0x20000eac
 8004a84:	20000ea8 	.word	0x20000ea8
 8004a88:	20000ea4 	.word	0x20000ea4
 8004a8c:	20000090 	.word	0x20000090
 8004a90:	2000000c 	.word	0x2000000c
 8004a94:	2000000f 	.word	0x2000000f
 8004a98:	20000eb0 	.word	0x20000eb0
 8004a9c:	2000000e 	.word	0x2000000e
 8004aa0:	2000000d 	.word	0x2000000d
 8004aa4:	20000010 	.word	0x20000010

08004aa8 <PrintTetromino>:

void PrintTetromino()
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
	switch (CurrentState)
 8004aac:	4b6d      	ldr	r3, [pc, #436]	@ (8004c64 <PrintTetromino+0x1bc>)
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	2b12      	cmp	r3, #18
 8004ab2:	f200 80d4 	bhi.w	8004c5e <PrintTetromino+0x1b6>
 8004ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8004abc <PrintTetromino+0x14>)
 8004ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abc:	08004b09 	.word	0x08004b09
 8004ac0:	08004b1b 	.word	0x08004b1b
 8004ac4:	08004b2d 	.word	0x08004b2d
 8004ac8:	08004b3f 	.word	0x08004b3f
 8004acc:	08004b51 	.word	0x08004b51
 8004ad0:	08004b63 	.word	0x08004b63
 8004ad4:	08004b75 	.word	0x08004b75
 8004ad8:	08004b87 	.word	0x08004b87
 8004adc:	08004b99 	.word	0x08004b99
 8004ae0:	08004bab 	.word	0x08004bab
 8004ae4:	08004bbd 	.word	0x08004bbd
 8004ae8:	08004bcf 	.word	0x08004bcf
 8004aec:	08004be1 	.word	0x08004be1
 8004af0:	08004bf3 	.word	0x08004bf3
 8004af4:	08004c05 	.word	0x08004c05
 8004af8:	08004c17 	.word	0x08004c17
 8004afc:	08004c29 	.word	0x08004c29
 8004b00:	08004c3b 	.word	0x08004c3b
 8004b04:	08004c4d 	.word	0x08004c4d
	{
	case 0: { BlockO(tetrominoLocX, tetrominoLocY); break; }
 8004b08:	4b57      	ldr	r3, [pc, #348]	@ (8004c68 <PrintTetromino+0x1c0>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a57      	ldr	r2, [pc, #348]	@ (8004c6c <PrintTetromino+0x1c4>)
 8004b0e:	6812      	ldr	r2, [r2, #0]
 8004b10:	4611      	mov	r1, r2
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fe fa1c 	bl	8002f50 <BlockO>
 8004b18:	e0a1      	b.n	8004c5e <PrintTetromino+0x1b6>
	case 1: { BlockI1(tetrominoLocX, tetrominoLocY); break; }
 8004b1a:	4b53      	ldr	r3, [pc, #332]	@ (8004c68 <PrintTetromino+0x1c0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a53      	ldr	r2, [pc, #332]	@ (8004c6c <PrintTetromino+0x1c4>)
 8004b20:	6812      	ldr	r2, [r2, #0]
 8004b22:	4611      	mov	r1, r2
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7fc fa9f 	bl	8001068 <BlockI1>
 8004b2a:	e098      	b.n	8004c5e <PrintTetromino+0x1b6>
	case 2: { BlockI2(tetrominoLocX, tetrominoLocY); break; }
 8004b2c:	4b4e      	ldr	r3, [pc, #312]	@ (8004c68 <PrintTetromino+0x1c0>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a4e      	ldr	r2, [pc, #312]	@ (8004c6c <PrintTetromino+0x1c4>)
 8004b32:	6812      	ldr	r2, [r2, #0]
 8004b34:	4611      	mov	r1, r2
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fc fc46 	bl	80013c8 <BlockI2>
 8004b3c:	e08f      	b.n	8004c5e <PrintTetromino+0x1b6>
	case 3: { BlockJ1(tetrominoLocX, tetrominoLocY); break; }
 8004b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8004c68 <PrintTetromino+0x1c0>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a4a      	ldr	r2, [pc, #296]	@ (8004c6c <PrintTetromino+0x1c4>)
 8004b44:	6812      	ldr	r2, [r2, #0]
 8004b46:	4611      	mov	r1, r2
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fc fdb1 	bl	80016b0 <BlockJ1>
 8004b4e:	e086      	b.n	8004c5e <PrintTetromino+0x1b6>
	case 4: { BlockJ2(tetrominoLocX, tetrominoLocY); break; }
 8004b50:	4b45      	ldr	r3, [pc, #276]	@ (8004c68 <PrintTetromino+0x1c0>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a45      	ldr	r2, [pc, #276]	@ (8004c6c <PrintTetromino+0x1c4>)
 8004b56:	6812      	ldr	r2, [r2, #0]
 8004b58:	4611      	mov	r1, r2
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fc ff40 	bl	80019e0 <BlockJ2>
 8004b60:	e07d      	b.n	8004c5e <PrintTetromino+0x1b6>
	case 5: { BlockJ3(tetrominoLocX, tetrominoLocY); break; }
 8004b62:	4b41      	ldr	r3, [pc, #260]	@ (8004c68 <PrintTetromino+0x1c0>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a41      	ldr	r2, [pc, #260]	@ (8004c6c <PrintTetromino+0x1c4>)
 8004b68:	6812      	ldr	r2, [r2, #0]
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fd f8b7 	bl	8001ce0 <BlockJ3>
 8004b72:	e074      	b.n	8004c5e <PrintTetromino+0x1b6>
	case 6: { BlockJ4(tetrominoLocX, tetrominoLocY); break; }
 8004b74:	4b3c      	ldr	r3, [pc, #240]	@ (8004c68 <PrintTetromino+0x1c0>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a3c      	ldr	r2, [pc, #240]	@ (8004c6c <PrintTetromino+0x1c4>)
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fd fa3e 	bl	8002000 <BlockJ4>
 8004b84:	e06b      	b.n	8004c5e <PrintTetromino+0x1b6>
	case 7: { BlockL1(tetrominoLocX, tetrominoLocY); break; }
 8004b86:	4b38      	ldr	r3, [pc, #224]	@ (8004c68 <PrintTetromino+0x1c0>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a38      	ldr	r2, [pc, #224]	@ (8004c6c <PrintTetromino+0x1c4>)
 8004b8c:	6812      	ldr	r2, [r2, #0]
 8004b8e:	4611      	mov	r1, r2
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fd fbb5 	bl	8002300 <BlockL1>
 8004b96:	e062      	b.n	8004c5e <PrintTetromino+0x1b6>
	case 8: { BlockL2(tetrominoLocX, tetrominoLocY); break; }
 8004b98:	4b33      	ldr	r3, [pc, #204]	@ (8004c68 <PrintTetromino+0x1c0>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a33      	ldr	r2, [pc, #204]	@ (8004c6c <PrintTetromino+0x1c4>)
 8004b9e:	6812      	ldr	r2, [r2, #0]
 8004ba0:	4611      	mov	r1, r2
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fd fd42 	bl	800262c <BlockL2>
 8004ba8:	e059      	b.n	8004c5e <PrintTetromino+0x1b6>
	case 9: { BlockL3(tetrominoLocX, tetrominoLocY); break; }
 8004baa:	4b2f      	ldr	r3, [pc, #188]	@ (8004c68 <PrintTetromino+0x1c0>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a2f      	ldr	r2, [pc, #188]	@ (8004c6c <PrintTetromino+0x1c4>)
 8004bb0:	6812      	ldr	r2, [r2, #0]
 8004bb2:	4611      	mov	r1, r2
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7fd febd 	bl	8002934 <BlockL3>
 8004bba:	e050      	b.n	8004c5e <PrintTetromino+0x1b6>
	case 10: { BlockL4(tetrominoLocX, tetrominoLocY); break; }
 8004bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8004c68 <PrintTetromino+0x1c0>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a2a      	ldr	r2, [pc, #168]	@ (8004c6c <PrintTetromino+0x1c4>)
 8004bc2:	6812      	ldr	r2, [r2, #0]
 8004bc4:	4611      	mov	r1, r2
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fe f846 	bl	8002c58 <BlockL4>
 8004bcc:	e047      	b.n	8004c5e <PrintTetromino+0x1b6>
	case 11: { BlockS1(tetrominoLocX, tetrominoLocY); break; }
 8004bce:	4b26      	ldr	r3, [pc, #152]	@ (8004c68 <PrintTetromino+0x1c0>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a26      	ldr	r2, [pc, #152]	@ (8004c6c <PrintTetromino+0x1c4>)
 8004bd4:	6812      	ldr	r2, [r2, #0]
 8004bd6:	4611      	mov	r1, r2
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7fe fb01 	bl	80031e0 <BlockS1>
 8004bde:	e03e      	b.n	8004c5e <PrintTetromino+0x1b6>
	case 12: { BlockS2(tetrominoLocX, tetrominoLocY); break; }
 8004be0:	4b21      	ldr	r3, [pc, #132]	@ (8004c68 <PrintTetromino+0x1c0>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a21      	ldr	r2, [pc, #132]	@ (8004c6c <PrintTetromino+0x1c4>)
 8004be6:	6812      	ldr	r2, [r2, #0]
 8004be8:	4611      	mov	r1, r2
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fe fc90 	bl	8003510 <BlockS2>
 8004bf0:	e035      	b.n	8004c5e <PrintTetromino+0x1b6>
	case 13: { BlockT1(tetrominoLocX, tetrominoLocY); break; }
 8004bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8004c68 <PrintTetromino+0x1c0>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a1d      	ldr	r2, [pc, #116]	@ (8004c6c <PrintTetromino+0x1c4>)
 8004bf8:	6812      	ldr	r2, [r2, #0]
 8004bfa:	4611      	mov	r1, r2
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7fe fe0d 	bl	800381c <BlockT1>
 8004c02:	e02c      	b.n	8004c5e <PrintTetromino+0x1b6>
	case 14: { BlockT2(tetrominoLocX, tetrominoLocY); break; }
 8004c04:	4b18      	ldr	r3, [pc, #96]	@ (8004c68 <PrintTetromino+0x1c0>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a18      	ldr	r2, [pc, #96]	@ (8004c6c <PrintTetromino+0x1c4>)
 8004c0a:	6812      	ldr	r2, [r2, #0]
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fe ff9c 	bl	8003b4c <BlockT2>
 8004c14:	e023      	b.n	8004c5e <PrintTetromino+0x1b6>
	case 15: { BlockT3(tetrominoLocX, tetrominoLocY); break; }
 8004c16:	4b14      	ldr	r3, [pc, #80]	@ (8004c68 <PrintTetromino+0x1c0>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a14      	ldr	r2, [pc, #80]	@ (8004c6c <PrintTetromino+0x1c4>)
 8004c1c:	6812      	ldr	r2, [r2, #0]
 8004c1e:	4611      	mov	r1, r2
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7ff f917 	bl	8003e54 <BlockT3>
 8004c26:	e01a      	b.n	8004c5e <PrintTetromino+0x1b6>
	case 16: { BlockT4(tetrominoLocX, tetrominoLocY); break; }
 8004c28:	4b0f      	ldr	r3, [pc, #60]	@ (8004c68 <PrintTetromino+0x1c0>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a0f      	ldr	r2, [pc, #60]	@ (8004c6c <PrintTetromino+0x1c4>)
 8004c2e:	6812      	ldr	r2, [r2, #0]
 8004c30:	4611      	mov	r1, r2
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7ff faa0 	bl	8004178 <BlockT4>
 8004c38:	e011      	b.n	8004c5e <PrintTetromino+0x1b6>
	case 17: { BlockZ1(tetrominoLocX, tetrominoLocY); break; }
 8004c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c68 <PrintTetromino+0x1c0>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a0b      	ldr	r2, [pc, #44]	@ (8004c6c <PrintTetromino+0x1c4>)
 8004c40:	6812      	ldr	r2, [r2, #0]
 8004c42:	4611      	mov	r1, r2
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff fc19 	bl	800447c <BlockZ1>
 8004c4a:	e008      	b.n	8004c5e <PrintTetromino+0x1b6>
	case 18: { BlockZ2(tetrominoLocX, tetrominoLocY); break; }
 8004c4c:	4b06      	ldr	r3, [pc, #24]	@ (8004c68 <PrintTetromino+0x1c0>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a06      	ldr	r2, [pc, #24]	@ (8004c6c <PrintTetromino+0x1c4>)
 8004c52:	6812      	ldr	r2, [r2, #0]
 8004c54:	4611      	mov	r1, r2
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff fda6 	bl	80047a8 <BlockZ2>
 8004c5c:	bf00      	nop
	}
}
 8004c5e:	bf00      	nop
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	20000eac 	.word	0x20000eac
 8004c68:	20000ea4 	.word	0x20000ea4
 8004c6c:	20000ea8 	.word	0x20000ea8

08004c70 <PrintNextPiece>:

void PrintNextPiece(int x, int y)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
	// Delete previous printed NEXT PIECE
	Colour(0);
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	f000 fe76 	bl	800596c <Colour>
	PrintXY(29, 4); PrintXY(30, 4); PrintXY(31, 4); PrintXY(32, 4); PrintXY(33, 4);
 8004c80:	2104      	movs	r1, #4
 8004c82:	201d      	movs	r0, #29
 8004c84:	f000 fe52 	bl	800592c <PrintXY>
 8004c88:	2104      	movs	r1, #4
 8004c8a:	201e      	movs	r0, #30
 8004c8c:	f000 fe4e 	bl	800592c <PrintXY>
 8004c90:	2104      	movs	r1, #4
 8004c92:	201f      	movs	r0, #31
 8004c94:	f000 fe4a 	bl	800592c <PrintXY>
 8004c98:	2104      	movs	r1, #4
 8004c9a:	2020      	movs	r0, #32
 8004c9c:	f000 fe46 	bl	800592c <PrintXY>
 8004ca0:	2104      	movs	r1, #4
 8004ca2:	2021      	movs	r0, #33	@ 0x21
 8004ca4:	f000 fe42 	bl	800592c <PrintXY>
	PrintXY(29, 5); PrintXY(30, 5); PrintXY(31,5); PrintXY(32, 5); PrintXY(33, 5);
 8004ca8:	2105      	movs	r1, #5
 8004caa:	201d      	movs	r0, #29
 8004cac:	f000 fe3e 	bl	800592c <PrintXY>
 8004cb0:	2105      	movs	r1, #5
 8004cb2:	201e      	movs	r0, #30
 8004cb4:	f000 fe3a 	bl	800592c <PrintXY>
 8004cb8:	2105      	movs	r1, #5
 8004cba:	201f      	movs	r0, #31
 8004cbc:	f000 fe36 	bl	800592c <PrintXY>
 8004cc0:	2105      	movs	r1, #5
 8004cc2:	2020      	movs	r0, #32
 8004cc4:	f000 fe32 	bl	800592c <PrintXY>
 8004cc8:	2105      	movs	r1, #5
 8004cca:	2021      	movs	r0, #33	@ 0x21
 8004ccc:	f000 fe2e 	bl	800592c <PrintXY>
	PrintXY(29, 6); PrintXY(30, 6); PrintXY(31, 6); PrintXY(32, 6); PrintXY(33, 6);
 8004cd0:	2106      	movs	r1, #6
 8004cd2:	201d      	movs	r0, #29
 8004cd4:	f000 fe2a 	bl	800592c <PrintXY>
 8004cd8:	2106      	movs	r1, #6
 8004cda:	201e      	movs	r0, #30
 8004cdc:	f000 fe26 	bl	800592c <PrintXY>
 8004ce0:	2106      	movs	r1, #6
 8004ce2:	201f      	movs	r0, #31
 8004ce4:	f000 fe22 	bl	800592c <PrintXY>
 8004ce8:	2106      	movs	r1, #6
 8004cea:	2020      	movs	r0, #32
 8004cec:	f000 fe1e 	bl	800592c <PrintXY>
 8004cf0:	2106      	movs	r1, #6
 8004cf2:	2021      	movs	r0, #33	@ 0x21
 8004cf4:	f000 fe1a 	bl	800592c <PrintXY>
	PrintXY(29, 7); PrintXY(30, 7); PrintXY(31, 7); PrintXY(32, 7); PrintXY(33, 7);
 8004cf8:	2107      	movs	r1, #7
 8004cfa:	201d      	movs	r0, #29
 8004cfc:	f000 fe16 	bl	800592c <PrintXY>
 8004d00:	2107      	movs	r1, #7
 8004d02:	201e      	movs	r0, #30
 8004d04:	f000 fe12 	bl	800592c <PrintXY>
 8004d08:	2107      	movs	r1, #7
 8004d0a:	201f      	movs	r0, #31
 8004d0c:	f000 fe0e 	bl	800592c <PrintXY>
 8004d10:	2107      	movs	r1, #7
 8004d12:	2020      	movs	r0, #32
 8004d14:	f000 fe0a 	bl	800592c <PrintXY>
 8004d18:	2107      	movs	r1, #7
 8004d1a:	2021      	movs	r0, #33	@ 0x21
 8004d1c:	f000 fe06 	bl	800592c <PrintXY>
	PrintXY(29, 8); PrintXY(30, 8); PrintXY(31, 8); PrintXY(32, 8); PrintXY(33, 8);
 8004d20:	2108      	movs	r1, #8
 8004d22:	201d      	movs	r0, #29
 8004d24:	f000 fe02 	bl	800592c <PrintXY>
 8004d28:	2108      	movs	r1, #8
 8004d2a:	201e      	movs	r0, #30
 8004d2c:	f000 fdfe 	bl	800592c <PrintXY>
 8004d30:	2108      	movs	r1, #8
 8004d32:	201f      	movs	r0, #31
 8004d34:	f000 fdfa 	bl	800592c <PrintXY>
 8004d38:	2108      	movs	r1, #8
 8004d3a:	2020      	movs	r0, #32
 8004d3c:	f000 fdf6 	bl	800592c <PrintXY>
 8004d40:	2108      	movs	r1, #8
 8004d42:	2021      	movs	r0, #33	@ 0x21
 8004d44:	f000 fdf2 	bl	800592c <PrintXY>
	Colour(6);
 8004d48:	2006      	movs	r0, #6
 8004d4a:	f000 fe0f 	bl	800596c <Colour>

	switch (NextPiece)
 8004d4e:	4bbb      	ldr	r3, [pc, #748]	@ (800503c <PrintNextPiece+0x3cc>)
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	2b12      	cmp	r3, #18
 8004d54:	f200 8264 	bhi.w	8005220 <PrintNextPiece+0x5b0>
 8004d58:	a201      	add	r2, pc, #4	@ (adr r2, 8004d60 <PrintNextPiece+0xf0>)
 8004d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5e:	bf00      	nop
 8004d60:	08004dad 	.word	0x08004dad
 8004d64:	08004def 	.word	0x08004def
 8004d68:	08004e2d 	.word	0x08004e2d
 8004d6c:	08004e6b 	.word	0x08004e6b
 8004d70:	08004ea9 	.word	0x08004ea9
 8004d74:	08004ee3 	.word	0x08004ee3
 8004d78:	08004f19 	.word	0x08004f19
 8004d7c:	08004f53 	.word	0x08004f53
 8004d80:	08004f8d 	.word	0x08004f8d
 8004d84:	08004fcb 	.word	0x08004fcb
 8004d88:	08005005 	.word	0x08005005
 8004d8c:	08005041 	.word	0x08005041
 8004d90:	0800507f 	.word	0x0800507f
 8004d94:	080050bd 	.word	0x080050bd
 8004d98:	080050fb 	.word	0x080050fb
 8004d9c:	08005139 	.word	0x08005139
 8004da0:	08005173 	.word	0x08005173
 8004da4:	080051ad 	.word	0x080051ad
 8004da8:	080051eb 	.word	0x080051eb
	{
	case 0:
	{
		PrintXY(x + 1, y + 1);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	3301      	adds	r3, #1
 8004db4:	4619      	mov	r1, r3
 8004db6:	4610      	mov	r0, r2
 8004db8:	f000 fdb8 	bl	800592c <PrintXY>
		PrintXY(x + 2, y + 1);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	1c9a      	adds	r2, r3, #2
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	f000 fdb0 	bl	800592c <PrintXY>
		PrintXY(x + 1, y + 2);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	3302      	adds	r3, #2
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	f000 fda8 	bl	800592c <PrintXY>
		PrintXY(x + 2, y + 2);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	1c9a      	adds	r2, r3, #2
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	3302      	adds	r3, #2
 8004de4:	4619      	mov	r1, r3
 8004de6:	4610      	mov	r0, r2
 8004de8:	f000 fda0 	bl	800592c <PrintXY>
		break;
 8004dec:	e218      	b.n	8005220 <PrintNextPiece+0x5b0>
	}
	case 1:
	{
		PrintXY(x + 1, y + 1);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	3301      	adds	r3, #1
 8004df6:	4619      	mov	r1, r3
 8004df8:	4610      	mov	r0, r2
 8004dfa:	f000 fd97 	bl	800592c <PrintXY>
		PrintXY(x, y + 1);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	3301      	adds	r3, #1
 8004e02:	4619      	mov	r1, r3
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 fd91 	bl	800592c <PrintXY>
		PrintXY(x + 2, y + 1);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	1c9a      	adds	r2, r3, #2
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	3301      	adds	r3, #1
 8004e12:	4619      	mov	r1, r3
 8004e14:	4610      	mov	r0, r2
 8004e16:	f000 fd89 	bl	800592c <PrintXY>
		PrintXY(x + 3, y + 1);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	1cda      	adds	r2, r3, #3
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	3301      	adds	r3, #1
 8004e22:	4619      	mov	r1, r3
 8004e24:	4610      	mov	r0, r2
 8004e26:	f000 fd81 	bl	800592c <PrintXY>
		break;
 8004e2a:	e1f9      	b.n	8005220 <PrintNextPiece+0x5b0>
	}
	case 2:
	{
		PrintXY(x + 1, y + 1);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	3301      	adds	r3, #1
 8004e34:	4619      	mov	r1, r3
 8004e36:	4610      	mov	r0, r2
 8004e38:	f000 fd78 	bl	800592c <PrintXY>
		PrintXY(x + 1, y);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	6839      	ldr	r1, [r7, #0]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fd72 	bl	800592c <PrintXY>
		PrintXY(x + 1, y + 2);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	3302      	adds	r3, #2
 8004e50:	4619      	mov	r1, r3
 8004e52:	4610      	mov	r0, r2
 8004e54:	f000 fd6a 	bl	800592c <PrintXY>
		PrintXY(x + 1, y + 3);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	1c5a      	adds	r2, r3, #1
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	3303      	adds	r3, #3
 8004e60:	4619      	mov	r1, r3
 8004e62:	4610      	mov	r0, r2
 8004e64:	f000 fd62 	bl	800592c <PrintXY>
		break;
 8004e68:	e1da      	b.n	8005220 <PrintNextPiece+0x5b0>
	}
	case 3:
	{
		PrintXY(x + 1, y + 1);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	3301      	adds	r3, #1
 8004e72:	4619      	mov	r1, r3
 8004e74:	4610      	mov	r0, r2
 8004e76:	f000 fd59 	bl	800592c <PrintXY>
		PrintXY(x, y + 1);
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	4619      	mov	r1, r3
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 fd53 	bl	800592c <PrintXY>
		PrintXY(x + 2, y + 2);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	1c9a      	adds	r2, r3, #2
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	3302      	adds	r3, #2
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4610      	mov	r0, r2
 8004e92:	f000 fd4b 	bl	800592c <PrintXY>
		PrintXY(x + 2, y + 1);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	1c9a      	adds	r2, r3, #2
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	f000 fd43 	bl	800592c <PrintXY>
		break;
 8004ea6:	e1bb      	b.n	8005220 <PrintNextPiece+0x5b0>
	}
	case 4:
	{
		PrintXY(x + 1, y + 1);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	f000 fd3a 	bl	800592c <PrintXY>
		PrintXY(x + 1, y);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	6839      	ldr	r1, [r7, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 fd34 	bl	800592c <PrintXY>
		PrintXY(x + 1, y + 2);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	3302      	adds	r3, #2
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4610      	mov	r0, r2
 8004ed0:	f000 fd2c 	bl	800592c <PrintXY>
		PrintXY(x, y + 2);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	3302      	adds	r3, #2
 8004ed8:	4619      	mov	r1, r3
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 fd26 	bl	800592c <PrintXY>
		break;
 8004ee0:	e19e      	b.n	8005220 <PrintNextPiece+0x5b0>
	}
	case 5:
	{
		PrintXY(x + 1, y + 1);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	4619      	mov	r1, r3
 8004eec:	4610      	mov	r0, r2
 8004eee:	f000 fd1d 	bl	800592c <PrintXY>
		PrintXY(x, y + 1);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 fd17 	bl	800592c <PrintXY>
		PrintXY(x, y);
 8004efe:	6839      	ldr	r1, [r7, #0]
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 fd13 	bl	800592c <PrintXY>
		PrintXY(x + 2, y + 1);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	1c9a      	adds	r2, r3, #2
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4610      	mov	r0, r2
 8004f12:	f000 fd0b 	bl	800592c <PrintXY>
		break;
 8004f16:	e183      	b.n	8005220 <PrintNextPiece+0x5b0>
	}
	case 6:
	{
		PrintXY(x + 1, y + 1);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	4619      	mov	r1, r3
 8004f22:	4610      	mov	r0, r2
 8004f24:	f000 fd02 	bl	800592c <PrintXY>
		PrintXY(x + 1, y);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	6839      	ldr	r1, [r7, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 fcfc 	bl	800592c <PrintXY>
		PrintXY(x + 2, y);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3302      	adds	r3, #2
 8004f38:	6839      	ldr	r1, [r7, #0]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 fcf6 	bl	800592c <PrintXY>
		PrintXY(x + 1, y + 2);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	1c5a      	adds	r2, r3, #1
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	3302      	adds	r3, #2
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	f000 fcee 	bl	800592c <PrintXY>
		break;
 8004f50:	e166      	b.n	8005220 <PrintNextPiece+0x5b0>
	}
	case 7:
	{
		PrintXY(x + 1, y + 1);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	4610      	mov	r0, r2
 8004f5e:	f000 fce5 	bl	800592c <PrintXY>
		PrintXY(x, y + 1);
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	3301      	adds	r3, #1
 8004f66:	4619      	mov	r1, r3
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 fcdf 	bl	800592c <PrintXY>
		PrintXY(x + 2, y + 1);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	1c9a      	adds	r2, r3, #2
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	3301      	adds	r3, #1
 8004f76:	4619      	mov	r1, r3
 8004f78:	4610      	mov	r0, r2
 8004f7a:	f000 fcd7 	bl	800592c <PrintXY>
		PrintXY(x, y + 2);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	3302      	adds	r3, #2
 8004f82:	4619      	mov	r1, r3
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 fcd1 	bl	800592c <PrintXY>
		break;
 8004f8a:	e149      	b.n	8005220 <PrintNextPiece+0x5b0>
	}
	case 8:
	{
		PrintXY(x + 1, y + 1);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	3301      	adds	r3, #1
 8004f94:	4619      	mov	r1, r3
 8004f96:	4610      	mov	r0, r2
 8004f98:	f000 fcc8 	bl	800592c <PrintXY>
		PrintXY(x + 1, y);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	6839      	ldr	r1, [r7, #0]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 fcc2 	bl	800592c <PrintXY>
		PrintXY(x + 1, y + 2);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	3302      	adds	r3, #2
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	f000 fcba 	bl	800592c <PrintXY>
		PrintXY(x + 2, y + 2);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	1c9a      	adds	r2, r3, #2
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	3302      	adds	r3, #2
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	f000 fcb2 	bl	800592c <PrintXY>
		break;
 8004fc8:	e12a      	b.n	8005220 <PrintNextPiece+0x5b0>
	}
	case 9:
	{
		PrintXY(x + 1, y + 1);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	f000 fca9 	bl	800592c <PrintXY>
		PrintXY(x, y + 1);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	4619      	mov	r1, r3
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 fca3 	bl	800592c <PrintXY>
		PrintXY(x + 2, y + 1);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	1c9a      	adds	r2, r3, #2
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	3301      	adds	r3, #1
 8004fee:	4619      	mov	r1, r3
 8004ff0:	4610      	mov	r0, r2
 8004ff2:	f000 fc9b 	bl	800592c <PrintXY>
		PrintXY(x + 2, y);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	3302      	adds	r3, #2
 8004ffa:	6839      	ldr	r1, [r7, #0]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 fc95 	bl	800592c <PrintXY>
		break;
 8005002:	e10d      	b.n	8005220 <PrintNextPiece+0x5b0>
	}
	case 10:
	{
		PrintXY(x + 1, y + 1);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	3301      	adds	r3, #1
 800500c:	4619      	mov	r1, r3
 800500e:	4610      	mov	r0, r2
 8005010:	f000 fc8c 	bl	800592c <PrintXY>
		PrintXY(x + 1, y);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3301      	adds	r3, #1
 8005018:	6839      	ldr	r1, [r7, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fc86 	bl	800592c <PrintXY>
		PrintXY(x + 1, y + 2);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	3302      	adds	r3, #2
 8005028:	4619      	mov	r1, r3
 800502a:	4610      	mov	r0, r2
 800502c:	f000 fc7e 	bl	800592c <PrintXY>
		PrintXY(x, y);
 8005030:	6839      	ldr	r1, [r7, #0]
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fc7a 	bl	800592c <PrintXY>
		break;
 8005038:	e0f2      	b.n	8005220 <PrintNextPiece+0x5b0>
 800503a:	bf00      	nop
 800503c:	20000eae 	.word	0x20000eae
	}
	case 11:
	{
		PrintXY(x + 1, y + 1);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	3301      	adds	r3, #1
 8005048:	4619      	mov	r1, r3
 800504a:	4610      	mov	r0, r2
 800504c:	f000 fc6e 	bl	800592c <PrintXY>
		PrintXY(x + 2, y + 1);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	1c9a      	adds	r2, r3, #2
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	3301      	adds	r3, #1
 8005058:	4619      	mov	r1, r3
 800505a:	4610      	mov	r0, r2
 800505c:	f000 fc66 	bl	800592c <PrintXY>
		PrintXY(x + 1, y + 2);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	3302      	adds	r3, #2
 8005068:	4619      	mov	r1, r3
 800506a:	4610      	mov	r0, r2
 800506c:	f000 fc5e 	bl	800592c <PrintXY>
		PrintXY(x, y + 2);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	3302      	adds	r3, #2
 8005074:	4619      	mov	r1, r3
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fc58 	bl	800592c <PrintXY>
		break;
 800507c:	e0d0      	b.n	8005220 <PrintNextPiece+0x5b0>
	}
	case 12:
	{
		PrintXY(x + 1, y + 1);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	3301      	adds	r3, #1
 8005086:	4619      	mov	r1, r3
 8005088:	4610      	mov	r0, r2
 800508a:	f000 fc4f 	bl	800592c <PrintXY>
		PrintXY(x + 1, y);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	3301      	adds	r3, #1
 8005092:	6839      	ldr	r1, [r7, #0]
 8005094:	4618      	mov	r0, r3
 8005096:	f000 fc49 	bl	800592c <PrintXY>
		PrintXY(x + 2, y + 1);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	1c9a      	adds	r2, r3, #2
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	3301      	adds	r3, #1
 80050a2:	4619      	mov	r1, r3
 80050a4:	4610      	mov	r0, r2
 80050a6:	f000 fc41 	bl	800592c <PrintXY>
		PrintXY(x + 2, y + 2);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	1c9a      	adds	r2, r3, #2
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	3302      	adds	r3, #2
 80050b2:	4619      	mov	r1, r3
 80050b4:	4610      	mov	r0, r2
 80050b6:	f000 fc39 	bl	800592c <PrintXY>
		break;
 80050ba:	e0b1      	b.n	8005220 <PrintNextPiece+0x5b0>
	}
	case 13:
	{
		PrintXY(x + 1, y + 1);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	3301      	adds	r3, #1
 80050c4:	4619      	mov	r1, r3
 80050c6:	4610      	mov	r0, r2
 80050c8:	f000 fc30 	bl	800592c <PrintXY>
		PrintXY(x, y + 1);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	3301      	adds	r3, #1
 80050d0:	4619      	mov	r1, r3
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fc2a 	bl	800592c <PrintXY>
		PrintXY(x + 2, y + 1);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	1c9a      	adds	r2, r3, #2
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	3301      	adds	r3, #1
 80050e0:	4619      	mov	r1, r3
 80050e2:	4610      	mov	r0, r2
 80050e4:	f000 fc22 	bl	800592c <PrintXY>
		PrintXY(x + 1, y + 2);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	3302      	adds	r3, #2
 80050f0:	4619      	mov	r1, r3
 80050f2:	4610      	mov	r0, r2
 80050f4:	f000 fc1a 	bl	800592c <PrintXY>
		break;
 80050f8:	e092      	b.n	8005220 <PrintNextPiece+0x5b0>
	}
	case 14:
	{
		PrintXY(x + 1, y + 1);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	1c5a      	adds	r2, r3, #1
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	3301      	adds	r3, #1
 8005102:	4619      	mov	r1, r3
 8005104:	4610      	mov	r0, r2
 8005106:	f000 fc11 	bl	800592c <PrintXY>
		PrintXY(x + 1, y);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	3301      	adds	r3, #1
 800510e:	6839      	ldr	r1, [r7, #0]
 8005110:	4618      	mov	r0, r3
 8005112:	f000 fc0b 	bl	800592c <PrintXY>
		PrintXY(x + 1, y + 2);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	1c5a      	adds	r2, r3, #1
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	3302      	adds	r3, #2
 800511e:	4619      	mov	r1, r3
 8005120:	4610      	mov	r0, r2
 8005122:	f000 fc03 	bl	800592c <PrintXY>
		PrintXY(x + 2, y + 1);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	1c9a      	adds	r2, r3, #2
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	3301      	adds	r3, #1
 800512e:	4619      	mov	r1, r3
 8005130:	4610      	mov	r0, r2
 8005132:	f000 fbfb 	bl	800592c <PrintXY>
		break;
 8005136:	e073      	b.n	8005220 <PrintNextPiece+0x5b0>
	}
	case 15:
	{
		PrintXY(x + 1, y + 1);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	3301      	adds	r3, #1
 8005140:	4619      	mov	r1, r3
 8005142:	4610      	mov	r0, r2
 8005144:	f000 fbf2 	bl	800592c <PrintXY>
		PrintXY(x, y + 1);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	3301      	adds	r3, #1
 800514c:	4619      	mov	r1, r3
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fbec 	bl	800592c <PrintXY>
		PrintXY(x + 1, y);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3301      	adds	r3, #1
 8005158:	6839      	ldr	r1, [r7, #0]
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fbe6 	bl	800592c <PrintXY>
		PrintXY(x + 2, y + 1);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	1c9a      	adds	r2, r3, #2
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	3301      	adds	r3, #1
 8005168:	4619      	mov	r1, r3
 800516a:	4610      	mov	r0, r2
 800516c:	f000 fbde 	bl	800592c <PrintXY>
		break;
 8005170:	e056      	b.n	8005220 <PrintNextPiece+0x5b0>
	}
	case 16:
	{
		PrintXY(x + 1, y + 1);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	3301      	adds	r3, #1
 800517a:	4619      	mov	r1, r3
 800517c:	4610      	mov	r0, r2
 800517e:	f000 fbd5 	bl	800592c <PrintXY>
		PrintXY(x + 1, y);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3301      	adds	r3, #1
 8005186:	6839      	ldr	r1, [r7, #0]
 8005188:	4618      	mov	r0, r3
 800518a:	f000 fbcf 	bl	800592c <PrintXY>
		PrintXY(x + 1, y + 2);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	3302      	adds	r3, #2
 8005196:	4619      	mov	r1, r3
 8005198:	4610      	mov	r0, r2
 800519a:	f000 fbc7 	bl	800592c <PrintXY>
		PrintXY(x, y + 1);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	3301      	adds	r3, #1
 80051a2:	4619      	mov	r1, r3
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fbc1 	bl	800592c <PrintXY>
		break;
 80051aa:	e039      	b.n	8005220 <PrintNextPiece+0x5b0>
	}
	case 17:
	{
		PrintXY(x + 1, y + 1);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	3301      	adds	r3, #1
 80051b4:	4619      	mov	r1, r3
 80051b6:	4610      	mov	r0, r2
 80051b8:	f000 fbb8 	bl	800592c <PrintXY>
		PrintXY(x, y + 1);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	3301      	adds	r3, #1
 80051c0:	4619      	mov	r1, r3
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fbb2 	bl	800592c <PrintXY>
		PrintXY(x + 1, y + 2);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	3302      	adds	r3, #2
 80051d0:	4619      	mov	r1, r3
 80051d2:	4610      	mov	r0, r2
 80051d4:	f000 fbaa 	bl	800592c <PrintXY>
		PrintXY(x + 2, y + 2);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	1c9a      	adds	r2, r3, #2
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	3302      	adds	r3, #2
 80051e0:	4619      	mov	r1, r3
 80051e2:	4610      	mov	r0, r2
 80051e4:	f000 fba2 	bl	800592c <PrintXY>
		break;
 80051e8:	e01a      	b.n	8005220 <PrintNextPiece+0x5b0>
	}
	case 18:
	{
		PrintXY(x + 1, y + 1);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	1c5a      	adds	r2, r3, #1
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	3301      	adds	r3, #1
 80051f2:	4619      	mov	r1, r3
 80051f4:	4610      	mov	r0, r2
 80051f6:	f000 fb99 	bl	800592c <PrintXY>
		PrintXY(x + 1, y);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	3301      	adds	r3, #1
 80051fe:	6839      	ldr	r1, [r7, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f000 fb93 	bl	800592c <PrintXY>
		PrintXY(x, y + 1);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	3301      	adds	r3, #1
 800520a:	4619      	mov	r1, r3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fb8d 	bl	800592c <PrintXY>
		PrintXY(x, y + 2);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	3302      	adds	r3, #2
 8005216:	4619      	mov	r1, r3
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fb87 	bl	800592c <PrintXY>
		break;
 800521e:	bf00      	nop
	}
	}
}
 8005220:	bf00      	nop
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800522c:	f002 f918 	bl	8007460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005230:	f000 f824 	bl	800527c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialise all configured peripherals */
  MX_GPIO_Init();
 8005234:	f000 fa2e 	bl	8005694 <MX_GPIO_Init>
  MX_LTDC_Init();
 8005238:	f000 f916 	bl	8005468 <MX_LTDC_Init>
  MX_FMC_Init();
 800523c:	f000 f9dc 	bl	80055f8 <MX_FMC_Init>
  MX_SPI1_Init();
 8005240:	f000 f9a4 	bl	800558c <MX_SPI1_Init>
  MX_DMA2D_Init();
 8005244:	f000 f89e 	bl	8005384 <MX_DMA2D_Init>
  MX_I2C1_Init();
 8005248:	f000 f8ce 	bl	80053e8 <MX_I2C1_Init>
  MX_RNG_Init();
 800524c:	f000 f98a 	bl	8005564 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  HAL_RNG_Init(&hrng);
 8005250:	4809      	ldr	r0, [pc, #36]	@ (8005278 <main+0x50>)
 8005252:	f004 fcab 	bl	8009bac <HAL_RNG_Init>
  BSP_LCD_Init();
 8005256:	f001 fa95 	bl	8006784 <BSP_LCD_Init>
  BSP_LCD_MspInit();
 800525a:	f001 fd49 	bl	8006cf0 <BSP_LCD_MspInit>
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER);
 800525e:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8005262:	2000      	movs	r0, #0
 8005264:	f001 fb10 	bl	8006888 <BSP_LCD_LayerDefaultInit>

  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8005268:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800526c:	f001 fbbc 	bl	80069e8 <BSP_LCD_Clear>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  Snake_main();`
	  TETRIS_main();
 8005270:	f7fb fbce 	bl	8000a10 <TETRIS_main>
 8005274:	e7fc      	b.n	8005270 <main+0x48>
 8005276:	bf00      	nop
 8005278:	20000ff0 	.word	0x20000ff0

0800527c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b0a0      	sub	sp, #128	@ 0x80
 8005280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005282:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005286:	2230      	movs	r2, #48	@ 0x30
 8005288:	2100      	movs	r1, #0
 800528a:	4618      	mov	r0, r3
 800528c:	f005 fcd1 	bl	800ac32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005290:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005294:	2200      	movs	r2, #0
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	605a      	str	r2, [r3, #4]
 800529a:	609a      	str	r2, [r3, #8]
 800529c:	60da      	str	r2, [r3, #12]
 800529e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80052a0:	f107 030c 	add.w	r3, r7, #12
 80052a4:	2230      	movs	r2, #48	@ 0x30
 80052a6:	2100      	movs	r1, #0
 80052a8:	4618      	mov	r0, r3
 80052aa:	f005 fcc2 	bl	800ac32 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80052ae:	2300      	movs	r3, #0
 80052b0:	60bb      	str	r3, [r7, #8]
 80052b2:	4b32      	ldr	r3, [pc, #200]	@ (800537c <SystemClock_Config+0x100>)
 80052b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b6:	4a31      	ldr	r2, [pc, #196]	@ (800537c <SystemClock_Config+0x100>)
 80052b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80052be:	4b2f      	ldr	r3, [pc, #188]	@ (800537c <SystemClock_Config+0x100>)
 80052c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052c6:	60bb      	str	r3, [r7, #8]
 80052c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80052ca:	2300      	movs	r3, #0
 80052cc:	607b      	str	r3, [r7, #4]
 80052ce:	4b2c      	ldr	r3, [pc, #176]	@ (8005380 <SystemClock_Config+0x104>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80052d6:	4a2a      	ldr	r2, [pc, #168]	@ (8005380 <SystemClock_Config+0x104>)
 80052d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	4b28      	ldr	r3, [pc, #160]	@ (8005380 <SystemClock_Config+0x104>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80052e6:	607b      	str	r3, [r7, #4]
 80052e8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80052ea:	2302      	movs	r3, #2
 80052ec:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80052ee:	2301      	movs	r3, #1
 80052f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80052f2:	2310      	movs	r3, #16
 80052f4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80052f6:	2302      	movs	r3, #2
 80052f8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80052fa:	2300      	movs	r3, #0
 80052fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80052fe:	2308      	movs	r3, #8
 8005300:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 8005302:	2348      	movs	r3, #72	@ 0x48
 8005304:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005306:	2302      	movs	r3, #2
 8005308:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800530a:	2303      	movs	r3, #3
 800530c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800530e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005312:	4618      	mov	r0, r3
 8005314:	f003 fe10 	bl	8008f38 <HAL_RCC_OscConfig>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800531e:	f000 fb77 	bl	8005a10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005322:	230f      	movs	r3, #15
 8005324:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005326:	2302      	movs	r3, #2
 8005328:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800532a:	2300      	movs	r3, #0
 800532c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800532e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005332:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005334:	2300      	movs	r3, #0
 8005336:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005338:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800533c:	2102      	movs	r1, #2
 800533e:	4618      	mov	r0, r3
 8005340:	f004 f868 	bl	8009414 <HAL_RCC_ClockConfig>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800534a:	f000 fb61 	bl	8005a10 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800534e:	2308      	movs	r3, #8
 8005350:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8005352:	2332      	movs	r3, #50	@ 0x32
 8005354:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8005356:	2302      	movs	r3, #2
 8005358:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800535a:	2300      	movs	r3, #0
 800535c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800535e:	f107 030c 	add.w	r3, r7, #12
 8005362:	4618      	mov	r0, r3
 8005364:	f004 fa62 	bl	800982c <HAL_RCCEx_PeriphCLKConfig>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800536e:	f000 fb4f 	bl	8005a10 <Error_Handler>
  }
}
 8005372:	bf00      	nop
 8005374:	3780      	adds	r7, #128	@ 0x80
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	40023800 	.word	0x40023800
 8005380:	40007000 	.word	0x40007000

08005384 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8005388:	4b15      	ldr	r3, [pc, #84]	@ (80053e0 <MX_DMA2D_Init+0x5c>)
 800538a:	4a16      	ldr	r2, [pc, #88]	@ (80053e4 <MX_DMA2D_Init+0x60>)
 800538c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800538e:	4b14      	ldr	r3, [pc, #80]	@ (80053e0 <MX_DMA2D_Init+0x5c>)
 8005390:	2200      	movs	r2, #0
 8005392:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8005394:	4b12      	ldr	r3, [pc, #72]	@ (80053e0 <MX_DMA2D_Init+0x5c>)
 8005396:	2200      	movs	r2, #0
 8005398:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800539a:	4b11      	ldr	r3, [pc, #68]	@ (80053e0 <MX_DMA2D_Init+0x5c>)
 800539c:	2200      	movs	r2, #0
 800539e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80053a0:	4b0f      	ldr	r3, [pc, #60]	@ (80053e0 <MX_DMA2D_Init+0x5c>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80053a6:	4b0e      	ldr	r3, [pc, #56]	@ (80053e0 <MX_DMA2D_Init+0x5c>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80053ac:	4b0c      	ldr	r3, [pc, #48]	@ (80053e0 <MX_DMA2D_Init+0x5c>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80053b2:	4b0b      	ldr	r3, [pc, #44]	@ (80053e0 <MX_DMA2D_Init+0x5c>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80053b8:	4809      	ldr	r0, [pc, #36]	@ (80053e0 <MX_DMA2D_Init+0x5c>)
 80053ba:	f002 fbb7 	bl	8007b2c <HAL_DMA2D_Init>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80053c4:	f000 fb24 	bl	8005a10 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80053c8:	2101      	movs	r1, #1
 80053ca:	4805      	ldr	r0, [pc, #20]	@ (80053e0 <MX_DMA2D_Init+0x5c>)
 80053cc:	f002 fd0c 	bl	8007de8 <HAL_DMA2D_ConfigLayer>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80053d6:	f000 fb1b 	bl	8005a10 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80053da:	bf00      	nop
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	20000eb4 	.word	0x20000eb4
 80053e4:	4002b000 	.word	0x4002b000

080053e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80053ec:	4b1b      	ldr	r3, [pc, #108]	@ (800545c <MX_I2C1_Init+0x74>)
 80053ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005460 <MX_I2C1_Init+0x78>)
 80053f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80053f2:	4b1a      	ldr	r3, [pc, #104]	@ (800545c <MX_I2C1_Init+0x74>)
 80053f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005464 <MX_I2C1_Init+0x7c>)
 80053f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80053f8:	4b18      	ldr	r3, [pc, #96]	@ (800545c <MX_I2C1_Init+0x74>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80053fe:	4b17      	ldr	r3, [pc, #92]	@ (800545c <MX_I2C1_Init+0x74>)
 8005400:	2200      	movs	r2, #0
 8005402:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005404:	4b15      	ldr	r3, [pc, #84]	@ (800545c <MX_I2C1_Init+0x74>)
 8005406:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800540a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800540c:	4b13      	ldr	r3, [pc, #76]	@ (800545c <MX_I2C1_Init+0x74>)
 800540e:	2200      	movs	r2, #0
 8005410:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005412:	4b12      	ldr	r3, [pc, #72]	@ (800545c <MX_I2C1_Init+0x74>)
 8005414:	2200      	movs	r2, #0
 8005416:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005418:	4b10      	ldr	r3, [pc, #64]	@ (800545c <MX_I2C1_Init+0x74>)
 800541a:	2200      	movs	r2, #0
 800541c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800541e:	4b0f      	ldr	r3, [pc, #60]	@ (800545c <MX_I2C1_Init+0x74>)
 8005420:	2200      	movs	r2, #0
 8005422:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005424:	480d      	ldr	r0, [pc, #52]	@ (800545c <MX_I2C1_Init+0x74>)
 8005426:	f003 f8f7 	bl	8008618 <HAL_I2C_Init>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005430:	f000 faee 	bl	8005a10 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005434:	2100      	movs	r1, #0
 8005436:	4809      	ldr	r0, [pc, #36]	@ (800545c <MX_I2C1_Init+0x74>)
 8005438:	f003 fa32 	bl	80088a0 <HAL_I2CEx_ConfigAnalogFilter>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8005442:	f000 fae5 	bl	8005a10 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005446:	2100      	movs	r1, #0
 8005448:	4804      	ldr	r0, [pc, #16]	@ (800545c <MX_I2C1_Init+0x74>)
 800544a:	f003 fa65 	bl	8008918 <HAL_I2CEx_ConfigDigitalFilter>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8005454:	f000 fadc 	bl	8005a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005458:	bf00      	nop
 800545a:	bd80      	pop	{r7, pc}
 800545c:	20000ef4 	.word	0x20000ef4
 8005460:	40005400 	.word	0x40005400
 8005464:	000186a0 	.word	0x000186a0

08005468 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08e      	sub	sp, #56	@ 0x38
 800546c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800546e:	1d3b      	adds	r3, r7, #4
 8005470:	2234      	movs	r2, #52	@ 0x34
 8005472:	2100      	movs	r1, #0
 8005474:	4618      	mov	r0, r3
 8005476:	f005 fbdc 	bl	800ac32 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800547a:	4b38      	ldr	r3, [pc, #224]	@ (800555c <MX_LTDC_Init+0xf4>)
 800547c:	4a38      	ldr	r2, [pc, #224]	@ (8005560 <MX_LTDC_Init+0xf8>)
 800547e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005480:	4b36      	ldr	r3, [pc, #216]	@ (800555c <MX_LTDC_Init+0xf4>)
 8005482:	2200      	movs	r2, #0
 8005484:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8005486:	4b35      	ldr	r3, [pc, #212]	@ (800555c <MX_LTDC_Init+0xf4>)
 8005488:	2200      	movs	r2, #0
 800548a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800548c:	4b33      	ldr	r3, [pc, #204]	@ (800555c <MX_LTDC_Init+0xf4>)
 800548e:	2200      	movs	r2, #0
 8005490:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005492:	4b32      	ldr	r3, [pc, #200]	@ (800555c <MX_LTDC_Init+0xf4>)
 8005494:	2200      	movs	r2, #0
 8005496:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8005498:	4b30      	ldr	r3, [pc, #192]	@ (800555c <MX_LTDC_Init+0xf4>)
 800549a:	2207      	movs	r2, #7
 800549c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800549e:	4b2f      	ldr	r3, [pc, #188]	@ (800555c <MX_LTDC_Init+0xf4>)
 80054a0:	2203      	movs	r2, #3
 80054a2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80054a4:	4b2d      	ldr	r3, [pc, #180]	@ (800555c <MX_LTDC_Init+0xf4>)
 80054a6:	220e      	movs	r2, #14
 80054a8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80054aa:	4b2c      	ldr	r3, [pc, #176]	@ (800555c <MX_LTDC_Init+0xf4>)
 80054ac:	2205      	movs	r2, #5
 80054ae:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80054b0:	4b2a      	ldr	r3, [pc, #168]	@ (800555c <MX_LTDC_Init+0xf4>)
 80054b2:	f240 228e 	movw	r2, #654	@ 0x28e
 80054b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80054b8:	4b28      	ldr	r3, [pc, #160]	@ (800555c <MX_LTDC_Init+0xf4>)
 80054ba:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80054be:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80054c0:	4b26      	ldr	r3, [pc, #152]	@ (800555c <MX_LTDC_Init+0xf4>)
 80054c2:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80054c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80054c8:	4b24      	ldr	r3, [pc, #144]	@ (800555c <MX_LTDC_Init+0xf4>)
 80054ca:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80054ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80054d0:	4b22      	ldr	r3, [pc, #136]	@ (800555c <MX_LTDC_Init+0xf4>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80054d8:	4b20      	ldr	r3, [pc, #128]	@ (800555c <MX_LTDC_Init+0xf4>)
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80054e0:	4b1e      	ldr	r3, [pc, #120]	@ (800555c <MX_LTDC_Init+0xf4>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80054e8:	481c      	ldr	r0, [pc, #112]	@ (800555c <MX_LTDC_Init+0xf4>)
 80054ea:	f003 fa55 	bl	8008998 <HAL_LTDC_Init>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80054f4:	f000 fa8c 	bl	8005a10 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80054f8:	2300      	movs	r3, #0
 80054fa:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 0;
 80054fc:	2300      	movs	r3, #0
 80054fe:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8005500:	2300      	movs	r3, #0
 8005502:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 0;
 8005504:	2300      	movs	r3, #0
 8005506:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8005508:	2302      	movs	r3, #2
 800550a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800550c:	23ff      	movs	r3, #255	@ 0xff
 800550e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 255;
 8005510:	23ff      	movs	r3, #255	@ 0xff
 8005512:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8005514:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8005518:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800551a:	2307      	movs	r3, #7
 800551c:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 800551e:	2300      	movs	r3, #0
 8005520:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 8005522:	2300      	movs	r3, #0
 8005524:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 8005526:	2300      	movs	r3, #0
 8005528:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800552a:	2300      	movs	r3, #0
 800552c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8005530:	2300      	movs	r3, #0
 8005532:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8005536:	2300      	movs	r3, #0
 8005538:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800553c:	1d3b      	adds	r3, r7, #4
 800553e:	2200      	movs	r2, #0
 8005540:	4619      	mov	r1, r3
 8005542:	4806      	ldr	r0, [pc, #24]	@ (800555c <MX_LTDC_Init+0xf4>)
 8005544:	f003 faf8 	bl	8008b38 <HAL_LTDC_ConfigLayer>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <MX_LTDC_Init+0xea>
  {
    Error_Handler();
 800554e:	f000 fa5f 	bl	8005a10 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8005552:	bf00      	nop
 8005554:	3738      	adds	r7, #56	@ 0x38
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20000f48 	.word	0x20000f48
 8005560:	40016800 	.word	0x40016800

08005564 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8005568:	4b06      	ldr	r3, [pc, #24]	@ (8005584 <MX_RNG_Init+0x20>)
 800556a:	4a07      	ldr	r2, [pc, #28]	@ (8005588 <MX_RNG_Init+0x24>)
 800556c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800556e:	4805      	ldr	r0, [pc, #20]	@ (8005584 <MX_RNG_Init+0x20>)
 8005570:	f004 fb1c 	bl	8009bac <HAL_RNG_Init>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800557a:	f000 fa49 	bl	8005a10 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800557e:	bf00      	nop
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	20000ff0 	.word	0x20000ff0
 8005588:	50060800 	.word	0x50060800

0800558c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005590:	4b17      	ldr	r3, [pc, #92]	@ (80055f0 <MX_SPI1_Init+0x64>)
 8005592:	4a18      	ldr	r2, [pc, #96]	@ (80055f4 <MX_SPI1_Init+0x68>)
 8005594:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005596:	4b16      	ldr	r3, [pc, #88]	@ (80055f0 <MX_SPI1_Init+0x64>)
 8005598:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800559c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800559e:	4b14      	ldr	r3, [pc, #80]	@ (80055f0 <MX_SPI1_Init+0x64>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80055a4:	4b12      	ldr	r3, [pc, #72]	@ (80055f0 <MX_SPI1_Init+0x64>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80055aa:	4b11      	ldr	r3, [pc, #68]	@ (80055f0 <MX_SPI1_Init+0x64>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80055b0:	4b0f      	ldr	r3, [pc, #60]	@ (80055f0 <MX_SPI1_Init+0x64>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80055b6:	4b0e      	ldr	r3, [pc, #56]	@ (80055f0 <MX_SPI1_Init+0x64>)
 80055b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055be:	4b0c      	ldr	r3, [pc, #48]	@ (80055f0 <MX_SPI1_Init+0x64>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80055c4:	4b0a      	ldr	r3, [pc, #40]	@ (80055f0 <MX_SPI1_Init+0x64>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80055ca:	4b09      	ldr	r3, [pc, #36]	@ (80055f0 <MX_SPI1_Init+0x64>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055d0:	4b07      	ldr	r3, [pc, #28]	@ (80055f0 <MX_SPI1_Init+0x64>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80055d6:	4b06      	ldr	r3, [pc, #24]	@ (80055f0 <MX_SPI1_Init+0x64>)
 80055d8:	220a      	movs	r2, #10
 80055da:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80055dc:	4804      	ldr	r0, [pc, #16]	@ (80055f0 <MX_SPI1_Init+0x64>)
 80055de:	f004 fc5d 	bl	8009e9c <HAL_SPI_Init>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80055e8:	f000 fa12 	bl	8005a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80055ec:	bf00      	nop
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	20001000 	.word	0x20001000
 80055f4:	40013000 	.word	0x40013000

080055f8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b088      	sub	sp, #32
 80055fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80055fe:	1d3b      	adds	r3, r7, #4
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	605a      	str	r2, [r3, #4]
 8005606:	609a      	str	r2, [r3, #8]
 8005608:	60da      	str	r2, [r3, #12]
 800560a:	611a      	str	r2, [r3, #16]
 800560c:	615a      	str	r2, [r3, #20]
 800560e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8005610:	4b1e      	ldr	r3, [pc, #120]	@ (800568c <MX_FMC_Init+0x94>)
 8005612:	4a1f      	ldr	r2, [pc, #124]	@ (8005690 <MX_FMC_Init+0x98>)
 8005614:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8005616:	4b1d      	ldr	r3, [pc, #116]	@ (800568c <MX_FMC_Init+0x94>)
 8005618:	2200      	movs	r2, #0
 800561a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800561c:	4b1b      	ldr	r3, [pc, #108]	@ (800568c <MX_FMC_Init+0x94>)
 800561e:	2200      	movs	r2, #0
 8005620:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8005622:	4b1a      	ldr	r3, [pc, #104]	@ (800568c <MX_FMC_Init+0x94>)
 8005624:	2200      	movs	r2, #0
 8005626:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_8;
 8005628:	4b18      	ldr	r3, [pc, #96]	@ (800568c <MX_FMC_Init+0x94>)
 800562a:	2200      	movs	r2, #0
 800562c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800562e:	4b17      	ldr	r3, [pc, #92]	@ (800568c <MX_FMC_Init+0x94>)
 8005630:	2240      	movs	r2, #64	@ 0x40
 8005632:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8005634:	4b15      	ldr	r3, [pc, #84]	@ (800568c <MX_FMC_Init+0x94>)
 8005636:	2280      	movs	r2, #128	@ 0x80
 8005638:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800563a:	4b14      	ldr	r3, [pc, #80]	@ (800568c <MX_FMC_Init+0x94>)
 800563c:	2200      	movs	r2, #0
 800563e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8005640:	4b12      	ldr	r3, [pc, #72]	@ (800568c <MX_FMC_Init+0x94>)
 8005642:	2200      	movs	r2, #0
 8005644:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8005646:	4b11      	ldr	r3, [pc, #68]	@ (800568c <MX_FMC_Init+0x94>)
 8005648:	2200      	movs	r2, #0
 800564a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800564c:	4b0f      	ldr	r3, [pc, #60]	@ (800568c <MX_FMC_Init+0x94>)
 800564e:	2200      	movs	r2, #0
 8005650:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8005652:	2310      	movs	r3, #16
 8005654:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8005656:	2310      	movs	r3, #16
 8005658:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800565a:	2310      	movs	r3, #16
 800565c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800565e:	2310      	movs	r3, #16
 8005660:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8005662:	2310      	movs	r3, #16
 8005664:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8005666:	2310      	movs	r3, #16
 8005668:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800566a:	2310      	movs	r3, #16
 800566c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800566e:	1d3b      	adds	r3, r7, #4
 8005670:	4619      	mov	r1, r3
 8005672:	4806      	ldr	r0, [pc, #24]	@ (800568c <MX_FMC_Init+0x94>)
 8005674:	f004 fb93 	bl	8009d9e <HAL_SDRAM_Init>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800567e:	f000 f9c7 	bl	8005a10 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8005682:	bf00      	nop
 8005684:	3720      	adds	r7, #32
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20001058 	.word	0x20001058
 8005690:	a0000140 	.word	0xa0000140

08005694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b08c      	sub	sp, #48	@ 0x30
 8005698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800569a:	f107 031c 	add.w	r3, r7, #28
 800569e:	2200      	movs	r2, #0
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	605a      	str	r2, [r3, #4]
 80056a4:	609a      	str	r2, [r3, #8]
 80056a6:	60da      	str	r2, [r3, #12]
 80056a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80056aa:	2300      	movs	r3, #0
 80056ac:	61bb      	str	r3, [r7, #24]
 80056ae:	4b4f      	ldr	r3, [pc, #316]	@ (80057ec <MX_GPIO_Init+0x158>)
 80056b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b2:	4a4e      	ldr	r2, [pc, #312]	@ (80057ec <MX_GPIO_Init+0x158>)
 80056b4:	f043 0320 	orr.w	r3, r3, #32
 80056b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80056ba:	4b4c      	ldr	r3, [pc, #304]	@ (80057ec <MX_GPIO_Init+0x158>)
 80056bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056be:	f003 0320 	and.w	r3, r3, #32
 80056c2:	61bb      	str	r3, [r7, #24]
 80056c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80056c6:	2300      	movs	r3, #0
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	4b48      	ldr	r3, [pc, #288]	@ (80057ec <MX_GPIO_Init+0x158>)
 80056cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ce:	4a47      	ldr	r2, [pc, #284]	@ (80057ec <MX_GPIO_Init+0x158>)
 80056d0:	f043 0304 	orr.w	r3, r3, #4
 80056d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80056d6:	4b45      	ldr	r3, [pc, #276]	@ (80057ec <MX_GPIO_Init+0x158>)
 80056d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056da:	f003 0304 	and.w	r3, r3, #4
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80056e2:	2300      	movs	r3, #0
 80056e4:	613b      	str	r3, [r7, #16]
 80056e6:	4b41      	ldr	r3, [pc, #260]	@ (80057ec <MX_GPIO_Init+0x158>)
 80056e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ea:	4a40      	ldr	r2, [pc, #256]	@ (80057ec <MX_GPIO_Init+0x158>)
 80056ec:	f043 0301 	orr.w	r3, r3, #1
 80056f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80056f2:	4b3e      	ldr	r3, [pc, #248]	@ (80057ec <MX_GPIO_Init+0x158>)
 80056f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	613b      	str	r3, [r7, #16]
 80056fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80056fe:	2300      	movs	r3, #0
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	4b3a      	ldr	r3, [pc, #232]	@ (80057ec <MX_GPIO_Init+0x158>)
 8005704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005706:	4a39      	ldr	r2, [pc, #228]	@ (80057ec <MX_GPIO_Init+0x158>)
 8005708:	f043 0302 	orr.w	r3, r3, #2
 800570c:	6313      	str	r3, [r2, #48]	@ 0x30
 800570e:	4b37      	ldr	r3, [pc, #220]	@ (80057ec <MX_GPIO_Init+0x158>)
 8005710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800571a:	2300      	movs	r3, #0
 800571c:	60bb      	str	r3, [r7, #8]
 800571e:	4b33      	ldr	r3, [pc, #204]	@ (80057ec <MX_GPIO_Init+0x158>)
 8005720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005722:	4a32      	ldr	r2, [pc, #200]	@ (80057ec <MX_GPIO_Init+0x158>)
 8005724:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005728:	6313      	str	r3, [r2, #48]	@ 0x30
 800572a:	4b30      	ldr	r3, [pc, #192]	@ (80057ec <MX_GPIO_Init+0x158>)
 800572c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005732:	60bb      	str	r3, [r7, #8]
 8005734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005736:	2300      	movs	r3, #0
 8005738:	607b      	str	r3, [r7, #4]
 800573a:	4b2c      	ldr	r3, [pc, #176]	@ (80057ec <MX_GPIO_Init+0x158>)
 800573c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573e:	4a2b      	ldr	r2, [pc, #172]	@ (80057ec <MX_GPIO_Init+0x158>)
 8005740:	f043 0310 	orr.w	r3, r3, #16
 8005744:	6313      	str	r3, [r2, #48]	@ 0x30
 8005746:	4b29      	ldr	r3, [pc, #164]	@ (80057ec <MX_GPIO_Init+0x158>)
 8005748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800574a:	f003 0310 	and.w	r3, r3, #16
 800574e:	607b      	str	r3, [r7, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005752:	2300      	movs	r3, #0
 8005754:	603b      	str	r3, [r7, #0]
 8005756:	4b25      	ldr	r3, [pc, #148]	@ (80057ec <MX_GPIO_Init+0x158>)
 8005758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575a:	4a24      	ldr	r2, [pc, #144]	@ (80057ec <MX_GPIO_Init+0x158>)
 800575c:	f043 0308 	orr.w	r3, r3, #8
 8005760:	6313      	str	r3, [r2, #48]	@ 0x30
 8005762:	4b22      	ldr	r3, [pc, #136]	@ (80057ec <MX_GPIO_Init+0x158>)
 8005764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005766:	f003 0308 	and.w	r3, r3, #8
 800576a:	603b      	str	r3, [r7, #0]
 800576c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800576e:	2301      	movs	r3, #1
 8005770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005772:	2300      	movs	r3, #0
 8005774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005776:	2300      	movs	r3, #0
 8005778:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800577a:	f107 031c 	add.w	r3, r7, #28
 800577e:	4619      	mov	r1, r3
 8005780:	481b      	ldr	r0, [pc, #108]	@ (80057f0 <MX_GPIO_Init+0x15c>)
 8005782:	f002 fc5f 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8005786:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800578a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800578c:	2300      	movs	r3, #0
 800578e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005790:	2301      	movs	r3, #1
 8005792:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005794:	f107 031c 	add.w	r3, r7, #28
 8005798:	4619      	mov	r1, r3
 800579a:	4816      	ldr	r0, [pc, #88]	@ (80057f4 <MX_GPIO_Init+0x160>)
 800579c:	f002 fc52 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8 |GPIO_PIN_9;
 80057a0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80057a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057a6:	2300      	movs	r3, #0
 80057a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80057aa:	2301      	movs	r3, #1
 80057ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057ae:	f107 031c 	add.w	r3, r7, #28
 80057b2:	4619      	mov	r1, r3
 80057b4:	480e      	ldr	r0, [pc, #56]	@ (80057f0 <MX_GPIO_Init+0x15c>)
 80057b6:	f002 fc45 	bl	8008044 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 80057ba:	2200      	movs	r2, #0
 80057bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80057c0:	480d      	ldr	r0, [pc, #52]	@ (80057f8 <MX_GPIO_Init+0x164>)
 80057c2:	f002 ff0f 	bl	80085e4 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80057c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80057ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80057cc:	2301      	movs	r3, #1
 80057ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d0:	2300      	movs	r3, #0
 80057d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057d4:	2300      	movs	r3, #0
 80057d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80057d8:	f107 031c 	add.w	r3, r7, #28
 80057dc:	4619      	mov	r1, r3
 80057de:	4806      	ldr	r0, [pc, #24]	@ (80057f8 <MX_GPIO_Init+0x164>)
 80057e0:	f002 fc30 	bl	8008044 <HAL_GPIO_Init>


}
 80057e4:	bf00      	nop
 80057e6:	3730      	adds	r7, #48	@ 0x30
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	40023800 	.word	0x40023800
 80057f0:	40020000 	.word	0x40020000
 80057f4:	40020400 	.word	0x40020400
 80057f8:	40021800 	.word	0x40021800

080057fc <isUpKey>:

/* USER CODE BEGIN 4 */

int isUpKey() {
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET) {
 8005800:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005804:	4805      	ldr	r0, [pc, #20]	@ (800581c <isUpKey+0x20>)
 8005806:	f002 fed5 	bl	80085b4 <HAL_GPIO_ReadPin>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <isUpKey+0x18>
    	return 1;
 8005810:	2301      	movs	r3, #1
 8005812:	e000      	b.n	8005816 <isUpKey+0x1a>
    }
    else return 0;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	40020400 	.word	0x40020400

08005820 <isDownKey>:

int isDownKey() {
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8005824:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005828:	4805      	ldr	r0, [pc, #20]	@ (8005840 <isDownKey+0x20>)
 800582a:	f002 fec3 	bl	80085b4 <HAL_GPIO_ReadPin>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <isDownKey+0x18>
	    	return 1;
 8005834:	2301      	movs	r3, #1
 8005836:	e000      	b.n	800583a <isDownKey+0x1a>
	}
	    else return 0;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	40020400 	.word	0x40020400

08005844 <isLeftKey>:

int isLeftKey() {
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET) {
 8005848:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800584c:	4805      	ldr	r0, [pc, #20]	@ (8005864 <isLeftKey+0x20>)
 800584e:	f002 feb1 	bl	80085b4 <HAL_GPIO_ReadPin>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <isLeftKey+0x18>
	    return 1;
 8005858:	2301      	movs	r3, #1
 800585a:	e000      	b.n	800585e <isLeftKey+0x1a>
	}
	else return 0;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	40020000 	.word	0x40020000

08005868 <isRightKey>:

int isRightKey() {
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_RESET) {
 800586c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005870:	4805      	ldr	r0, [pc, #20]	@ (8005888 <isRightKey+0x20>)
 8005872:	f002 fe9f 	bl	80085b4 <HAL_GPIO_ReadPin>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <isRightKey+0x18>
    	return 1;
 800587c:	2301      	movs	r3, #1
 800587e:	e000      	b.n	8005882 <isRightKey+0x1a>
	}
	    else return 0;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	40020000 	.word	0x40020000

0800588c <Random>:

int Random(int n) // Generate a random number
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
	HAL_RNG_Init(&hrng);
 8005894:	480e      	ldr	r0, [pc, #56]	@ (80058d0 <Random+0x44>)
 8005896:	f004 f989 	bl	8009bac <HAL_RNG_Init>
	HAL_RNG_MspInit(&hrng);
 800589a:	480d      	ldr	r0, [pc, #52]	@ (80058d0 <Random+0x44>)
 800589c:	f000 fa5e 	bl	8005d5c <HAL_RNG_MspInit>
	HAL_RNG_GenerateRandomNumber(&hrng, (uint32_t *) seed);
 80058a0:	4b0c      	ldr	r3, [pc, #48]	@ (80058d4 <Random+0x48>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4619      	mov	r1, r3
 80058a6:	480a      	ldr	r0, [pc, #40]	@ (80058d0 <Random+0x44>)
 80058a8:	f004 f9aa 	bl	8009c00 <HAL_RNG_GenerateRandomNumber>
	randomNum = HAL_RNG_GetRandomNumber(&hrng);
 80058ac:	4808      	ldr	r0, [pc, #32]	@ (80058d0 <Random+0x44>)
 80058ae:	f004 f9f6 	bl	8009c9e <HAL_RNG_GetRandomNumber>
 80058b2:	4603      	mov	r3, r0
 80058b4:	4a08      	ldr	r2, [pc, #32]	@ (80058d8 <Random+0x4c>)
 80058b6:	6013      	str	r3, [r2, #0]
	return randomNum % n;
 80058b8:	4b07      	ldr	r3, [pc, #28]	@ (80058d8 <Random+0x4c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	fbb3 f1f2 	udiv	r1, r3, r2
 80058c2:	fb01 f202 	mul.w	r2, r1, r2
 80058c6:	1a9b      	subs	r3, r3, r2
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3708      	adds	r7, #8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	20000ff0 	.word	0x20000ff0
 80058d4:	20000014 	.word	0x20000014
 80058d8:	20001094 	.word	0x20001094

080058dc <isAnyKeyPressed>:

int isAnyKeyPressed() {
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
	if (isUpKey() == 1) return 1;
 80058e0:	f7ff ff8c 	bl	80057fc <isUpKey>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d101      	bne.n	80058ee <isAnyKeyPressed+0x12>
 80058ea:	2301      	movs	r3, #1
 80058ec:	e01c      	b.n	8005928 <isAnyKeyPressed+0x4c>
	if (isDownKey() == 1) return 1;
 80058ee:	f7ff ff97 	bl	8005820 <isDownKey>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <isAnyKeyPressed+0x20>
 80058f8:	2301      	movs	r3, #1
 80058fa:	e015      	b.n	8005928 <isAnyKeyPressed+0x4c>
	if (isLeftKey() == 1) return 1;
 80058fc:	f7ff ffa2 	bl	8005844 <isLeftKey>
 8005900:	4603      	mov	r3, r0
 8005902:	2b01      	cmp	r3, #1
 8005904:	d101      	bne.n	800590a <isAnyKeyPressed+0x2e>
 8005906:	2301      	movs	r3, #1
 8005908:	e00e      	b.n	8005928 <isAnyKeyPressed+0x4c>
	if (isRightKey() == 1) return 1;
 800590a:	f7ff ffad 	bl	8005868 <isRightKey>
 800590e:	4603      	mov	r3, r0
 8005910:	2b01      	cmp	r3, #1
 8005912:	d101      	bne.n	8005918 <isAnyKeyPressed+0x3c>
 8005914:	2301      	movs	r3, #1
 8005916:	e007      	b.n	8005928 <isAnyKeyPressed+0x4c>
	if (isUSERKey() == 1) return 1;
 8005918:	f000 f86a 	bl	80059f0 <isUSERKey>
 800591c:	4603      	mov	r3, r0
 800591e:	2b01      	cmp	r3, #1
 8005920:	d101      	bne.n	8005926 <isAnyKeyPressed+0x4a>
 8005922:	2301      	movs	r3, #1
 8005924:	e000      	b.n	8005928 <isAnyKeyPressed+0x4c>
	return 0;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	bd80      	pop	{r7, pc}

0800592c <PrintXY>:

void PrintXY(int x, int y) {
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
	int loc_X, loc_Y;
	loc_X = PIXEL_SPACE + x * (PIXEL_SPACE + PIXEL_SIZE);
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	4613      	mov	r3, r2
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	4413      	add	r3, r2
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	3301      	adds	r3, #1
 8005942:	60fb      	str	r3, [r7, #12]
	loc_Y = PIXEL_SPACE + y * (PIXEL_SPACE + PIXEL_SIZE);
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	4613      	mov	r3, r2
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	4413      	add	r3, r2
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	3301      	adds	r3, #1
 8005950:	60bb      	str	r3, [r7, #8]

	BSP_LCD_FillRect(loc_X, loc_Y, PIXEL_SIZE, PIXEL_SIZE);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	b298      	uxth	r0, r3
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	b299      	uxth	r1, r3
 800595a:	2305      	movs	r3, #5
 800595c:	2205      	movs	r2, #5
 800595e:	f001 f96d 	bl	8006c3c <BSP_LCD_FillRect>
}
 8005962:	bf00      	nop
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <Colour>:

void Colour(int n) {
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
	// 1 is bright red		2 is bright green		3 is bright blue
	// 4 is magenta			5 is bright yellow		6 is white
	switch (n) {
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b06      	cmp	r3, #6
 8005978:	d831      	bhi.n	80059de <Colour+0x72>
 800597a:	a201      	add	r2, pc, #4	@ (adr r2, 8005980 <Colour+0x14>)
 800597c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005980:	0800599d 	.word	0x0800599d
 8005984:	080059a7 	.word	0x080059a7
 8005988:	080059af 	.word	0x080059af
 800598c:	080059b9 	.word	0x080059b9
 8005990:	080059c1 	.word	0x080059c1
 8005994:	080059cb 	.word	0x080059cb
 8005998:	080059d5 	.word	0x080059d5
	case 0: { BSP_LCD_SetTextColor(LCD_COLOR_BLACK); break; }
 800599c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80059a0:	f000 ffd6 	bl	8006950 <BSP_LCD_SetTextColor>
 80059a4:	e01b      	b.n	80059de <Colour+0x72>
	case 1: { BSP_LCD_SetTextColor(LCD_COLOR_RED); break; }
 80059a6:	4810      	ldr	r0, [pc, #64]	@ (80059e8 <Colour+0x7c>)
 80059a8:	f000 ffd2 	bl	8006950 <BSP_LCD_SetTextColor>
 80059ac:	e017      	b.n	80059de <Colour+0x72>
	case 2: { BSP_LCD_SetTextColor(LCD_COLOR_GREEN); break; }
 80059ae:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 80059b2:	f000 ffcd 	bl	8006950 <BSP_LCD_SetTextColor>
 80059b6:	e012      	b.n	80059de <Colour+0x72>
	case 3: { BSP_LCD_SetTextColor(LCD_COLOR_BLUE); break; }
 80059b8:	480c      	ldr	r0, [pc, #48]	@ (80059ec <Colour+0x80>)
 80059ba:	f000 ffc9 	bl	8006950 <BSP_LCD_SetTextColor>
 80059be:	e00e      	b.n	80059de <Colour+0x72>
	case 4: { BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA); break; }
 80059c0:	f46f 407f 	mvn.w	r0, #65280	@ 0xff00
 80059c4:	f000 ffc4 	bl	8006950 <BSP_LCD_SetTextColor>
 80059c8:	e009      	b.n	80059de <Colour+0x72>
	case 5: { BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); break; }
 80059ca:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 80059ce:	f000 ffbf 	bl	8006950 <BSP_LCD_SetTextColor>
 80059d2:	e004      	b.n	80059de <Colour+0x72>
	case 6: { BSP_LCD_SetTextColor(LCD_COLOR_WHITE); break; }
 80059d4:	f04f 30ff 	mov.w	r0, #4294967295
 80059d8:	f000 ffba 	bl	8006950 <BSP_LCD_SetTextColor>
 80059dc:	bf00      	nop
	}
}
 80059de:	bf00      	nop
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	ffff0000 	.word	0xffff0000
 80059ec:	ff0000ff 	.word	0xff0000ff

080059f0 <isUSERKey>:

int isUSERKey() {
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) return 1;
 80059f4:	2101      	movs	r1, #1
 80059f6:	4805      	ldr	r0, [pc, #20]	@ (8005a0c <isUSERKey+0x1c>)
 80059f8:	f002 fddc 	bl	80085b4 <HAL_GPIO_ReadPin>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d101      	bne.n	8005a06 <isUSERKey+0x16>
 8005a02:	2301      	movs	r3, #1
 8005a04:	e000      	b.n	8005a08 <isUSERKey+0x18>
	else return 0;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	40020000 	.word	0x40020000

08005a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005a14:	b672      	cpsid	i
}
 8005a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005a18:	bf00      	nop
 8005a1a:	e7fd      	b.n	8005a18 <Error_Handler+0x8>

08005a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a22:	2300      	movs	r3, #0
 8005a24:	607b      	str	r3, [r7, #4]
 8005a26:	4b10      	ldr	r3, [pc, #64]	@ (8005a68 <HAL_MspInit+0x4c>)
 8005a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a2a:	4a0f      	ldr	r2, [pc, #60]	@ (8005a68 <HAL_MspInit+0x4c>)
 8005a2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a30:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a32:	4b0d      	ldr	r3, [pc, #52]	@ (8005a68 <HAL_MspInit+0x4c>)
 8005a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a3a:	607b      	str	r3, [r7, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a3e:	2300      	movs	r3, #0
 8005a40:	603b      	str	r3, [r7, #0]
 8005a42:	4b09      	ldr	r3, [pc, #36]	@ (8005a68 <HAL_MspInit+0x4c>)
 8005a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a46:	4a08      	ldr	r2, [pc, #32]	@ (8005a68 <HAL_MspInit+0x4c>)
 8005a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a4e:	4b06      	ldr	r3, [pc, #24]	@ (8005a68 <HAL_MspInit+0x4c>)
 8005a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a56:	603b      	str	r3, [r7, #0]
 8005a58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	40023800 	.word	0x40023800

08005a6c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a0b      	ldr	r2, [pc, #44]	@ (8005aa8 <HAL_DMA2D_MspInit+0x3c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d10d      	bne.n	8005a9a <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60fb      	str	r3, [r7, #12]
 8005a82:	4b0a      	ldr	r3, [pc, #40]	@ (8005aac <HAL_DMA2D_MspInit+0x40>)
 8005a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a86:	4a09      	ldr	r2, [pc, #36]	@ (8005aac <HAL_DMA2D_MspInit+0x40>)
 8005a88:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a8e:	4b07      	ldr	r3, [pc, #28]	@ (8005aac <HAL_DMA2D_MspInit+0x40>)
 8005a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8005a9a:	bf00      	nop
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	4002b000 	.word	0x4002b000
 8005aac:	40023800 	.word	0x40023800

08005ab0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b08a      	sub	sp, #40	@ 0x28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ab8:	f107 0314 	add.w	r3, r7, #20
 8005abc:	2200      	movs	r2, #0
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	605a      	str	r2, [r3, #4]
 8005ac2:	609a      	str	r2, [r3, #8]
 8005ac4:	60da      	str	r2, [r3, #12]
 8005ac6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a19      	ldr	r2, [pc, #100]	@ (8005b34 <HAL_I2C_MspInit+0x84>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d12b      	bne.n	8005b2a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	613b      	str	r3, [r7, #16]
 8005ad6:	4b18      	ldr	r3, [pc, #96]	@ (8005b38 <HAL_I2C_MspInit+0x88>)
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ada:	4a17      	ldr	r2, [pc, #92]	@ (8005b38 <HAL_I2C_MspInit+0x88>)
 8005adc:	f043 0302 	orr.w	r3, r3, #2
 8005ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ae2:	4b15      	ldr	r3, [pc, #84]	@ (8005b38 <HAL_I2C_MspInit+0x88>)
 8005ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	613b      	str	r3, [r7, #16]
 8005aec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005aee:	23c0      	movs	r3, #192	@ 0xc0
 8005af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005af2:	2312      	movs	r3, #18
 8005af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005af6:	2301      	movs	r3, #1
 8005af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005afa:	2303      	movs	r3, #3
 8005afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005afe:	2304      	movs	r3, #4
 8005b00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b02:	f107 0314 	add.w	r3, r7, #20
 8005b06:	4619      	mov	r1, r3
 8005b08:	480c      	ldr	r0, [pc, #48]	@ (8005b3c <HAL_I2C_MspInit+0x8c>)
 8005b0a:	f002 fa9b 	bl	8008044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	4b09      	ldr	r3, [pc, #36]	@ (8005b38 <HAL_I2C_MspInit+0x88>)
 8005b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b16:	4a08      	ldr	r2, [pc, #32]	@ (8005b38 <HAL_I2C_MspInit+0x88>)
 8005b18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b1e:	4b06      	ldr	r3, [pc, #24]	@ (8005b38 <HAL_I2C_MspInit+0x88>)
 8005b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005b2a:	bf00      	nop
 8005b2c:	3728      	adds	r7, #40	@ 0x28
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	40005400 	.word	0x40005400
 8005b38:	40023800 	.word	0x40023800
 8005b3c:	40020400 	.word	0x40020400

08005b40 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08e      	sub	sp, #56	@ 0x38
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	605a      	str	r2, [r3, #4]
 8005b52:	609a      	str	r2, [r3, #8]
 8005b54:	60da      	str	r2, [r3, #12]
 8005b56:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a77      	ldr	r2, [pc, #476]	@ (8005d3c <HAL_LTDC_MspInit+0x1fc>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	f040 80e8 	bne.w	8005d34 <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005b64:	2300      	movs	r3, #0
 8005b66:	623b      	str	r3, [r7, #32]
 8005b68:	4b75      	ldr	r3, [pc, #468]	@ (8005d40 <HAL_LTDC_MspInit+0x200>)
 8005b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b6c:	4a74      	ldr	r2, [pc, #464]	@ (8005d40 <HAL_LTDC_MspInit+0x200>)
 8005b6e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b72:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b74:	4b72      	ldr	r3, [pc, #456]	@ (8005d40 <HAL_LTDC_MspInit+0x200>)
 8005b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b7c:	623b      	str	r3, [r7, #32]
 8005b7e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005b80:	2300      	movs	r3, #0
 8005b82:	61fb      	str	r3, [r7, #28]
 8005b84:	4b6e      	ldr	r3, [pc, #440]	@ (8005d40 <HAL_LTDC_MspInit+0x200>)
 8005b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b88:	4a6d      	ldr	r2, [pc, #436]	@ (8005d40 <HAL_LTDC_MspInit+0x200>)
 8005b8a:	f043 0320 	orr.w	r3, r3, #32
 8005b8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b90:	4b6b      	ldr	r3, [pc, #428]	@ (8005d40 <HAL_LTDC_MspInit+0x200>)
 8005b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b94:	f003 0320 	and.w	r3, r3, #32
 8005b98:	61fb      	str	r3, [r7, #28]
 8005b9a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	61bb      	str	r3, [r7, #24]
 8005ba0:	4b67      	ldr	r3, [pc, #412]	@ (8005d40 <HAL_LTDC_MspInit+0x200>)
 8005ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba4:	4a66      	ldr	r2, [pc, #408]	@ (8005d40 <HAL_LTDC_MspInit+0x200>)
 8005ba6:	f043 0301 	orr.w	r3, r3, #1
 8005baa:	6313      	str	r3, [r2, #48]	@ 0x30
 8005bac:	4b64      	ldr	r3, [pc, #400]	@ (8005d40 <HAL_LTDC_MspInit+0x200>)
 8005bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	61bb      	str	r3, [r7, #24]
 8005bb6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bb8:	2300      	movs	r3, #0
 8005bba:	617b      	str	r3, [r7, #20]
 8005bbc:	4b60      	ldr	r3, [pc, #384]	@ (8005d40 <HAL_LTDC_MspInit+0x200>)
 8005bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc0:	4a5f      	ldr	r2, [pc, #380]	@ (8005d40 <HAL_LTDC_MspInit+0x200>)
 8005bc2:	f043 0302 	orr.w	r3, r3, #2
 8005bc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8005bc8:	4b5d      	ldr	r3, [pc, #372]	@ (8005d40 <HAL_LTDC_MspInit+0x200>)
 8005bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	617b      	str	r3, [r7, #20]
 8005bd2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	613b      	str	r3, [r7, #16]
 8005bd8:	4b59      	ldr	r3, [pc, #356]	@ (8005d40 <HAL_LTDC_MspInit+0x200>)
 8005bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bdc:	4a58      	ldr	r2, [pc, #352]	@ (8005d40 <HAL_LTDC_MspInit+0x200>)
 8005bde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005be2:	6313      	str	r3, [r2, #48]	@ 0x30
 8005be4:	4b56      	ldr	r3, [pc, #344]	@ (8005d40 <HAL_LTDC_MspInit+0x200>)
 8005be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bec:	613b      	str	r3, [r7, #16]
 8005bee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	4b52      	ldr	r3, [pc, #328]	@ (8005d40 <HAL_LTDC_MspInit+0x200>)
 8005bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf8:	4a51      	ldr	r2, [pc, #324]	@ (8005d40 <HAL_LTDC_MspInit+0x200>)
 8005bfa:	f043 0304 	orr.w	r3, r3, #4
 8005bfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c00:	4b4f      	ldr	r3, [pc, #316]	@ (8005d40 <HAL_LTDC_MspInit+0x200>)
 8005c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	60fb      	str	r3, [r7, #12]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	60bb      	str	r3, [r7, #8]
 8005c10:	4b4b      	ldr	r3, [pc, #300]	@ (8005d40 <HAL_LTDC_MspInit+0x200>)
 8005c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c14:	4a4a      	ldr	r2, [pc, #296]	@ (8005d40 <HAL_LTDC_MspInit+0x200>)
 8005c16:	f043 0308 	orr.w	r3, r3, #8
 8005c1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c1c:	4b48      	ldr	r3, [pc, #288]	@ (8005d40 <HAL_LTDC_MspInit+0x200>)
 8005c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c20:	f003 0308 	and.w	r3, r3, #8
 8005c24:	60bb      	str	r3, [r7, #8]
 8005c26:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005c28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c2e:	2302      	movs	r3, #2
 8005c30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c32:	2300      	movs	r3, #0
 8005c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c36:	2300      	movs	r3, #0
 8005c38:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005c3a:	230e      	movs	r3, #14
 8005c3c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c42:	4619      	mov	r1, r3
 8005c44:	483f      	ldr	r0, [pc, #252]	@ (8005d44 <HAL_LTDC_MspInit+0x204>)
 8005c46:	f002 f9fd 	bl	8008044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8005c4a:	f641 0358 	movw	r3, #6232	@ 0x1858
 8005c4e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c50:	2302      	movs	r3, #2
 8005c52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c54:	2300      	movs	r3, #0
 8005c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005c5c:	230e      	movs	r3, #14
 8005c5e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c64:	4619      	mov	r1, r3
 8005c66:	4838      	ldr	r0, [pc, #224]	@ (8005d48 <HAL_LTDC_MspInit+0x208>)
 8005c68:	f002 f9ec 	bl	8008044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c70:	2302      	movs	r3, #2
 8005c72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c74:	2300      	movs	r3, #0
 8005c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005c7c:	2309      	movs	r3, #9
 8005c7e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c84:	4619      	mov	r1, r3
 8005c86:	4831      	ldr	r0, [pc, #196]	@ (8005d4c <HAL_LTDC_MspInit+0x20c>)
 8005c88:	f002 f9dc 	bl	8008044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8005c8c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8005c90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c92:	2302      	movs	r3, #2
 8005c94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005c9e:	230e      	movs	r3, #14
 8005ca0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ca2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	4828      	ldr	r0, [pc, #160]	@ (8005d4c <HAL_LTDC_MspInit+0x20c>)
 8005caa:	f002 f9cb 	bl	8008044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8005cae:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8005cb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005cc0:	230e      	movs	r3, #14
 8005cc2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005cc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005cc8:	4619      	mov	r1, r3
 8005cca:	4821      	ldr	r0, [pc, #132]	@ (8005d50 <HAL_LTDC_MspInit+0x210>)
 8005ccc:	f002 f9ba 	bl	8008044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8005cd0:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8005cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005ce2:	230e      	movs	r3, #14
 8005ce4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ce6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005cea:	4619      	mov	r1, r3
 8005cec:	4819      	ldr	r0, [pc, #100]	@ (8005d54 <HAL_LTDC_MspInit+0x214>)
 8005cee:	f002 f9a9 	bl	8008044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8005cf2:	2348      	movs	r3, #72	@ 0x48
 8005cf4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005d02:	230e      	movs	r3, #14
 8005d04:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005d06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	4812      	ldr	r0, [pc, #72]	@ (8005d58 <HAL_LTDC_MspInit+0x218>)
 8005d0e:	f002 f999 	bl	8008044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8005d12:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005d16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d18:	2302      	movs	r3, #2
 8005d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d20:	2300      	movs	r3, #0
 8005d22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005d24:	2309      	movs	r3, #9
 8005d26:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005d28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4808      	ldr	r0, [pc, #32]	@ (8005d50 <HAL_LTDC_MspInit+0x210>)
 8005d30:	f002 f988 	bl	8008044 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8005d34:	bf00      	nop
 8005d36:	3738      	adds	r7, #56	@ 0x38
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	40016800 	.word	0x40016800
 8005d40:	40023800 	.word	0x40023800
 8005d44:	40021400 	.word	0x40021400
 8005d48:	40020000 	.word	0x40020000
 8005d4c:	40020400 	.word	0x40020400
 8005d50:	40021800 	.word	0x40021800
 8005d54:	40020800 	.word	0x40020800
 8005d58:	40020c00 	.word	0x40020c00

08005d5c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a0e      	ldr	r2, [pc, #56]	@ (8005da4 <HAL_RNG_MspInit+0x48>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d115      	bne.n	8005d9a <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	4b0d      	ldr	r3, [pc, #52]	@ (8005da8 <HAL_RNG_MspInit+0x4c>)
 8005d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d76:	4a0c      	ldr	r2, [pc, #48]	@ (8005da8 <HAL_RNG_MspInit+0x4c>)
 8005d78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d7c:	6353      	str	r3, [r2, #52]	@ 0x34
 8005d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8005da8 <HAL_RNG_MspInit+0x4c>)
 8005d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	2050      	movs	r0, #80	@ 0x50
 8005d90:	f001 fcd7 	bl	8007742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8005d94:	2050      	movs	r0, #80	@ 0x50
 8005d96:	f001 fcf0 	bl	800777a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8005d9a:	bf00      	nop
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	50060800 	.word	0x50060800
 8005da8:	40023800 	.word	0x40023800

08005dac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08a      	sub	sp, #40	@ 0x28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005db4:	f107 0314 	add.w	r3, r7, #20
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	605a      	str	r2, [r3, #4]
 8005dbe:	609a      	str	r2, [r3, #8]
 8005dc0:	60da      	str	r2, [r3, #12]
 8005dc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a28      	ldr	r2, [pc, #160]	@ (8005e6c <HAL_SPI_MspInit+0xc0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d149      	bne.n	8005e62 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005dce:	2300      	movs	r3, #0
 8005dd0:	613b      	str	r3, [r7, #16]
 8005dd2:	4b27      	ldr	r3, [pc, #156]	@ (8005e70 <HAL_SPI_MspInit+0xc4>)
 8005dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dd6:	4a26      	ldr	r2, [pc, #152]	@ (8005e70 <HAL_SPI_MspInit+0xc4>)
 8005dd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005ddc:	6453      	str	r3, [r2, #68]	@ 0x44
 8005dde:	4b24      	ldr	r3, [pc, #144]	@ (8005e70 <HAL_SPI_MspInit+0xc4>)
 8005de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005de2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005de6:	613b      	str	r3, [r7, #16]
 8005de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dea:	2300      	movs	r3, #0
 8005dec:	60fb      	str	r3, [r7, #12]
 8005dee:	4b20      	ldr	r3, [pc, #128]	@ (8005e70 <HAL_SPI_MspInit+0xc4>)
 8005df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df2:	4a1f      	ldr	r2, [pc, #124]	@ (8005e70 <HAL_SPI_MspInit+0xc4>)
 8005df4:	f043 0301 	orr.w	r3, r3, #1
 8005df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8005e70 <HAL_SPI_MspInit+0xc4>)
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e06:	2300      	movs	r3, #0
 8005e08:	60bb      	str	r3, [r7, #8]
 8005e0a:	4b19      	ldr	r3, [pc, #100]	@ (8005e70 <HAL_SPI_MspInit+0xc4>)
 8005e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e0e:	4a18      	ldr	r2, [pc, #96]	@ (8005e70 <HAL_SPI_MspInit+0xc4>)
 8005e10:	f043 0302 	orr.w	r3, r3, #2
 8005e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e16:	4b16      	ldr	r3, [pc, #88]	@ (8005e70 <HAL_SPI_MspInit+0xc4>)
 8005e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	60bb      	str	r3, [r7, #8]
 8005e20:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005e22:	23a0      	movs	r3, #160	@ 0xa0
 8005e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e26:	2302      	movs	r3, #2
 8005e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005e32:	2305      	movs	r3, #5
 8005e34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e36:	f107 0314 	add.w	r3, r7, #20
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	480d      	ldr	r0, [pc, #52]	@ (8005e74 <HAL_SPI_MspInit+0xc8>)
 8005e3e:	f002 f901 	bl	8008044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005e42:	2310      	movs	r3, #16
 8005e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e46:	2302      	movs	r3, #2
 8005e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005e52:	2305      	movs	r3, #5
 8005e54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e56:	f107 0314 	add.w	r3, r7, #20
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	4806      	ldr	r0, [pc, #24]	@ (8005e78 <HAL_SPI_MspInit+0xcc>)
 8005e5e:	f002 f8f1 	bl	8008044 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005e62:	bf00      	nop
 8005e64:	3728      	adds	r7, #40	@ 0x28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	40013000 	.word	0x40013000
 8005e70:	40023800 	.word	0x40023800
 8005e74:	40020000 	.word	0x40020000
 8005e78:	40020400 	.word	0x40020400

08005e7c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a0a      	ldr	r2, [pc, #40]	@ (8005eb4 <HAL_SPI_MspDeInit+0x38>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d10d      	bne.n	8005eaa <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8005e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb8 <HAL_SPI_MspDeInit+0x3c>)
 8005e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e92:	4a09      	ldr	r2, [pc, #36]	@ (8005eb8 <HAL_SPI_MspDeInit+0x3c>)
 8005e94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e98:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 8005e9a:	21a0      	movs	r1, #160	@ 0xa0
 8005e9c:	4807      	ldr	r0, [pc, #28]	@ (8005ebc <HAL_SPI_MspDeInit+0x40>)
 8005e9e:	f002 fa7d 	bl	800839c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 8005ea2:	2110      	movs	r1, #16
 8005ea4:	4806      	ldr	r0, [pc, #24]	@ (8005ec0 <HAL_SPI_MspDeInit+0x44>)
 8005ea6:	f002 fa79 	bl	800839c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8005eaa:	bf00      	nop
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	40013000 	.word	0x40013000
 8005eb8:	40023800 	.word	0x40023800
 8005ebc:	40020000 	.word	0x40020000
 8005ec0:	40020400 	.word	0x40020400

08005ec4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005eca:	1d3b      	adds	r3, r7, #4
 8005ecc:	2200      	movs	r2, #0
 8005ece:	601a      	str	r2, [r3, #0]
 8005ed0:	605a      	str	r2, [r3, #4]
 8005ed2:	609a      	str	r2, [r3, #8]
 8005ed4:	60da      	str	r2, [r3, #12]
 8005ed6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8005ed8:	4b34      	ldr	r3, [pc, #208]	@ (8005fac <HAL_FMC_MspInit+0xe8>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d160      	bne.n	8005fa2 <HAL_FMC_MspInit+0xde>
    return;
  }
  FMC_Initialized = 1;
 8005ee0:	4b32      	ldr	r3, [pc, #200]	@ (8005fac <HAL_FMC_MspInit+0xe8>)
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	603b      	str	r3, [r7, #0]
 8005eea:	4b31      	ldr	r3, [pc, #196]	@ (8005fb0 <HAL_FMC_MspInit+0xec>)
 8005eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eee:	4a30      	ldr	r2, [pc, #192]	@ (8005fb0 <HAL_FMC_MspInit+0xec>)
 8005ef0:	f043 0301 	orr.w	r3, r3, #1
 8005ef4:	6393      	str	r3, [r2, #56]	@ 0x38
 8005ef6:	4b2e      	ldr	r3, [pc, #184]	@ (8005fb0 <HAL_FMC_MspInit+0xec>)
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	603b      	str	r3, [r7, #0]
 8005f00:	683b      	ldr	r3, [r7, #0]
  PG8   ------> FMC_SDCLK
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005f02:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8005f06:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f08:	2302      	movs	r3, #2
 8005f0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f10:	2303      	movs	r3, #3
 8005f12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005f14:	230c      	movs	r3, #12
 8005f16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005f18:	1d3b      	adds	r3, r7, #4
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	4825      	ldr	r0, [pc, #148]	@ (8005fb4 <HAL_FMC_MspInit+0xf0>)
 8005f1e:	f002 f891 	bl	8008044 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8005f22:	230d      	movs	r3, #13
 8005f24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f26:	2302      	movs	r3, #2
 8005f28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005f32:	230c      	movs	r3, #12
 8005f34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f36:	1d3b      	adds	r3, r7, #4
 8005f38:	4619      	mov	r1, r3
 8005f3a:	481f      	ldr	r0, [pc, #124]	@ (8005fb8 <HAL_FMC_MspInit+0xf4>)
 8005f3c:	f002 f882 	bl	8008044 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 8005f40:	f248 1331 	movw	r3, #33073	@ 0x8131
 8005f44:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f46:	2302      	movs	r3, #2
 8005f48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005f52:	230c      	movs	r3, #12
 8005f54:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005f56:	1d3b      	adds	r3, r7, #4
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4818      	ldr	r0, [pc, #96]	@ (8005fbc <HAL_FMC_MspInit+0xf8>)
 8005f5c:	f002 f872 	bl	8008044 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8005f60:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8005f64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f66:	2302      	movs	r3, #2
 8005f68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005f72:	230c      	movs	r3, #12
 8005f74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005f76:	1d3b      	adds	r3, r7, #4
 8005f78:	4619      	mov	r1, r3
 8005f7a:	4811      	ldr	r0, [pc, #68]	@ (8005fc0 <HAL_FMC_MspInit+0xfc>)
 8005f7c:	f002 f862 	bl	8008044 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 8005f80:	f24c 0303 	movw	r3, #49155	@ 0xc003
 8005f84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f86:	2302      	movs	r3, #2
 8005f88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005f92:	230c      	movs	r3, #12
 8005f94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f96:	1d3b      	adds	r3, r7, #4
 8005f98:	4619      	mov	r1, r3
 8005f9a:	480a      	ldr	r0, [pc, #40]	@ (8005fc4 <HAL_FMC_MspInit+0x100>)
 8005f9c:	f002 f852 	bl	8008044 <HAL_GPIO_Init>
 8005fa0:	e000      	b.n	8005fa4 <HAL_FMC_MspInit+0xe0>
    return;
 8005fa2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8005fa4:	3718      	adds	r7, #24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	20001098 	.word	0x20001098
 8005fb0:	40023800 	.word	0x40023800
 8005fb4:	40021400 	.word	0x40021400
 8005fb8:	40020800 	.word	0x40020800
 8005fbc:	40021800 	.word	0x40021800
 8005fc0:	40021000 	.word	0x40021000
 8005fc4:	40020c00 	.word	0x40020c00

08005fc8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8005fd0:	f7ff ff78 	bl	8005ec4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8005fd4:	bf00      	nop
 8005fd6:	3708      	adds	r7, #8
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005fe0:	bf00      	nop
 8005fe2:	e7fd      	b.n	8005fe0 <NMI_Handler+0x4>

08005fe4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005fe8:	bf00      	nop
 8005fea:	e7fd      	b.n	8005fe8 <HardFault_Handler+0x4>

08005fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ff0:	bf00      	nop
 8005ff2:	e7fd      	b.n	8005ff0 <MemManage_Handler+0x4>

08005ff4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ff8:	bf00      	nop
 8005ffa:	e7fd      	b.n	8005ff8 <BusFault_Handler+0x4>

08005ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006000:	bf00      	nop
 8006002:	e7fd      	b.n	8006000 <UsageFault_Handler+0x4>

08006004 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006008:	bf00      	nop
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006012:	b480      	push	{r7}
 8006014:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006016:	bf00      	nop
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006024:	bf00      	nop
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006032:	f001 fa67 	bl	8007504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006036:	bf00      	nop
 8006038:	bd80      	pop	{r7, pc}
	...

0800603c <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8006040:	4802      	ldr	r0, [pc, #8]	@ (800604c <HASH_RNG_IRQHandler+0x10>)
 8006042:	f003 fe41 	bl	8009cc8 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8006046:	bf00      	nop
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	20000ff0 	.word	0x20000ff0

08006050 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006050:	b480      	push	{r7}
 8006052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006054:	4b08      	ldr	r3, [pc, #32]	@ (8006078 <SystemInit+0x28>)
 8006056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800605a:	4a07      	ldr	r2, [pc, #28]	@ (8006078 <SystemInit+0x28>)
 800605c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006060:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006064:	4b04      	ldr	r3, [pc, #16]	@ (8006078 <SystemInit+0x28>)
 8006066:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800606a:	609a      	str	r2, [r3, #8]
#endif
}
 800606c:	bf00      	nop
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	e000ed00 	.word	0xe000ed00

0800607c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800607c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80060b4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006080:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006082:	e003      	b.n	800608c <LoopCopyDataInit>

08006084 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006084:	4b0c      	ldr	r3, [pc, #48]	@ (80060b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006086:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006088:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800608a:	3104      	adds	r1, #4

0800608c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800608c:	480b      	ldr	r0, [pc, #44]	@ (80060bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800608e:	4b0c      	ldr	r3, [pc, #48]	@ (80060c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006090:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006092:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006094:	d3f6      	bcc.n	8006084 <CopyDataInit>
  ldr  r2, =_sbss
 8006096:	4a0b      	ldr	r2, [pc, #44]	@ (80060c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006098:	e002      	b.n	80060a0 <LoopFillZerobss>

0800609a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800609a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800609c:	f842 3b04 	str.w	r3, [r2], #4

080060a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80060a0:	4b09      	ldr	r3, [pc, #36]	@ (80060c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80060a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80060a4:	d3f9      	bcc.n	800609a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80060a6:	f7ff ffd3 	bl	8006050 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80060aa:	f004 fdcb 	bl	800ac44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80060ae:	f7ff f8bb 	bl	8005228 <main>
  bx  lr    
 80060b2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80060b4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80060b8:	0800cc58 	.word	0x0800cc58
  ldr  r0, =_sdata
 80060bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80060c0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80060c4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80060c8:	200012f4 	.word	0x200012f4

080060cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80060cc:	e7fe      	b.n	80060cc <ADC_IRQHandler>

080060ce <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80060d2:	f000 fa5d 	bl	8006590 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80060d6:	20ca      	movs	r0, #202	@ 0xca
 80060d8:	f000 f95d 	bl	8006396 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80060dc:	20c3      	movs	r0, #195	@ 0xc3
 80060de:	f000 f967 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80060e2:	2008      	movs	r0, #8
 80060e4:	f000 f964 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80060e8:	2050      	movs	r0, #80	@ 0x50
 80060ea:	f000 f961 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80060ee:	20cf      	movs	r0, #207	@ 0xcf
 80060f0:	f000 f951 	bl	8006396 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80060f4:	2000      	movs	r0, #0
 80060f6:	f000 f95b 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80060fa:	20c1      	movs	r0, #193	@ 0xc1
 80060fc:	f000 f958 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8006100:	2030      	movs	r0, #48	@ 0x30
 8006102:	f000 f955 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8006106:	20ed      	movs	r0, #237	@ 0xed
 8006108:	f000 f945 	bl	8006396 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 800610c:	2064      	movs	r0, #100	@ 0x64
 800610e:	f000 f94f 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8006112:	2003      	movs	r0, #3
 8006114:	f000 f94c 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8006118:	2012      	movs	r0, #18
 800611a:	f000 f949 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800611e:	2081      	movs	r0, #129	@ 0x81
 8006120:	f000 f946 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8006124:	20e8      	movs	r0, #232	@ 0xe8
 8006126:	f000 f936 	bl	8006396 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800612a:	2085      	movs	r0, #133	@ 0x85
 800612c:	f000 f940 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006130:	2000      	movs	r0, #0
 8006132:	f000 f93d 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8006136:	2078      	movs	r0, #120	@ 0x78
 8006138:	f000 f93a 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 800613c:	20cb      	movs	r0, #203	@ 0xcb
 800613e:	f000 f92a 	bl	8006396 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8006142:	2039      	movs	r0, #57	@ 0x39
 8006144:	f000 f934 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8006148:	202c      	movs	r0, #44	@ 0x2c
 800614a:	f000 f931 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800614e:	2000      	movs	r0, #0
 8006150:	f000 f92e 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8006154:	2034      	movs	r0, #52	@ 0x34
 8006156:	f000 f92b 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800615a:	2002      	movs	r0, #2
 800615c:	f000 f928 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8006160:	20f7      	movs	r0, #247	@ 0xf7
 8006162:	f000 f918 	bl	8006396 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8006166:	2020      	movs	r0, #32
 8006168:	f000 f922 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 800616c:	20ea      	movs	r0, #234	@ 0xea
 800616e:	f000 f912 	bl	8006396 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006172:	2000      	movs	r0, #0
 8006174:	f000 f91c 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006178:	2000      	movs	r0, #0
 800617a:	f000 f919 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800617e:	20b1      	movs	r0, #177	@ 0xb1
 8006180:	f000 f909 	bl	8006396 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006184:	2000      	movs	r0, #0
 8006186:	f000 f913 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800618a:	201b      	movs	r0, #27
 800618c:	f000 f910 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8006190:	20b6      	movs	r0, #182	@ 0xb6
 8006192:	f000 f900 	bl	8006396 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8006196:	200a      	movs	r0, #10
 8006198:	f000 f90a 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 800619c:	20a2      	movs	r0, #162	@ 0xa2
 800619e:	f000 f907 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80061a2:	20c0      	movs	r0, #192	@ 0xc0
 80061a4:	f000 f8f7 	bl	8006396 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80061a8:	2010      	movs	r0, #16
 80061aa:	f000 f901 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80061ae:	20c1      	movs	r0, #193	@ 0xc1
 80061b0:	f000 f8f1 	bl	8006396 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80061b4:	2010      	movs	r0, #16
 80061b6:	f000 f8fb 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80061ba:	20c5      	movs	r0, #197	@ 0xc5
 80061bc:	f000 f8eb 	bl	8006396 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80061c0:	2045      	movs	r0, #69	@ 0x45
 80061c2:	f000 f8f5 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80061c6:	2015      	movs	r0, #21
 80061c8:	f000 f8f2 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80061cc:	20c7      	movs	r0, #199	@ 0xc7
 80061ce:	f000 f8e2 	bl	8006396 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80061d2:	2090      	movs	r0, #144	@ 0x90
 80061d4:	f000 f8ec 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80061d8:	2036      	movs	r0, #54	@ 0x36
 80061da:	f000 f8dc 	bl	8006396 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80061de:	20c8      	movs	r0, #200	@ 0xc8
 80061e0:	f000 f8e6 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80061e4:	20f2      	movs	r0, #242	@ 0xf2
 80061e6:	f000 f8d6 	bl	8006396 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80061ea:	2000      	movs	r0, #0
 80061ec:	f000 f8e0 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80061f0:	20b0      	movs	r0, #176	@ 0xb0
 80061f2:	f000 f8d0 	bl	8006396 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80061f6:	20c2      	movs	r0, #194	@ 0xc2
 80061f8:	f000 f8da 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80061fc:	20b6      	movs	r0, #182	@ 0xb6
 80061fe:	f000 f8ca 	bl	8006396 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8006202:	200a      	movs	r0, #10
 8006204:	f000 f8d4 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8006208:	20a7      	movs	r0, #167	@ 0xa7
 800620a:	f000 f8d1 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800620e:	2027      	movs	r0, #39	@ 0x27
 8006210:	f000 f8ce 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8006214:	2004      	movs	r0, #4
 8006216:	f000 f8cb 	bl	80063b0 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800621a:	202a      	movs	r0, #42	@ 0x2a
 800621c:	f000 f8bb 	bl	8006396 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006220:	2000      	movs	r0, #0
 8006222:	f000 f8c5 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006226:	2000      	movs	r0, #0
 8006228:	f000 f8c2 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800622c:	2000      	movs	r0, #0
 800622e:	f000 f8bf 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8006232:	20ef      	movs	r0, #239	@ 0xef
 8006234:	f000 f8bc 	bl	80063b0 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8006238:	202b      	movs	r0, #43	@ 0x2b
 800623a:	f000 f8ac 	bl	8006396 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800623e:	2000      	movs	r0, #0
 8006240:	f000 f8b6 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006244:	2000      	movs	r0, #0
 8006246:	f000 f8b3 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800624a:	2001      	movs	r0, #1
 800624c:	f000 f8b0 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8006250:	203f      	movs	r0, #63	@ 0x3f
 8006252:	f000 f8ad 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8006256:	20f6      	movs	r0, #246	@ 0xf6
 8006258:	f000 f89d 	bl	8006396 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800625c:	2001      	movs	r0, #1
 800625e:	f000 f8a7 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006262:	2000      	movs	r0, #0
 8006264:	f000 f8a4 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8006268:	2006      	movs	r0, #6
 800626a:	f000 f8a1 	bl	80063b0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800626e:	202c      	movs	r0, #44	@ 0x2c
 8006270:	f000 f891 	bl	8006396 <ili9341_WriteReg>
  LCD_Delay(200);
 8006274:	20c8      	movs	r0, #200	@ 0xc8
 8006276:	f000 fa79 	bl	800676c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800627a:	2026      	movs	r0, #38	@ 0x26
 800627c:	f000 f88b 	bl	8006396 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8006280:	2001      	movs	r0, #1
 8006282:	f000 f895 	bl	80063b0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8006286:	20e0      	movs	r0, #224	@ 0xe0
 8006288:	f000 f885 	bl	8006396 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 800628c:	200f      	movs	r0, #15
 800628e:	f000 f88f 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8006292:	2029      	movs	r0, #41	@ 0x29
 8006294:	f000 f88c 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8006298:	2024      	movs	r0, #36	@ 0x24
 800629a:	f000 f889 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800629e:	200c      	movs	r0, #12
 80062a0:	f000 f886 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80062a4:	200e      	movs	r0, #14
 80062a6:	f000 f883 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80062aa:	2009      	movs	r0, #9
 80062ac:	f000 f880 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80062b0:	204e      	movs	r0, #78	@ 0x4e
 80062b2:	f000 f87d 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80062b6:	2078      	movs	r0, #120	@ 0x78
 80062b8:	f000 f87a 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80062bc:	203c      	movs	r0, #60	@ 0x3c
 80062be:	f000 f877 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80062c2:	2009      	movs	r0, #9
 80062c4:	f000 f874 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80062c8:	2013      	movs	r0, #19
 80062ca:	f000 f871 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80062ce:	2005      	movs	r0, #5
 80062d0:	f000 f86e 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80062d4:	2017      	movs	r0, #23
 80062d6:	f000 f86b 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80062da:	2011      	movs	r0, #17
 80062dc:	f000 f868 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80062e0:	2000      	movs	r0, #0
 80062e2:	f000 f865 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80062e6:	20e1      	movs	r0, #225	@ 0xe1
 80062e8:	f000 f855 	bl	8006396 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80062ec:	2000      	movs	r0, #0
 80062ee:	f000 f85f 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80062f2:	2016      	movs	r0, #22
 80062f4:	f000 f85c 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80062f8:	201b      	movs	r0, #27
 80062fa:	f000 f859 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80062fe:	2004      	movs	r0, #4
 8006300:	f000 f856 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8006304:	2011      	movs	r0, #17
 8006306:	f000 f853 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 800630a:	2007      	movs	r0, #7
 800630c:	f000 f850 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8006310:	2031      	movs	r0, #49	@ 0x31
 8006312:	f000 f84d 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8006316:	2033      	movs	r0, #51	@ 0x33
 8006318:	f000 f84a 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 800631c:	2042      	movs	r0, #66	@ 0x42
 800631e:	f000 f847 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8006322:	2005      	movs	r0, #5
 8006324:	f000 f844 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8006328:	200c      	movs	r0, #12
 800632a:	f000 f841 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800632e:	200a      	movs	r0, #10
 8006330:	f000 f83e 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8006334:	2028      	movs	r0, #40	@ 0x28
 8006336:	f000 f83b 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800633a:	202f      	movs	r0, #47	@ 0x2f
 800633c:	f000 f838 	bl	80063b0 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8006340:	200f      	movs	r0, #15
 8006342:	f000 f835 	bl	80063b0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8006346:	2011      	movs	r0, #17
 8006348:	f000 f825 	bl	8006396 <ili9341_WriteReg>
  LCD_Delay(200);
 800634c:	20c8      	movs	r0, #200	@ 0xc8
 800634e:	f000 fa0d 	bl	800676c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8006352:	2029      	movs	r0, #41	@ 0x29
 8006354:	f000 f81f 	bl	8006396 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8006358:	202c      	movs	r0, #44	@ 0x2c
 800635a:	f000 f81c 	bl	8006396 <ili9341_WriteReg>
}
 800635e:	bf00      	nop
 8006360:	bd80      	pop	{r7, pc}

08006362 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8006366:	f000 f913 	bl	8006590 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800636a:	2103      	movs	r1, #3
 800636c:	20d3      	movs	r0, #211	@ 0xd3
 800636e:	f000 f82c 	bl	80063ca <ili9341_ReadData>
 8006372:	4603      	mov	r3, r0
 8006374:	b29b      	uxth	r3, r3
}
 8006376:	4618      	mov	r0, r3
 8006378:	bd80      	pop	{r7, pc}

0800637a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800637e:	2029      	movs	r0, #41	@ 0x29
 8006380:	f000 f809 	bl	8006396 <ili9341_WriteReg>
}
 8006384:	bf00      	nop
 8006386:	bd80      	pop	{r7, pc}

08006388 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 800638c:	2028      	movs	r0, #40	@ 0x28
 800638e:	f000 f802 	bl	8006396 <ili9341_WriteReg>
}
 8006392:	bf00      	nop
 8006394:	bd80      	pop	{r7, pc}

08006396 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b082      	sub	sp, #8
 800639a:	af00      	add	r7, sp, #0
 800639c:	4603      	mov	r3, r0
 800639e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80063a0:	79fb      	ldrb	r3, [r7, #7]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 f98e 	bl	80066c4 <LCD_IO_WriteReg>
}
 80063a8:	bf00      	nop
 80063aa:	3708      	adds	r7, #8
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	4603      	mov	r3, r0
 80063b8:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80063ba:	88fb      	ldrh	r3, [r7, #6]
 80063bc:	4618      	mov	r0, r3
 80063be:	f000 f95f 	bl	8006680 <LCD_IO_WriteData>
}
 80063c2:	bf00      	nop
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b082      	sub	sp, #8
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	4603      	mov	r3, r0
 80063d2:	460a      	mov	r2, r1
 80063d4:	80fb      	strh	r3, [r7, #6]
 80063d6:	4613      	mov	r3, r2
 80063d8:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80063da:	797a      	ldrb	r2, [r7, #5]
 80063dc:	88fb      	ldrh	r3, [r7, #6]
 80063de:	4611      	mov	r1, r2
 80063e0:	4618      	mov	r0, r3
 80063e2:	f000 f991 	bl	8006708 <LCD_IO_ReadData>
 80063e6:	4603      	mov	r3, r0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3708      	adds	r7, #8
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80063f0:	b480      	push	{r7}
 80063f2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80063f4:	23f0      	movs	r3, #240	@ 0xf0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8006400:	b480      	push	{r7}
 8006402:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8006404:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8006408:	4618      	mov	r0, r3
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
	...

08006414 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8006418:	4819      	ldr	r0, [pc, #100]	@ (8006480 <SPIx_Init+0x6c>)
 800641a:	f004 f9aa 	bl	800a772 <HAL_SPI_GetState>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d12b      	bne.n	800647c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8006424:	4b16      	ldr	r3, [pc, #88]	@ (8006480 <SPIx_Init+0x6c>)
 8006426:	4a17      	ldr	r2, [pc, #92]	@ (8006484 <SPIx_Init+0x70>)
 8006428:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800642a:	4b15      	ldr	r3, [pc, #84]	@ (8006480 <SPIx_Init+0x6c>)
 800642c:	2218      	movs	r2, #24
 800642e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8006430:	4b13      	ldr	r3, [pc, #76]	@ (8006480 <SPIx_Init+0x6c>)
 8006432:	2200      	movs	r2, #0
 8006434:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8006436:	4b12      	ldr	r3, [pc, #72]	@ (8006480 <SPIx_Init+0x6c>)
 8006438:	2200      	movs	r2, #0
 800643a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800643c:	4b10      	ldr	r3, [pc, #64]	@ (8006480 <SPIx_Init+0x6c>)
 800643e:	2200      	movs	r2, #0
 8006440:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8006442:	4b0f      	ldr	r3, [pc, #60]	@ (8006480 <SPIx_Init+0x6c>)
 8006444:	2200      	movs	r2, #0
 8006446:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8006448:	4b0d      	ldr	r3, [pc, #52]	@ (8006480 <SPIx_Init+0x6c>)
 800644a:	2207      	movs	r2, #7
 800644c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800644e:	4b0c      	ldr	r3, [pc, #48]	@ (8006480 <SPIx_Init+0x6c>)
 8006450:	2200      	movs	r2, #0
 8006452:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8006454:	4b0a      	ldr	r3, [pc, #40]	@ (8006480 <SPIx_Init+0x6c>)
 8006456:	2200      	movs	r2, #0
 8006458:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800645a:	4b09      	ldr	r3, [pc, #36]	@ (8006480 <SPIx_Init+0x6c>)
 800645c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006460:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8006462:	4b07      	ldr	r3, [pc, #28]	@ (8006480 <SPIx_Init+0x6c>)
 8006464:	2200      	movs	r2, #0
 8006466:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8006468:	4b05      	ldr	r3, [pc, #20]	@ (8006480 <SPIx_Init+0x6c>)
 800646a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800646e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8006470:	4803      	ldr	r0, [pc, #12]	@ (8006480 <SPIx_Init+0x6c>)
 8006472:	f000 f853 	bl	800651c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8006476:	4802      	ldr	r0, [pc, #8]	@ (8006480 <SPIx_Init+0x6c>)
 8006478:	f003 fd10 	bl	8009e9c <HAL_SPI_Init>
  } 
}
 800647c:	bf00      	nop
 800647e:	bd80      	pop	{r7, pc}
 8006480:	2000109c 	.word	0x2000109c
 8006484:	40015000 	.word	0x40015000

08006488 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	4603      	mov	r3, r0
 8006490:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8006492:	2300      	movs	r3, #0
 8006494:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8006496:	79fb      	ldrb	r3, [r7, #7]
 8006498:	b29a      	uxth	r2, r3
 800649a:	4b09      	ldr	r3, [pc, #36]	@ (80064c0 <SPIx_Read+0x38>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f107 0108 	add.w	r1, r7, #8
 80064a2:	4808      	ldr	r0, [pc, #32]	@ (80064c4 <SPIx_Read+0x3c>)
 80064a4:	f003 feba 	bl	800a21c <HAL_SPI_Receive>
 80064a8:	4603      	mov	r3, r0
 80064aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80064ac:	7bfb      	ldrb	r3, [r7, #15]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80064b2:	f000 f827 	bl	8006504 <SPIx_Error>
  }
  
  return readvalue;
 80064b6:	68bb      	ldr	r3, [r7, #8]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	20000054 	.word	0x20000054
 80064c4:	2000109c 	.word	0x2000109c

080064c8 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	4603      	mov	r3, r0
 80064d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80064d6:	4b09      	ldr	r3, [pc, #36]	@ (80064fc <SPIx_Write+0x34>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	1db9      	adds	r1, r7, #6
 80064dc:	2201      	movs	r2, #1
 80064de:	4808      	ldr	r0, [pc, #32]	@ (8006500 <SPIx_Write+0x38>)
 80064e0:	f003 fd68 	bl	8009fb4 <HAL_SPI_Transmit>
 80064e4:	4603      	mov	r3, r0
 80064e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80064ee:	f000 f809 	bl	8006504 <SPIx_Error>
  }
}
 80064f2:	bf00      	nop
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20000054 	.word	0x20000054
 8006500:	2000109c 	.word	0x2000109c

08006504 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8006508:	4803      	ldr	r0, [pc, #12]	@ (8006518 <SPIx_Error+0x14>)
 800650a:	f003 fd2b 	bl	8009f64 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800650e:	f7ff ff81 	bl	8006414 <SPIx_Init>
}
 8006512:	bf00      	nop
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	2000109c 	.word	0x2000109c

0800651c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b08a      	sub	sp, #40	@ 0x28
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8006524:	2300      	movs	r3, #0
 8006526:	613b      	str	r3, [r7, #16]
 8006528:	4b17      	ldr	r3, [pc, #92]	@ (8006588 <SPIx_MspInit+0x6c>)
 800652a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800652c:	4a16      	ldr	r2, [pc, #88]	@ (8006588 <SPIx_MspInit+0x6c>)
 800652e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006532:	6453      	str	r3, [r2, #68]	@ 0x44
 8006534:	4b14      	ldr	r3, [pc, #80]	@ (8006588 <SPIx_MspInit+0x6c>)
 8006536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006538:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800653c:	613b      	str	r3, [r7, #16]
 800653e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8006540:	2300      	movs	r3, #0
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	4b10      	ldr	r3, [pc, #64]	@ (8006588 <SPIx_MspInit+0x6c>)
 8006546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006548:	4a0f      	ldr	r2, [pc, #60]	@ (8006588 <SPIx_MspInit+0x6c>)
 800654a:	f043 0320 	orr.w	r3, r3, #32
 800654e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006550:	4b0d      	ldr	r3, [pc, #52]	@ (8006588 <SPIx_MspInit+0x6c>)
 8006552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006554:	f003 0320 	and.w	r3, r3, #32
 8006558:	60fb      	str	r3, [r7, #12]
 800655a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800655c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8006560:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8006562:	2302      	movs	r3, #2
 8006564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8006566:	2302      	movs	r3, #2
 8006568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800656a:	2301      	movs	r3, #1
 800656c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800656e:	2305      	movs	r3, #5
 8006570:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8006572:	f107 0314 	add.w	r3, r7, #20
 8006576:	4619      	mov	r1, r3
 8006578:	4804      	ldr	r0, [pc, #16]	@ (800658c <SPIx_MspInit+0x70>)
 800657a:	f001 fd63 	bl	8008044 <HAL_GPIO_Init>
}
 800657e:	bf00      	nop
 8006580:	3728      	adds	r7, #40	@ 0x28
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	40023800 	.word	0x40023800
 800658c:	40021400 	.word	0x40021400

08006590 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b088      	sub	sp, #32
 8006594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8006596:	4b36      	ldr	r3, [pc, #216]	@ (8006670 <LCD_IO_Init+0xe0>)
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d164      	bne.n	8006668 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800659e:	4b34      	ldr	r3, [pc, #208]	@ (8006670 <LCD_IO_Init+0xe0>)
 80065a0:	2201      	movs	r2, #1
 80065a2:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80065a4:	2300      	movs	r3, #0
 80065a6:	60bb      	str	r3, [r7, #8]
 80065a8:	4b32      	ldr	r3, [pc, #200]	@ (8006674 <LCD_IO_Init+0xe4>)
 80065aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ac:	4a31      	ldr	r2, [pc, #196]	@ (8006674 <LCD_IO_Init+0xe4>)
 80065ae:	f043 0308 	orr.w	r3, r3, #8
 80065b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80065b4:	4b2f      	ldr	r3, [pc, #188]	@ (8006674 <LCD_IO_Init+0xe4>)
 80065b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b8:	f003 0308 	and.w	r3, r3, #8
 80065bc:	60bb      	str	r3, [r7, #8]
 80065be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80065c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80065c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80065c6:	2301      	movs	r3, #1
 80065c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80065ca:	2300      	movs	r3, #0
 80065cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80065ce:	2302      	movs	r3, #2
 80065d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80065d2:	f107 030c 	add.w	r3, r7, #12
 80065d6:	4619      	mov	r1, r3
 80065d8:	4827      	ldr	r0, [pc, #156]	@ (8006678 <LCD_IO_Init+0xe8>)
 80065da:	f001 fd33 	bl	8008044 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80065de:	2300      	movs	r3, #0
 80065e0:	607b      	str	r3, [r7, #4]
 80065e2:	4b24      	ldr	r3, [pc, #144]	@ (8006674 <LCD_IO_Init+0xe4>)
 80065e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e6:	4a23      	ldr	r2, [pc, #140]	@ (8006674 <LCD_IO_Init+0xe4>)
 80065e8:	f043 0308 	orr.w	r3, r3, #8
 80065ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80065ee:	4b21      	ldr	r3, [pc, #132]	@ (8006674 <LCD_IO_Init+0xe4>)
 80065f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f2:	f003 0308 	and.w	r3, r3, #8
 80065f6:	607b      	str	r3, [r7, #4]
 80065f8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80065fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80065fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8006600:	2301      	movs	r3, #1
 8006602:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8006604:	2300      	movs	r3, #0
 8006606:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8006608:	2302      	movs	r3, #2
 800660a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800660c:	f107 030c 	add.w	r3, r7, #12
 8006610:	4619      	mov	r1, r3
 8006612:	4819      	ldr	r0, [pc, #100]	@ (8006678 <LCD_IO_Init+0xe8>)
 8006614:	f001 fd16 	bl	8008044 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8006618:	2300      	movs	r3, #0
 800661a:	603b      	str	r3, [r7, #0]
 800661c:	4b15      	ldr	r3, [pc, #84]	@ (8006674 <LCD_IO_Init+0xe4>)
 800661e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006620:	4a14      	ldr	r2, [pc, #80]	@ (8006674 <LCD_IO_Init+0xe4>)
 8006622:	f043 0304 	orr.w	r3, r3, #4
 8006626:	6313      	str	r3, [r2, #48]	@ 0x30
 8006628:	4b12      	ldr	r3, [pc, #72]	@ (8006674 <LCD_IO_Init+0xe4>)
 800662a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	603b      	str	r3, [r7, #0]
 8006632:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8006634:	2304      	movs	r3, #4
 8006636:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8006638:	2301      	movs	r3, #1
 800663a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800663c:	2300      	movs	r3, #0
 800663e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8006640:	2302      	movs	r3, #2
 8006642:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8006644:	f107 030c 	add.w	r3, r7, #12
 8006648:	4619      	mov	r1, r3
 800664a:	480c      	ldr	r0, [pc, #48]	@ (800667c <LCD_IO_Init+0xec>)
 800664c:	f001 fcfa 	bl	8008044 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8006650:	2200      	movs	r2, #0
 8006652:	2104      	movs	r1, #4
 8006654:	4809      	ldr	r0, [pc, #36]	@ (800667c <LCD_IO_Init+0xec>)
 8006656:	f001 ffc5 	bl	80085e4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800665a:	2201      	movs	r2, #1
 800665c:	2104      	movs	r1, #4
 800665e:	4807      	ldr	r0, [pc, #28]	@ (800667c <LCD_IO_Init+0xec>)
 8006660:	f001 ffc0 	bl	80085e4 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8006664:	f7ff fed6 	bl	8006414 <SPIx_Init>
  }
}
 8006668:	bf00      	nop
 800666a:	3720      	adds	r7, #32
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	200010f4 	.word	0x200010f4
 8006674:	40023800 	.word	0x40023800
 8006678:	40020c00 	.word	0x40020c00
 800667c:	40020800 	.word	0x40020800

08006680 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	4603      	mov	r3, r0
 8006688:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800668a:	2201      	movs	r2, #1
 800668c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006690:	480a      	ldr	r0, [pc, #40]	@ (80066bc <LCD_IO_WriteData+0x3c>)
 8006692:	f001 ffa7 	bl	80085e4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8006696:	2200      	movs	r2, #0
 8006698:	2104      	movs	r1, #4
 800669a:	4809      	ldr	r0, [pc, #36]	@ (80066c0 <LCD_IO_WriteData+0x40>)
 800669c:	f001 ffa2 	bl	80085e4 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80066a0:	88fb      	ldrh	r3, [r7, #6]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7ff ff10 	bl	80064c8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80066a8:	2201      	movs	r2, #1
 80066aa:	2104      	movs	r1, #4
 80066ac:	4804      	ldr	r0, [pc, #16]	@ (80066c0 <LCD_IO_WriteData+0x40>)
 80066ae:	f001 ff99 	bl	80085e4 <HAL_GPIO_WritePin>
}
 80066b2:	bf00      	nop
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	40020c00 	.word	0x40020c00
 80066c0:	40020800 	.word	0x40020800

080066c4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	4603      	mov	r3, r0
 80066cc:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80066ce:	2200      	movs	r2, #0
 80066d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80066d4:	480a      	ldr	r0, [pc, #40]	@ (8006700 <LCD_IO_WriteReg+0x3c>)
 80066d6:	f001 ff85 	bl	80085e4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80066da:	2200      	movs	r2, #0
 80066dc:	2104      	movs	r1, #4
 80066de:	4809      	ldr	r0, [pc, #36]	@ (8006704 <LCD_IO_WriteReg+0x40>)
 80066e0:	f001 ff80 	bl	80085e4 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80066e4:	79fb      	ldrb	r3, [r7, #7]
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7ff feed 	bl	80064c8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80066ee:	2201      	movs	r2, #1
 80066f0:	2104      	movs	r1, #4
 80066f2:	4804      	ldr	r0, [pc, #16]	@ (8006704 <LCD_IO_WriteReg+0x40>)
 80066f4:	f001 ff76 	bl	80085e4 <HAL_GPIO_WritePin>
}
 80066f8:	bf00      	nop
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	40020c00 	.word	0x40020c00
 8006704:	40020800 	.word	0x40020800

08006708 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	4603      	mov	r3, r0
 8006710:	460a      	mov	r2, r1
 8006712:	80fb      	strh	r3, [r7, #6]
 8006714:	4613      	mov	r3, r2
 8006716:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8006718:	2300      	movs	r3, #0
 800671a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 800671c:	2200      	movs	r2, #0
 800671e:	2104      	movs	r1, #4
 8006720:	4810      	ldr	r0, [pc, #64]	@ (8006764 <LCD_IO_ReadData+0x5c>)
 8006722:	f001 ff5f 	bl	80085e4 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8006726:	2200      	movs	r2, #0
 8006728:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800672c:	480e      	ldr	r0, [pc, #56]	@ (8006768 <LCD_IO_ReadData+0x60>)
 800672e:	f001 ff59 	bl	80085e4 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8006732:	88fb      	ldrh	r3, [r7, #6]
 8006734:	4618      	mov	r0, r3
 8006736:	f7ff fec7 	bl	80064c8 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800673a:	797b      	ldrb	r3, [r7, #5]
 800673c:	4618      	mov	r0, r3
 800673e:	f7ff fea3 	bl	8006488 <SPIx_Read>
 8006742:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8006744:	2201      	movs	r2, #1
 8006746:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800674a:	4807      	ldr	r0, [pc, #28]	@ (8006768 <LCD_IO_ReadData+0x60>)
 800674c:	f001 ff4a 	bl	80085e4 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8006750:	2201      	movs	r2, #1
 8006752:	2104      	movs	r1, #4
 8006754:	4803      	ldr	r0, [pc, #12]	@ (8006764 <LCD_IO_ReadData+0x5c>)
 8006756:	f001 ff45 	bl	80085e4 <HAL_GPIO_WritePin>
  
  return readvalue;
 800675a:	68fb      	ldr	r3, [r7, #12]
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	40020800 	.word	0x40020800
 8006768:	40020c00 	.word	0x40020c00

0800676c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fee5 	bl	8007544 <HAL_Delay>
}
 800677a:	bf00      	nop
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
	...

08006784 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8006784:	b580      	push	{r7, lr}
 8006786:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8006788:	4b2d      	ldr	r3, [pc, #180]	@ (8006840 <BSP_LCD_Init+0xbc>)
 800678a:	4a2e      	ldr	r2, [pc, #184]	@ (8006844 <BSP_LCD_Init+0xc0>)
 800678c:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800678e:	4b2c      	ldr	r3, [pc, #176]	@ (8006840 <BSP_LCD_Init+0xbc>)
 8006790:	2209      	movs	r2, #9
 8006792:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8006794:	4b2a      	ldr	r3, [pc, #168]	@ (8006840 <BSP_LCD_Init+0xbc>)
 8006796:	2201      	movs	r2, #1
 8006798:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800679a:	4b29      	ldr	r3, [pc, #164]	@ (8006840 <BSP_LCD_Init+0xbc>)
 800679c:	221d      	movs	r2, #29
 800679e:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80067a0:	4b27      	ldr	r3, [pc, #156]	@ (8006840 <BSP_LCD_Init+0xbc>)
 80067a2:	2203      	movs	r2, #3
 80067a4:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80067a6:	4b26      	ldr	r3, [pc, #152]	@ (8006840 <BSP_LCD_Init+0xbc>)
 80067a8:	f240 120d 	movw	r2, #269	@ 0x10d
 80067ac:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80067ae:	4b24      	ldr	r3, [pc, #144]	@ (8006840 <BSP_LCD_Init+0xbc>)
 80067b0:	f240 1243 	movw	r2, #323	@ 0x143
 80067b4:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80067b6:	4b22      	ldr	r3, [pc, #136]	@ (8006840 <BSP_LCD_Init+0xbc>)
 80067b8:	f240 1217 	movw	r2, #279	@ 0x117
 80067bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80067be:	4b20      	ldr	r3, [pc, #128]	@ (8006840 <BSP_LCD_Init+0xbc>)
 80067c0:	f240 1247 	movw	r2, #327	@ 0x147
 80067c4:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80067c6:	4b1e      	ldr	r3, [pc, #120]	@ (8006840 <BSP_LCD_Init+0xbc>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80067ce:	4b1c      	ldr	r3, [pc, #112]	@ (8006840 <BSP_LCD_Init+0xbc>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80067d6:	4b1a      	ldr	r3, [pc, #104]	@ (8006840 <BSP_LCD_Init+0xbc>)
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80067de:	4b1a      	ldr	r3, [pc, #104]	@ (8006848 <BSP_LCD_Init+0xc4>)
 80067e0:	2208      	movs	r2, #8
 80067e2:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80067e4:	4b18      	ldr	r3, [pc, #96]	@ (8006848 <BSP_LCD_Init+0xc4>)
 80067e6:	22c0      	movs	r2, #192	@ 0xc0
 80067e8:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80067ea:	4b17      	ldr	r3, [pc, #92]	@ (8006848 <BSP_LCD_Init+0xc4>)
 80067ec:	2204      	movs	r2, #4
 80067ee:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80067f0:	4b15      	ldr	r3, [pc, #84]	@ (8006848 <BSP_LCD_Init+0xc4>)
 80067f2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80067f6:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80067f8:	4813      	ldr	r0, [pc, #76]	@ (8006848 <BSP_LCD_Init+0xc4>)
 80067fa:	f003 f817 	bl	800982c <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80067fe:	4b10      	ldr	r3, [pc, #64]	@ (8006840 <BSP_LCD_Init+0xbc>)
 8006800:	2200      	movs	r2, #0
 8006802:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8006804:	4b0e      	ldr	r3, [pc, #56]	@ (8006840 <BSP_LCD_Init+0xbc>)
 8006806:	2200      	movs	r2, #0
 8006808:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800680a:	4b0d      	ldr	r3, [pc, #52]	@ (8006840 <BSP_LCD_Init+0xbc>)
 800680c:	2200      	movs	r2, #0
 800680e:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8006810:	4b0b      	ldr	r3, [pc, #44]	@ (8006840 <BSP_LCD_Init+0xbc>)
 8006812:	2200      	movs	r2, #0
 8006814:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8006816:	f000 fa6b 	bl	8006cf0 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 800681a:	4809      	ldr	r0, [pc, #36]	@ (8006840 <BSP_LCD_Init+0xbc>)
 800681c:	f002 f8bc 	bl	8008998 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8006820:	4b0a      	ldr	r3, [pc, #40]	@ (800684c <BSP_LCD_Init+0xc8>)
 8006822:	4a0b      	ldr	r2, [pc, #44]	@ (8006850 <BSP_LCD_Init+0xcc>)
 8006824:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8006826:	4b09      	ldr	r3, [pc, #36]	@ (800684c <BSP_LCD_Init+0xc8>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800682e:	f000 fc4d 	bl	80070cc <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8006832:	4808      	ldr	r0, [pc, #32]	@ (8006854 <BSP_LCD_Init+0xd0>)
 8006834:	f000 f8be 	bl	80069b4 <BSP_LCD_SetFont>

  return LCD_OK;
 8006838:	2300      	movs	r3, #0
}  
 800683a:	4618      	mov	r0, r3
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	200010f8 	.word	0x200010f8
 8006844:	40016800 	.word	0x40016800
 8006848:	200011e0 	.word	0x200011e0
 800684c:	2000122c 	.word	0x2000122c
 8006850:	2000001c 	.word	0x2000001c
 8006854:	20000058 	.word	0x20000058

08006858 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 800685c:	4b03      	ldr	r3, [pc, #12]	@ (800686c <BSP_LCD_GetXSize+0x14>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006862:	4798      	blx	r3
 8006864:	4603      	mov	r3, r0
}
 8006866:	4618      	mov	r0, r3
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	2000122c 	.word	0x2000122c

08006870 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8006874:	4b03      	ldr	r3, [pc, #12]	@ (8006884 <BSP_LCD_GetYSize+0x14>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687a:	4798      	blx	r3
 800687c:	4603      	mov	r3, r0
}
 800687e:	4618      	mov	r0, r3
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	2000122c 	.word	0x2000122c

08006888 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8006888:	b580      	push	{r7, lr}
 800688a:	b090      	sub	sp, #64	@ 0x40
 800688c:	af00      	add	r7, sp, #0
 800688e:	4603      	mov	r3, r0
 8006890:	6039      	str	r1, [r7, #0]
 8006892:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8006894:	2300      	movs	r3, #0
 8006896:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8006898:	f7ff ffde 	bl	8006858 <BSP_LCD_GetXSize>
 800689c:	4603      	mov	r3, r0
 800689e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80068a0:	2300      	movs	r3, #0
 80068a2:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80068a4:	f7ff ffe4 	bl	8006870 <BSP_LCD_GetYSize>
 80068a8:	4603      	mov	r3, r0
 80068aa:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80068ac:	2300      	movs	r3, #0
 80068ae:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 80068b4:	23ff      	movs	r3, #255	@ 0xff
 80068b6:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80068b8:	2300      	movs	r3, #0
 80068ba:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 80068bc:	2300      	movs	r3, #0
 80068be:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 80068c2:	2300      	movs	r3, #0
 80068c4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 80068c8:	2300      	movs	r3, #0
 80068ca:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80068ce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80068d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80068d4:	2307      	movs	r3, #7
 80068d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80068d8:	f7ff ffbe 	bl	8006858 <BSP_LCD_GetXSize>
 80068dc:	4603      	mov	r3, r0
 80068de:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80068e0:	f7ff ffc6 	bl	8006870 <BSP_LCD_GetYSize>
 80068e4:	4603      	mov	r3, r0
 80068e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80068e8:	88fa      	ldrh	r2, [r7, #6]
 80068ea:	f107 030c 	add.w	r3, r7, #12
 80068ee:	4619      	mov	r1, r3
 80068f0:	4814      	ldr	r0, [pc, #80]	@ (8006944 <BSP_LCD_LayerDefaultInit+0xbc>)
 80068f2:	f002 f921 	bl	8008b38 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80068f6:	88fa      	ldrh	r2, [r7, #6]
 80068f8:	4913      	ldr	r1, [pc, #76]	@ (8006948 <BSP_LCD_LayerDefaultInit+0xc0>)
 80068fa:	4613      	mov	r3, r2
 80068fc:	005b      	lsls	r3, r3, #1
 80068fe:	4413      	add	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	440b      	add	r3, r1
 8006904:	3304      	adds	r3, #4
 8006906:	f04f 32ff 	mov.w	r2, #4294967295
 800690a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800690c:	88fa      	ldrh	r2, [r7, #6]
 800690e:	490e      	ldr	r1, [pc, #56]	@ (8006948 <BSP_LCD_LayerDefaultInit+0xc0>)
 8006910:	4613      	mov	r3, r2
 8006912:	005b      	lsls	r3, r3, #1
 8006914:	4413      	add	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	440b      	add	r3, r1
 800691a:	3308      	adds	r3, #8
 800691c:	4a0b      	ldr	r2, [pc, #44]	@ (800694c <BSP_LCD_LayerDefaultInit+0xc4>)
 800691e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8006920:	88fa      	ldrh	r2, [r7, #6]
 8006922:	4909      	ldr	r1, [pc, #36]	@ (8006948 <BSP_LCD_LayerDefaultInit+0xc0>)
 8006924:	4613      	mov	r3, r2
 8006926:	005b      	lsls	r3, r3, #1
 8006928:	4413      	add	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	440b      	add	r3, r1
 800692e:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8006932:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8006934:	4803      	ldr	r0, [pc, #12]	@ (8006944 <BSP_LCD_LayerDefaultInit+0xbc>)
 8006936:	f002 f93d 	bl	8008bb4 <HAL_LTDC_EnableDither>
}
 800693a:	bf00      	nop
 800693c:	3740      	adds	r7, #64	@ 0x40
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	200010f8 	.word	0x200010f8
 8006948:	20001214 	.word	0x20001214
 800694c:	20000058 	.word	0x20000058

08006950 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8006958:	4b07      	ldr	r3, [pc, #28]	@ (8006978 <BSP_LCD_SetTextColor+0x28>)
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	4907      	ldr	r1, [pc, #28]	@ (800697c <BSP_LCD_SetTextColor+0x2c>)
 800695e:	4613      	mov	r3, r2
 8006960:	005b      	lsls	r3, r3, #1
 8006962:	4413      	add	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	440b      	add	r3, r1
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	601a      	str	r2, [r3, #0]
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	20001210 	.word	0x20001210
 800697c:	20001214 	.word	0x20001214

08006980 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8006988:	4b08      	ldr	r3, [pc, #32]	@ (80069ac <BSP_LCD_SetBackColor+0x2c>)
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	4908      	ldr	r1, [pc, #32]	@ (80069b0 <BSP_LCD_SetBackColor+0x30>)
 800698e:	4613      	mov	r3, r2
 8006990:	005b      	lsls	r3, r3, #1
 8006992:	4413      	add	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	440b      	add	r3, r1
 8006998:	3304      	adds	r3, #4
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	601a      	str	r2, [r3, #0]
}
 800699e:	bf00      	nop
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	20001210 	.word	0x20001210
 80069b0:	20001214 	.word	0x20001214

080069b4 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80069bc:	4b08      	ldr	r3, [pc, #32]	@ (80069e0 <BSP_LCD_SetFont+0x2c>)
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	4908      	ldr	r1, [pc, #32]	@ (80069e4 <BSP_LCD_SetFont+0x30>)
 80069c2:	4613      	mov	r3, r2
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	4413      	add	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	440b      	add	r3, r1
 80069cc:	3308      	adds	r3, #8
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	601a      	str	r2, [r3, #0]
}
 80069d2:	bf00      	nop
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	20001210 	.word	0x20001210
 80069e4:	20001214 	.word	0x20001214

080069e8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80069e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af02      	add	r7, sp, #8
 80069ee:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80069f0:	4b0f      	ldr	r3, [pc, #60]	@ (8006a30 <BSP_LCD_Clear+0x48>)
 80069f2:	681c      	ldr	r4, [r3, #0]
 80069f4:	4b0e      	ldr	r3, [pc, #56]	@ (8006a30 <BSP_LCD_Clear+0x48>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a0e      	ldr	r2, [pc, #56]	@ (8006a34 <BSP_LCD_Clear+0x4c>)
 80069fa:	2134      	movs	r1, #52	@ 0x34
 80069fc:	fb01 f303 	mul.w	r3, r1, r3
 8006a00:	4413      	add	r3, r2
 8006a02:	335c      	adds	r3, #92	@ 0x5c
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	461e      	mov	r6, r3
 8006a08:	f7ff ff26 	bl	8006858 <BSP_LCD_GetXSize>
 8006a0c:	4605      	mov	r5, r0
 8006a0e:	f7ff ff2f 	bl	8006870 <BSP_LCD_GetYSize>
 8006a12:	4602      	mov	r2, r0
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	9301      	str	r3, [sp, #4]
 8006a18:	2300      	movs	r3, #0
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	462a      	mov	r2, r5
 8006a20:	4631      	mov	r1, r6
 8006a22:	4620      	mov	r0, r4
 8006a24:	f000 fb1a 	bl	800705c <FillBuffer>
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a30:	20001210 	.word	0x20001210
 8006a34:	200010f8 	.word	0x200010f8

08006a38 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8006a38:	b590      	push	{r4, r7, lr}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	4603      	mov	r3, r0
 8006a40:	80fb      	strh	r3, [r7, #6]
 8006a42:	460b      	mov	r3, r1
 8006a44:	80bb      	strh	r3, [r7, #4]
 8006a46:	4613      	mov	r3, r2
 8006a48:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ab8 <BSP_LCD_DisplayChar+0x80>)
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	491b      	ldr	r1, [pc, #108]	@ (8006abc <BSP_LCD_DisplayChar+0x84>)
 8006a50:	4613      	mov	r3, r2
 8006a52:	005b      	lsls	r3, r3, #1
 8006a54:	4413      	add	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	440b      	add	r3, r1
 8006a5a:	3308      	adds	r3, #8
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6819      	ldr	r1, [r3, #0]
 8006a60:	78fb      	ldrb	r3, [r7, #3]
 8006a62:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8006a66:	4b14      	ldr	r3, [pc, #80]	@ (8006ab8 <BSP_LCD_DisplayChar+0x80>)
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	4c14      	ldr	r4, [pc, #80]	@ (8006abc <BSP_LCD_DisplayChar+0x84>)
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	005b      	lsls	r3, r3, #1
 8006a70:	4413      	add	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4423      	add	r3, r4
 8006a76:	3308      	adds	r3, #8
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006a7c:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8006a80:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab8 <BSP_LCD_DisplayChar+0x80>)
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	4c0d      	ldr	r4, [pc, #52]	@ (8006abc <BSP_LCD_DisplayChar+0x84>)
 8006a86:	4613      	mov	r3, r2
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	4413      	add	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4423      	add	r3, r4
 8006a90:	3308      	adds	r3, #8
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	889b      	ldrh	r3, [r3, #4]
 8006a96:	3307      	adds	r3, #7
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	da00      	bge.n	8006a9e <BSP_LCD_DisplayChar+0x66>
 8006a9c:	3307      	adds	r3, #7
 8006a9e:	10db      	asrs	r3, r3, #3
 8006aa0:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006aa4:	18ca      	adds	r2, r1, r3
 8006aa6:	88b9      	ldrh	r1, [r7, #4]
 8006aa8:	88fb      	ldrh	r3, [r7, #6]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f000 fa1c 	bl	8006ee8 <DrawChar>
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd90      	pop	{r4, r7, pc}
 8006ab8:	20001210 	.word	0x20001210
 8006abc:	20001214 	.word	0x20001214

08006ac0 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8006ac0:	b5b0      	push	{r4, r5, r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60ba      	str	r2, [r7, #8]
 8006ac8:	461a      	mov	r2, r3
 8006aca:	4603      	mov	r3, r0
 8006acc:	81fb      	strh	r3, [r7, #14]
 8006ace:	460b      	mov	r3, r1
 8006ad0:	81bb      	strh	r3, [r7, #12]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	83fb      	strh	r3, [r7, #30]
 8006ada:	2300      	movs	r3, #0
 8006adc:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8006ade:	2300      	movs	r3, #0
 8006ae0:	61bb      	str	r3, [r7, #24]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8006aea:	e002      	b.n	8006af2 <BSP_LCD_DisplayStringAt+0x32>
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	3301      	adds	r3, #1
 8006af0:	61bb      	str	r3, [r7, #24]
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	1c5a      	adds	r2, r3, #1
 8006af6:	617a      	str	r2, [r7, #20]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1f6      	bne.n	8006aec <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8006afe:	f7ff feab 	bl	8006858 <BSP_LCD_GetXSize>
 8006b02:	4601      	mov	r1, r0
 8006b04:	4b4b      	ldr	r3, [pc, #300]	@ (8006c34 <BSP_LCD_DisplayStringAt+0x174>)
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	484b      	ldr	r0, [pc, #300]	@ (8006c38 <BSP_LCD_DisplayStringAt+0x178>)
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	4413      	add	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4403      	add	r3, r0
 8006b14:	3308      	adds	r3, #8
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	889b      	ldrh	r3, [r3, #4]
 8006b1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b1e:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8006b20:	79fb      	ldrb	r3, [r7, #7]
 8006b22:	2b03      	cmp	r3, #3
 8006b24:	d01c      	beq.n	8006b60 <BSP_LCD_DisplayStringAt+0xa0>
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	dc33      	bgt.n	8006b92 <BSP_LCD_DisplayStringAt+0xd2>
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d002      	beq.n	8006b34 <BSP_LCD_DisplayStringAt+0x74>
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d019      	beq.n	8006b66 <BSP_LCD_DisplayStringAt+0xa6>
 8006b32:	e02e      	b.n	8006b92 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	1ad1      	subs	r1, r2, r3
 8006b3a:	4b3e      	ldr	r3, [pc, #248]	@ (8006c34 <BSP_LCD_DisplayStringAt+0x174>)
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	483e      	ldr	r0, [pc, #248]	@ (8006c38 <BSP_LCD_DisplayStringAt+0x178>)
 8006b40:	4613      	mov	r3, r2
 8006b42:	005b      	lsls	r3, r3, #1
 8006b44:	4413      	add	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4403      	add	r3, r0
 8006b4a:	3308      	adds	r3, #8
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	889b      	ldrh	r3, [r3, #4]
 8006b50:	fb01 f303 	mul.w	r3, r1, r3
 8006b54:	085b      	lsrs	r3, r3, #1
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	89fb      	ldrh	r3, [r7, #14]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	83fb      	strh	r3, [r7, #30]
      break;
 8006b5e:	e01b      	b.n	8006b98 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8006b60:	89fb      	ldrh	r3, [r7, #14]
 8006b62:	83fb      	strh	r3, [r7, #30]
      break;
 8006b64:	e018      	b.n	8006b98 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	b299      	uxth	r1, r3
 8006b6e:	4b31      	ldr	r3, [pc, #196]	@ (8006c34 <BSP_LCD_DisplayStringAt+0x174>)
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	4831      	ldr	r0, [pc, #196]	@ (8006c38 <BSP_LCD_DisplayStringAt+0x178>)
 8006b74:	4613      	mov	r3, r2
 8006b76:	005b      	lsls	r3, r3, #1
 8006b78:	4413      	add	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4403      	add	r3, r0
 8006b7e:	3308      	adds	r3, #8
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	889b      	ldrh	r3, [r3, #4]
 8006b84:	fb11 f303 	smulbb	r3, r1, r3
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	89fb      	ldrh	r3, [r7, #14]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	83fb      	strh	r3, [r7, #30]
      break;
 8006b90:	e002      	b.n	8006b98 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8006b92:	89fb      	ldrh	r3, [r7, #14]
 8006b94:	83fb      	strh	r3, [r7, #30]
      break;
 8006b96:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8006b98:	e01a      	b.n	8006bd0 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	781a      	ldrb	r2, [r3, #0]
 8006b9e:	89b9      	ldrh	r1, [r7, #12]
 8006ba0:	8bfb      	ldrh	r3, [r7, #30]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7ff ff48 	bl	8006a38 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8006ba8:	4b22      	ldr	r3, [pc, #136]	@ (8006c34 <BSP_LCD_DisplayStringAt+0x174>)
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	4922      	ldr	r1, [pc, #136]	@ (8006c38 <BSP_LCD_DisplayStringAt+0x178>)
 8006bae:	4613      	mov	r3, r2
 8006bb0:	005b      	lsls	r3, r3, #1
 8006bb2:	4413      	add	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	440b      	add	r3, r1
 8006bb8:	3308      	adds	r3, #8
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	889a      	ldrh	r2, [r3, #4]
 8006bbe:	8bfb      	ldrh	r3, [r7, #30]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	60bb      	str	r3, [r7, #8]
    i++;
 8006bca:	8bbb      	ldrh	r3, [r7, #28]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	bf14      	ite	ne
 8006bd8:	2301      	movne	r3, #1
 8006bda:	2300      	moveq	r3, #0
 8006bdc:	b2dc      	uxtb	r4, r3
 8006bde:	f7ff fe3b 	bl	8006858 <BSP_LCD_GetXSize>
 8006be2:	8bb9      	ldrh	r1, [r7, #28]
 8006be4:	4b13      	ldr	r3, [pc, #76]	@ (8006c34 <BSP_LCD_DisplayStringAt+0x174>)
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	4d13      	ldr	r5, [pc, #76]	@ (8006c38 <BSP_LCD_DisplayStringAt+0x178>)
 8006bea:	4613      	mov	r3, r2
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	4413      	add	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	442b      	add	r3, r5
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	889b      	ldrh	r3, [r3, #4]
 8006bfa:	fb01 f303 	mul.w	r3, r1, r3
 8006bfe:	1ac3      	subs	r3, r0, r3
 8006c00:	b299      	uxth	r1, r3
 8006c02:	4b0c      	ldr	r3, [pc, #48]	@ (8006c34 <BSP_LCD_DisplayStringAt+0x174>)
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	480c      	ldr	r0, [pc, #48]	@ (8006c38 <BSP_LCD_DisplayStringAt+0x178>)
 8006c08:	4613      	mov	r3, r2
 8006c0a:	005b      	lsls	r3, r3, #1
 8006c0c:	4413      	add	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4403      	add	r3, r0
 8006c12:	3308      	adds	r3, #8
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	889b      	ldrh	r3, [r3, #4]
 8006c18:	4299      	cmp	r1, r3
 8006c1a:	bf2c      	ite	cs
 8006c1c:	2301      	movcs	r3, #1
 8006c1e:	2300      	movcc	r3, #0
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	4023      	ands	r3, r4
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1b7      	bne.n	8006b9a <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8006c2a:	bf00      	nop
 8006c2c:	bf00      	nop
 8006c2e:	3720      	adds	r7, #32
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bdb0      	pop	{r4, r5, r7, pc}
 8006c34:	20001210 	.word	0x20001210
 8006c38:	20001214 	.word	0x20001214

08006c3c <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8006c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c40:	b086      	sub	sp, #24
 8006c42:	af02      	add	r7, sp, #8
 8006c44:	4604      	mov	r4, r0
 8006c46:	4608      	mov	r0, r1
 8006c48:	4611      	mov	r1, r2
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	4623      	mov	r3, r4
 8006c4e:	80fb      	strh	r3, [r7, #6]
 8006c50:	4603      	mov	r3, r0
 8006c52:	80bb      	strh	r3, [r7, #4]
 8006c54:	460b      	mov	r3, r1
 8006c56:	807b      	strh	r3, [r7, #2]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006c60:	4b20      	ldr	r3, [pc, #128]	@ (8006ce4 <BSP_LCD_FillRect+0xa8>)
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	4920      	ldr	r1, [pc, #128]	@ (8006ce8 <BSP_LCD_FillRect+0xac>)
 8006c66:	4613      	mov	r3, r2
 8006c68:	005b      	lsls	r3, r3, #1
 8006c6a:	4413      	add	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	440b      	add	r3, r1
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7ff fe6c 	bl	8006950 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006c78:	4b1a      	ldr	r3, [pc, #104]	@ (8006ce4 <BSP_LCD_FillRect+0xa8>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8006cec <BSP_LCD_FillRect+0xb0>)
 8006c7e:	2134      	movs	r1, #52	@ 0x34
 8006c80:	fb01 f303 	mul.w	r3, r1, r3
 8006c84:	4413      	add	r3, r2
 8006c86:	335c      	adds	r3, #92	@ 0x5c
 8006c88:	681c      	ldr	r4, [r3, #0]
 8006c8a:	f7ff fde5 	bl	8006858 <BSP_LCD_GetXSize>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	88bb      	ldrh	r3, [r7, #4]
 8006c92:	fb03 f202 	mul.w	r2, r3, r2
 8006c96:	88fb      	ldrh	r3, [r7, #6]
 8006c98:	4413      	add	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4423      	add	r3, r4
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8006ca0:	4b10      	ldr	r3, [pc, #64]	@ (8006ce4 <BSP_LCD_FillRect+0xa8>)
 8006ca2:	681c      	ldr	r4, [r3, #0]
 8006ca4:	68fd      	ldr	r5, [r7, #12]
 8006ca6:	887e      	ldrh	r6, [r7, #2]
 8006ca8:	f8b7 8000 	ldrh.w	r8, [r7]
 8006cac:	f7ff fdd4 	bl	8006858 <BSP_LCD_GetXSize>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	887b      	ldrh	r3, [r7, #2]
 8006cb4:	1ad1      	subs	r1, r2, r3
 8006cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce4 <BSP_LCD_FillRect+0xa8>)
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	480b      	ldr	r0, [pc, #44]	@ (8006ce8 <BSP_LCD_FillRect+0xac>)
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	005b      	lsls	r3, r3, #1
 8006cc0:	4413      	add	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4403      	add	r3, r0
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	9301      	str	r3, [sp, #4]
 8006cca:	9100      	str	r1, [sp, #0]
 8006ccc:	4643      	mov	r3, r8
 8006cce:	4632      	mov	r2, r6
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f000 f9c2 	bl	800705c <FillBuffer>
}
 8006cd8:	bf00      	nop
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ce2:	bf00      	nop
 8006ce4:	20001210 	.word	0x20001210
 8006ce8:	20001214 	.word	0x20001214
 8006cec:	200010f8 	.word	0x200010f8

08006cf0 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b08e      	sub	sp, #56	@ 0x38
 8006cf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	623b      	str	r3, [r7, #32]
 8006cfa:	4b61      	ldr	r3, [pc, #388]	@ (8006e80 <BSP_LCD_MspInit+0x190>)
 8006cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cfe:	4a60      	ldr	r2, [pc, #384]	@ (8006e80 <BSP_LCD_MspInit+0x190>)
 8006d00:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006d04:	6453      	str	r3, [r2, #68]	@ 0x44
 8006d06:	4b5e      	ldr	r3, [pc, #376]	@ (8006e80 <BSP_LCD_MspInit+0x190>)
 8006d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d0a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006d0e:	623b      	str	r3, [r7, #32]
 8006d10:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8006d12:	2300      	movs	r3, #0
 8006d14:	61fb      	str	r3, [r7, #28]
 8006d16:	4b5a      	ldr	r3, [pc, #360]	@ (8006e80 <BSP_LCD_MspInit+0x190>)
 8006d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d1a:	4a59      	ldr	r2, [pc, #356]	@ (8006e80 <BSP_LCD_MspInit+0x190>)
 8006d1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d22:	4b57      	ldr	r3, [pc, #348]	@ (8006e80 <BSP_LCD_MspInit+0x190>)
 8006d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d2a:	61fb      	str	r3, [r7, #28]
 8006d2c:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d2e:	2300      	movs	r3, #0
 8006d30:	61bb      	str	r3, [r7, #24]
 8006d32:	4b53      	ldr	r3, [pc, #332]	@ (8006e80 <BSP_LCD_MspInit+0x190>)
 8006d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d36:	4a52      	ldr	r2, [pc, #328]	@ (8006e80 <BSP_LCD_MspInit+0x190>)
 8006d38:	f043 0301 	orr.w	r3, r3, #1
 8006d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d3e:	4b50      	ldr	r3, [pc, #320]	@ (8006e80 <BSP_LCD_MspInit+0x190>)
 8006d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	61bb      	str	r3, [r7, #24]
 8006d48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	617b      	str	r3, [r7, #20]
 8006d4e:	4b4c      	ldr	r3, [pc, #304]	@ (8006e80 <BSP_LCD_MspInit+0x190>)
 8006d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d52:	4a4b      	ldr	r2, [pc, #300]	@ (8006e80 <BSP_LCD_MspInit+0x190>)
 8006d54:	f043 0302 	orr.w	r3, r3, #2
 8006d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d5a:	4b49      	ldr	r3, [pc, #292]	@ (8006e80 <BSP_LCD_MspInit+0x190>)
 8006d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	617b      	str	r3, [r7, #20]
 8006d64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d66:	2300      	movs	r3, #0
 8006d68:	613b      	str	r3, [r7, #16]
 8006d6a:	4b45      	ldr	r3, [pc, #276]	@ (8006e80 <BSP_LCD_MspInit+0x190>)
 8006d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d6e:	4a44      	ldr	r2, [pc, #272]	@ (8006e80 <BSP_LCD_MspInit+0x190>)
 8006d70:	f043 0304 	orr.w	r3, r3, #4
 8006d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d76:	4b42      	ldr	r3, [pc, #264]	@ (8006e80 <BSP_LCD_MspInit+0x190>)
 8006d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d7a:	f003 0304 	and.w	r3, r3, #4
 8006d7e:	613b      	str	r3, [r7, #16]
 8006d80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d82:	2300      	movs	r3, #0
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	4b3e      	ldr	r3, [pc, #248]	@ (8006e80 <BSP_LCD_MspInit+0x190>)
 8006d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d8a:	4a3d      	ldr	r2, [pc, #244]	@ (8006e80 <BSP_LCD_MspInit+0x190>)
 8006d8c:	f043 0308 	orr.w	r3, r3, #8
 8006d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d92:	4b3b      	ldr	r3, [pc, #236]	@ (8006e80 <BSP_LCD_MspInit+0x190>)
 8006d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d96:	f003 0308 	and.w	r3, r3, #8
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006d9e:	2300      	movs	r3, #0
 8006da0:	60bb      	str	r3, [r7, #8]
 8006da2:	4b37      	ldr	r3, [pc, #220]	@ (8006e80 <BSP_LCD_MspInit+0x190>)
 8006da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da6:	4a36      	ldr	r2, [pc, #216]	@ (8006e80 <BSP_LCD_MspInit+0x190>)
 8006da8:	f043 0320 	orr.w	r3, r3, #32
 8006dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8006dae:	4b34      	ldr	r3, [pc, #208]	@ (8006e80 <BSP_LCD_MspInit+0x190>)
 8006db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006db2:	f003 0320 	and.w	r3, r3, #32
 8006db6:	60bb      	str	r3, [r7, #8]
 8006db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006dba:	2300      	movs	r3, #0
 8006dbc:	607b      	str	r3, [r7, #4]
 8006dbe:	4b30      	ldr	r3, [pc, #192]	@ (8006e80 <BSP_LCD_MspInit+0x190>)
 8006dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc2:	4a2f      	ldr	r2, [pc, #188]	@ (8006e80 <BSP_LCD_MspInit+0x190>)
 8006dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8006dca:	4b2d      	ldr	r3, [pc, #180]	@ (8006e80 <BSP_LCD_MspInit+0x190>)
 8006dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd2:	607b      	str	r3, [r7, #4]
 8006dd4:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8006dd6:	f641 0358 	movw	r3, #6232	@ 0x1858
 8006dda:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8006ddc:	2302      	movs	r3, #2
 8006dde:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8006de0:	2300      	movs	r3, #0
 8006de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8006de4:	2302      	movs	r3, #2
 8006de6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8006de8:	230e      	movs	r3, #14
 8006dea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8006dec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006df0:	4619      	mov	r1, r3
 8006df2:	4824      	ldr	r0, [pc, #144]	@ (8006e84 <BSP_LCD_MspInit+0x194>)
 8006df4:	f001 f926 	bl	8008044 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8006df8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8006dfc:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8006dfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e02:	4619      	mov	r1, r3
 8006e04:	4820      	ldr	r0, [pc, #128]	@ (8006e88 <BSP_LCD_MspInit+0x198>)
 8006e06:	f001 f91d 	bl	8008044 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8006e0a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8006e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8006e10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e14:	4619      	mov	r1, r3
 8006e16:	481d      	ldr	r0, [pc, #116]	@ (8006e8c <BSP_LCD_MspInit+0x19c>)
 8006e18:	f001 f914 	bl	8008044 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8006e1c:	2348      	movs	r3, #72	@ 0x48
 8006e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8006e20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e24:	4619      	mov	r1, r3
 8006e26:	481a      	ldr	r0, [pc, #104]	@ (8006e90 <BSP_LCD_MspInit+0x1a0>)
 8006e28:	f001 f90c 	bl	8008044 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8006e2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8006e32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e36:	4619      	mov	r1, r3
 8006e38:	4816      	ldr	r0, [pc, #88]	@ (8006e94 <BSP_LCD_MspInit+0x1a4>)
 8006e3a:	f001 f903 	bl	8008044 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8006e3e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8006e42:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8006e44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e48:	4619      	mov	r1, r3
 8006e4a:	4813      	ldr	r0, [pc, #76]	@ (8006e98 <BSP_LCD_MspInit+0x1a8>)
 8006e4c:	f001 f8fa 	bl	8008044 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8006e50:	2303      	movs	r3, #3
 8006e52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8006e54:	2309      	movs	r3, #9
 8006e56:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8006e58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	480a      	ldr	r0, [pc, #40]	@ (8006e88 <BSP_LCD_MspInit+0x198>)
 8006e60:	f001 f8f0 	bl	8008044 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8006e64:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8006e68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8006e6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4809      	ldr	r0, [pc, #36]	@ (8006e98 <BSP_LCD_MspInit+0x1a8>)
 8006e72:	f001 f8e7 	bl	8008044 <HAL_GPIO_Init>
}
 8006e76:	bf00      	nop
 8006e78:	3738      	adds	r7, #56	@ 0x38
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	40023800 	.word	0x40023800
 8006e84:	40020000 	.word	0x40020000
 8006e88:	40020400 	.word	0x40020400
 8006e8c:	40020800 	.word	0x40020800
 8006e90:	40020c00 	.word	0x40020c00
 8006e94:	40021400 	.word	0x40021400
 8006e98:	40021800 	.word	0x40021800

08006e9c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8006e9c:	b5b0      	push	{r4, r5, r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	603a      	str	r2, [r7, #0]
 8006ea6:	80fb      	strh	r3, [r7, #6]
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8006eac:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee0 <BSP_LCD_DrawPixel+0x44>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a0c      	ldr	r2, [pc, #48]	@ (8006ee4 <BSP_LCD_DrawPixel+0x48>)
 8006eb2:	2134      	movs	r1, #52	@ 0x34
 8006eb4:	fb01 f303 	mul.w	r3, r1, r3
 8006eb8:	4413      	add	r3, r2
 8006eba:	335c      	adds	r3, #92	@ 0x5c
 8006ebc:	681c      	ldr	r4, [r3, #0]
 8006ebe:	88bd      	ldrh	r5, [r7, #4]
 8006ec0:	f7ff fcca 	bl	8006858 <BSP_LCD_GetXSize>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	fb03 f205 	mul.w	r2, r3, r5
 8006eca:	88fb      	ldrh	r3, [r7, #6]
 8006ecc:	4413      	add	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4423      	add	r3, r4
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	6013      	str	r3, [r2, #0]
}
 8006ed8:	bf00      	nop
 8006eda:	3708      	adds	r7, #8
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bdb0      	pop	{r4, r5, r7, pc}
 8006ee0:	20001210 	.word	0x20001210
 8006ee4:	200010f8 	.word	0x200010f8

08006ee8 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	4603      	mov	r3, r0
 8006ef0:	603a      	str	r2, [r7, #0]
 8006ef2:	80fb      	strh	r3, [r7, #6]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	61fb      	str	r3, [r7, #28]
 8006efc:	2300      	movs	r3, #0
 8006efe:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8006f00:	2300      	movs	r3, #0
 8006f02:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8006f04:	4b53      	ldr	r3, [pc, #332]	@ (8007054 <DrawChar+0x16c>)
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	4953      	ldr	r1, [pc, #332]	@ (8007058 <DrawChar+0x170>)
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	005b      	lsls	r3, r3, #1
 8006f0e:	4413      	add	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	440b      	add	r3, r1
 8006f14:	3308      	adds	r3, #8
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	88db      	ldrh	r3, [r3, #6]
 8006f1a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8006f1c:	4b4d      	ldr	r3, [pc, #308]	@ (8007054 <DrawChar+0x16c>)
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	494d      	ldr	r1, [pc, #308]	@ (8007058 <DrawChar+0x170>)
 8006f22:	4613      	mov	r3, r2
 8006f24:	005b      	lsls	r3, r3, #1
 8006f26:	4413      	add	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	440b      	add	r3, r1
 8006f2c:	3308      	adds	r3, #8
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	889b      	ldrh	r3, [r3, #4]
 8006f32:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8006f34:	8a3b      	ldrh	r3, [r7, #16]
 8006f36:	3307      	adds	r3, #7
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	da00      	bge.n	8006f3e <DrawChar+0x56>
 8006f3c:	3307      	adds	r3, #7
 8006f3e:	10db      	asrs	r3, r3, #3
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	00db      	lsls	r3, r3, #3
 8006f44:	b2da      	uxtb	r2, r3
 8006f46:	8a3b      	ldrh	r3, [r7, #16]
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8006f4e:	2300      	movs	r3, #0
 8006f50:	61fb      	str	r3, [r7, #28]
 8006f52:	e076      	b.n	8007042 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8006f54:	8a3b      	ldrh	r3, [r7, #16]
 8006f56:	3307      	adds	r3, #7
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	da00      	bge.n	8006f5e <DrawChar+0x76>
 8006f5c:	3307      	adds	r3, #7
 8006f5e:	10db      	asrs	r3, r3, #3
 8006f60:	461a      	mov	r2, r3
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	fb02 f303 	mul.w	r3, r2, r3
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8006f6e:	8a3b      	ldrh	r3, [r7, #16]
 8006f70:	3307      	adds	r3, #7
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	da00      	bge.n	8006f78 <DrawChar+0x90>
 8006f76:	3307      	adds	r3, #7
 8006f78:	10db      	asrs	r3, r3, #3
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d002      	beq.n	8006f84 <DrawChar+0x9c>
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d004      	beq.n	8006f8c <DrawChar+0xa4>
 8006f82:	e00c      	b.n	8006f9e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	617b      	str	r3, [r7, #20]
      break;
 8006f8a:	e016      	b.n	8006fba <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	021b      	lsls	r3, r3, #8
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	3201      	adds	r2, #1
 8006f96:	7812      	ldrb	r2, [r2, #0]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	617b      	str	r3, [r7, #20]
      break;
 8006f9c:	e00d      	b.n	8006fba <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	041a      	lsls	r2, r3, #16
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	021b      	lsls	r3, r3, #8
 8006fac:	4313      	orrs	r3, r2
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	3202      	adds	r2, #2
 8006fb2:	7812      	ldrb	r2, [r2, #0]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	617b      	str	r3, [r7, #20]
      break;
 8006fb8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8006fba:	2300      	movs	r3, #0
 8006fbc:	61bb      	str	r3, [r7, #24]
 8006fbe:	e036      	b.n	800702e <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8006fc0:	8a3a      	ldrh	r2, [r7, #16]
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	1ad2      	subs	r2, r2, r3
 8006fc6:	7bfb      	ldrb	r3, [r7, #15]
 8006fc8:	4413      	add	r3, r2
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	2201      	movs	r2, #1
 8006fce:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d012      	beq.n	8007002 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	88fb      	ldrh	r3, [r7, #6]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	b298      	uxth	r0, r3
 8006fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8007054 <DrawChar+0x16c>)
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	491b      	ldr	r1, [pc, #108]	@ (8007058 <DrawChar+0x170>)
 8006fec:	4613      	mov	r3, r2
 8006fee:	005b      	lsls	r3, r3, #1
 8006ff0:	4413      	add	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	440b      	add	r3, r1
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	88bb      	ldrh	r3, [r7, #4]
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	f7ff ff4e 	bl	8006e9c <BSP_LCD_DrawPixel>
 8007000:	e012      	b.n	8007028 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	b29a      	uxth	r2, r3
 8007006:	88fb      	ldrh	r3, [r7, #6]
 8007008:	4413      	add	r3, r2
 800700a:	b298      	uxth	r0, r3
 800700c:	4b11      	ldr	r3, [pc, #68]	@ (8007054 <DrawChar+0x16c>)
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	4911      	ldr	r1, [pc, #68]	@ (8007058 <DrawChar+0x170>)
 8007012:	4613      	mov	r3, r2
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	4413      	add	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	440b      	add	r3, r1
 800701c:	3304      	adds	r3, #4
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	88bb      	ldrh	r3, [r7, #4]
 8007022:	4619      	mov	r1, r3
 8007024:	f7ff ff3a 	bl	8006e9c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	3301      	adds	r3, #1
 800702c:	61bb      	str	r3, [r7, #24]
 800702e:	8a3b      	ldrh	r3, [r7, #16]
 8007030:	69ba      	ldr	r2, [r7, #24]
 8007032:	429a      	cmp	r2, r3
 8007034:	d3c4      	bcc.n	8006fc0 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8007036:	88bb      	ldrh	r3, [r7, #4]
 8007038:	3301      	adds	r3, #1
 800703a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	3301      	adds	r3, #1
 8007040:	61fb      	str	r3, [r7, #28]
 8007042:	8a7b      	ldrh	r3, [r7, #18]
 8007044:	69fa      	ldr	r2, [r7, #28]
 8007046:	429a      	cmp	r2, r3
 8007048:	d384      	bcc.n	8006f54 <DrawChar+0x6c>
  }
}
 800704a:	bf00      	nop
 800704c:	bf00      	nop
 800704e:	3720      	adds	r7, #32
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	20001210 	.word	0x20001210
 8007058:	20001214 	.word	0x20001214

0800705c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af02      	add	r7, sp, #8
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
 8007068:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800706a:	4b16      	ldr	r3, [pc, #88]	@ (80070c4 <FillBuffer+0x68>)
 800706c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8007070:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8007072:	4b14      	ldr	r3, [pc, #80]	@ (80070c4 <FillBuffer+0x68>)
 8007074:	2200      	movs	r2, #0
 8007076:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8007078:	4a12      	ldr	r2, [pc, #72]	@ (80070c4 <FillBuffer+0x68>)
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800707e:	4b11      	ldr	r3, [pc, #68]	@ (80070c4 <FillBuffer+0x68>)
 8007080:	4a11      	ldr	r2, [pc, #68]	@ (80070c8 <FillBuffer+0x6c>)
 8007082:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8007084:	480f      	ldr	r0, [pc, #60]	@ (80070c4 <FillBuffer+0x68>)
 8007086:	f000 fd51 	bl	8007b2c <HAL_DMA2D_Init>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d115      	bne.n	80070bc <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8007090:	68f9      	ldr	r1, [r7, #12]
 8007092:	480c      	ldr	r0, [pc, #48]	@ (80070c4 <FillBuffer+0x68>)
 8007094:	f000 fea8 	bl	8007de8 <HAL_DMA2D_ConfigLayer>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10e      	bne.n	80070bc <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	69f9      	ldr	r1, [r7, #28]
 80070a8:	4806      	ldr	r0, [pc, #24]	@ (80070c4 <FillBuffer+0x68>)
 80070aa:	f000 fd88 	bl	8007bbe <HAL_DMA2D_Start>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d103      	bne.n	80070bc <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80070b4:	210a      	movs	r1, #10
 80070b6:	4803      	ldr	r0, [pc, #12]	@ (80070c4 <FillBuffer+0x68>)
 80070b8:	f000 fdac 	bl	8007c14 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80070bc:	bf00      	nop
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	200011a0 	.word	0x200011a0
 80070c8:	4002b000 	.word	0x4002b000

080070cc <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80070d0:	4b29      	ldr	r3, [pc, #164]	@ (8007178 <BSP_SDRAM_Init+0xac>)
 80070d2:	4a2a      	ldr	r2, [pc, #168]	@ (800717c <BSP_SDRAM_Init+0xb0>)
 80070d4:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80070d6:	4b2a      	ldr	r3, [pc, #168]	@ (8007180 <BSP_SDRAM_Init+0xb4>)
 80070d8:	2202      	movs	r2, #2
 80070da:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80070dc:	4b28      	ldr	r3, [pc, #160]	@ (8007180 <BSP_SDRAM_Init+0xb4>)
 80070de:	2207      	movs	r2, #7
 80070e0:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80070e2:	4b27      	ldr	r3, [pc, #156]	@ (8007180 <BSP_SDRAM_Init+0xb4>)
 80070e4:	2204      	movs	r2, #4
 80070e6:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80070e8:	4b25      	ldr	r3, [pc, #148]	@ (8007180 <BSP_SDRAM_Init+0xb4>)
 80070ea:	2207      	movs	r2, #7
 80070ec:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80070ee:	4b24      	ldr	r3, [pc, #144]	@ (8007180 <BSP_SDRAM_Init+0xb4>)
 80070f0:	2202      	movs	r2, #2
 80070f2:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80070f4:	4b22      	ldr	r3, [pc, #136]	@ (8007180 <BSP_SDRAM_Init+0xb4>)
 80070f6:	2202      	movs	r2, #2
 80070f8:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80070fa:	4b21      	ldr	r3, [pc, #132]	@ (8007180 <BSP_SDRAM_Init+0xb4>)
 80070fc:	2202      	movs	r2, #2
 80070fe:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8007100:	4b1d      	ldr	r3, [pc, #116]	@ (8007178 <BSP_SDRAM_Init+0xac>)
 8007102:	2201      	movs	r2, #1
 8007104:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8007106:	4b1c      	ldr	r3, [pc, #112]	@ (8007178 <BSP_SDRAM_Init+0xac>)
 8007108:	2200      	movs	r2, #0
 800710a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800710c:	4b1a      	ldr	r3, [pc, #104]	@ (8007178 <BSP_SDRAM_Init+0xac>)
 800710e:	2204      	movs	r2, #4
 8007110:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8007112:	4b19      	ldr	r3, [pc, #100]	@ (8007178 <BSP_SDRAM_Init+0xac>)
 8007114:	2210      	movs	r2, #16
 8007116:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8007118:	4b17      	ldr	r3, [pc, #92]	@ (8007178 <BSP_SDRAM_Init+0xac>)
 800711a:	2240      	movs	r2, #64	@ 0x40
 800711c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800711e:	4b16      	ldr	r3, [pc, #88]	@ (8007178 <BSP_SDRAM_Init+0xac>)
 8007120:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8007124:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8007126:	4b14      	ldr	r3, [pc, #80]	@ (8007178 <BSP_SDRAM_Init+0xac>)
 8007128:	2200      	movs	r2, #0
 800712a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800712c:	4b12      	ldr	r3, [pc, #72]	@ (8007178 <BSP_SDRAM_Init+0xac>)
 800712e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007132:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8007134:	4b10      	ldr	r3, [pc, #64]	@ (8007178 <BSP_SDRAM_Init+0xac>)
 8007136:	2200      	movs	r2, #0
 8007138:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800713a:	4b0f      	ldr	r3, [pc, #60]	@ (8007178 <BSP_SDRAM_Init+0xac>)
 800713c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007140:	629a      	str	r2, [r3, #40]	@ 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8007142:	2100      	movs	r1, #0
 8007144:	480c      	ldr	r0, [pc, #48]	@ (8007178 <BSP_SDRAM_Init+0xac>)
 8007146:	f000 f87f 	bl	8007248 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800714a:	490d      	ldr	r1, [pc, #52]	@ (8007180 <BSP_SDRAM_Init+0xb4>)
 800714c:	480a      	ldr	r0, [pc, #40]	@ (8007178 <BSP_SDRAM_Init+0xac>)
 800714e:	f002 fe26 	bl	8009d9e <HAL_SDRAM_Init>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d003      	beq.n	8007160 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8007158:	4b0a      	ldr	r3, [pc, #40]	@ (8007184 <BSP_SDRAM_Init+0xb8>)
 800715a:	2201      	movs	r2, #1
 800715c:	701a      	strb	r2, [r3, #0]
 800715e:	e002      	b.n	8007166 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8007160:	4b08      	ldr	r3, [pc, #32]	@ (8007184 <BSP_SDRAM_Init+0xb8>)
 8007162:	2200      	movs	r2, #0
 8007164:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8007166:	f240 506a 	movw	r0, #1386	@ 0x56a
 800716a:	f000 f80d 	bl	8007188 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800716e:	4b05      	ldr	r3, [pc, #20]	@ (8007184 <BSP_SDRAM_Init+0xb8>)
 8007170:	781b      	ldrb	r3, [r3, #0]
}
 8007172:	4618      	mov	r0, r3
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20001230 	.word	0x20001230
 800717c:	a0000140 	.word	0xa0000140
 8007180:	20001264 	.word	0x20001264
 8007184:	20000068 	.word	0x20000068

08007188 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8007190:	2300      	movs	r3, #0
 8007192:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8007194:	4b2a      	ldr	r3, [pc, #168]	@ (8007240 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007196:	2201      	movs	r2, #1
 8007198:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800719a:	4b29      	ldr	r3, [pc, #164]	@ (8007240 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800719c:	2208      	movs	r2, #8
 800719e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80071a0:	4b27      	ldr	r3, [pc, #156]	@ (8007240 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80071a2:	2201      	movs	r2, #1
 80071a4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80071a6:	4b26      	ldr	r3, [pc, #152]	@ (8007240 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80071ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80071b0:	4923      	ldr	r1, [pc, #140]	@ (8007240 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80071b2:	4824      	ldr	r0, [pc, #144]	@ (8007244 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80071b4:	f002 fe27 	bl	8009e06 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80071b8:	2001      	movs	r0, #1
 80071ba:	f000 f9c3 	bl	8007544 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80071be:	4b20      	ldr	r3, [pc, #128]	@ (8007240 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80071c0:	2202      	movs	r2, #2
 80071c2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80071c4:	4b1e      	ldr	r3, [pc, #120]	@ (8007240 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80071c6:	2208      	movs	r2, #8
 80071c8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80071ca:	4b1d      	ldr	r3, [pc, #116]	@ (8007240 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80071cc:	2201      	movs	r2, #1
 80071ce:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80071d0:	4b1b      	ldr	r3, [pc, #108]	@ (8007240 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80071d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80071da:	4919      	ldr	r1, [pc, #100]	@ (8007240 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80071dc:	4819      	ldr	r0, [pc, #100]	@ (8007244 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80071de:	f002 fe12 	bl	8009e06 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80071e2:	4b17      	ldr	r3, [pc, #92]	@ (8007240 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80071e4:	2203      	movs	r2, #3
 80071e6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80071e8:	4b15      	ldr	r3, [pc, #84]	@ (8007240 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80071ea:	2208      	movs	r2, #8
 80071ec:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80071ee:	4b14      	ldr	r3, [pc, #80]	@ (8007240 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80071f0:	2204      	movs	r2, #4
 80071f2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80071f4:	4b12      	ldr	r3, [pc, #72]	@ (8007240 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80071f6:	2200      	movs	r2, #0
 80071f8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80071fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80071fe:	4910      	ldr	r1, [pc, #64]	@ (8007240 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007200:	4810      	ldr	r0, [pc, #64]	@ (8007244 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007202:	f002 fe00 	bl	8009e06 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8007206:	f44f 730c 	mov.w	r3, #560	@ 0x230
 800720a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 800720c:	4b0c      	ldr	r3, [pc, #48]	@ (8007240 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800720e:	2204      	movs	r2, #4
 8007210:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8007212:	4b0b      	ldr	r3, [pc, #44]	@ (8007240 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007214:	2208      	movs	r2, #8
 8007216:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8007218:	4b09      	ldr	r3, [pc, #36]	@ (8007240 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800721a:	2201      	movs	r2, #1
 800721c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	4a07      	ldr	r2, [pc, #28]	@ (8007240 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007222:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8007224:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007228:	4905      	ldr	r1, [pc, #20]	@ (8007240 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800722a:	4806      	ldr	r0, [pc, #24]	@ (8007244 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800722c:	f002 fdeb 	bl	8009e06 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8007230:	6879      	ldr	r1, [r7, #4]
 8007232:	4804      	ldr	r0, [pc, #16]	@ (8007244 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007234:	f002 fe12 	bl	8009e5c <HAL_SDRAM_ProgramRefreshRate>
}
 8007238:	bf00      	nop
 800723a:	3710      	adds	r7, #16
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	20001280 	.word	0x20001280
 8007244:	20001230 	.word	0x20001230

08007248 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b090      	sub	sp, #64	@ 0x40
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 80ec 	beq.w	8007432 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800725a:	2300      	movs	r3, #0
 800725c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800725e:	4b77      	ldr	r3, [pc, #476]	@ (800743c <BSP_SDRAM_MspInit+0x1f4>)
 8007260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007262:	4a76      	ldr	r2, [pc, #472]	@ (800743c <BSP_SDRAM_MspInit+0x1f4>)
 8007264:	f043 0301 	orr.w	r3, r3, #1
 8007268:	6393      	str	r3, [r2, #56]	@ 0x38
 800726a:	4b74      	ldr	r3, [pc, #464]	@ (800743c <BSP_SDRAM_MspInit+0x1f4>)
 800726c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007274:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8007276:	2300      	movs	r3, #0
 8007278:	627b      	str	r3, [r7, #36]	@ 0x24
 800727a:	4b70      	ldr	r3, [pc, #448]	@ (800743c <BSP_SDRAM_MspInit+0x1f4>)
 800727c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800727e:	4a6f      	ldr	r2, [pc, #444]	@ (800743c <BSP_SDRAM_MspInit+0x1f4>)
 8007280:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007284:	6313      	str	r3, [r2, #48]	@ 0x30
 8007286:	4b6d      	ldr	r3, [pc, #436]	@ (800743c <BSP_SDRAM_MspInit+0x1f4>)
 8007288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800728e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007292:	2300      	movs	r3, #0
 8007294:	623b      	str	r3, [r7, #32]
 8007296:	4b69      	ldr	r3, [pc, #420]	@ (800743c <BSP_SDRAM_MspInit+0x1f4>)
 8007298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800729a:	4a68      	ldr	r2, [pc, #416]	@ (800743c <BSP_SDRAM_MspInit+0x1f4>)
 800729c:	f043 0302 	orr.w	r3, r3, #2
 80072a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80072a2:	4b66      	ldr	r3, [pc, #408]	@ (800743c <BSP_SDRAM_MspInit+0x1f4>)
 80072a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a6:	f003 0302 	and.w	r3, r3, #2
 80072aa:	623b      	str	r3, [r7, #32]
 80072ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80072ae:	2300      	movs	r3, #0
 80072b0:	61fb      	str	r3, [r7, #28]
 80072b2:	4b62      	ldr	r3, [pc, #392]	@ (800743c <BSP_SDRAM_MspInit+0x1f4>)
 80072b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b6:	4a61      	ldr	r2, [pc, #388]	@ (800743c <BSP_SDRAM_MspInit+0x1f4>)
 80072b8:	f043 0304 	orr.w	r3, r3, #4
 80072bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80072be:	4b5f      	ldr	r3, [pc, #380]	@ (800743c <BSP_SDRAM_MspInit+0x1f4>)
 80072c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c2:	f003 0304 	and.w	r3, r3, #4
 80072c6:	61fb      	str	r3, [r7, #28]
 80072c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80072ca:	2300      	movs	r3, #0
 80072cc:	61bb      	str	r3, [r7, #24]
 80072ce:	4b5b      	ldr	r3, [pc, #364]	@ (800743c <BSP_SDRAM_MspInit+0x1f4>)
 80072d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d2:	4a5a      	ldr	r2, [pc, #360]	@ (800743c <BSP_SDRAM_MspInit+0x1f4>)
 80072d4:	f043 0308 	orr.w	r3, r3, #8
 80072d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80072da:	4b58      	ldr	r3, [pc, #352]	@ (800743c <BSP_SDRAM_MspInit+0x1f4>)
 80072dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072de:	f003 0308 	and.w	r3, r3, #8
 80072e2:	61bb      	str	r3, [r7, #24]
 80072e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80072e6:	2300      	movs	r3, #0
 80072e8:	617b      	str	r3, [r7, #20]
 80072ea:	4b54      	ldr	r3, [pc, #336]	@ (800743c <BSP_SDRAM_MspInit+0x1f4>)
 80072ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ee:	4a53      	ldr	r2, [pc, #332]	@ (800743c <BSP_SDRAM_MspInit+0x1f4>)
 80072f0:	f043 0310 	orr.w	r3, r3, #16
 80072f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80072f6:	4b51      	ldr	r3, [pc, #324]	@ (800743c <BSP_SDRAM_MspInit+0x1f4>)
 80072f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072fa:	f003 0310 	and.w	r3, r3, #16
 80072fe:	617b      	str	r3, [r7, #20]
 8007300:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007302:	2300      	movs	r3, #0
 8007304:	613b      	str	r3, [r7, #16]
 8007306:	4b4d      	ldr	r3, [pc, #308]	@ (800743c <BSP_SDRAM_MspInit+0x1f4>)
 8007308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800730a:	4a4c      	ldr	r2, [pc, #304]	@ (800743c <BSP_SDRAM_MspInit+0x1f4>)
 800730c:	f043 0320 	orr.w	r3, r3, #32
 8007310:	6313      	str	r3, [r2, #48]	@ 0x30
 8007312:	4b4a      	ldr	r3, [pc, #296]	@ (800743c <BSP_SDRAM_MspInit+0x1f4>)
 8007314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007316:	f003 0320 	and.w	r3, r3, #32
 800731a:	613b      	str	r3, [r7, #16]
 800731c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800731e:	2300      	movs	r3, #0
 8007320:	60fb      	str	r3, [r7, #12]
 8007322:	4b46      	ldr	r3, [pc, #280]	@ (800743c <BSP_SDRAM_MspInit+0x1f4>)
 8007324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007326:	4a45      	ldr	r2, [pc, #276]	@ (800743c <BSP_SDRAM_MspInit+0x1f4>)
 8007328:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800732c:	6313      	str	r3, [r2, #48]	@ 0x30
 800732e:	4b43      	ldr	r3, [pc, #268]	@ (800743c <BSP_SDRAM_MspInit+0x1f4>)
 8007330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007336:	60fb      	str	r3, [r7, #12]
 8007338:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800733a:	2302      	movs	r3, #2
 800733c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800733e:	2302      	movs	r3, #2
 8007340:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8007342:	2300      	movs	r3, #0
 8007344:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8007346:	230c      	movs	r3, #12
 8007348:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800734a:	2360      	movs	r3, #96	@ 0x60
 800734c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800734e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007352:	4619      	mov	r1, r3
 8007354:	483a      	ldr	r0, [pc, #232]	@ (8007440 <BSP_SDRAM_MspInit+0x1f8>)
 8007356:	f000 fe75 	bl	8008044 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800735a:	2301      	movs	r3, #1
 800735c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800735e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007362:	4619      	mov	r1, r3
 8007364:	4837      	ldr	r0, [pc, #220]	@ (8007444 <BSP_SDRAM_MspInit+0x1fc>)
 8007366:	f000 fe6d 	bl	8008044 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800736a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800736e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8007370:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007374:	4619      	mov	r1, r3
 8007376:	4834      	ldr	r0, [pc, #208]	@ (8007448 <BSP_SDRAM_MspInit+0x200>)
 8007378:	f000 fe64 	bl	8008044 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 800737c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8007380:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8007382:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007386:	4619      	mov	r1, r3
 8007388:	4830      	ldr	r0, [pc, #192]	@ (800744c <BSP_SDRAM_MspInit+0x204>)
 800738a:	f000 fe5b 	bl	8008044 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800738e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8007392:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8007394:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007398:	4619      	mov	r1, r3
 800739a:	482d      	ldr	r0, [pc, #180]	@ (8007450 <BSP_SDRAM_MspInit+0x208>)
 800739c:	f000 fe52 	bl	8008044 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80073a0:	f248 1333 	movw	r3, #33075	@ 0x8133
 80073a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80073a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80073aa:	4619      	mov	r1, r3
 80073ac:	4829      	ldr	r0, [pc, #164]	@ (8007454 <BSP_SDRAM_MspInit+0x20c>)
 80073ae:	f000 fe49 	bl	8008044 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80073b2:	4b29      	ldr	r3, [pc, #164]	@ (8007458 <BSP_SDRAM_MspInit+0x210>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80073b8:	4b27      	ldr	r3, [pc, #156]	@ (8007458 <BSP_SDRAM_MspInit+0x210>)
 80073ba:	2280      	movs	r2, #128	@ 0x80
 80073bc:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80073be:	4b26      	ldr	r3, [pc, #152]	@ (8007458 <BSP_SDRAM_MspInit+0x210>)
 80073c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073c4:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80073c6:	4b24      	ldr	r3, [pc, #144]	@ (8007458 <BSP_SDRAM_MspInit+0x210>)
 80073c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80073cc:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80073ce:	4b22      	ldr	r3, [pc, #136]	@ (8007458 <BSP_SDRAM_MspInit+0x210>)
 80073d0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80073d4:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80073d6:	4b20      	ldr	r3, [pc, #128]	@ (8007458 <BSP_SDRAM_MspInit+0x210>)
 80073d8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80073dc:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80073de:	4b1e      	ldr	r3, [pc, #120]	@ (8007458 <BSP_SDRAM_MspInit+0x210>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80073e4:	4b1c      	ldr	r3, [pc, #112]	@ (8007458 <BSP_SDRAM_MspInit+0x210>)
 80073e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80073ea:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80073ec:	4b1a      	ldr	r3, [pc, #104]	@ (8007458 <BSP_SDRAM_MspInit+0x210>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	625a      	str	r2, [r3, #36]	@ 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80073f2:	4b19      	ldr	r3, [pc, #100]	@ (8007458 <BSP_SDRAM_MspInit+0x210>)
 80073f4:	2203      	movs	r2, #3
 80073f6:	629a      	str	r2, [r3, #40]	@ 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80073f8:	4b17      	ldr	r3, [pc, #92]	@ (8007458 <BSP_SDRAM_MspInit+0x210>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80073fe:	4b16      	ldr	r3, [pc, #88]	@ (8007458 <BSP_SDRAM_MspInit+0x210>)
 8007400:	2200      	movs	r2, #0
 8007402:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8007404:	4b14      	ldr	r3, [pc, #80]	@ (8007458 <BSP_SDRAM_MspInit+0x210>)
 8007406:	4a15      	ldr	r2, [pc, #84]	@ (800745c <BSP_SDRAM_MspInit+0x214>)
 8007408:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a12      	ldr	r2, [pc, #72]	@ (8007458 <BSP_SDRAM_MspInit+0x210>)
 800740e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007410:	4a11      	ldr	r2, [pc, #68]	@ (8007458 <BSP_SDRAM_MspInit+0x210>)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8007416:	4810      	ldr	r0, [pc, #64]	@ (8007458 <BSP_SDRAM_MspInit+0x210>)
 8007418:	f000 fa78 	bl	800790c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 800741c:	480e      	ldr	r0, [pc, #56]	@ (8007458 <BSP_SDRAM_MspInit+0x210>)
 800741e:	f000 f9c7 	bl	80077b0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8007422:	2200      	movs	r2, #0
 8007424:	210f      	movs	r1, #15
 8007426:	2038      	movs	r0, #56	@ 0x38
 8007428:	f000 f98b 	bl	8007742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800742c:	2038      	movs	r0, #56	@ 0x38
 800742e:	f000 f9a4 	bl	800777a <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8007432:	bf00      	nop
 8007434:	3740      	adds	r7, #64	@ 0x40
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	40023800 	.word	0x40023800
 8007440:	40020400 	.word	0x40020400
 8007444:	40020800 	.word	0x40020800
 8007448:	40020c00 	.word	0x40020c00
 800744c:	40021000 	.word	0x40021000
 8007450:	40021400 	.word	0x40021400
 8007454:	40021800 	.word	0x40021800
 8007458:	20001290 	.word	0x20001290
 800745c:	40026410 	.word	0x40026410

08007460 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007464:	4b0e      	ldr	r3, [pc, #56]	@ (80074a0 <HAL_Init+0x40>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a0d      	ldr	r2, [pc, #52]	@ (80074a0 <HAL_Init+0x40>)
 800746a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800746e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007470:	4b0b      	ldr	r3, [pc, #44]	@ (80074a0 <HAL_Init+0x40>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a0a      	ldr	r2, [pc, #40]	@ (80074a0 <HAL_Init+0x40>)
 8007476:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800747a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800747c:	4b08      	ldr	r3, [pc, #32]	@ (80074a0 <HAL_Init+0x40>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a07      	ldr	r2, [pc, #28]	@ (80074a0 <HAL_Init+0x40>)
 8007482:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007486:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007488:	2003      	movs	r0, #3
 800748a:	f000 f94f 	bl	800772c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800748e:	2000      	movs	r0, #0
 8007490:	f000 f808 	bl	80074a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007494:	f7fe fac2 	bl	8005a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	40023c00 	.word	0x40023c00

080074a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80074ac:	4b12      	ldr	r3, [pc, #72]	@ (80074f8 <HAL_InitTick+0x54>)
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	4b12      	ldr	r3, [pc, #72]	@ (80074fc <HAL_InitTick+0x58>)
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	4619      	mov	r1, r3
 80074b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80074ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80074be:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c2:	4618      	mov	r0, r3
 80074c4:	f000 f967 	bl	8007796 <HAL_SYSTICK_Config>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e00e      	b.n	80074f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b0f      	cmp	r3, #15
 80074d6:	d80a      	bhi.n	80074ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80074d8:	2200      	movs	r2, #0
 80074da:	6879      	ldr	r1, [r7, #4]
 80074dc:	f04f 30ff 	mov.w	r0, #4294967295
 80074e0:	f000 f92f 	bl	8007742 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80074e4:	4a06      	ldr	r2, [pc, #24]	@ (8007500 <HAL_InitTick+0x5c>)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
 80074ec:	e000      	b.n	80074f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	20000018 	.word	0x20000018
 80074fc:	20000070 	.word	0x20000070
 8007500:	2000006c 	.word	0x2000006c

08007504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007504:	b480      	push	{r7}
 8007506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007508:	4b06      	ldr	r3, [pc, #24]	@ (8007524 <HAL_IncTick+0x20>)
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	461a      	mov	r2, r3
 800750e:	4b06      	ldr	r3, [pc, #24]	@ (8007528 <HAL_IncTick+0x24>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4413      	add	r3, r2
 8007514:	4a04      	ldr	r2, [pc, #16]	@ (8007528 <HAL_IncTick+0x24>)
 8007516:	6013      	str	r3, [r2, #0]
}
 8007518:	bf00      	nop
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	20000070 	.word	0x20000070
 8007528:	200012f0 	.word	0x200012f0

0800752c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800752c:	b480      	push	{r7}
 800752e:	af00      	add	r7, sp, #0
  return uwTick;
 8007530:	4b03      	ldr	r3, [pc, #12]	@ (8007540 <HAL_GetTick+0x14>)
 8007532:	681b      	ldr	r3, [r3, #0]
}
 8007534:	4618      	mov	r0, r3
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	200012f0 	.word	0x200012f0

08007544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800754c:	f7ff ffee 	bl	800752c <HAL_GetTick>
 8007550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755c:	d005      	beq.n	800756a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800755e:	4b0a      	ldr	r3, [pc, #40]	@ (8007588 <HAL_Delay+0x44>)
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	461a      	mov	r2, r3
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	4413      	add	r3, r2
 8007568:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800756a:	bf00      	nop
 800756c:	f7ff ffde 	bl	800752c <HAL_GetTick>
 8007570:	4602      	mov	r2, r0
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	429a      	cmp	r2, r3
 800757a:	d8f7      	bhi.n	800756c <HAL_Delay+0x28>
  {
  }
}
 800757c:	bf00      	nop
 800757e:	bf00      	nop
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	20000070 	.word	0x20000070

0800758c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f003 0307 	and.w	r3, r3, #7
 800759a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800759c:	4b0c      	ldr	r3, [pc, #48]	@ (80075d0 <__NVIC_SetPriorityGrouping+0x44>)
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80075a8:	4013      	ands	r3, r2
 80075aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80075b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80075b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80075be:	4a04      	ldr	r2, [pc, #16]	@ (80075d0 <__NVIC_SetPriorityGrouping+0x44>)
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	60d3      	str	r3, [r2, #12]
}
 80075c4:	bf00      	nop
 80075c6:	3714      	adds	r7, #20
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	e000ed00 	.word	0xe000ed00

080075d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80075d4:	b480      	push	{r7}
 80075d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80075d8:	4b04      	ldr	r3, [pc, #16]	@ (80075ec <__NVIC_GetPriorityGrouping+0x18>)
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	0a1b      	lsrs	r3, r3, #8
 80075de:	f003 0307 	and.w	r3, r3, #7
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	e000ed00 	.word	0xe000ed00

080075f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	4603      	mov	r3, r0
 80075f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	db0b      	blt.n	800761a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007602:	79fb      	ldrb	r3, [r7, #7]
 8007604:	f003 021f 	and.w	r2, r3, #31
 8007608:	4907      	ldr	r1, [pc, #28]	@ (8007628 <__NVIC_EnableIRQ+0x38>)
 800760a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800760e:	095b      	lsrs	r3, r3, #5
 8007610:	2001      	movs	r0, #1
 8007612:	fa00 f202 	lsl.w	r2, r0, r2
 8007616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800761a:	bf00      	nop
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	e000e100 	.word	0xe000e100

0800762c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	4603      	mov	r3, r0
 8007634:	6039      	str	r1, [r7, #0]
 8007636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800763c:	2b00      	cmp	r3, #0
 800763e:	db0a      	blt.n	8007656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	b2da      	uxtb	r2, r3
 8007644:	490c      	ldr	r1, [pc, #48]	@ (8007678 <__NVIC_SetPriority+0x4c>)
 8007646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800764a:	0112      	lsls	r2, r2, #4
 800764c:	b2d2      	uxtb	r2, r2
 800764e:	440b      	add	r3, r1
 8007650:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007654:	e00a      	b.n	800766c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	b2da      	uxtb	r2, r3
 800765a:	4908      	ldr	r1, [pc, #32]	@ (800767c <__NVIC_SetPriority+0x50>)
 800765c:	79fb      	ldrb	r3, [r7, #7]
 800765e:	f003 030f 	and.w	r3, r3, #15
 8007662:	3b04      	subs	r3, #4
 8007664:	0112      	lsls	r2, r2, #4
 8007666:	b2d2      	uxtb	r2, r2
 8007668:	440b      	add	r3, r1
 800766a:	761a      	strb	r2, [r3, #24]
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr
 8007678:	e000e100 	.word	0xe000e100
 800767c:	e000ed00 	.word	0xe000ed00

08007680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007680:	b480      	push	{r7}
 8007682:	b089      	sub	sp, #36	@ 0x24
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f003 0307 	and.w	r3, r3, #7
 8007692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	f1c3 0307 	rsb	r3, r3, #7
 800769a:	2b04      	cmp	r3, #4
 800769c:	bf28      	it	cs
 800769e:	2304      	movcs	r3, #4
 80076a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	3304      	adds	r3, #4
 80076a6:	2b06      	cmp	r3, #6
 80076a8:	d902      	bls.n	80076b0 <NVIC_EncodePriority+0x30>
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	3b03      	subs	r3, #3
 80076ae:	e000      	b.n	80076b2 <NVIC_EncodePriority+0x32>
 80076b0:	2300      	movs	r3, #0
 80076b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076b4:	f04f 32ff 	mov.w	r2, #4294967295
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	fa02 f303 	lsl.w	r3, r2, r3
 80076be:	43da      	mvns	r2, r3
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	401a      	ands	r2, r3
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80076c8:	f04f 31ff 	mov.w	r1, #4294967295
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	fa01 f303 	lsl.w	r3, r1, r3
 80076d2:	43d9      	mvns	r1, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076d8:	4313      	orrs	r3, r2
         );
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3724      	adds	r7, #36	@ 0x24
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
	...

080076e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	3b01      	subs	r3, #1
 80076f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076f8:	d301      	bcc.n	80076fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80076fa:	2301      	movs	r3, #1
 80076fc:	e00f      	b.n	800771e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80076fe:	4a0a      	ldr	r2, [pc, #40]	@ (8007728 <SysTick_Config+0x40>)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	3b01      	subs	r3, #1
 8007704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007706:	210f      	movs	r1, #15
 8007708:	f04f 30ff 	mov.w	r0, #4294967295
 800770c:	f7ff ff8e 	bl	800762c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007710:	4b05      	ldr	r3, [pc, #20]	@ (8007728 <SysTick_Config+0x40>)
 8007712:	2200      	movs	r2, #0
 8007714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007716:	4b04      	ldr	r3, [pc, #16]	@ (8007728 <SysTick_Config+0x40>)
 8007718:	2207      	movs	r2, #7
 800771a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	e000e010 	.word	0xe000e010

0800772c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f7ff ff29 	bl	800758c <__NVIC_SetPriorityGrouping>
}
 800773a:	bf00      	nop
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007742:	b580      	push	{r7, lr}
 8007744:	b086      	sub	sp, #24
 8007746:	af00      	add	r7, sp, #0
 8007748:	4603      	mov	r3, r0
 800774a:	60b9      	str	r1, [r7, #8]
 800774c:	607a      	str	r2, [r7, #4]
 800774e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007750:	2300      	movs	r3, #0
 8007752:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007754:	f7ff ff3e 	bl	80075d4 <__NVIC_GetPriorityGrouping>
 8007758:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	68b9      	ldr	r1, [r7, #8]
 800775e:	6978      	ldr	r0, [r7, #20]
 8007760:	f7ff ff8e 	bl	8007680 <NVIC_EncodePriority>
 8007764:	4602      	mov	r2, r0
 8007766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800776a:	4611      	mov	r1, r2
 800776c:	4618      	mov	r0, r3
 800776e:	f7ff ff5d 	bl	800762c <__NVIC_SetPriority>
}
 8007772:	bf00      	nop
 8007774:	3718      	adds	r7, #24
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b082      	sub	sp, #8
 800777e:	af00      	add	r7, sp, #0
 8007780:	4603      	mov	r3, r0
 8007782:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007788:	4618      	mov	r0, r3
 800778a:	f7ff ff31 	bl	80075f0 <__NVIC_EnableIRQ>
}
 800778e:	bf00      	nop
 8007790:	3708      	adds	r7, #8
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b082      	sub	sp, #8
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f7ff ffa2 	bl	80076e8 <SysTick_Config>
 80077a4:	4603      	mov	r3, r0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
	...

080077b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80077b8:	2300      	movs	r3, #0
 80077ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80077bc:	f7ff feb6 	bl	800752c <HAL_GetTick>
 80077c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e099      	b.n	8007900 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2202      	movs	r2, #2
 80077d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f022 0201 	bic.w	r2, r2, #1
 80077ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80077ec:	e00f      	b.n	800780e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80077ee:	f7ff fe9d 	bl	800752c <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	2b05      	cmp	r3, #5
 80077fa:	d908      	bls.n	800780e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2220      	movs	r2, #32
 8007800:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2203      	movs	r2, #3
 8007806:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e078      	b.n	8007900 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0301 	and.w	r3, r3, #1
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1e8      	bne.n	80077ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	4b38      	ldr	r3, [pc, #224]	@ (8007908 <HAL_DMA_Init+0x158>)
 8007828:	4013      	ands	r3, r2
 800782a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800783a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007846:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007852:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a1b      	ldr	r3, [r3, #32]
 8007858:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	4313      	orrs	r3, r2
 800785e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007864:	2b04      	cmp	r3, #4
 8007866:	d107      	bne.n	8007878 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007870:	4313      	orrs	r3, r2
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	4313      	orrs	r3, r2
 8007876:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	697a      	ldr	r2, [r7, #20]
 800787e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	f023 0307 	bic.w	r3, r3, #7
 800788e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007894:	697a      	ldr	r2, [r7, #20]
 8007896:	4313      	orrs	r3, r2
 8007898:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d117      	bne.n	80078d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00e      	beq.n	80078d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 f8bd 	bl	8007a34 <DMA_CheckFifoParam>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d008      	beq.n	80078d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2240      	movs	r2, #64	@ 0x40
 80078c4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80078ce:	2301      	movs	r3, #1
 80078d0:	e016      	b.n	8007900 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f874 	bl	80079c8 <DMA_CalcBaseAndBitshift>
 80078e0:	4603      	mov	r3, r0
 80078e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078e8:	223f      	movs	r2, #63	@ 0x3f
 80078ea:	409a      	lsls	r2, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3718      	adds	r7, #24
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	f010803f 	.word	0xf010803f

0800790c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e050      	b.n	80079c0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b02      	cmp	r3, #2
 8007928:	d101      	bne.n	800792e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800792a:	2302      	movs	r3, #2
 800792c:	e048      	b.n	80079c0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f022 0201 	bic.w	r2, r2, #1
 800793c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2200      	movs	r2, #0
 8007944:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2200      	movs	r2, #0
 800794c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2200      	movs	r2, #0
 8007954:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2200      	movs	r2, #0
 800795c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2200      	movs	r2, #0
 8007964:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2221      	movs	r2, #33	@ 0x21
 800796c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f82a 	bl	80079c8 <DMA_CalcBaseAndBitshift>
 8007974:	4603      	mov	r3, r0
 8007976:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079a0:	223f      	movs	r2, #63	@ 0x3f
 80079a2:	409a      	lsls	r2, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	3b10      	subs	r3, #16
 80079d8:	4a14      	ldr	r2, [pc, #80]	@ (8007a2c <DMA_CalcBaseAndBitshift+0x64>)
 80079da:	fba2 2303 	umull	r2, r3, r2, r3
 80079de:	091b      	lsrs	r3, r3, #4
 80079e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80079e2:	4a13      	ldr	r2, [pc, #76]	@ (8007a30 <DMA_CalcBaseAndBitshift+0x68>)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	4413      	add	r3, r2
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	461a      	mov	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d909      	bls.n	8007a0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80079fe:	f023 0303 	bic.w	r3, r3, #3
 8007a02:	1d1a      	adds	r2, r3, #4
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a08:	e007      	b.n	8007a1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007a12:	f023 0303 	bic.w	r3, r3, #3
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	aaaaaaab 	.word	0xaaaaaaab
 8007a30:	0800cc40 	.word	0x0800cc40

08007a34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	699b      	ldr	r3, [r3, #24]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d11f      	bne.n	8007a8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2b03      	cmp	r3, #3
 8007a52:	d856      	bhi.n	8007b02 <DMA_CheckFifoParam+0xce>
 8007a54:	a201      	add	r2, pc, #4	@ (adr r2, 8007a5c <DMA_CheckFifoParam+0x28>)
 8007a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5a:	bf00      	nop
 8007a5c:	08007a6d 	.word	0x08007a6d
 8007a60:	08007a7f 	.word	0x08007a7f
 8007a64:	08007a6d 	.word	0x08007a6d
 8007a68:	08007b03 	.word	0x08007b03
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d046      	beq.n	8007b06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a7c:	e043      	b.n	8007b06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a82:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007a86:	d140      	bne.n	8007b0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a8c:	e03d      	b.n	8007b0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	699b      	ldr	r3, [r3, #24]
 8007a92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a96:	d121      	bne.n	8007adc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2b03      	cmp	r3, #3
 8007a9c:	d837      	bhi.n	8007b0e <DMA_CheckFifoParam+0xda>
 8007a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa4 <DMA_CheckFifoParam+0x70>)
 8007aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa4:	08007ab5 	.word	0x08007ab5
 8007aa8:	08007abb 	.word	0x08007abb
 8007aac:	08007ab5 	.word	0x08007ab5
 8007ab0:	08007acd 	.word	0x08007acd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ab8:	e030      	b.n	8007b1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007abe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d025      	beq.n	8007b12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007aca:	e022      	b.n	8007b12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007ad4:	d11f      	bne.n	8007b16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007ada:	e01c      	b.n	8007b16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d903      	bls.n	8007aea <DMA_CheckFifoParam+0xb6>
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d003      	beq.n	8007af0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007ae8:	e018      	b.n	8007b1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	73fb      	strb	r3, [r7, #15]
      break;
 8007aee:	e015      	b.n	8007b1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00e      	beq.n	8007b1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	73fb      	strb	r3, [r7, #15]
      break;
 8007b00:	e00b      	b.n	8007b1a <DMA_CheckFifoParam+0xe6>
      break;
 8007b02:	bf00      	nop
 8007b04:	e00a      	b.n	8007b1c <DMA_CheckFifoParam+0xe8>
      break;
 8007b06:	bf00      	nop
 8007b08:	e008      	b.n	8007b1c <DMA_CheckFifoParam+0xe8>
      break;
 8007b0a:	bf00      	nop
 8007b0c:	e006      	b.n	8007b1c <DMA_CheckFifoParam+0xe8>
      break;
 8007b0e:	bf00      	nop
 8007b10:	e004      	b.n	8007b1c <DMA_CheckFifoParam+0xe8>
      break;
 8007b12:	bf00      	nop
 8007b14:	e002      	b.n	8007b1c <DMA_CheckFifoParam+0xe8>
      break;   
 8007b16:	bf00      	nop
 8007b18:	e000      	b.n	8007b1c <DMA_CheckFifoParam+0xe8>
      break;
 8007b1a:	bf00      	nop
    }
  } 
  
  return status; 
 8007b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3714      	adds	r7, #20
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop

08007b2c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e03b      	b.n	8007bb6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d106      	bne.n	8007b58 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7fd ff8a 	bl	8005a6c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685a      	ldr	r2, [r3, #4]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	430a      	orrs	r2, r1
 8007b74:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b7c:	f023 0107 	bic.w	r1, r3, #7
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	689a      	ldr	r2, [r3, #8]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b92:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8007b96:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	68d1      	ldr	r1, [r2, #12]
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	6812      	ldr	r2, [r2, #0]
 8007ba2:	430b      	orrs	r3, r1
 8007ba4:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b086      	sub	sp, #24
 8007bc2:	af02      	add	r7, sp, #8
 8007bc4:	60f8      	str	r0, [r7, #12]
 8007bc6:	60b9      	str	r1, [r7, #8]
 8007bc8:	607a      	str	r2, [r7, #4]
 8007bca:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d101      	bne.n	8007bda <HAL_DMA2D_Start+0x1c>
 8007bd6:	2302      	movs	r3, #2
 8007bd8:	e018      	b.n	8007c0c <HAL_DMA2D_Start+0x4e>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2202      	movs	r2, #2
 8007be6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	68b9      	ldr	r1, [r7, #8]
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 f989 	bl	8007f0c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f042 0201 	orr.w	r2, r2, #1
 8007c08:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 0301 	and.w	r3, r3, #1
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d056      	beq.n	8007cde <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8007c30:	f7ff fc7c 	bl	800752c <HAL_GetTick>
 8007c34:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007c36:	e04b      	b.n	8007cd0 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d023      	beq.n	8007c92 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f003 0320 	and.w	r3, r3, #32
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d005      	beq.n	8007c60 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c58:	f043 0202 	orr.w	r2, r3, #2
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d005      	beq.n	8007c76 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c6e:	f043 0201 	orr.w	r2, r3, #1
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2221      	movs	r2, #33	@ 0x21
 8007c7c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2204      	movs	r2, #4
 8007c82:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e0a5      	b.n	8007dde <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c98:	d01a      	beq.n	8007cd0 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8007c9a:	f7ff fc47 	bl	800752c <HAL_GetTick>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	683a      	ldr	r2, [r7, #0]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d302      	bcc.n	8007cb0 <HAL_DMA2D_PollForTransfer+0x9c>
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10f      	bne.n	8007cd0 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cb4:	f043 0220 	orr.w	r2, r3, #32
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2203      	movs	r2, #3
 8007cc0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8007ccc:	2303      	movs	r3, #3
 8007cce:	e086      	b.n	8007dde <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	f003 0302 	and.w	r3, r3, #2
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d0ac      	beq.n	8007c38 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	69db      	ldr	r3, [r3, #28]
 8007ce4:	f003 0320 	and.w	r3, r3, #32
 8007ce8:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf0:	f003 0320 	and.w	r3, r3, #32
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d061      	beq.n	8007dc4 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007d00:	f7ff fc14 	bl	800752c <HAL_GetTick>
 8007d04:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007d06:	e056      	b.n	8007db6 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d02e      	beq.n	8007d78 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f003 0308 	and.w	r3, r3, #8
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d005      	beq.n	8007d30 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d28:	f043 0204 	orr.w	r2, r3, #4
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f003 0320 	and.w	r3, r3, #32
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d005      	beq.n	8007d46 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d3e:	f043 0202 	orr.w	r2, r3, #2
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f003 0301 	and.w	r3, r3, #1
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d005      	beq.n	8007d5c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d54:	f043 0201 	orr.w	r2, r3, #1
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2229      	movs	r2, #41	@ 0x29
 8007d62:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2204      	movs	r2, #4
 8007d68:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e032      	b.n	8007dde <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7e:	d01a      	beq.n	8007db6 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8007d80:	f7ff fbd4 	bl	800752c <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d302      	bcc.n	8007d96 <HAL_DMA2D_PollForTransfer+0x182>
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d10f      	bne.n	8007db6 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d9a:	f043 0220 	orr.w	r2, r3, #32
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2203      	movs	r2, #3
 8007da6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e013      	b.n	8007dde <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	f003 0310 	and.w	r3, r3, #16
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d0a1      	beq.n	8007d08 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2212      	movs	r2, #18
 8007dca:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3718      	adds	r7, #24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
	...

08007de8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b087      	sub	sp, #28
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d101      	bne.n	8007e08 <HAL_DMA2D_ConfigLayer+0x20>
 8007e04:	2302      	movs	r3, #2
 8007e06:	e079      	b.n	8007efc <HAL_DMA2D_ConfigLayer+0x114>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2202      	movs	r2, #2
 8007e14:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	011b      	lsls	r3, r3, #4
 8007e1c:	3318      	adds	r3, #24
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	4413      	add	r3, r2
 8007e22:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	685a      	ldr	r2, [r3, #4]
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	041b      	lsls	r3, r3, #16
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8007e32:	4b35      	ldr	r3, [pc, #212]	@ (8007f08 <HAL_DMA2D_ConfigLayer+0x120>)
 8007e34:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	2b0a      	cmp	r3, #10
 8007e3c:	d003      	beq.n	8007e46 <HAL_DMA2D_ConfigLayer+0x5e>
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	2b09      	cmp	r3, #9
 8007e44:	d107      	bne.n	8007e56 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	617b      	str	r3, [r7, #20]
 8007e54:	e005      	b.n	8007e62 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	061b      	lsls	r3, r3, #24
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d120      	bne.n	8007eaa <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	43db      	mvns	r3, r3
 8007e72:	ea02 0103 	and.w	r1, r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	6812      	ldr	r2, [r2, #0]
 8007e88:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	2b0a      	cmp	r3, #10
 8007e90:	d003      	beq.n	8007e9a <HAL_DMA2D_ConfigLayer+0xb2>
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	2b09      	cmp	r3, #9
 8007e98:	d127      	bne.n	8007eea <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	68da      	ldr	r2, [r3, #12]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8007ea6:	629a      	str	r2, [r3, #40]	@ 0x28
 8007ea8:	e01f      	b.n	8007eea <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	69da      	ldr	r2, [r3, #28]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	43db      	mvns	r3, r3
 8007eb4:	ea02 0103 	and.w	r1, r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	430a      	orrs	r2, r1
 8007ec0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	6812      	ldr	r2, [r2, #0]
 8007eca:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	2b0a      	cmp	r3, #10
 8007ed2:	d003      	beq.n	8007edc <HAL_DMA2D_ConfigLayer+0xf4>
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	2b09      	cmp	r3, #9
 8007eda:	d106      	bne.n	8007eea <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	68da      	ldr	r2, [r3, #12]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8007ee8:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	371c      	adds	r7, #28
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr
 8007f08:	ff03000f 	.word	0xff03000f

08007f0c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b08b      	sub	sp, #44	@ 0x2c
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
 8007f18:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f20:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	041a      	lsls	r2, r3, #16
 8007f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2a:	431a      	orrs	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	430a      	orrs	r2, r1
 8007f32:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f44:	d174      	bne.n	8008030 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007f4c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007f54:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007f5c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d108      	bne.n	8007f7e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8007f6c:	69ba      	ldr	r2, [r7, #24]
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	431a      	orrs	r2, r3
 8007f72:	6a3b      	ldr	r3, [r7, #32]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	697a      	ldr	r2, [r7, #20]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f7c:	e053      	b.n	8008026 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d106      	bne.n	8007f94 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007f86:	69ba      	ldr	r2, [r7, #24]
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	697a      	ldr	r2, [r7, #20]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f92:	e048      	b.n	8008026 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d111      	bne.n	8007fc0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	0cdb      	lsrs	r3, r3, #19
 8007fa0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	0a9b      	lsrs	r3, r3, #10
 8007fa6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	08db      	lsrs	r3, r3, #3
 8007fac:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	015a      	lsls	r2, r3, #5
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	02db      	lsls	r3, r3, #11
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fbe:	e032      	b.n	8008026 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	2b03      	cmp	r3, #3
 8007fc6:	d117      	bne.n	8007ff8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007fc8:	6a3b      	ldr	r3, [r7, #32]
 8007fca:	0fdb      	lsrs	r3, r3, #31
 8007fcc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	0cdb      	lsrs	r3, r3, #19
 8007fd2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	0adb      	lsrs	r3, r3, #11
 8007fd8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	08db      	lsrs	r3, r3, #3
 8007fde:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	015a      	lsls	r2, r3, #5
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	029b      	lsls	r3, r3, #10
 8007fe8:	431a      	orrs	r2, r3
 8007fea:	6a3b      	ldr	r3, [r7, #32]
 8007fec:	03db      	lsls	r3, r3, #15
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	697a      	ldr	r2, [r7, #20]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ff6:	e016      	b.n	8008026 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007ff8:	6a3b      	ldr	r3, [r7, #32]
 8007ffa:	0f1b      	lsrs	r3, r3, #28
 8007ffc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	0d1b      	lsrs	r3, r3, #20
 8008002:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	0b1b      	lsrs	r3, r3, #12
 8008008:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	091b      	lsrs	r3, r3, #4
 800800e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	011a      	lsls	r2, r3, #4
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	021b      	lsls	r3, r3, #8
 8008018:	431a      	orrs	r2, r3
 800801a:	6a3b      	ldr	r3, [r7, #32]
 800801c:	031b      	lsls	r3, r3, #12
 800801e:	4313      	orrs	r3, r2
 8008020:	697a      	ldr	r2, [r7, #20]
 8008022:	4313      	orrs	r3, r2
 8008024:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800802c:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800802e:	e003      	b.n	8008038 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	60da      	str	r2, [r3, #12]
}
 8008038:	bf00      	nop
 800803a:	372c      	adds	r7, #44	@ 0x2c
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008044:	b480      	push	{r7}
 8008046:	b089      	sub	sp, #36	@ 0x24
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800804e:	2300      	movs	r3, #0
 8008050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008052:	2300      	movs	r3, #0
 8008054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008056:	2300      	movs	r3, #0
 8008058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800805a:	2300      	movs	r3, #0
 800805c:	61fb      	str	r3, [r7, #28]
 800805e:	e177      	b.n	8008350 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008060:	2201      	movs	r2, #1
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	fa02 f303 	lsl.w	r3, r2, r3
 8008068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	697a      	ldr	r2, [r7, #20]
 8008070:	4013      	ands	r3, r2
 8008072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008074:	693a      	ldr	r2, [r7, #16]
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	429a      	cmp	r2, r3
 800807a:	f040 8166 	bne.w	800834a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d00b      	beq.n	800809e <HAL_GPIO_Init+0x5a>
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	2b02      	cmp	r3, #2
 800808c:	d007      	beq.n	800809e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008092:	2b11      	cmp	r3, #17
 8008094:	d003      	beq.n	800809e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	2b12      	cmp	r3, #18
 800809c:	d130      	bne.n	8008100 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	005b      	lsls	r3, r3, #1
 80080a8:	2203      	movs	r2, #3
 80080aa:	fa02 f303 	lsl.w	r3, r2, r3
 80080ae:	43db      	mvns	r3, r3
 80080b0:	69ba      	ldr	r2, [r7, #24]
 80080b2:	4013      	ands	r3, r2
 80080b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	68da      	ldr	r2, [r3, #12]
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	005b      	lsls	r3, r3, #1
 80080be:	fa02 f303 	lsl.w	r3, r2, r3
 80080c2:	69ba      	ldr	r2, [r7, #24]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	69ba      	ldr	r2, [r7, #24]
 80080cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80080d4:	2201      	movs	r2, #1
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	fa02 f303 	lsl.w	r3, r2, r3
 80080dc:	43db      	mvns	r3, r3
 80080de:	69ba      	ldr	r2, [r7, #24]
 80080e0:	4013      	ands	r3, r2
 80080e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	091b      	lsrs	r3, r3, #4
 80080ea:	f003 0201 	and.w	r2, r3, #1
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	fa02 f303 	lsl.w	r3, r2, r3
 80080f4:	69ba      	ldr	r2, [r7, #24]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	69ba      	ldr	r2, [r7, #24]
 80080fe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	005b      	lsls	r3, r3, #1
 800810a:	2203      	movs	r2, #3
 800810c:	fa02 f303 	lsl.w	r3, r2, r3
 8008110:	43db      	mvns	r3, r3
 8008112:	69ba      	ldr	r2, [r7, #24]
 8008114:	4013      	ands	r3, r2
 8008116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	689a      	ldr	r2, [r3, #8]
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	005b      	lsls	r3, r3, #1
 8008120:	fa02 f303 	lsl.w	r3, r2, r3
 8008124:	69ba      	ldr	r2, [r7, #24]
 8008126:	4313      	orrs	r3, r2
 8008128:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	69ba      	ldr	r2, [r7, #24]
 800812e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	2b02      	cmp	r3, #2
 8008136:	d003      	beq.n	8008140 <HAL_GPIO_Init+0xfc>
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	2b12      	cmp	r3, #18
 800813e:	d123      	bne.n	8008188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	08da      	lsrs	r2, r3, #3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	3208      	adds	r2, #8
 8008148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800814c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	f003 0307 	and.w	r3, r3, #7
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	220f      	movs	r2, #15
 8008158:	fa02 f303 	lsl.w	r3, r2, r3
 800815c:	43db      	mvns	r3, r3
 800815e:	69ba      	ldr	r2, [r7, #24]
 8008160:	4013      	ands	r3, r2
 8008162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	691a      	ldr	r2, [r3, #16]
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	f003 0307 	and.w	r3, r3, #7
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	fa02 f303 	lsl.w	r3, r2, r3
 8008174:	69ba      	ldr	r2, [r7, #24]
 8008176:	4313      	orrs	r3, r2
 8008178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	08da      	lsrs	r2, r3, #3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	3208      	adds	r2, #8
 8008182:	69b9      	ldr	r1, [r7, #24]
 8008184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	005b      	lsls	r3, r3, #1
 8008192:	2203      	movs	r2, #3
 8008194:	fa02 f303 	lsl.w	r3, r2, r3
 8008198:	43db      	mvns	r3, r3
 800819a:	69ba      	ldr	r2, [r7, #24]
 800819c:	4013      	ands	r3, r2
 800819e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	f003 0203 	and.w	r2, r3, #3
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	005b      	lsls	r3, r3, #1
 80081ac:	fa02 f303 	lsl.w	r3, r2, r3
 80081b0:	69ba      	ldr	r2, [r7, #24]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	69ba      	ldr	r2, [r7, #24]
 80081ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f000 80c0 	beq.w	800834a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80081ca:	2300      	movs	r3, #0
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	4b66      	ldr	r3, [pc, #408]	@ (8008368 <HAL_GPIO_Init+0x324>)
 80081d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081d2:	4a65      	ldr	r2, [pc, #404]	@ (8008368 <HAL_GPIO_Init+0x324>)
 80081d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80081d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80081da:	4b63      	ldr	r3, [pc, #396]	@ (8008368 <HAL_GPIO_Init+0x324>)
 80081dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081e2:	60fb      	str	r3, [r7, #12]
 80081e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80081e6:	4a61      	ldr	r2, [pc, #388]	@ (800836c <HAL_GPIO_Init+0x328>)
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	089b      	lsrs	r3, r3, #2
 80081ec:	3302      	adds	r3, #2
 80081ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	f003 0303 	and.w	r3, r3, #3
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	220f      	movs	r2, #15
 80081fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008202:	43db      	mvns	r3, r3
 8008204:	69ba      	ldr	r2, [r7, #24]
 8008206:	4013      	ands	r3, r2
 8008208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a58      	ldr	r2, [pc, #352]	@ (8008370 <HAL_GPIO_Init+0x32c>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d037      	beq.n	8008282 <HAL_GPIO_Init+0x23e>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a57      	ldr	r2, [pc, #348]	@ (8008374 <HAL_GPIO_Init+0x330>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d031      	beq.n	800827e <HAL_GPIO_Init+0x23a>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a56      	ldr	r2, [pc, #344]	@ (8008378 <HAL_GPIO_Init+0x334>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d02b      	beq.n	800827a <HAL_GPIO_Init+0x236>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a55      	ldr	r2, [pc, #340]	@ (800837c <HAL_GPIO_Init+0x338>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d025      	beq.n	8008276 <HAL_GPIO_Init+0x232>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a54      	ldr	r2, [pc, #336]	@ (8008380 <HAL_GPIO_Init+0x33c>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d01f      	beq.n	8008272 <HAL_GPIO_Init+0x22e>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a53      	ldr	r2, [pc, #332]	@ (8008384 <HAL_GPIO_Init+0x340>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d019      	beq.n	800826e <HAL_GPIO_Init+0x22a>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a52      	ldr	r2, [pc, #328]	@ (8008388 <HAL_GPIO_Init+0x344>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d013      	beq.n	800826a <HAL_GPIO_Init+0x226>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a51      	ldr	r2, [pc, #324]	@ (800838c <HAL_GPIO_Init+0x348>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d00d      	beq.n	8008266 <HAL_GPIO_Init+0x222>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a50      	ldr	r2, [pc, #320]	@ (8008390 <HAL_GPIO_Init+0x34c>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d007      	beq.n	8008262 <HAL_GPIO_Init+0x21e>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a4f      	ldr	r2, [pc, #316]	@ (8008394 <HAL_GPIO_Init+0x350>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d101      	bne.n	800825e <HAL_GPIO_Init+0x21a>
 800825a:	2309      	movs	r3, #9
 800825c:	e012      	b.n	8008284 <HAL_GPIO_Init+0x240>
 800825e:	230a      	movs	r3, #10
 8008260:	e010      	b.n	8008284 <HAL_GPIO_Init+0x240>
 8008262:	2308      	movs	r3, #8
 8008264:	e00e      	b.n	8008284 <HAL_GPIO_Init+0x240>
 8008266:	2307      	movs	r3, #7
 8008268:	e00c      	b.n	8008284 <HAL_GPIO_Init+0x240>
 800826a:	2306      	movs	r3, #6
 800826c:	e00a      	b.n	8008284 <HAL_GPIO_Init+0x240>
 800826e:	2305      	movs	r3, #5
 8008270:	e008      	b.n	8008284 <HAL_GPIO_Init+0x240>
 8008272:	2304      	movs	r3, #4
 8008274:	e006      	b.n	8008284 <HAL_GPIO_Init+0x240>
 8008276:	2303      	movs	r3, #3
 8008278:	e004      	b.n	8008284 <HAL_GPIO_Init+0x240>
 800827a:	2302      	movs	r3, #2
 800827c:	e002      	b.n	8008284 <HAL_GPIO_Init+0x240>
 800827e:	2301      	movs	r3, #1
 8008280:	e000      	b.n	8008284 <HAL_GPIO_Init+0x240>
 8008282:	2300      	movs	r3, #0
 8008284:	69fa      	ldr	r2, [r7, #28]
 8008286:	f002 0203 	and.w	r2, r2, #3
 800828a:	0092      	lsls	r2, r2, #2
 800828c:	4093      	lsls	r3, r2
 800828e:	69ba      	ldr	r2, [r7, #24]
 8008290:	4313      	orrs	r3, r2
 8008292:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008294:	4935      	ldr	r1, [pc, #212]	@ (800836c <HAL_GPIO_Init+0x328>)
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	089b      	lsrs	r3, r3, #2
 800829a:	3302      	adds	r3, #2
 800829c:	69ba      	ldr	r2, [r7, #24]
 800829e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80082a2:	4b3d      	ldr	r3, [pc, #244]	@ (8008398 <HAL_GPIO_Init+0x354>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	43db      	mvns	r3, r3
 80082ac:	69ba      	ldr	r2, [r7, #24]
 80082ae:	4013      	ands	r3, r2
 80082b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d003      	beq.n	80082c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80082be:	69ba      	ldr	r2, [r7, #24]
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80082c6:	4a34      	ldr	r2, [pc, #208]	@ (8008398 <HAL_GPIO_Init+0x354>)
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80082cc:	4b32      	ldr	r3, [pc, #200]	@ (8008398 <HAL_GPIO_Init+0x354>)
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	43db      	mvns	r3, r3
 80082d6:	69ba      	ldr	r2, [r7, #24]
 80082d8:	4013      	ands	r3, r2
 80082da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d003      	beq.n	80082f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80082e8:	69ba      	ldr	r2, [r7, #24]
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80082f0:	4a29      	ldr	r2, [pc, #164]	@ (8008398 <HAL_GPIO_Init+0x354>)
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80082f6:	4b28      	ldr	r3, [pc, #160]	@ (8008398 <HAL_GPIO_Init+0x354>)
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	43db      	mvns	r3, r3
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	4013      	ands	r3, r2
 8008304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800830e:	2b00      	cmp	r3, #0
 8008310:	d003      	beq.n	800831a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008312:	69ba      	ldr	r2, [r7, #24]
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	4313      	orrs	r3, r2
 8008318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800831a:	4a1f      	ldr	r2, [pc, #124]	@ (8008398 <HAL_GPIO_Init+0x354>)
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008320:	4b1d      	ldr	r3, [pc, #116]	@ (8008398 <HAL_GPIO_Init+0x354>)
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	43db      	mvns	r3, r3
 800832a:	69ba      	ldr	r2, [r7, #24]
 800832c:	4013      	ands	r3, r2
 800832e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d003      	beq.n	8008344 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800833c:	69ba      	ldr	r2, [r7, #24]
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	4313      	orrs	r3, r2
 8008342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008344:	4a14      	ldr	r2, [pc, #80]	@ (8008398 <HAL_GPIO_Init+0x354>)
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	3301      	adds	r3, #1
 800834e:	61fb      	str	r3, [r7, #28]
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	2b0f      	cmp	r3, #15
 8008354:	f67f ae84 	bls.w	8008060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008358:	bf00      	nop
 800835a:	bf00      	nop
 800835c:	3724      	adds	r7, #36	@ 0x24
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	40023800 	.word	0x40023800
 800836c:	40013800 	.word	0x40013800
 8008370:	40020000 	.word	0x40020000
 8008374:	40020400 	.word	0x40020400
 8008378:	40020800 	.word	0x40020800
 800837c:	40020c00 	.word	0x40020c00
 8008380:	40021000 	.word	0x40021000
 8008384:	40021400 	.word	0x40021400
 8008388:	40021800 	.word	0x40021800
 800838c:	40021c00 	.word	0x40021c00
 8008390:	40022000 	.word	0x40022000
 8008394:	40022400 	.word	0x40022400
 8008398:	40013c00 	.word	0x40013c00

0800839c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800839c:	b480      	push	{r7}
 800839e:	b087      	sub	sp, #28
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80083a6:	2300      	movs	r3, #0
 80083a8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80083aa:	2300      	movs	r3, #0
 80083ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80083ae:	2300      	movs	r3, #0
 80083b0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80083b2:	2300      	movs	r3, #0
 80083b4:	617b      	str	r3, [r7, #20]
 80083b6:	e0d9      	b.n	800856c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80083b8:	2201      	movs	r2, #1
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	fa02 f303 	lsl.w	r3, r2, r3
 80083c0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80083c2:	683a      	ldr	r2, [r7, #0]
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	4013      	ands	r3, r2
 80083c8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	f040 80c9 	bne.w	8008566 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80083d4:	4a6b      	ldr	r2, [pc, #428]	@ (8008584 <HAL_GPIO_DeInit+0x1e8>)
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	089b      	lsrs	r3, r3, #2
 80083da:	3302      	adds	r3, #2
 80083dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083e0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	f003 0303 	and.w	r3, r3, #3
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	220f      	movs	r2, #15
 80083ec:	fa02 f303 	lsl.w	r3, r2, r3
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	4013      	ands	r3, r2
 80083f4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a63      	ldr	r2, [pc, #396]	@ (8008588 <HAL_GPIO_DeInit+0x1ec>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d037      	beq.n	800846e <HAL_GPIO_DeInit+0xd2>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a62      	ldr	r2, [pc, #392]	@ (800858c <HAL_GPIO_DeInit+0x1f0>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d031      	beq.n	800846a <HAL_GPIO_DeInit+0xce>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a61      	ldr	r2, [pc, #388]	@ (8008590 <HAL_GPIO_DeInit+0x1f4>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d02b      	beq.n	8008466 <HAL_GPIO_DeInit+0xca>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a60      	ldr	r2, [pc, #384]	@ (8008594 <HAL_GPIO_DeInit+0x1f8>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d025      	beq.n	8008462 <HAL_GPIO_DeInit+0xc6>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a5f      	ldr	r2, [pc, #380]	@ (8008598 <HAL_GPIO_DeInit+0x1fc>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d01f      	beq.n	800845e <HAL_GPIO_DeInit+0xc2>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a5e      	ldr	r2, [pc, #376]	@ (800859c <HAL_GPIO_DeInit+0x200>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d019      	beq.n	800845a <HAL_GPIO_DeInit+0xbe>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a5d      	ldr	r2, [pc, #372]	@ (80085a0 <HAL_GPIO_DeInit+0x204>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d013      	beq.n	8008456 <HAL_GPIO_DeInit+0xba>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a5c      	ldr	r2, [pc, #368]	@ (80085a4 <HAL_GPIO_DeInit+0x208>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d00d      	beq.n	8008452 <HAL_GPIO_DeInit+0xb6>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a5b      	ldr	r2, [pc, #364]	@ (80085a8 <HAL_GPIO_DeInit+0x20c>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d007      	beq.n	800844e <HAL_GPIO_DeInit+0xb2>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a5a      	ldr	r2, [pc, #360]	@ (80085ac <HAL_GPIO_DeInit+0x210>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d101      	bne.n	800844a <HAL_GPIO_DeInit+0xae>
 8008446:	2309      	movs	r3, #9
 8008448:	e012      	b.n	8008470 <HAL_GPIO_DeInit+0xd4>
 800844a:	230a      	movs	r3, #10
 800844c:	e010      	b.n	8008470 <HAL_GPIO_DeInit+0xd4>
 800844e:	2308      	movs	r3, #8
 8008450:	e00e      	b.n	8008470 <HAL_GPIO_DeInit+0xd4>
 8008452:	2307      	movs	r3, #7
 8008454:	e00c      	b.n	8008470 <HAL_GPIO_DeInit+0xd4>
 8008456:	2306      	movs	r3, #6
 8008458:	e00a      	b.n	8008470 <HAL_GPIO_DeInit+0xd4>
 800845a:	2305      	movs	r3, #5
 800845c:	e008      	b.n	8008470 <HAL_GPIO_DeInit+0xd4>
 800845e:	2304      	movs	r3, #4
 8008460:	e006      	b.n	8008470 <HAL_GPIO_DeInit+0xd4>
 8008462:	2303      	movs	r3, #3
 8008464:	e004      	b.n	8008470 <HAL_GPIO_DeInit+0xd4>
 8008466:	2302      	movs	r3, #2
 8008468:	e002      	b.n	8008470 <HAL_GPIO_DeInit+0xd4>
 800846a:	2301      	movs	r3, #1
 800846c:	e000      	b.n	8008470 <HAL_GPIO_DeInit+0xd4>
 800846e:	2300      	movs	r3, #0
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	f002 0203 	and.w	r2, r2, #3
 8008476:	0092      	lsls	r2, r2, #2
 8008478:	4093      	lsls	r3, r2
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	429a      	cmp	r2, r3
 800847e:	d132      	bne.n	80084e6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008480:	4b4b      	ldr	r3, [pc, #300]	@ (80085b0 <HAL_GPIO_DeInit+0x214>)
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	43db      	mvns	r3, r3
 8008488:	4949      	ldr	r1, [pc, #292]	@ (80085b0 <HAL_GPIO_DeInit+0x214>)
 800848a:	4013      	ands	r3, r2
 800848c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800848e:	4b48      	ldr	r3, [pc, #288]	@ (80085b0 <HAL_GPIO_DeInit+0x214>)
 8008490:	685a      	ldr	r2, [r3, #4]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	43db      	mvns	r3, r3
 8008496:	4946      	ldr	r1, [pc, #280]	@ (80085b0 <HAL_GPIO_DeInit+0x214>)
 8008498:	4013      	ands	r3, r2
 800849a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800849c:	4b44      	ldr	r3, [pc, #272]	@ (80085b0 <HAL_GPIO_DeInit+0x214>)
 800849e:	689a      	ldr	r2, [r3, #8]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	43db      	mvns	r3, r3
 80084a4:	4942      	ldr	r1, [pc, #264]	@ (80085b0 <HAL_GPIO_DeInit+0x214>)
 80084a6:	4013      	ands	r3, r2
 80084a8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80084aa:	4b41      	ldr	r3, [pc, #260]	@ (80085b0 <HAL_GPIO_DeInit+0x214>)
 80084ac:	68da      	ldr	r2, [r3, #12]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	43db      	mvns	r3, r3
 80084b2:	493f      	ldr	r1, [pc, #252]	@ (80085b0 <HAL_GPIO_DeInit+0x214>)
 80084b4:	4013      	ands	r3, r2
 80084b6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	f003 0303 	and.w	r3, r3, #3
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	220f      	movs	r2, #15
 80084c2:	fa02 f303 	lsl.w	r3, r2, r3
 80084c6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80084c8:	4a2e      	ldr	r2, [pc, #184]	@ (8008584 <HAL_GPIO_DeInit+0x1e8>)
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	089b      	lsrs	r3, r3, #2
 80084ce:	3302      	adds	r3, #2
 80084d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	43da      	mvns	r2, r3
 80084d8:	482a      	ldr	r0, [pc, #168]	@ (8008584 <HAL_GPIO_DeInit+0x1e8>)
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	089b      	lsrs	r3, r3, #2
 80084de:	400a      	ands	r2, r1
 80084e0:	3302      	adds	r3, #2
 80084e2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	005b      	lsls	r3, r3, #1
 80084ee:	2103      	movs	r1, #3
 80084f0:	fa01 f303 	lsl.w	r3, r1, r3
 80084f4:	43db      	mvns	r3, r3
 80084f6:	401a      	ands	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	08da      	lsrs	r2, r3, #3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	3208      	adds	r2, #8
 8008504:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	f003 0307 	and.w	r3, r3, #7
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	220f      	movs	r2, #15
 8008512:	fa02 f303 	lsl.w	r3, r2, r3
 8008516:	43db      	mvns	r3, r3
 8008518:	697a      	ldr	r2, [r7, #20]
 800851a:	08d2      	lsrs	r2, r2, #3
 800851c:	4019      	ands	r1, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	3208      	adds	r2, #8
 8008522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	68da      	ldr	r2, [r3, #12]
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	005b      	lsls	r3, r3, #1
 800852e:	2103      	movs	r1, #3
 8008530:	fa01 f303 	lsl.w	r3, r1, r3
 8008534:	43db      	mvns	r3, r3
 8008536:	401a      	ands	r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685a      	ldr	r2, [r3, #4]
 8008540:	2101      	movs	r1, #1
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	fa01 f303 	lsl.w	r3, r1, r3
 8008548:	43db      	mvns	r3, r3
 800854a:	401a      	ands	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	689a      	ldr	r2, [r3, #8]
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	005b      	lsls	r3, r3, #1
 8008558:	2103      	movs	r1, #3
 800855a:	fa01 f303 	lsl.w	r3, r1, r3
 800855e:	43db      	mvns	r3, r3
 8008560:	401a      	ands	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	3301      	adds	r3, #1
 800856a:	617b      	str	r3, [r7, #20]
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	2b0f      	cmp	r3, #15
 8008570:	f67f af22 	bls.w	80083b8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008574:	bf00      	nop
 8008576:	bf00      	nop
 8008578:	371c      	adds	r7, #28
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	40013800 	.word	0x40013800
 8008588:	40020000 	.word	0x40020000
 800858c:	40020400 	.word	0x40020400
 8008590:	40020800 	.word	0x40020800
 8008594:	40020c00 	.word	0x40020c00
 8008598:	40021000 	.word	0x40021000
 800859c:	40021400 	.word	0x40021400
 80085a0:	40021800 	.word	0x40021800
 80085a4:	40021c00 	.word	0x40021c00
 80085a8:	40022000 	.word	0x40022000
 80085ac:	40022400 	.word	0x40022400
 80085b0:	40013c00 	.word	0x40013c00

080085b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	460b      	mov	r3, r1
 80085be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	691a      	ldr	r2, [r3, #16]
 80085c4:	887b      	ldrh	r3, [r7, #2]
 80085c6:	4013      	ands	r3, r2
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d002      	beq.n	80085d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80085cc:	2301      	movs	r3, #1
 80085ce:	73fb      	strb	r3, [r7, #15]
 80085d0:	e001      	b.n	80085d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80085d2:	2300      	movs	r3, #0
 80085d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80085d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3714      	adds	r7, #20
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	460b      	mov	r3, r1
 80085ee:	807b      	strh	r3, [r7, #2]
 80085f0:	4613      	mov	r3, r2
 80085f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80085f4:	787b      	ldrb	r3, [r7, #1]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d003      	beq.n	8008602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80085fa:	887a      	ldrh	r2, [r7, #2]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008600:	e003      	b.n	800860a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008602:	887b      	ldrh	r3, [r7, #2]
 8008604:	041a      	lsls	r2, r3, #16
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	619a      	str	r2, [r3, #24]
}
 800860a:	bf00      	nop
 800860c:	370c      	adds	r7, #12
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr
	...

08008618 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d101      	bne.n	800862a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e12b      	b.n	8008882 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008630:	b2db      	uxtb	r3, r3
 8008632:	2b00      	cmp	r3, #0
 8008634:	d106      	bne.n	8008644 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7fd fa36 	bl	8005ab0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2224      	movs	r2, #36	@ 0x24
 8008648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f022 0201 	bic.w	r2, r2, #1
 800865a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800866a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800867a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800867c:	f001 f8c2 	bl	8009804 <HAL_RCC_GetPCLK1Freq>
 8008680:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	4a81      	ldr	r2, [pc, #516]	@ (800888c <HAL_I2C_Init+0x274>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d807      	bhi.n	800869c <HAL_I2C_Init+0x84>
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4a80      	ldr	r2, [pc, #512]	@ (8008890 <HAL_I2C_Init+0x278>)
 8008690:	4293      	cmp	r3, r2
 8008692:	bf94      	ite	ls
 8008694:	2301      	movls	r3, #1
 8008696:	2300      	movhi	r3, #0
 8008698:	b2db      	uxtb	r3, r3
 800869a:	e006      	b.n	80086aa <HAL_I2C_Init+0x92>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	4a7d      	ldr	r2, [pc, #500]	@ (8008894 <HAL_I2C_Init+0x27c>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	bf94      	ite	ls
 80086a4:	2301      	movls	r3, #1
 80086a6:	2300      	movhi	r3, #0
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d001      	beq.n	80086b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e0e7      	b.n	8008882 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	4a78      	ldr	r2, [pc, #480]	@ (8008898 <HAL_I2C_Init+0x280>)
 80086b6:	fba2 2303 	umull	r2, r3, r2, r3
 80086ba:	0c9b      	lsrs	r3, r3, #18
 80086bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	430a      	orrs	r2, r1
 80086d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	6a1b      	ldr	r3, [r3, #32]
 80086d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	4a6a      	ldr	r2, [pc, #424]	@ (800888c <HAL_I2C_Init+0x274>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d802      	bhi.n	80086ec <HAL_I2C_Init+0xd4>
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	3301      	adds	r3, #1
 80086ea:	e009      	b.n	8008700 <HAL_I2C_Init+0xe8>
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80086f2:	fb02 f303 	mul.w	r3, r2, r3
 80086f6:	4a69      	ldr	r2, [pc, #420]	@ (800889c <HAL_I2C_Init+0x284>)
 80086f8:	fba2 2303 	umull	r2, r3, r2, r3
 80086fc:	099b      	lsrs	r3, r3, #6
 80086fe:	3301      	adds	r3, #1
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	6812      	ldr	r2, [r2, #0]
 8008704:	430b      	orrs	r3, r1
 8008706:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	69db      	ldr	r3, [r3, #28]
 800870e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008712:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	495c      	ldr	r1, [pc, #368]	@ (800888c <HAL_I2C_Init+0x274>)
 800871c:	428b      	cmp	r3, r1
 800871e:	d819      	bhi.n	8008754 <HAL_I2C_Init+0x13c>
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	1e59      	subs	r1, r3, #1
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	005b      	lsls	r3, r3, #1
 800872a:	fbb1 f3f3 	udiv	r3, r1, r3
 800872e:	1c59      	adds	r1, r3, #1
 8008730:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008734:	400b      	ands	r3, r1
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00a      	beq.n	8008750 <HAL_I2C_Init+0x138>
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	1e59      	subs	r1, r3, #1
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	005b      	lsls	r3, r3, #1
 8008744:	fbb1 f3f3 	udiv	r3, r1, r3
 8008748:	3301      	adds	r3, #1
 800874a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800874e:	e051      	b.n	80087f4 <HAL_I2C_Init+0x1dc>
 8008750:	2304      	movs	r3, #4
 8008752:	e04f      	b.n	80087f4 <HAL_I2C_Init+0x1dc>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d111      	bne.n	8008780 <HAL_I2C_Init+0x168>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	1e58      	subs	r0, r3, #1
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6859      	ldr	r1, [r3, #4]
 8008764:	460b      	mov	r3, r1
 8008766:	005b      	lsls	r3, r3, #1
 8008768:	440b      	add	r3, r1
 800876a:	fbb0 f3f3 	udiv	r3, r0, r3
 800876e:	3301      	adds	r3, #1
 8008770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008774:	2b00      	cmp	r3, #0
 8008776:	bf0c      	ite	eq
 8008778:	2301      	moveq	r3, #1
 800877a:	2300      	movne	r3, #0
 800877c:	b2db      	uxtb	r3, r3
 800877e:	e012      	b.n	80087a6 <HAL_I2C_Init+0x18e>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	1e58      	subs	r0, r3, #1
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6859      	ldr	r1, [r3, #4]
 8008788:	460b      	mov	r3, r1
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	440b      	add	r3, r1
 800878e:	0099      	lsls	r1, r3, #2
 8008790:	440b      	add	r3, r1
 8008792:	fbb0 f3f3 	udiv	r3, r0, r3
 8008796:	3301      	adds	r3, #1
 8008798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800879c:	2b00      	cmp	r3, #0
 800879e:	bf0c      	ite	eq
 80087a0:	2301      	moveq	r3, #1
 80087a2:	2300      	movne	r3, #0
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <HAL_I2C_Init+0x196>
 80087aa:	2301      	movs	r3, #1
 80087ac:	e022      	b.n	80087f4 <HAL_I2C_Init+0x1dc>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10e      	bne.n	80087d4 <HAL_I2C_Init+0x1bc>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	1e58      	subs	r0, r3, #1
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6859      	ldr	r1, [r3, #4]
 80087be:	460b      	mov	r3, r1
 80087c0:	005b      	lsls	r3, r3, #1
 80087c2:	440b      	add	r3, r1
 80087c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80087c8:	3301      	adds	r3, #1
 80087ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087d2:	e00f      	b.n	80087f4 <HAL_I2C_Init+0x1dc>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	1e58      	subs	r0, r3, #1
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6859      	ldr	r1, [r3, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	440b      	add	r3, r1
 80087e2:	0099      	lsls	r1, r3, #2
 80087e4:	440b      	add	r3, r1
 80087e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80087ea:	3301      	adds	r3, #1
 80087ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80087f4:	6879      	ldr	r1, [r7, #4]
 80087f6:	6809      	ldr	r1, [r1, #0]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	69da      	ldr	r2, [r3, #28]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	431a      	orrs	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	430a      	orrs	r2, r1
 8008816:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008822:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	6911      	ldr	r1, [r2, #16]
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	68d2      	ldr	r2, [r2, #12]
 800882e:	4311      	orrs	r1, r2
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	6812      	ldr	r2, [r2, #0]
 8008834:	430b      	orrs	r3, r1
 8008836:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	695a      	ldr	r2, [r3, #20]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	431a      	orrs	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	430a      	orrs	r2, r1
 8008852:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f042 0201 	orr.w	r2, r2, #1
 8008862:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2220      	movs	r2, #32
 800886e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	000186a0 	.word	0x000186a0
 8008890:	001e847f 	.word	0x001e847f
 8008894:	003d08ff 	.word	0x003d08ff
 8008898:	431bde83 	.word	0x431bde83
 800889c:	10624dd3 	.word	0x10624dd3

080088a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b20      	cmp	r3, #32
 80088b4:	d129      	bne.n	800890a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2224      	movs	r2, #36	@ 0x24
 80088ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f022 0201 	bic.w	r2, r2, #1
 80088cc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f022 0210 	bic.w	r2, r2, #16
 80088dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	683a      	ldr	r2, [r7, #0]
 80088ea:	430a      	orrs	r2, r1
 80088ec:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f042 0201 	orr.w	r2, r2, #1
 80088fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2220      	movs	r2, #32
 8008902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8008906:	2300      	movs	r3, #0
 8008908:	e000      	b.n	800890c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800890a:	2302      	movs	r3, #2
  }
}
 800890c:	4618      	mov	r0, r3
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8008922:	2300      	movs	r3, #0
 8008924:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800892c:	b2db      	uxtb	r3, r3
 800892e:	2b20      	cmp	r3, #32
 8008930:	d12a      	bne.n	8008988 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2224      	movs	r2, #36	@ 0x24
 8008936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f022 0201 	bic.w	r2, r2, #1
 8008948:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008950:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8008952:	89fb      	ldrh	r3, [r7, #14]
 8008954:	f023 030f 	bic.w	r3, r3, #15
 8008958:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	b29a      	uxth	r2, r3
 800895e:	89fb      	ldrh	r3, [r7, #14]
 8008960:	4313      	orrs	r3, r2
 8008962:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	89fa      	ldrh	r2, [r7, #14]
 800896a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f042 0201 	orr.w	r2, r2, #1
 800897a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2220      	movs	r2, #32
 8008980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8008984:	2300      	movs	r3, #0
 8008986:	e000      	b.n	800898a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8008988:	2302      	movs	r3, #2
  }
}
 800898a:	4618      	mov	r0, r3
 800898c:	3714      	adds	r7, #20
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
	...

08008998 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d101      	bne.n	80089aa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e0bf      	b.n	8008b2a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d106      	bne.n	80089c4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f7fd f8be 	bl	8005b40 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2202      	movs	r2, #2
 80089c8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	699a      	ldr	r2, [r3, #24]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80089da:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6999      	ldr	r1, [r3, #24]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	685a      	ldr	r2, [r3, #4]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80089f0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	430a      	orrs	r2, r1
 80089fe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6899      	ldr	r1, [r3, #8]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	4b4a      	ldr	r3, [pc, #296]	@ (8008b34 <HAL_LTDC_Init+0x19c>)
 8008a0c:	400b      	ands	r3, r1
 8008a0e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	041b      	lsls	r3, r3, #16
 8008a16:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	6899      	ldr	r1, [r3, #8]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	699a      	ldr	r2, [r3, #24]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	431a      	orrs	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	430a      	orrs	r2, r1
 8008a2c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	68d9      	ldr	r1, [r3, #12]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	4b3e      	ldr	r3, [pc, #248]	@ (8008b34 <HAL_LTDC_Init+0x19c>)
 8008a3a:	400b      	ands	r3, r1
 8008a3c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	69db      	ldr	r3, [r3, #28]
 8008a42:	041b      	lsls	r3, r3, #16
 8008a44:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68d9      	ldr	r1, [r3, #12]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a1a      	ldr	r2, [r3, #32]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	431a      	orrs	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	430a      	orrs	r2, r1
 8008a5a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6919      	ldr	r1, [r3, #16]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	4b33      	ldr	r3, [pc, #204]	@ (8008b34 <HAL_LTDC_Init+0x19c>)
 8008a68:	400b      	ands	r3, r1
 8008a6a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a70:	041b      	lsls	r3, r3, #16
 8008a72:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	6919      	ldr	r1, [r3, #16]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	431a      	orrs	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	430a      	orrs	r2, r1
 8008a88:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	6959      	ldr	r1, [r3, #20]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	4b27      	ldr	r3, [pc, #156]	@ (8008b34 <HAL_LTDC_Init+0x19c>)
 8008a96:	400b      	ands	r3, r1
 8008a98:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a9e:	041b      	lsls	r3, r3, #16
 8008aa0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	6959      	ldr	r1, [r3, #20]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	431a      	orrs	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	430a      	orrs	r2, r1
 8008ab6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008abe:	021b      	lsls	r3, r3, #8
 8008ac0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008ac8:	041b      	lsls	r3, r3, #16
 8008aca:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8008ada:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8008aee:	431a      	orrs	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	430a      	orrs	r2, r1
 8008af6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f042 0206 	orr.w	r2, r2, #6
 8008b06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	699a      	ldr	r2, [r3, #24]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f042 0201 	orr.w	r2, r2, #1
 8008b16:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	f000f800 	.word	0xf000f800

08008b38 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008b38:	b5b0      	push	{r4, r5, r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d101      	bne.n	8008b52 <HAL_LTDC_ConfigLayer+0x1a>
 8008b4e:	2302      	movs	r3, #2
 8008b50:	e02c      	b.n	8008bac <HAL_LTDC_ConfigLayer+0x74>
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2201      	movs	r2, #1
 8008b56:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2202      	movs	r2, #2
 8008b5e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2134      	movs	r1, #52	@ 0x34
 8008b68:	fb01 f303 	mul.w	r3, r1, r3
 8008b6c:	4413      	add	r3, r2
 8008b6e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	4614      	mov	r4, r2
 8008b76:	461d      	mov	r5, r3
 8008b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b84:	682b      	ldr	r3, [r5, #0]
 8008b86:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	68b9      	ldr	r1, [r7, #8]
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f000 f83b 	bl	8008c08 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2201      	movs	r2, #1
 8008b98:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bdb0      	pop	{r4, r5, r7, pc}

08008bb4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d101      	bne.n	8008bca <HAL_LTDC_EnableDither+0x16>
 8008bc6:	2302      	movs	r3, #2
 8008bc8:	e016      	b.n	8008bf8 <HAL_LTDC_EnableDither+0x44>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2202      	movs	r2, #2
 8008bd6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8008bda:	4b0a      	ldr	r3, [pc, #40]	@ (8008c04 <HAL_LTDC_EnableDither+0x50>)
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	4a09      	ldr	r2, [pc, #36]	@ (8008c04 <HAL_LTDC_EnableDither+0x50>)
 8008be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008be4:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2201      	movs	r2, #1
 8008bea:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr
 8008c04:	40016800 	.word	0x40016800

08008c08 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b089      	sub	sp, #36	@ 0x24
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	685a      	ldr	r2, [r3, #4]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	0c1b      	lsrs	r3, r3, #16
 8008c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c24:	4413      	add	r3, r2
 8008c26:	041b      	lsls	r3, r3, #16
 8008c28:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	01db      	lsls	r3, r3, #7
 8008c34:	4413      	add	r3, r2
 8008c36:	3384      	adds	r3, #132	@ 0x84
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	6812      	ldr	r2, [r2, #0]
 8008c3e:	4611      	mov	r1, r2
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	01d2      	lsls	r2, r2, #7
 8008c44:	440a      	add	r2, r1
 8008c46:	3284      	adds	r2, #132	@ 0x84
 8008c48:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008c4c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	0c1b      	lsrs	r3, r3, #16
 8008c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c5e:	4413      	add	r3, r2
 8008c60:	1c5a      	adds	r2, r3, #1
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4619      	mov	r1, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	01db      	lsls	r3, r3, #7
 8008c6c:	440b      	add	r3, r1
 8008c6e:	3384      	adds	r3, #132	@ 0x84
 8008c70:	4619      	mov	r1, r3
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	4313      	orrs	r3, r2
 8008c76:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	68da      	ldr	r2, [r3, #12]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c86:	4413      	add	r3, r2
 8008c88:	041b      	lsls	r3, r3, #16
 8008c8a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	461a      	mov	r2, r3
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	01db      	lsls	r3, r3, #7
 8008c96:	4413      	add	r3, r2
 8008c98:	3384      	adds	r3, #132	@ 0x84
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	6812      	ldr	r2, [r2, #0]
 8008ca0:	4611      	mov	r1, r2
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	01d2      	lsls	r2, r2, #7
 8008ca6:	440a      	add	r2, r1
 8008ca8:	3284      	adds	r2, #132	@ 0x84
 8008caa:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008cae:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	689a      	ldr	r2, [r3, #8]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008cbe:	4413      	add	r3, r2
 8008cc0:	1c5a      	adds	r2, r3, #1
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	01db      	lsls	r3, r3, #7
 8008ccc:	440b      	add	r3, r1
 8008cce:	3384      	adds	r3, #132	@ 0x84
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	461a      	mov	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	01db      	lsls	r3, r3, #7
 8008ce2:	4413      	add	r3, r2
 8008ce4:	3384      	adds	r3, #132	@ 0x84
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	6812      	ldr	r2, [r2, #0]
 8008cec:	4611      	mov	r1, r2
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	01d2      	lsls	r2, r2, #7
 8008cf2:	440a      	add	r2, r1
 8008cf4:	3284      	adds	r2, #132	@ 0x84
 8008cf6:	f023 0307 	bic.w	r3, r3, #7
 8008cfa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	461a      	mov	r2, r3
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	01db      	lsls	r3, r3, #7
 8008d06:	4413      	add	r3, r2
 8008d08:	3384      	adds	r3, #132	@ 0x84
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008d18:	021b      	lsls	r3, r3, #8
 8008d1a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008d22:	041b      	lsls	r3, r3, #16
 8008d24:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	699b      	ldr	r3, [r3, #24]
 8008d2a:	061b      	lsls	r3, r3, #24
 8008d2c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	461a      	mov	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	01db      	lsls	r3, r3, #7
 8008d38:	4413      	add	r3, r2
 8008d3a:	3384      	adds	r3, #132	@ 0x84
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	461a      	mov	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	01db      	lsls	r3, r3, #7
 8008d48:	4413      	add	r3, r2
 8008d4a:	3384      	adds	r3, #132	@ 0x84
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	2300      	movs	r3, #0
 8008d50:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008d58:	461a      	mov	r2, r3
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	431a      	orrs	r2, r3
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	431a      	orrs	r2, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4619      	mov	r1, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	01db      	lsls	r3, r3, #7
 8008d6c:	440b      	add	r3, r1
 8008d6e:	3384      	adds	r3, #132	@ 0x84
 8008d70:	4619      	mov	r1, r3
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	01db      	lsls	r3, r3, #7
 8008d82:	4413      	add	r3, r2
 8008d84:	3384      	adds	r3, #132	@ 0x84
 8008d86:	695b      	ldr	r3, [r3, #20]
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	6812      	ldr	r2, [r2, #0]
 8008d8c:	4611      	mov	r1, r2
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	01d2      	lsls	r2, r2, #7
 8008d92:	440a      	add	r2, r1
 8008d94:	3284      	adds	r2, #132	@ 0x84
 8008d96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008d9a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	461a      	mov	r2, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	01db      	lsls	r3, r3, #7
 8008da6:	4413      	add	r3, r2
 8008da8:	3384      	adds	r3, #132	@ 0x84
 8008daa:	461a      	mov	r2, r3
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	695b      	ldr	r3, [r3, #20]
 8008db0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	461a      	mov	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	01db      	lsls	r3, r3, #7
 8008dbc:	4413      	add	r3, r2
 8008dbe:	3384      	adds	r3, #132	@ 0x84
 8008dc0:	69db      	ldr	r3, [r3, #28]
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	6812      	ldr	r2, [r2, #0]
 8008dc6:	4611      	mov	r1, r2
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	01d2      	lsls	r2, r2, #7
 8008dcc:	440a      	add	r2, r1
 8008dce:	3284      	adds	r2, #132	@ 0x84
 8008dd0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008dd4:	f023 0307 	bic.w	r3, r3, #7
 8008dd8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	69da      	ldr	r2, [r3, #28]
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	6a1b      	ldr	r3, [r3, #32]
 8008de2:	68f9      	ldr	r1, [r7, #12]
 8008de4:	6809      	ldr	r1, [r1, #0]
 8008de6:	4608      	mov	r0, r1
 8008de8:	6879      	ldr	r1, [r7, #4]
 8008dea:	01c9      	lsls	r1, r1, #7
 8008dec:	4401      	add	r1, r0
 8008dee:	3184      	adds	r1, #132	@ 0x84
 8008df0:	4313      	orrs	r3, r2
 8008df2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	461a      	mov	r2, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	01db      	lsls	r3, r3, #7
 8008dfe:	4413      	add	r3, r2
 8008e00:	3384      	adds	r3, #132	@ 0x84
 8008e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	461a      	mov	r2, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	01db      	lsls	r3, r3, #7
 8008e0e:	4413      	add	r3, r2
 8008e10:	3384      	adds	r3, #132	@ 0x84
 8008e12:	461a      	mov	r2, r3
 8008e14:	2300      	movs	r3, #0
 8008e16:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	01db      	lsls	r3, r3, #7
 8008e22:	4413      	add	r3, r2
 8008e24:	3384      	adds	r3, #132	@ 0x84
 8008e26:	461a      	mov	r2, r3
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e2c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d102      	bne.n	8008e3c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8008e36:	2304      	movs	r3, #4
 8008e38:	61fb      	str	r3, [r7, #28]
 8008e3a:	e01b      	b.n	8008e74 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	691b      	ldr	r3, [r3, #16]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d102      	bne.n	8008e4a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8008e44:	2303      	movs	r3, #3
 8008e46:	61fb      	str	r3, [r7, #28]
 8008e48:	e014      	b.n	8008e74 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	2b04      	cmp	r3, #4
 8008e50:	d00b      	beq.n	8008e6a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d007      	beq.n	8008e6a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008e5e:	2b03      	cmp	r3, #3
 8008e60:	d003      	beq.n	8008e6a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008e66:	2b07      	cmp	r3, #7
 8008e68:	d102      	bne.n	8008e70 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8008e6a:	2302      	movs	r3, #2
 8008e6c:	61fb      	str	r3, [r7, #28]
 8008e6e:	e001      	b.n	8008e74 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8008e70:	2301      	movs	r3, #1
 8008e72:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	461a      	mov	r2, r3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	01db      	lsls	r3, r3, #7
 8008e7e:	4413      	add	r3, r2
 8008e80:	3384      	adds	r3, #132	@ 0x84
 8008e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	6812      	ldr	r2, [r2, #0]
 8008e88:	4611      	mov	r1, r2
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	01d2      	lsls	r2, r2, #7
 8008e8e:	440a      	add	r2, r1
 8008e90:	3284      	adds	r2, #132	@ 0x84
 8008e92:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8008e96:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e9c:	69fa      	ldr	r2, [r7, #28]
 8008e9e:	fb02 f303 	mul.w	r3, r2, r3
 8008ea2:	041a      	lsls	r2, r3, #16
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	6859      	ldr	r1, [r3, #4]
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	1acb      	subs	r3, r1, r3
 8008eae:	69f9      	ldr	r1, [r7, #28]
 8008eb0:	fb01 f303 	mul.w	r3, r1, r3
 8008eb4:	3303      	adds	r3, #3
 8008eb6:	68f9      	ldr	r1, [r7, #12]
 8008eb8:	6809      	ldr	r1, [r1, #0]
 8008eba:	4608      	mov	r0, r1
 8008ebc:	6879      	ldr	r1, [r7, #4]
 8008ebe:	01c9      	lsls	r1, r1, #7
 8008ec0:	4401      	add	r1, r0
 8008ec2:	3184      	adds	r1, #132	@ 0x84
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	461a      	mov	r2, r3
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	01db      	lsls	r3, r3, #7
 8008ed2:	4413      	add	r3, r2
 8008ed4:	3384      	adds	r3, #132	@ 0x84
 8008ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	6812      	ldr	r2, [r2, #0]
 8008edc:	4611      	mov	r1, r2
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	01d2      	lsls	r2, r2, #7
 8008ee2:	440a      	add	r2, r1
 8008ee4:	3284      	adds	r2, #132	@ 0x84
 8008ee6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008eea:	f023 0307 	bic.w	r3, r3, #7
 8008eee:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	01db      	lsls	r3, r3, #7
 8008efa:	4413      	add	r3, r2
 8008efc:	3384      	adds	r3, #132	@ 0x84
 8008efe:	461a      	mov	r2, r3
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f04:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	01db      	lsls	r3, r3, #7
 8008f10:	4413      	add	r3, r2
 8008f12:	3384      	adds	r3, #132	@ 0x84
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	6812      	ldr	r2, [r2, #0]
 8008f1a:	4611      	mov	r1, r2
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	01d2      	lsls	r2, r2, #7
 8008f20:	440a      	add	r2, r1
 8008f22:	3284      	adds	r2, #132	@ 0x84
 8008f24:	f043 0301 	orr.w	r3, r3, #1
 8008f28:	6013      	str	r3, [r2, #0]
}
 8008f2a:	bf00      	nop
 8008f2c:	3724      	adds	r7, #36	@ 0x24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
	...

08008f38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b086      	sub	sp, #24
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d101      	bne.n	8008f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	e25e      	b.n	8009408 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f003 0301 	and.w	r3, r3, #1
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d075      	beq.n	8009042 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008f56:	4b88      	ldr	r3, [pc, #544]	@ (8009178 <HAL_RCC_OscConfig+0x240>)
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	f003 030c 	and.w	r3, r3, #12
 8008f5e:	2b04      	cmp	r3, #4
 8008f60:	d00c      	beq.n	8008f7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f62:	4b85      	ldr	r3, [pc, #532]	@ (8009178 <HAL_RCC_OscConfig+0x240>)
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008f6a:	2b08      	cmp	r3, #8
 8008f6c:	d112      	bne.n	8008f94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f6e:	4b82      	ldr	r3, [pc, #520]	@ (8009178 <HAL_RCC_OscConfig+0x240>)
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f7a:	d10b      	bne.n	8008f94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f7c:	4b7e      	ldr	r3, [pc, #504]	@ (8009178 <HAL_RCC_OscConfig+0x240>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d05b      	beq.n	8009040 <HAL_RCC_OscConfig+0x108>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d157      	bne.n	8009040 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	e239      	b.n	8009408 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f9c:	d106      	bne.n	8008fac <HAL_RCC_OscConfig+0x74>
 8008f9e:	4b76      	ldr	r3, [pc, #472]	@ (8009178 <HAL_RCC_OscConfig+0x240>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a75      	ldr	r2, [pc, #468]	@ (8009178 <HAL_RCC_OscConfig+0x240>)
 8008fa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008fa8:	6013      	str	r3, [r2, #0]
 8008faa:	e01d      	b.n	8008fe8 <HAL_RCC_OscConfig+0xb0>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008fb4:	d10c      	bne.n	8008fd0 <HAL_RCC_OscConfig+0x98>
 8008fb6:	4b70      	ldr	r3, [pc, #448]	@ (8009178 <HAL_RCC_OscConfig+0x240>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a6f      	ldr	r2, [pc, #444]	@ (8009178 <HAL_RCC_OscConfig+0x240>)
 8008fbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008fc0:	6013      	str	r3, [r2, #0]
 8008fc2:	4b6d      	ldr	r3, [pc, #436]	@ (8009178 <HAL_RCC_OscConfig+0x240>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a6c      	ldr	r2, [pc, #432]	@ (8009178 <HAL_RCC_OscConfig+0x240>)
 8008fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008fcc:	6013      	str	r3, [r2, #0]
 8008fce:	e00b      	b.n	8008fe8 <HAL_RCC_OscConfig+0xb0>
 8008fd0:	4b69      	ldr	r3, [pc, #420]	@ (8009178 <HAL_RCC_OscConfig+0x240>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a68      	ldr	r2, [pc, #416]	@ (8009178 <HAL_RCC_OscConfig+0x240>)
 8008fd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008fda:	6013      	str	r3, [r2, #0]
 8008fdc:	4b66      	ldr	r3, [pc, #408]	@ (8009178 <HAL_RCC_OscConfig+0x240>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a65      	ldr	r2, [pc, #404]	@ (8009178 <HAL_RCC_OscConfig+0x240>)
 8008fe2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d013      	beq.n	8009018 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ff0:	f7fe fa9c 	bl	800752c <HAL_GetTick>
 8008ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ff6:	e008      	b.n	800900a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ff8:	f7fe fa98 	bl	800752c <HAL_GetTick>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	2b64      	cmp	r3, #100	@ 0x64
 8009004:	d901      	bls.n	800900a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009006:	2303      	movs	r3, #3
 8009008:	e1fe      	b.n	8009408 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800900a:	4b5b      	ldr	r3, [pc, #364]	@ (8009178 <HAL_RCC_OscConfig+0x240>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009012:	2b00      	cmp	r3, #0
 8009014:	d0f0      	beq.n	8008ff8 <HAL_RCC_OscConfig+0xc0>
 8009016:	e014      	b.n	8009042 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009018:	f7fe fa88 	bl	800752c <HAL_GetTick>
 800901c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800901e:	e008      	b.n	8009032 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009020:	f7fe fa84 	bl	800752c <HAL_GetTick>
 8009024:	4602      	mov	r2, r0
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	1ad3      	subs	r3, r2, r3
 800902a:	2b64      	cmp	r3, #100	@ 0x64
 800902c:	d901      	bls.n	8009032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800902e:	2303      	movs	r3, #3
 8009030:	e1ea      	b.n	8009408 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009032:	4b51      	ldr	r3, [pc, #324]	@ (8009178 <HAL_RCC_OscConfig+0x240>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800903a:	2b00      	cmp	r3, #0
 800903c:	d1f0      	bne.n	8009020 <HAL_RCC_OscConfig+0xe8>
 800903e:	e000      	b.n	8009042 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f003 0302 	and.w	r3, r3, #2
 800904a:	2b00      	cmp	r3, #0
 800904c:	d063      	beq.n	8009116 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800904e:	4b4a      	ldr	r3, [pc, #296]	@ (8009178 <HAL_RCC_OscConfig+0x240>)
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	f003 030c 	and.w	r3, r3, #12
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00b      	beq.n	8009072 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800905a:	4b47      	ldr	r3, [pc, #284]	@ (8009178 <HAL_RCC_OscConfig+0x240>)
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009062:	2b08      	cmp	r3, #8
 8009064:	d11c      	bne.n	80090a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009066:	4b44      	ldr	r3, [pc, #272]	@ (8009178 <HAL_RCC_OscConfig+0x240>)
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800906e:	2b00      	cmp	r3, #0
 8009070:	d116      	bne.n	80090a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009072:	4b41      	ldr	r3, [pc, #260]	@ (8009178 <HAL_RCC_OscConfig+0x240>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 0302 	and.w	r3, r3, #2
 800907a:	2b00      	cmp	r3, #0
 800907c:	d005      	beq.n	800908a <HAL_RCC_OscConfig+0x152>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d001      	beq.n	800908a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e1be      	b.n	8009408 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800908a:	4b3b      	ldr	r3, [pc, #236]	@ (8009178 <HAL_RCC_OscConfig+0x240>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	00db      	lsls	r3, r3, #3
 8009098:	4937      	ldr	r1, [pc, #220]	@ (8009178 <HAL_RCC_OscConfig+0x240>)
 800909a:	4313      	orrs	r3, r2
 800909c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800909e:	e03a      	b.n	8009116 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d020      	beq.n	80090ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80090a8:	4b34      	ldr	r3, [pc, #208]	@ (800917c <HAL_RCC_OscConfig+0x244>)
 80090aa:	2201      	movs	r2, #1
 80090ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090ae:	f7fe fa3d 	bl	800752c <HAL_GetTick>
 80090b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090b4:	e008      	b.n	80090c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80090b6:	f7fe fa39 	bl	800752c <HAL_GetTick>
 80090ba:	4602      	mov	r2, r0
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	d901      	bls.n	80090c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80090c4:	2303      	movs	r3, #3
 80090c6:	e19f      	b.n	8009408 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090c8:	4b2b      	ldr	r3, [pc, #172]	@ (8009178 <HAL_RCC_OscConfig+0x240>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 0302 	and.w	r3, r3, #2
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d0f0      	beq.n	80090b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090d4:	4b28      	ldr	r3, [pc, #160]	@ (8009178 <HAL_RCC_OscConfig+0x240>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	00db      	lsls	r3, r3, #3
 80090e2:	4925      	ldr	r1, [pc, #148]	@ (8009178 <HAL_RCC_OscConfig+0x240>)
 80090e4:	4313      	orrs	r3, r2
 80090e6:	600b      	str	r3, [r1, #0]
 80090e8:	e015      	b.n	8009116 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80090ea:	4b24      	ldr	r3, [pc, #144]	@ (800917c <HAL_RCC_OscConfig+0x244>)
 80090ec:	2200      	movs	r2, #0
 80090ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090f0:	f7fe fa1c 	bl	800752c <HAL_GetTick>
 80090f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80090f6:	e008      	b.n	800910a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80090f8:	f7fe fa18 	bl	800752c <HAL_GetTick>
 80090fc:	4602      	mov	r2, r0
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	2b02      	cmp	r3, #2
 8009104:	d901      	bls.n	800910a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009106:	2303      	movs	r3, #3
 8009108:	e17e      	b.n	8009408 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800910a:	4b1b      	ldr	r3, [pc, #108]	@ (8009178 <HAL_RCC_OscConfig+0x240>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f003 0302 	and.w	r3, r3, #2
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1f0      	bne.n	80090f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 0308 	and.w	r3, r3, #8
 800911e:	2b00      	cmp	r3, #0
 8009120:	d036      	beq.n	8009190 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	695b      	ldr	r3, [r3, #20]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d016      	beq.n	8009158 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800912a:	4b15      	ldr	r3, [pc, #84]	@ (8009180 <HAL_RCC_OscConfig+0x248>)
 800912c:	2201      	movs	r2, #1
 800912e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009130:	f7fe f9fc 	bl	800752c <HAL_GetTick>
 8009134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009136:	e008      	b.n	800914a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009138:	f7fe f9f8 	bl	800752c <HAL_GetTick>
 800913c:	4602      	mov	r2, r0
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	2b02      	cmp	r3, #2
 8009144:	d901      	bls.n	800914a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009146:	2303      	movs	r3, #3
 8009148:	e15e      	b.n	8009408 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800914a:	4b0b      	ldr	r3, [pc, #44]	@ (8009178 <HAL_RCC_OscConfig+0x240>)
 800914c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800914e:	f003 0302 	and.w	r3, r3, #2
 8009152:	2b00      	cmp	r3, #0
 8009154:	d0f0      	beq.n	8009138 <HAL_RCC_OscConfig+0x200>
 8009156:	e01b      	b.n	8009190 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009158:	4b09      	ldr	r3, [pc, #36]	@ (8009180 <HAL_RCC_OscConfig+0x248>)
 800915a:	2200      	movs	r2, #0
 800915c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800915e:	f7fe f9e5 	bl	800752c <HAL_GetTick>
 8009162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009164:	e00e      	b.n	8009184 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009166:	f7fe f9e1 	bl	800752c <HAL_GetTick>
 800916a:	4602      	mov	r2, r0
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	2b02      	cmp	r3, #2
 8009172:	d907      	bls.n	8009184 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009174:	2303      	movs	r3, #3
 8009176:	e147      	b.n	8009408 <HAL_RCC_OscConfig+0x4d0>
 8009178:	40023800 	.word	0x40023800
 800917c:	42470000 	.word	0x42470000
 8009180:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009184:	4b88      	ldr	r3, [pc, #544]	@ (80093a8 <HAL_RCC_OscConfig+0x470>)
 8009186:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009188:	f003 0302 	and.w	r3, r3, #2
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1ea      	bne.n	8009166 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f003 0304 	and.w	r3, r3, #4
 8009198:	2b00      	cmp	r3, #0
 800919a:	f000 8097 	beq.w	80092cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800919e:	2300      	movs	r3, #0
 80091a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091a2:	4b81      	ldr	r3, [pc, #516]	@ (80093a8 <HAL_RCC_OscConfig+0x470>)
 80091a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d10f      	bne.n	80091ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091ae:	2300      	movs	r3, #0
 80091b0:	60bb      	str	r3, [r7, #8]
 80091b2:	4b7d      	ldr	r3, [pc, #500]	@ (80093a8 <HAL_RCC_OscConfig+0x470>)
 80091b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091b6:	4a7c      	ldr	r2, [pc, #496]	@ (80093a8 <HAL_RCC_OscConfig+0x470>)
 80091b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80091be:	4b7a      	ldr	r3, [pc, #488]	@ (80093a8 <HAL_RCC_OscConfig+0x470>)
 80091c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091c6:	60bb      	str	r3, [r7, #8]
 80091c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80091ca:	2301      	movs	r3, #1
 80091cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091ce:	4b77      	ldr	r3, [pc, #476]	@ (80093ac <HAL_RCC_OscConfig+0x474>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d118      	bne.n	800920c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80091da:	4b74      	ldr	r3, [pc, #464]	@ (80093ac <HAL_RCC_OscConfig+0x474>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a73      	ldr	r2, [pc, #460]	@ (80093ac <HAL_RCC_OscConfig+0x474>)
 80091e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80091e6:	f7fe f9a1 	bl	800752c <HAL_GetTick>
 80091ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091ec:	e008      	b.n	8009200 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091ee:	f7fe f99d 	bl	800752c <HAL_GetTick>
 80091f2:	4602      	mov	r2, r0
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	d901      	bls.n	8009200 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80091fc:	2303      	movs	r3, #3
 80091fe:	e103      	b.n	8009408 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009200:	4b6a      	ldr	r3, [pc, #424]	@ (80093ac <HAL_RCC_OscConfig+0x474>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009208:	2b00      	cmp	r3, #0
 800920a:	d0f0      	beq.n	80091ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d106      	bne.n	8009222 <HAL_RCC_OscConfig+0x2ea>
 8009214:	4b64      	ldr	r3, [pc, #400]	@ (80093a8 <HAL_RCC_OscConfig+0x470>)
 8009216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009218:	4a63      	ldr	r2, [pc, #396]	@ (80093a8 <HAL_RCC_OscConfig+0x470>)
 800921a:	f043 0301 	orr.w	r3, r3, #1
 800921e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009220:	e01c      	b.n	800925c <HAL_RCC_OscConfig+0x324>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	2b05      	cmp	r3, #5
 8009228:	d10c      	bne.n	8009244 <HAL_RCC_OscConfig+0x30c>
 800922a:	4b5f      	ldr	r3, [pc, #380]	@ (80093a8 <HAL_RCC_OscConfig+0x470>)
 800922c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800922e:	4a5e      	ldr	r2, [pc, #376]	@ (80093a8 <HAL_RCC_OscConfig+0x470>)
 8009230:	f043 0304 	orr.w	r3, r3, #4
 8009234:	6713      	str	r3, [r2, #112]	@ 0x70
 8009236:	4b5c      	ldr	r3, [pc, #368]	@ (80093a8 <HAL_RCC_OscConfig+0x470>)
 8009238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800923a:	4a5b      	ldr	r2, [pc, #364]	@ (80093a8 <HAL_RCC_OscConfig+0x470>)
 800923c:	f043 0301 	orr.w	r3, r3, #1
 8009240:	6713      	str	r3, [r2, #112]	@ 0x70
 8009242:	e00b      	b.n	800925c <HAL_RCC_OscConfig+0x324>
 8009244:	4b58      	ldr	r3, [pc, #352]	@ (80093a8 <HAL_RCC_OscConfig+0x470>)
 8009246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009248:	4a57      	ldr	r2, [pc, #348]	@ (80093a8 <HAL_RCC_OscConfig+0x470>)
 800924a:	f023 0301 	bic.w	r3, r3, #1
 800924e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009250:	4b55      	ldr	r3, [pc, #340]	@ (80093a8 <HAL_RCC_OscConfig+0x470>)
 8009252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009254:	4a54      	ldr	r2, [pc, #336]	@ (80093a8 <HAL_RCC_OscConfig+0x470>)
 8009256:	f023 0304 	bic.w	r3, r3, #4
 800925a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d015      	beq.n	8009290 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009264:	f7fe f962 	bl	800752c <HAL_GetTick>
 8009268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800926a:	e00a      	b.n	8009282 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800926c:	f7fe f95e 	bl	800752c <HAL_GetTick>
 8009270:	4602      	mov	r2, r0
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	1ad3      	subs	r3, r2, r3
 8009276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800927a:	4293      	cmp	r3, r2
 800927c:	d901      	bls.n	8009282 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800927e:	2303      	movs	r3, #3
 8009280:	e0c2      	b.n	8009408 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009282:	4b49      	ldr	r3, [pc, #292]	@ (80093a8 <HAL_RCC_OscConfig+0x470>)
 8009284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009286:	f003 0302 	and.w	r3, r3, #2
 800928a:	2b00      	cmp	r3, #0
 800928c:	d0ee      	beq.n	800926c <HAL_RCC_OscConfig+0x334>
 800928e:	e014      	b.n	80092ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009290:	f7fe f94c 	bl	800752c <HAL_GetTick>
 8009294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009296:	e00a      	b.n	80092ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009298:	f7fe f948 	bl	800752c <HAL_GetTick>
 800929c:	4602      	mov	r2, r0
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d901      	bls.n	80092ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80092aa:	2303      	movs	r3, #3
 80092ac:	e0ac      	b.n	8009408 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092ae:	4b3e      	ldr	r3, [pc, #248]	@ (80093a8 <HAL_RCC_OscConfig+0x470>)
 80092b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092b2:	f003 0302 	and.w	r3, r3, #2
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d1ee      	bne.n	8009298 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80092ba:	7dfb      	ldrb	r3, [r7, #23]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d105      	bne.n	80092cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80092c0:	4b39      	ldr	r3, [pc, #228]	@ (80093a8 <HAL_RCC_OscConfig+0x470>)
 80092c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092c4:	4a38      	ldr	r2, [pc, #224]	@ (80093a8 <HAL_RCC_OscConfig+0x470>)
 80092c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	699b      	ldr	r3, [r3, #24]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f000 8098 	beq.w	8009406 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80092d6:	4b34      	ldr	r3, [pc, #208]	@ (80093a8 <HAL_RCC_OscConfig+0x470>)
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	f003 030c 	and.w	r3, r3, #12
 80092de:	2b08      	cmp	r3, #8
 80092e0:	d05c      	beq.n	800939c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	699b      	ldr	r3, [r3, #24]
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d141      	bne.n	800936e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092ea:	4b31      	ldr	r3, [pc, #196]	@ (80093b0 <HAL_RCC_OscConfig+0x478>)
 80092ec:	2200      	movs	r2, #0
 80092ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092f0:	f7fe f91c 	bl	800752c <HAL_GetTick>
 80092f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092f6:	e008      	b.n	800930a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80092f8:	f7fe f918 	bl	800752c <HAL_GetTick>
 80092fc:	4602      	mov	r2, r0
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	2b02      	cmp	r3, #2
 8009304:	d901      	bls.n	800930a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009306:	2303      	movs	r3, #3
 8009308:	e07e      	b.n	8009408 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800930a:	4b27      	ldr	r3, [pc, #156]	@ (80093a8 <HAL_RCC_OscConfig+0x470>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1f0      	bne.n	80092f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	69da      	ldr	r2, [r3, #28]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a1b      	ldr	r3, [r3, #32]
 800931e:	431a      	orrs	r2, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009324:	019b      	lsls	r3, r3, #6
 8009326:	431a      	orrs	r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800932c:	085b      	lsrs	r3, r3, #1
 800932e:	3b01      	subs	r3, #1
 8009330:	041b      	lsls	r3, r3, #16
 8009332:	431a      	orrs	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009338:	061b      	lsls	r3, r3, #24
 800933a:	491b      	ldr	r1, [pc, #108]	@ (80093a8 <HAL_RCC_OscConfig+0x470>)
 800933c:	4313      	orrs	r3, r2
 800933e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009340:	4b1b      	ldr	r3, [pc, #108]	@ (80093b0 <HAL_RCC_OscConfig+0x478>)
 8009342:	2201      	movs	r2, #1
 8009344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009346:	f7fe f8f1 	bl	800752c <HAL_GetTick>
 800934a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800934c:	e008      	b.n	8009360 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800934e:	f7fe f8ed 	bl	800752c <HAL_GetTick>
 8009352:	4602      	mov	r2, r0
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	1ad3      	subs	r3, r2, r3
 8009358:	2b02      	cmp	r3, #2
 800935a:	d901      	bls.n	8009360 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800935c:	2303      	movs	r3, #3
 800935e:	e053      	b.n	8009408 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009360:	4b11      	ldr	r3, [pc, #68]	@ (80093a8 <HAL_RCC_OscConfig+0x470>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009368:	2b00      	cmp	r3, #0
 800936a:	d0f0      	beq.n	800934e <HAL_RCC_OscConfig+0x416>
 800936c:	e04b      	b.n	8009406 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800936e:	4b10      	ldr	r3, [pc, #64]	@ (80093b0 <HAL_RCC_OscConfig+0x478>)
 8009370:	2200      	movs	r2, #0
 8009372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009374:	f7fe f8da 	bl	800752c <HAL_GetTick>
 8009378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800937a:	e008      	b.n	800938e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800937c:	f7fe f8d6 	bl	800752c <HAL_GetTick>
 8009380:	4602      	mov	r2, r0
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	2b02      	cmp	r3, #2
 8009388:	d901      	bls.n	800938e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e03c      	b.n	8009408 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800938e:	4b06      	ldr	r3, [pc, #24]	@ (80093a8 <HAL_RCC_OscConfig+0x470>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1f0      	bne.n	800937c <HAL_RCC_OscConfig+0x444>
 800939a:	e034      	b.n	8009406 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d107      	bne.n	80093b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80093a4:	2301      	movs	r3, #1
 80093a6:	e02f      	b.n	8009408 <HAL_RCC_OscConfig+0x4d0>
 80093a8:	40023800 	.word	0x40023800
 80093ac:	40007000 	.word	0x40007000
 80093b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80093b4:	4b16      	ldr	r3, [pc, #88]	@ (8009410 <HAL_RCC_OscConfig+0x4d8>)
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	69db      	ldr	r3, [r3, #28]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d11c      	bne.n	8009402 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d115      	bne.n	8009402 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80093dc:	4013      	ands	r3, r2
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d10d      	bne.n	8009402 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d106      	bne.n	8009402 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80093fe:	429a      	cmp	r2, r3
 8009400:	d001      	beq.n	8009406 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8009402:	2301      	movs	r3, #1
 8009404:	e000      	b.n	8009408 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3718      	adds	r7, #24
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	40023800 	.word	0x40023800

08009414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d101      	bne.n	8009428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	e0cc      	b.n	80095c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009428:	4b68      	ldr	r3, [pc, #416]	@ (80095cc <HAL_RCC_ClockConfig+0x1b8>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 030f 	and.w	r3, r3, #15
 8009430:	683a      	ldr	r2, [r7, #0]
 8009432:	429a      	cmp	r2, r3
 8009434:	d90c      	bls.n	8009450 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009436:	4b65      	ldr	r3, [pc, #404]	@ (80095cc <HAL_RCC_ClockConfig+0x1b8>)
 8009438:	683a      	ldr	r2, [r7, #0]
 800943a:	b2d2      	uxtb	r2, r2
 800943c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800943e:	4b63      	ldr	r3, [pc, #396]	@ (80095cc <HAL_RCC_ClockConfig+0x1b8>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f003 030f 	and.w	r3, r3, #15
 8009446:	683a      	ldr	r2, [r7, #0]
 8009448:	429a      	cmp	r2, r3
 800944a:	d001      	beq.n	8009450 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	e0b8      	b.n	80095c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f003 0302 	and.w	r3, r3, #2
 8009458:	2b00      	cmp	r3, #0
 800945a:	d020      	beq.n	800949e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f003 0304 	and.w	r3, r3, #4
 8009464:	2b00      	cmp	r3, #0
 8009466:	d005      	beq.n	8009474 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009468:	4b59      	ldr	r3, [pc, #356]	@ (80095d0 <HAL_RCC_ClockConfig+0x1bc>)
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	4a58      	ldr	r2, [pc, #352]	@ (80095d0 <HAL_RCC_ClockConfig+0x1bc>)
 800946e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009472:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 0308 	and.w	r3, r3, #8
 800947c:	2b00      	cmp	r3, #0
 800947e:	d005      	beq.n	800948c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009480:	4b53      	ldr	r3, [pc, #332]	@ (80095d0 <HAL_RCC_ClockConfig+0x1bc>)
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	4a52      	ldr	r2, [pc, #328]	@ (80095d0 <HAL_RCC_ClockConfig+0x1bc>)
 8009486:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800948a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800948c:	4b50      	ldr	r3, [pc, #320]	@ (80095d0 <HAL_RCC_ClockConfig+0x1bc>)
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	494d      	ldr	r1, [pc, #308]	@ (80095d0 <HAL_RCC_ClockConfig+0x1bc>)
 800949a:	4313      	orrs	r3, r2
 800949c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f003 0301 	and.w	r3, r3, #1
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d044      	beq.n	8009534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d107      	bne.n	80094c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094b2:	4b47      	ldr	r3, [pc, #284]	@ (80095d0 <HAL_RCC_ClockConfig+0x1bc>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d119      	bne.n	80094f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e07f      	b.n	80095c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d003      	beq.n	80094d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80094ce:	2b03      	cmp	r3, #3
 80094d0:	d107      	bne.n	80094e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80094d2:	4b3f      	ldr	r3, [pc, #252]	@ (80095d0 <HAL_RCC_ClockConfig+0x1bc>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d109      	bne.n	80094f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	e06f      	b.n	80095c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094e2:	4b3b      	ldr	r3, [pc, #236]	@ (80095d0 <HAL_RCC_ClockConfig+0x1bc>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f003 0302 	and.w	r3, r3, #2
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d101      	bne.n	80094f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094ee:	2301      	movs	r3, #1
 80094f0:	e067      	b.n	80095c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80094f2:	4b37      	ldr	r3, [pc, #220]	@ (80095d0 <HAL_RCC_ClockConfig+0x1bc>)
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	f023 0203 	bic.w	r2, r3, #3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	4934      	ldr	r1, [pc, #208]	@ (80095d0 <HAL_RCC_ClockConfig+0x1bc>)
 8009500:	4313      	orrs	r3, r2
 8009502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009504:	f7fe f812 	bl	800752c <HAL_GetTick>
 8009508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800950a:	e00a      	b.n	8009522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800950c:	f7fe f80e 	bl	800752c <HAL_GetTick>
 8009510:	4602      	mov	r2, r0
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	1ad3      	subs	r3, r2, r3
 8009516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800951a:	4293      	cmp	r3, r2
 800951c:	d901      	bls.n	8009522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800951e:	2303      	movs	r3, #3
 8009520:	e04f      	b.n	80095c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009522:	4b2b      	ldr	r3, [pc, #172]	@ (80095d0 <HAL_RCC_ClockConfig+0x1bc>)
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	f003 020c 	and.w	r2, r3, #12
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	429a      	cmp	r2, r3
 8009532:	d1eb      	bne.n	800950c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009534:	4b25      	ldr	r3, [pc, #148]	@ (80095cc <HAL_RCC_ClockConfig+0x1b8>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f003 030f 	and.w	r3, r3, #15
 800953c:	683a      	ldr	r2, [r7, #0]
 800953e:	429a      	cmp	r2, r3
 8009540:	d20c      	bcs.n	800955c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009542:	4b22      	ldr	r3, [pc, #136]	@ (80095cc <HAL_RCC_ClockConfig+0x1b8>)
 8009544:	683a      	ldr	r2, [r7, #0]
 8009546:	b2d2      	uxtb	r2, r2
 8009548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800954a:	4b20      	ldr	r3, [pc, #128]	@ (80095cc <HAL_RCC_ClockConfig+0x1b8>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 030f 	and.w	r3, r3, #15
 8009552:	683a      	ldr	r2, [r7, #0]
 8009554:	429a      	cmp	r2, r3
 8009556:	d001      	beq.n	800955c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	e032      	b.n	80095c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f003 0304 	and.w	r3, r3, #4
 8009564:	2b00      	cmp	r3, #0
 8009566:	d008      	beq.n	800957a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009568:	4b19      	ldr	r3, [pc, #100]	@ (80095d0 <HAL_RCC_ClockConfig+0x1bc>)
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	4916      	ldr	r1, [pc, #88]	@ (80095d0 <HAL_RCC_ClockConfig+0x1bc>)
 8009576:	4313      	orrs	r3, r2
 8009578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f003 0308 	and.w	r3, r3, #8
 8009582:	2b00      	cmp	r3, #0
 8009584:	d009      	beq.n	800959a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009586:	4b12      	ldr	r3, [pc, #72]	@ (80095d0 <HAL_RCC_ClockConfig+0x1bc>)
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	691b      	ldr	r3, [r3, #16]
 8009592:	00db      	lsls	r3, r3, #3
 8009594:	490e      	ldr	r1, [pc, #56]	@ (80095d0 <HAL_RCC_ClockConfig+0x1bc>)
 8009596:	4313      	orrs	r3, r2
 8009598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800959a:	f000 f821 	bl	80095e0 <HAL_RCC_GetSysClockFreq>
 800959e:	4602      	mov	r2, r0
 80095a0:	4b0b      	ldr	r3, [pc, #44]	@ (80095d0 <HAL_RCC_ClockConfig+0x1bc>)
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	091b      	lsrs	r3, r3, #4
 80095a6:	f003 030f 	and.w	r3, r3, #15
 80095aa:	490a      	ldr	r1, [pc, #40]	@ (80095d4 <HAL_RCC_ClockConfig+0x1c0>)
 80095ac:	5ccb      	ldrb	r3, [r1, r3]
 80095ae:	fa22 f303 	lsr.w	r3, r2, r3
 80095b2:	4a09      	ldr	r2, [pc, #36]	@ (80095d8 <HAL_RCC_ClockConfig+0x1c4>)
 80095b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80095b6:	4b09      	ldr	r3, [pc, #36]	@ (80095dc <HAL_RCC_ClockConfig+0x1c8>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7fd ff72 	bl	80074a4 <HAL_InitTick>

  return HAL_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	40023c00 	.word	0x40023c00
 80095d0:	40023800 	.word	0x40023800
 80095d4:	0800acfc 	.word	0x0800acfc
 80095d8:	20000018 	.word	0x20000018
 80095dc:	2000006c 	.word	0x2000006c

080095e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095e4:	b094      	sub	sp, #80	@ 0x50
 80095e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80095e8:	2300      	movs	r3, #0
 80095ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80095ec:	2300      	movs	r3, #0
 80095ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095f0:	2300      	movs	r3, #0
 80095f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80095f4:	2300      	movs	r3, #0
 80095f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80095f8:	4b79      	ldr	r3, [pc, #484]	@ (80097e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	f003 030c 	and.w	r3, r3, #12
 8009600:	2b08      	cmp	r3, #8
 8009602:	d00d      	beq.n	8009620 <HAL_RCC_GetSysClockFreq+0x40>
 8009604:	2b08      	cmp	r3, #8
 8009606:	f200 80e1 	bhi.w	80097cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800960a:	2b00      	cmp	r3, #0
 800960c:	d002      	beq.n	8009614 <HAL_RCC_GetSysClockFreq+0x34>
 800960e:	2b04      	cmp	r3, #4
 8009610:	d003      	beq.n	800961a <HAL_RCC_GetSysClockFreq+0x3a>
 8009612:	e0db      	b.n	80097cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009614:	4b73      	ldr	r3, [pc, #460]	@ (80097e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8009616:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8009618:	e0db      	b.n	80097d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800961a:	4b73      	ldr	r3, [pc, #460]	@ (80097e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800961c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800961e:	e0d8      	b.n	80097d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009620:	4b6f      	ldr	r3, [pc, #444]	@ (80097e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009628:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800962a:	4b6d      	ldr	r3, [pc, #436]	@ (80097e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009632:	2b00      	cmp	r3, #0
 8009634:	d063      	beq.n	80096fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009636:	4b6a      	ldr	r3, [pc, #424]	@ (80097e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	099b      	lsrs	r3, r3, #6
 800963c:	2200      	movs	r2, #0
 800963e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009640:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009648:	633b      	str	r3, [r7, #48]	@ 0x30
 800964a:	2300      	movs	r3, #0
 800964c:	637b      	str	r3, [r7, #52]	@ 0x34
 800964e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009652:	4622      	mov	r2, r4
 8009654:	462b      	mov	r3, r5
 8009656:	f04f 0000 	mov.w	r0, #0
 800965a:	f04f 0100 	mov.w	r1, #0
 800965e:	0159      	lsls	r1, r3, #5
 8009660:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009664:	0150      	lsls	r0, r2, #5
 8009666:	4602      	mov	r2, r0
 8009668:	460b      	mov	r3, r1
 800966a:	4621      	mov	r1, r4
 800966c:	1a51      	subs	r1, r2, r1
 800966e:	6139      	str	r1, [r7, #16]
 8009670:	4629      	mov	r1, r5
 8009672:	eb63 0301 	sbc.w	r3, r3, r1
 8009676:	617b      	str	r3, [r7, #20]
 8009678:	f04f 0200 	mov.w	r2, #0
 800967c:	f04f 0300 	mov.w	r3, #0
 8009680:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009684:	4659      	mov	r1, fp
 8009686:	018b      	lsls	r3, r1, #6
 8009688:	4651      	mov	r1, sl
 800968a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800968e:	4651      	mov	r1, sl
 8009690:	018a      	lsls	r2, r1, #6
 8009692:	4651      	mov	r1, sl
 8009694:	ebb2 0801 	subs.w	r8, r2, r1
 8009698:	4659      	mov	r1, fp
 800969a:	eb63 0901 	sbc.w	r9, r3, r1
 800969e:	f04f 0200 	mov.w	r2, #0
 80096a2:	f04f 0300 	mov.w	r3, #0
 80096a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80096aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80096ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80096b2:	4690      	mov	r8, r2
 80096b4:	4699      	mov	r9, r3
 80096b6:	4623      	mov	r3, r4
 80096b8:	eb18 0303 	adds.w	r3, r8, r3
 80096bc:	60bb      	str	r3, [r7, #8]
 80096be:	462b      	mov	r3, r5
 80096c0:	eb49 0303 	adc.w	r3, r9, r3
 80096c4:	60fb      	str	r3, [r7, #12]
 80096c6:	f04f 0200 	mov.w	r2, #0
 80096ca:	f04f 0300 	mov.w	r3, #0
 80096ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80096d2:	4629      	mov	r1, r5
 80096d4:	024b      	lsls	r3, r1, #9
 80096d6:	4621      	mov	r1, r4
 80096d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80096dc:	4621      	mov	r1, r4
 80096de:	024a      	lsls	r2, r1, #9
 80096e0:	4610      	mov	r0, r2
 80096e2:	4619      	mov	r1, r3
 80096e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096e6:	2200      	movs	r2, #0
 80096e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80096ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80096ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80096f0:	f7f6 fd7c 	bl	80001ec <__aeabi_uldivmod>
 80096f4:	4602      	mov	r2, r0
 80096f6:	460b      	mov	r3, r1
 80096f8:	4613      	mov	r3, r2
 80096fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096fc:	e058      	b.n	80097b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80096fe:	4b38      	ldr	r3, [pc, #224]	@ (80097e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	099b      	lsrs	r3, r3, #6
 8009704:	2200      	movs	r2, #0
 8009706:	4618      	mov	r0, r3
 8009708:	4611      	mov	r1, r2
 800970a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800970e:	623b      	str	r3, [r7, #32]
 8009710:	2300      	movs	r3, #0
 8009712:	627b      	str	r3, [r7, #36]	@ 0x24
 8009714:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009718:	4642      	mov	r2, r8
 800971a:	464b      	mov	r3, r9
 800971c:	f04f 0000 	mov.w	r0, #0
 8009720:	f04f 0100 	mov.w	r1, #0
 8009724:	0159      	lsls	r1, r3, #5
 8009726:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800972a:	0150      	lsls	r0, r2, #5
 800972c:	4602      	mov	r2, r0
 800972e:	460b      	mov	r3, r1
 8009730:	4641      	mov	r1, r8
 8009732:	ebb2 0a01 	subs.w	sl, r2, r1
 8009736:	4649      	mov	r1, r9
 8009738:	eb63 0b01 	sbc.w	fp, r3, r1
 800973c:	f04f 0200 	mov.w	r2, #0
 8009740:	f04f 0300 	mov.w	r3, #0
 8009744:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009748:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800974c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009750:	ebb2 040a 	subs.w	r4, r2, sl
 8009754:	eb63 050b 	sbc.w	r5, r3, fp
 8009758:	f04f 0200 	mov.w	r2, #0
 800975c:	f04f 0300 	mov.w	r3, #0
 8009760:	00eb      	lsls	r3, r5, #3
 8009762:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009766:	00e2      	lsls	r2, r4, #3
 8009768:	4614      	mov	r4, r2
 800976a:	461d      	mov	r5, r3
 800976c:	4643      	mov	r3, r8
 800976e:	18e3      	adds	r3, r4, r3
 8009770:	603b      	str	r3, [r7, #0]
 8009772:	464b      	mov	r3, r9
 8009774:	eb45 0303 	adc.w	r3, r5, r3
 8009778:	607b      	str	r3, [r7, #4]
 800977a:	f04f 0200 	mov.w	r2, #0
 800977e:	f04f 0300 	mov.w	r3, #0
 8009782:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009786:	4629      	mov	r1, r5
 8009788:	028b      	lsls	r3, r1, #10
 800978a:	4621      	mov	r1, r4
 800978c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009790:	4621      	mov	r1, r4
 8009792:	028a      	lsls	r2, r1, #10
 8009794:	4610      	mov	r0, r2
 8009796:	4619      	mov	r1, r3
 8009798:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800979a:	2200      	movs	r2, #0
 800979c:	61bb      	str	r3, [r7, #24]
 800979e:	61fa      	str	r2, [r7, #28]
 80097a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80097a4:	f7f6 fd22 	bl	80001ec <__aeabi_uldivmod>
 80097a8:	4602      	mov	r2, r0
 80097aa:	460b      	mov	r3, r1
 80097ac:	4613      	mov	r3, r2
 80097ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80097b0:	4b0b      	ldr	r3, [pc, #44]	@ (80097e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	0c1b      	lsrs	r3, r3, #16
 80097b6:	f003 0303 	and.w	r3, r3, #3
 80097ba:	3301      	adds	r3, #1
 80097bc:	005b      	lsls	r3, r3, #1
 80097be:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80097c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80097c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80097c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80097ca:	e002      	b.n	80097d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80097cc:	4b05      	ldr	r3, [pc, #20]	@ (80097e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80097ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80097d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80097d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3750      	adds	r7, #80	@ 0x50
 80097d8:	46bd      	mov	sp, r7
 80097da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097de:	bf00      	nop
 80097e0:	40023800 	.word	0x40023800
 80097e4:	00f42400 	.word	0x00f42400
 80097e8:	007a1200 	.word	0x007a1200

080097ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80097ec:	b480      	push	{r7}
 80097ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80097f0:	4b03      	ldr	r3, [pc, #12]	@ (8009800 <HAL_RCC_GetHCLKFreq+0x14>)
 80097f2:	681b      	ldr	r3, [r3, #0]
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop
 8009800:	20000018 	.word	0x20000018

08009804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009808:	f7ff fff0 	bl	80097ec <HAL_RCC_GetHCLKFreq>
 800980c:	4602      	mov	r2, r0
 800980e:	4b05      	ldr	r3, [pc, #20]	@ (8009824 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	0a9b      	lsrs	r3, r3, #10
 8009814:	f003 0307 	and.w	r3, r3, #7
 8009818:	4903      	ldr	r1, [pc, #12]	@ (8009828 <HAL_RCC_GetPCLK1Freq+0x24>)
 800981a:	5ccb      	ldrb	r3, [r1, r3]
 800981c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009820:	4618      	mov	r0, r3
 8009822:	bd80      	pop	{r7, pc}
 8009824:	40023800 	.word	0x40023800
 8009828:	0800ad0c 	.word	0x0800ad0c

0800982c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b086      	sub	sp, #24
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009834:	2300      	movs	r3, #0
 8009836:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009838:	2300      	movs	r3, #0
 800983a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f003 0301 	and.w	r3, r3, #1
 8009844:	2b00      	cmp	r3, #0
 8009846:	d10b      	bne.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009850:	2b00      	cmp	r3, #0
 8009852:	d105      	bne.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800985c:	2b00      	cmp	r3, #0
 800985e:	d075      	beq.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009860:	4b91      	ldr	r3, [pc, #580]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8009862:	2200      	movs	r2, #0
 8009864:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009866:	f7fd fe61 	bl	800752c <HAL_GetTick>
 800986a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800986c:	e008      	b.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800986e:	f7fd fe5d 	bl	800752c <HAL_GetTick>
 8009872:	4602      	mov	r2, r0
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	1ad3      	subs	r3, r2, r3
 8009878:	2b02      	cmp	r3, #2
 800987a:	d901      	bls.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800987c:	2303      	movs	r3, #3
 800987e:	e189      	b.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009880:	4b8a      	ldr	r3, [pc, #552]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009888:	2b00      	cmp	r3, #0
 800988a:	d1f0      	bne.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f003 0301 	and.w	r3, r3, #1
 8009894:	2b00      	cmp	r3, #0
 8009896:	d009      	beq.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	019a      	lsls	r2, r3, #6
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	071b      	lsls	r3, r3, #28
 80098a4:	4981      	ldr	r1, [pc, #516]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098a6:	4313      	orrs	r3, r2
 80098a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 0302 	and.w	r3, r3, #2
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d01f      	beq.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80098b8:	4b7c      	ldr	r3, [pc, #496]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098be:	0f1b      	lsrs	r3, r3, #28
 80098c0:	f003 0307 	and.w	r3, r3, #7
 80098c4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	019a      	lsls	r2, r3, #6
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	061b      	lsls	r3, r3, #24
 80098d2:	431a      	orrs	r2, r3
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	071b      	lsls	r3, r3, #28
 80098d8:	4974      	ldr	r1, [pc, #464]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098da:	4313      	orrs	r3, r2
 80098dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80098e0:	4b72      	ldr	r3, [pc, #456]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098e6:	f023 021f 	bic.w	r2, r3, #31
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	69db      	ldr	r3, [r3, #28]
 80098ee:	3b01      	subs	r3, #1
 80098f0:	496e      	ldr	r1, [pc, #440]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098f2:	4313      	orrs	r3, r2
 80098f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00d      	beq.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	019a      	lsls	r2, r3, #6
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	061b      	lsls	r3, r3, #24
 8009910:	431a      	orrs	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	071b      	lsls	r3, r3, #28
 8009918:	4964      	ldr	r1, [pc, #400]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800991a:	4313      	orrs	r3, r2
 800991c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009920:	4b61      	ldr	r3, [pc, #388]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8009922:	2201      	movs	r2, #1
 8009924:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009926:	f7fd fe01 	bl	800752c <HAL_GetTick>
 800992a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800992c:	e008      	b.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800992e:	f7fd fdfd 	bl	800752c <HAL_GetTick>
 8009932:	4602      	mov	r2, r0
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	1ad3      	subs	r3, r2, r3
 8009938:	2b02      	cmp	r3, #2
 800993a:	d901      	bls.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800993c:	2303      	movs	r3, #3
 800993e:	e129      	b.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009940:	4b5a      	ldr	r3, [pc, #360]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009948:	2b00      	cmp	r3, #0
 800994a:	d0f0      	beq.n	800992e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f003 0304 	and.w	r3, r3, #4
 8009954:	2b00      	cmp	r3, #0
 8009956:	d105      	bne.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009960:	2b00      	cmp	r3, #0
 8009962:	d079      	beq.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009964:	4b52      	ldr	r3, [pc, #328]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009966:	2200      	movs	r2, #0
 8009968:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800996a:	f7fd fddf 	bl	800752c <HAL_GetTick>
 800996e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009970:	e008      	b.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009972:	f7fd fddb 	bl	800752c <HAL_GetTick>
 8009976:	4602      	mov	r2, r0
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	1ad3      	subs	r3, r2, r3
 800997c:	2b02      	cmp	r3, #2
 800997e:	d901      	bls.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009980:	2303      	movs	r3, #3
 8009982:	e107      	b.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009984:	4b49      	ldr	r3, [pc, #292]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800998c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009990:	d0ef      	beq.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f003 0304 	and.w	r3, r3, #4
 800999a:	2b00      	cmp	r3, #0
 800999c:	d020      	beq.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800999e:	4b43      	ldr	r3, [pc, #268]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099a4:	0f1b      	lsrs	r3, r3, #28
 80099a6:	f003 0307 	and.w	r3, r3, #7
 80099aa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	691b      	ldr	r3, [r3, #16]
 80099b0:	019a      	lsls	r2, r3, #6
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	695b      	ldr	r3, [r3, #20]
 80099b6:	061b      	lsls	r3, r3, #24
 80099b8:	431a      	orrs	r2, r3
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	071b      	lsls	r3, r3, #28
 80099be:	493b      	ldr	r1, [pc, #236]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099c0:	4313      	orrs	r3, r2
 80099c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80099c6:	4b39      	ldr	r3, [pc, #228]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099cc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6a1b      	ldr	r3, [r3, #32]
 80099d4:	3b01      	subs	r3, #1
 80099d6:	021b      	lsls	r3, r3, #8
 80099d8:	4934      	ldr	r1, [pc, #208]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099da:	4313      	orrs	r3, r2
 80099dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f003 0308 	and.w	r3, r3, #8
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d01e      	beq.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80099ec:	4b2f      	ldr	r3, [pc, #188]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099f2:	0e1b      	lsrs	r3, r3, #24
 80099f4:	f003 030f 	and.w	r3, r3, #15
 80099f8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	019a      	lsls	r2, r3, #6
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	061b      	lsls	r3, r3, #24
 8009a04:	431a      	orrs	r2, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	699b      	ldr	r3, [r3, #24]
 8009a0a:	071b      	lsls	r3, r3, #28
 8009a0c:	4927      	ldr	r1, [pc, #156]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009a14:	4b25      	ldr	r3, [pc, #148]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a1a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a22:	4922      	ldr	r1, [pc, #136]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a24:	4313      	orrs	r3, r2
 8009a26:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009a2a:	4b21      	ldr	r3, [pc, #132]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009a30:	f7fd fd7c 	bl	800752c <HAL_GetTick>
 8009a34:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009a36:	e008      	b.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009a38:	f7fd fd78 	bl	800752c <HAL_GetTick>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	2b02      	cmp	r3, #2
 8009a44:	d901      	bls.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a46:	2303      	movs	r3, #3
 8009a48:	e0a4      	b.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009a4a:	4b18      	ldr	r3, [pc, #96]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a56:	d1ef      	bne.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f003 0320 	and.w	r3, r3, #32
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f000 808b 	beq.w	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009a66:	2300      	movs	r3, #0
 8009a68:	60fb      	str	r3, [r7, #12]
 8009a6a:	4b10      	ldr	r3, [pc, #64]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a6e:	4a0f      	ldr	r2, [pc, #60]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a74:	6413      	str	r3, [r2, #64]	@ 0x40
 8009a76:	4b0d      	ldr	r3, [pc, #52]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a7e:	60fb      	str	r3, [r7, #12]
 8009a80:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009a82:	4b0c      	ldr	r3, [pc, #48]	@ (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a0b      	ldr	r2, [pc, #44]	@ (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009a88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a8c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009a8e:	f7fd fd4d 	bl	800752c <HAL_GetTick>
 8009a92:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009a94:	e010      	b.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009a96:	f7fd fd49 	bl	800752c <HAL_GetTick>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	1ad3      	subs	r3, r2, r3
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d909      	bls.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	e075      	b.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8009aa8:	42470068 	.word	0x42470068
 8009aac:	40023800 	.word	0x40023800
 8009ab0:	42470070 	.word	0x42470070
 8009ab4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009ab8:	4b38      	ldr	r3, [pc, #224]	@ (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d0e8      	beq.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009ac4:	4b36      	ldr	r3, [pc, #216]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ac8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009acc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d02f      	beq.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ad8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009adc:	693a      	ldr	r2, [r7, #16]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d028      	beq.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009ae2:	4b2f      	ldr	r3, [pc, #188]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ae6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009aea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009aec:	4b2d      	ldr	r3, [pc, #180]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8009aee:	2201      	movs	r2, #1
 8009af0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009af2:	4b2c      	ldr	r3, [pc, #176]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8009af4:	2200      	movs	r2, #0
 8009af6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009af8:	4a29      	ldr	r2, [pc, #164]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009afe:	4b28      	ldr	r3, [pc, #160]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b02:	f003 0301 	and.w	r3, r3, #1
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d114      	bne.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009b0a:	f7fd fd0f 	bl	800752c <HAL_GetTick>
 8009b0e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b10:	e00a      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b12:	f7fd fd0b 	bl	800752c <HAL_GetTick>
 8009b16:	4602      	mov	r2, r0
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	1ad3      	subs	r3, r2, r3
 8009b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d901      	bls.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8009b24:	2303      	movs	r3, #3
 8009b26:	e035      	b.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b28:	4b1d      	ldr	r3, [pc, #116]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b2c:	f003 0302 	and.w	r3, r3, #2
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d0ee      	beq.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b40:	d10d      	bne.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8009b42:	4b17      	ldr	r3, [pc, #92]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b4e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009b52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b56:	4912      	ldr	r1, [pc, #72]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	608b      	str	r3, [r1, #8]
 8009b5c:	e005      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8009b5e:	4b10      	ldr	r3, [pc, #64]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	4a0f      	ldr	r2, [pc, #60]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009b64:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8009b68:	6093      	str	r3, [r2, #8]
 8009b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009b6c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b76:	490a      	ldr	r1, [pc, #40]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 0310 	and.w	r3, r3, #16
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d004      	beq.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8009b8e:	4b06      	ldr	r3, [pc, #24]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8009b90:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8009b92:	2300      	movs	r3, #0
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3718      	adds	r7, #24
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	40007000 	.word	0x40007000
 8009ba0:	40023800 	.word	0x40023800
 8009ba4:	42470e40 	.word	0x42470e40
 8009ba8:	424711e0 	.word	0x424711e0

08009bac <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d101      	bne.n	8009bbe <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e01c      	b.n	8009bf8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	795b      	ldrb	r3, [r3, #5]
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d105      	bne.n	8009bd4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f7fc f8c4 	bl	8005d5c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2202      	movs	r2, #2
 8009bd8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f042 0204 	orr.w	r2, r2, #4
 8009be8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2201      	movs	r2, #1
 8009bee:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3708      	adds	r7, #8
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	791b      	ldrb	r3, [r3, #4]
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d101      	bne.n	8009c1a <HAL_RNG_GenerateRandomNumber+0x1a>
 8009c16:	2302      	movs	r3, #2
 8009c18:	e03d      	b.n	8009c96 <HAL_RNG_GenerateRandomNumber+0x96>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	795b      	ldrb	r3, [r3, #5]
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d12c      	bne.n	8009c84 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2202      	movs	r2, #2
 8009c2e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009c30:	f7fd fc7c 	bl	800752c <HAL_GetTick>
 8009c34:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8009c36:	e011      	b.n	8009c5c <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8009c38:	f7fd fc78 	bl	800752c <HAL_GetTick>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	1ad3      	subs	r3, r2, r3
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d90a      	bls.n	8009c5c <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2202      	movs	r2, #2
 8009c50:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2200      	movs	r2, #0
 8009c56:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e01c      	b.n	8009c96 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	f003 0301 	and.w	r3, r3, #1
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d1e6      	bne.n	8009c38 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	689a      	ldr	r2, [r3, #8]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	68da      	ldr	r2, [r3, #12]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	715a      	strb	r2, [r3, #5]
 8009c82:	e004      	b.n	8009c8e <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2204      	movs	r2, #4
 8009c88:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	711a      	strb	r2, [r3, #4]

  return status;
 8009c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3710      	adds	r7, #16
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b082      	sub	sp, #8
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	330c      	adds	r3, #12
 8009caa:	4619      	mov	r1, r3
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f7ff ffa7 	bl	8009c00 <HAL_RNG_GenerateRandomNumber>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d102      	bne.n	8009cbe <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	68db      	ldr	r3, [r3, #12]
 8009cbc:	e000      	b.n	8009cc0 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8009cbe:	2300      	movs	r3, #0
  }
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	f003 0320 	and.w	r3, r3, #32
 8009cde:	2b20      	cmp	r3, #32
 8009ce0:	d105      	bne.n	8009cee <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2210      	movs	r2, #16
 8009ce6:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	60fb      	str	r3, [r7, #12]
 8009cec:	e00b      	b.n	8009d06 <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cf8:	2b40      	cmp	r3, #64	@ 0x40
 8009cfa:	d104      	bne.n	8009d06 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2208      	movs	r2, #8
 8009d00:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8009d02:	2301      	movs	r3, #1
 8009d04:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d10a      	bne.n	8009d22 <HAL_RNG_IRQHandler+0x5a>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2204      	movs	r2, #4
 8009d10:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 f839 	bl	8009d8a <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8009d20:	605a      	str	r2, [r3, #4]
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	f003 0301 	and.w	r3, r3, #1
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d11d      	bne.n	8009d6c <HAL_RNG_IRQHandler+0xa4>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f022 0208 	bic.w	r2, r2, #8
 8009d3e:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	689a      	ldr	r2, [r3, #8]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	795b      	ldrb	r3, [r3, #5]
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	2b04      	cmp	r3, #4
 8009d52:	d00b      	beq.n	8009d6c <HAL_RNG_IRQHandler+0xa4>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	68db      	ldr	r3, [r3, #12]
 8009d64:	4619      	mov	r1, r3
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 f804 	bl	8009d74 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8009d6c:	bf00      	nop
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8009d7e:	bf00      	nop
 8009d80:	370c      	adds	r7, #12
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr

08009d8a <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8009d8a:	b480      	push	{r7}
 8009d8c:	b083      	sub	sp, #12
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8009d92:	bf00      	nop
 8009d94:	370c      	adds	r7, #12
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr

08009d9e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b082      	sub	sp, #8
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d101      	bne.n	8009db2 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	e025      	b.n	8009dfe <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d106      	bne.n	8009dcc <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f7fc f8fe 	bl	8005fc8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2202      	movs	r2, #2
 8009dd0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	3304      	adds	r3, #4
 8009ddc:	4619      	mov	r1, r3
 8009dde:	4610      	mov	r0, r2
 8009de0:	f000 fde6 	bl	800a9b0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6818      	ldr	r0, [r3, #0]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	461a      	mov	r2, r3
 8009dee:	6839      	ldr	r1, [r7, #0]
 8009df0:	f000 fe51 	bl	800aa96 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2201      	movs	r2, #1
 8009df8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;
 8009dfc:	2300      	movs	r3, #0
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3708      	adds	r7, #8
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b084      	sub	sp, #16
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	60f8      	str	r0, [r7, #12]
 8009e0e:	60b9      	str	r1, [r7, #8]
 8009e10:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	d101      	bne.n	8009e22 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009e1e:	2302      	movs	r3, #2
 8009e20:	e018      	b.n	8009e54 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2202      	movs	r2, #2
 8009e26:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	68b9      	ldr	r1, [r7, #8]
 8009e32:	4618      	mov	r0, r3
 8009e34:	f000 feae 	bl	800ab94 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	d104      	bne.n	8009e4a <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2205      	movs	r2, #5
 8009e44:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8009e48:	e003      	b.n	8009e52 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  }
  
  return HAL_OK;  
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3710      	adds	r7, #16
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	2b02      	cmp	r3, #2
 8009e70:	d101      	bne.n	8009e76 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009e72:	2302      	movs	r3, #2
 8009e74:	e00e      	b.n	8009e94 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2202      	movs	r2, #2
 8009e7a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	6839      	ldr	r1, [r7, #0]
 8009e84:	4618      	mov	r0, r3
 8009e86:	f000 fec1 	bl	800ac0c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;   
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3708      	adds	r7, #8
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d101      	bne.n	8009eae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e056      	b.n	8009f5c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d106      	bne.n	8009ece <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f7fb ff6f 	bl	8005dac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2202      	movs	r2, #2
 8009ed2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ee4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	685a      	ldr	r2, [r3, #4]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	431a      	orrs	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	431a      	orrs	r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	431a      	orrs	r2, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	695b      	ldr	r3, [r3, #20]
 8009f00:	431a      	orrs	r2, r3
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	699b      	ldr	r3, [r3, #24]
 8009f06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f0a:	431a      	orrs	r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	69db      	ldr	r3, [r3, #28]
 8009f10:	431a      	orrs	r2, r3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a1b      	ldr	r3, [r3, #32]
 8009f16:	ea42 0103 	orr.w	r1, r2, r3
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	430a      	orrs	r2, r1
 8009f24:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	699b      	ldr	r3, [r3, #24]
 8009f2a:	0c1b      	lsrs	r3, r3, #16
 8009f2c:	f003 0104 	and.w	r1, r3, #4
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	430a      	orrs	r2, r1
 8009f3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	69da      	ldr	r2, [r3, #28]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009f4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2201      	movs	r2, #1
 8009f56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8009f5a:	2300      	movs	r3, #0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3708      	adds	r7, #8
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d101      	bne.n	8009f76 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e01a      	b.n	8009fac <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2202      	movs	r2, #2
 8009f7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f8c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f7fb ff74 	bl	8005e7c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8009faa:	2300      	movs	r3, #0
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b088      	sub	sp, #32
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	603b      	str	r3, [r7, #0]
 8009fc0:	4613      	mov	r3, r2
 8009fc2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d101      	bne.n	8009fd6 <HAL_SPI_Transmit+0x22>
 8009fd2:	2302      	movs	r3, #2
 8009fd4:	e11e      	b.n	800a214 <HAL_SPI_Transmit+0x260>
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009fde:	f7fd faa5 	bl	800752c <HAL_GetTick>
 8009fe2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009fe4:	88fb      	ldrh	r3, [r7, #6]
 8009fe6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d002      	beq.n	8009ffa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009ff4:	2302      	movs	r3, #2
 8009ff6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009ff8:	e103      	b.n	800a202 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d002      	beq.n	800a006 <HAL_SPI_Transmit+0x52>
 800a000:	88fb      	ldrh	r3, [r7, #6]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d102      	bne.n	800a00c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a00a:	e0fa      	b.n	800a202 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2203      	movs	r2, #3
 800a010:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2200      	movs	r2, #0
 800a018:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	68ba      	ldr	r2, [r7, #8]
 800a01e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	88fa      	ldrh	r2, [r7, #6]
 800a024:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	88fa      	ldrh	r2, [r7, #6]
 800a02a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2200      	movs	r2, #0
 800a030:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2200      	movs	r2, #0
 800a036:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2200      	movs	r2, #0
 800a03c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2200      	movs	r2, #0
 800a042:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2200      	movs	r2, #0
 800a048:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a052:	d107      	bne.n	800a064 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a062:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a06e:	2b40      	cmp	r3, #64	@ 0x40
 800a070:	d007      	beq.n	800a082 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a080:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a08a:	d14b      	bne.n	800a124 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d002      	beq.n	800a09a <HAL_SPI_Transmit+0xe6>
 800a094:	8afb      	ldrh	r3, [r7, #22]
 800a096:	2b01      	cmp	r3, #1
 800a098:	d13e      	bne.n	800a118 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a09e:	881a      	ldrh	r2, [r3, #0]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0aa:	1c9a      	adds	r2, r3, #2
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	3b01      	subs	r3, #1
 800a0b8:	b29a      	uxth	r2, r3
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a0be:	e02b      	b.n	800a118 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	f003 0302 	and.w	r3, r3, #2
 800a0ca:	2b02      	cmp	r3, #2
 800a0cc:	d112      	bne.n	800a0f4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0d2:	881a      	ldrh	r2, [r3, #0]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0de:	1c9a      	adds	r2, r3, #2
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	86da      	strh	r2, [r3, #54]	@ 0x36
 800a0f2:	e011      	b.n	800a118 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a0f4:	f7fd fa1a 	bl	800752c <HAL_GetTick>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	1ad3      	subs	r3, r2, r3
 800a0fe:	683a      	ldr	r2, [r7, #0]
 800a100:	429a      	cmp	r2, r3
 800a102:	d803      	bhi.n	800a10c <HAL_SPI_Transmit+0x158>
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a10a:	d102      	bne.n	800a112 <HAL_SPI_Transmit+0x15e>
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d102      	bne.n	800a118 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800a112:	2303      	movs	r3, #3
 800a114:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a116:	e074      	b.n	800a202 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1ce      	bne.n	800a0c0 <HAL_SPI_Transmit+0x10c>
 800a122:	e04c      	b.n	800a1be <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d002      	beq.n	800a132 <HAL_SPI_Transmit+0x17e>
 800a12c:	8afb      	ldrh	r3, [r7, #22]
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d140      	bne.n	800a1b4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	330c      	adds	r3, #12
 800a13c:	7812      	ldrb	r2, [r2, #0]
 800a13e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a144:	1c5a      	adds	r2, r3, #1
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a14e:	b29b      	uxth	r3, r3
 800a150:	3b01      	subs	r3, #1
 800a152:	b29a      	uxth	r2, r3
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a158:	e02c      	b.n	800a1b4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	f003 0302 	and.w	r3, r3, #2
 800a164:	2b02      	cmp	r3, #2
 800a166:	d113      	bne.n	800a190 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	330c      	adds	r3, #12
 800a172:	7812      	ldrb	r2, [r2, #0]
 800a174:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a17a:	1c5a      	adds	r2, r3, #1
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a184:	b29b      	uxth	r3, r3
 800a186:	3b01      	subs	r3, #1
 800a188:	b29a      	uxth	r2, r3
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800a18e:	e011      	b.n	800a1b4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a190:	f7fd f9cc 	bl	800752c <HAL_GetTick>
 800a194:	4602      	mov	r2, r0
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	1ad3      	subs	r3, r2, r3
 800a19a:	683a      	ldr	r2, [r7, #0]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d803      	bhi.n	800a1a8 <HAL_SPI_Transmit+0x1f4>
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a6:	d102      	bne.n	800a1ae <HAL_SPI_Transmit+0x1fa>
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d102      	bne.n	800a1b4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800a1ae:	2303      	movs	r3, #3
 800a1b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a1b2:	e026      	b.n	800a202 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d1cd      	bne.n	800a15a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a1be:	69ba      	ldr	r2, [r7, #24]
 800a1c0:	6839      	ldr	r1, [r7, #0]
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	f000 fbb2 	bl	800a92c <SPI_EndRxTxTransaction>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d002      	beq.n	800a1d4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2220      	movs	r2, #32
 800a1d2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d10a      	bne.n	800a1f2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a1dc:	2300      	movs	r3, #0
 800a1de:	613b      	str	r3, [r7, #16]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	613b      	str	r3, [r7, #16]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	689b      	ldr	r3, [r3, #8]
 800a1ee:	613b      	str	r3, [r7, #16]
 800a1f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d002      	beq.n	800a200 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	77fb      	strb	r3, [r7, #31]
 800a1fe:	e000      	b.n	800a202 <HAL_SPI_Transmit+0x24e>
  }

error:
 800a200:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2201      	movs	r2, #1
 800a206:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800a212:	7ffb      	ldrb	r3, [r7, #31]
}
 800a214:	4618      	mov	r0, r3
 800a216:	3720      	adds	r7, #32
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b088      	sub	sp, #32
 800a220:	af02      	add	r7, sp, #8
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	603b      	str	r3, [r7, #0]
 800a228:	4613      	mov	r3, r2
 800a22a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a22c:	2300      	movs	r3, #0
 800a22e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a238:	d112      	bne.n	800a260 <HAL_SPI_Receive+0x44>
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d10e      	bne.n	800a260 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2204      	movs	r2, #4
 800a246:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a24a:	88fa      	ldrh	r2, [r7, #6]
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	9300      	str	r3, [sp, #0]
 800a250:	4613      	mov	r3, r2
 800a252:	68ba      	ldr	r2, [r7, #8]
 800a254:	68b9      	ldr	r1, [r7, #8]
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	f000 f8e9 	bl	800a42e <HAL_SPI_TransmitReceive>
 800a25c:	4603      	mov	r3, r0
 800a25e:	e0e2      	b.n	800a426 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a266:	2b01      	cmp	r3, #1
 800a268:	d101      	bne.n	800a26e <HAL_SPI_Receive+0x52>
 800a26a:	2302      	movs	r3, #2
 800a26c:	e0db      	b.n	800a426 <HAL_SPI_Receive+0x20a>
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2201      	movs	r2, #1
 800a272:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a276:	f7fd f959 	bl	800752c <HAL_GetTick>
 800a27a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a282:	b2db      	uxtb	r3, r3
 800a284:	2b01      	cmp	r3, #1
 800a286:	d002      	beq.n	800a28e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800a288:	2302      	movs	r3, #2
 800a28a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a28c:	e0c2      	b.n	800a414 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d002      	beq.n	800a29a <HAL_SPI_Receive+0x7e>
 800a294:	88fb      	ldrh	r3, [r7, #6]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d102      	bne.n	800a2a0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a29e:	e0b9      	b.n	800a414 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2204      	movs	r2, #4
 800a2a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	68ba      	ldr	r2, [r7, #8]
 800a2b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	88fa      	ldrh	r2, [r7, #6]
 800a2b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	88fa      	ldrh	r2, [r7, #6]
 800a2be:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2e6:	d107      	bne.n	800a2f8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a2f6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a302:	2b40      	cmp	r3, #64	@ 0x40
 800a304:	d007      	beq.n	800a316 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a314:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d162      	bne.n	800a3e4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a31e:	e02e      	b.n	800a37e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	f003 0301 	and.w	r3, r3, #1
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d115      	bne.n	800a35a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f103 020c 	add.w	r2, r3, #12
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a33a:	7812      	ldrb	r2, [r2, #0]
 800a33c:	b2d2      	uxtb	r2, r2
 800a33e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a344:	1c5a      	adds	r2, r3, #1
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a34e:	b29b      	uxth	r3, r3
 800a350:	3b01      	subs	r3, #1
 800a352:	b29a      	uxth	r2, r3
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a358:	e011      	b.n	800a37e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a35a:	f7fd f8e7 	bl	800752c <HAL_GetTick>
 800a35e:	4602      	mov	r2, r0
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	1ad3      	subs	r3, r2, r3
 800a364:	683a      	ldr	r2, [r7, #0]
 800a366:	429a      	cmp	r2, r3
 800a368:	d803      	bhi.n	800a372 <HAL_SPI_Receive+0x156>
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a370:	d102      	bne.n	800a378 <HAL_SPI_Receive+0x15c>
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d102      	bne.n	800a37e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800a378:	2303      	movs	r3, #3
 800a37a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a37c:	e04a      	b.n	800a414 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a382:	b29b      	uxth	r3, r3
 800a384:	2b00      	cmp	r3, #0
 800a386:	d1cb      	bne.n	800a320 <HAL_SPI_Receive+0x104>
 800a388:	e031      	b.n	800a3ee <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	f003 0301 	and.w	r3, r3, #1
 800a394:	2b01      	cmp	r3, #1
 800a396:	d113      	bne.n	800a3c0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68da      	ldr	r2, [r3, #12]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3a2:	b292      	uxth	r2, r2
 800a3a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3aa:	1c9a      	adds	r2, r3, #2
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	b29a      	uxth	r2, r3
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a3be:	e011      	b.n	800a3e4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a3c0:	f7fd f8b4 	bl	800752c <HAL_GetTick>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	1ad3      	subs	r3, r2, r3
 800a3ca:	683a      	ldr	r2, [r7, #0]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d803      	bhi.n	800a3d8 <HAL_SPI_Receive+0x1bc>
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d6:	d102      	bne.n	800a3de <HAL_SPI_Receive+0x1c2>
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d102      	bne.n	800a3e4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800a3de:	2303      	movs	r3, #3
 800a3e0:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a3e2:	e017      	b.n	800a414 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d1cd      	bne.n	800a38a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a3ee:	693a      	ldr	r2, [r7, #16]
 800a3f0:	6839      	ldr	r1, [r7, #0]
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f000 fa35 	bl	800a862 <SPI_EndRxTransaction>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d002      	beq.n	800a404 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2220      	movs	r2, #32
 800a402:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d002      	beq.n	800a412 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	75fb      	strb	r3, [r7, #23]
 800a410:	e000      	b.n	800a414 <HAL_SPI_Receive+0x1f8>
  }

error :
 800a412:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2201      	movs	r2, #1
 800a418:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2200      	movs	r2, #0
 800a420:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800a424:	7dfb      	ldrb	r3, [r7, #23]
}
 800a426:	4618      	mov	r0, r3
 800a428:	3718      	adds	r7, #24
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}

0800a42e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a42e:	b580      	push	{r7, lr}
 800a430:	b08c      	sub	sp, #48	@ 0x30
 800a432:	af00      	add	r7, sp, #0
 800a434:	60f8      	str	r0, [r7, #12]
 800a436:	60b9      	str	r1, [r7, #8]
 800a438:	607a      	str	r2, [r7, #4]
 800a43a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a43c:	2301      	movs	r3, #1
 800a43e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a440:	2300      	movs	r3, #0
 800a442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d101      	bne.n	800a454 <HAL_SPI_TransmitReceive+0x26>
 800a450:	2302      	movs	r3, #2
 800a452:	e18a      	b.n	800a76a <HAL_SPI_TransmitReceive+0x33c>
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2201      	movs	r2, #1
 800a458:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a45c:	f7fd f866 	bl	800752c <HAL_GetTick>
 800a460:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a468:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a472:	887b      	ldrh	r3, [r7, #2]
 800a474:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a476:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d00f      	beq.n	800a49e <HAL_SPI_TransmitReceive+0x70>
 800a47e:	69fb      	ldr	r3, [r7, #28]
 800a480:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a484:	d107      	bne.n	800a496 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d103      	bne.n	800a496 <HAL_SPI_TransmitReceive+0x68>
 800a48e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a492:	2b04      	cmp	r3, #4
 800a494:	d003      	beq.n	800a49e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a496:	2302      	movs	r3, #2
 800a498:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800a49c:	e15b      	b.n	800a756 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d005      	beq.n	800a4b0 <HAL_SPI_TransmitReceive+0x82>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d002      	beq.n	800a4b0 <HAL_SPI_TransmitReceive+0x82>
 800a4aa:	887b      	ldrh	r3, [r7, #2]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d103      	bne.n	800a4b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800a4b6:	e14e      	b.n	800a756 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	2b04      	cmp	r3, #4
 800a4c2:	d003      	beq.n	800a4cc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2205      	movs	r2, #5
 800a4c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	887a      	ldrh	r2, [r7, #2]
 800a4dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	887a      	ldrh	r2, [r7, #2]
 800a4e2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	68ba      	ldr	r2, [r7, #8]
 800a4e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	887a      	ldrh	r2, [r7, #2]
 800a4ee:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	887a      	ldrh	r2, [r7, #2]
 800a4f4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2200      	movs	r2, #0
 800a500:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a50c:	2b40      	cmp	r3, #64	@ 0x40
 800a50e:	d007      	beq.n	800a520 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a51e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a528:	d178      	bne.n	800a61c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d002      	beq.n	800a538 <HAL_SPI_TransmitReceive+0x10a>
 800a532:	8b7b      	ldrh	r3, [r7, #26]
 800a534:	2b01      	cmp	r3, #1
 800a536:	d166      	bne.n	800a606 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a53c:	881a      	ldrh	r2, [r3, #0]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a548:	1c9a      	adds	r2, r3, #2
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a552:	b29b      	uxth	r3, r3
 800a554:	3b01      	subs	r3, #1
 800a556:	b29a      	uxth	r2, r3
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a55c:	e053      	b.n	800a606 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	f003 0302 	and.w	r3, r3, #2
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d11b      	bne.n	800a5a4 <HAL_SPI_TransmitReceive+0x176>
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a570:	b29b      	uxth	r3, r3
 800a572:	2b00      	cmp	r3, #0
 800a574:	d016      	beq.n	800a5a4 <HAL_SPI_TransmitReceive+0x176>
 800a576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d113      	bne.n	800a5a4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a580:	881a      	ldrh	r2, [r3, #0]
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a58c:	1c9a      	adds	r2, r3, #2
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a596:	b29b      	uxth	r3, r3
 800a598:	3b01      	subs	r3, #1
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	689b      	ldr	r3, [r3, #8]
 800a5aa:	f003 0301 	and.w	r3, r3, #1
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d119      	bne.n	800a5e6 <HAL_SPI_TransmitReceive+0x1b8>
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d014      	beq.n	800a5e6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	68da      	ldr	r2, [r3, #12]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5c6:	b292      	uxth	r2, r2
 800a5c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5ce:	1c9a      	adds	r2, r3, #2
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	b29a      	uxth	r2, r3
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a5e6:	f7fc ffa1 	bl	800752c <HAL_GetTick>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ee:	1ad3      	subs	r3, r2, r3
 800a5f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d807      	bhi.n	800a606 <HAL_SPI_TransmitReceive+0x1d8>
 800a5f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5fc:	d003      	beq.n	800a606 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a5fe:	2303      	movs	r3, #3
 800a600:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800a604:	e0a7      	b.n	800a756 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d1a6      	bne.n	800a55e <HAL_SPI_TransmitReceive+0x130>
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a614:	b29b      	uxth	r3, r3
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1a1      	bne.n	800a55e <HAL_SPI_TransmitReceive+0x130>
 800a61a:	e07c      	b.n	800a716 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d002      	beq.n	800a62a <HAL_SPI_TransmitReceive+0x1fc>
 800a624:	8b7b      	ldrh	r3, [r7, #26]
 800a626:	2b01      	cmp	r3, #1
 800a628:	d16b      	bne.n	800a702 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	330c      	adds	r3, #12
 800a634:	7812      	ldrb	r2, [r2, #0]
 800a636:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a63c:	1c5a      	adds	r2, r3, #1
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a646:	b29b      	uxth	r3, r3
 800a648:	3b01      	subs	r3, #1
 800a64a:	b29a      	uxth	r2, r3
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a650:	e057      	b.n	800a702 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	f003 0302 	and.w	r3, r3, #2
 800a65c:	2b02      	cmp	r3, #2
 800a65e:	d11c      	bne.n	800a69a <HAL_SPI_TransmitReceive+0x26c>
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a664:	b29b      	uxth	r3, r3
 800a666:	2b00      	cmp	r3, #0
 800a668:	d017      	beq.n	800a69a <HAL_SPI_TransmitReceive+0x26c>
 800a66a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d114      	bne.n	800a69a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	330c      	adds	r3, #12
 800a67a:	7812      	ldrb	r2, [r2, #0]
 800a67c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a682:	1c5a      	adds	r2, r3, #1
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	3b01      	subs	r3, #1
 800a690:	b29a      	uxth	r2, r3
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a696:	2300      	movs	r3, #0
 800a698:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	f003 0301 	and.w	r3, r3, #1
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d119      	bne.n	800a6dc <HAL_SPI_TransmitReceive+0x2ae>
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d014      	beq.n	800a6dc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	68da      	ldr	r2, [r3, #12]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6bc:	b2d2      	uxtb	r2, r2
 800a6be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6c4:	1c5a      	adds	r2, r3, #1
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a6dc:	f7fc ff26 	bl	800752c <HAL_GetTick>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6e4:	1ad3      	subs	r3, r2, r3
 800a6e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d803      	bhi.n	800a6f4 <HAL_SPI_TransmitReceive+0x2c6>
 800a6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f2:	d102      	bne.n	800a6fa <HAL_SPI_TransmitReceive+0x2cc>
 800a6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d103      	bne.n	800a702 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a6fa:	2303      	movs	r3, #3
 800a6fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800a700:	e029      	b.n	800a756 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a706:	b29b      	uxth	r3, r3
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d1a2      	bne.n	800a652 <HAL_SPI_TransmitReceive+0x224>
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a710:	b29b      	uxth	r3, r3
 800a712:	2b00      	cmp	r3, #0
 800a714:	d19d      	bne.n	800a652 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a718:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a71a:	68f8      	ldr	r0, [r7, #12]
 800a71c:	f000 f906 	bl	800a92c <SPI_EndRxTxTransaction>
 800a720:	4603      	mov	r3, r0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d006      	beq.n	800a734 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a726:	2301      	movs	r3, #1
 800a728:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2220      	movs	r2, #32
 800a730:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800a732:	e010      	b.n	800a756 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d10b      	bne.n	800a754 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a73c:	2300      	movs	r3, #0
 800a73e:	617b      	str	r3, [r7, #20]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	617b      	str	r3, [r7, #20]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	617b      	str	r3, [r7, #20]
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	e000      	b.n	800a756 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a754:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2201      	movs	r2, #1
 800a75a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2200      	movs	r2, #0
 800a762:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800a766:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3730      	adds	r7, #48	@ 0x30
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a772:	b480      	push	{r7}
 800a774:	b083      	sub	sp, #12
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a780:	b2db      	uxtb	r3, r3
}
 800a782:	4618      	mov	r0, r3
 800a784:	370c      	adds	r7, #12
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr

0800a78e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b084      	sub	sp, #16
 800a792:	af00      	add	r7, sp, #0
 800a794:	60f8      	str	r0, [r7, #12]
 800a796:	60b9      	str	r1, [r7, #8]
 800a798:	603b      	str	r3, [r7, #0]
 800a79a:	4613      	mov	r3, r2
 800a79c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a79e:	e04c      	b.n	800a83a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a6:	d048      	beq.n	800a83a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a7a8:	f7fc fec0 	bl	800752c <HAL_GetTick>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	1ad3      	subs	r3, r2, r3
 800a7b2:	683a      	ldr	r2, [r7, #0]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d902      	bls.n	800a7be <SPI_WaitFlagStateUntilTimeout+0x30>
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d13d      	bne.n	800a83a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	685a      	ldr	r2, [r3, #4]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a7cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a7d6:	d111      	bne.n	800a7fc <SPI_WaitFlagStateUntilTimeout+0x6e>
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7e0:	d004      	beq.n	800a7ec <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7ea:	d107      	bne.n	800a7fc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a7fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a800:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a804:	d10f      	bne.n	800a826 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a814:	601a      	str	r2, [r3, #0]
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a824:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2201      	movs	r2, #1
 800a82a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2200      	movs	r2, #0
 800a832:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800a836:	2303      	movs	r3, #3
 800a838:	e00f      	b.n	800a85a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	689a      	ldr	r2, [r3, #8]
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	4013      	ands	r3, r2
 800a844:	68ba      	ldr	r2, [r7, #8]
 800a846:	429a      	cmp	r2, r3
 800a848:	bf0c      	ite	eq
 800a84a:	2301      	moveq	r3, #1
 800a84c:	2300      	movne	r3, #0
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	461a      	mov	r2, r3
 800a852:	79fb      	ldrb	r3, [r7, #7]
 800a854:	429a      	cmp	r2, r3
 800a856:	d1a3      	bne.n	800a7a0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3710      	adds	r7, #16
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a862:	b580      	push	{r7, lr}
 800a864:	b086      	sub	sp, #24
 800a866:	af02      	add	r7, sp, #8
 800a868:	60f8      	str	r0, [r7, #12]
 800a86a:	60b9      	str	r1, [r7, #8]
 800a86c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a876:	d111      	bne.n	800a89c <SPI_EndRxTransaction+0x3a>
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a880:	d004      	beq.n	800a88c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	689b      	ldr	r3, [r3, #8]
 800a886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a88a:	d107      	bne.n	800a89c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a89a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a8a4:	d12a      	bne.n	800a8fc <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	689b      	ldr	r3, [r3, #8]
 800a8aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8ae:	d012      	beq.n	800a8d6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	9300      	str	r3, [sp, #0]
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	2180      	movs	r1, #128	@ 0x80
 800a8ba:	68f8      	ldr	r0, [r7, #12]
 800a8bc:	f7ff ff67 	bl	800a78e <SPI_WaitFlagStateUntilTimeout>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d02d      	beq.n	800a922 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8ca:	f043 0220 	orr.w	r2, r3, #32
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800a8d2:	2303      	movs	r3, #3
 800a8d4:	e026      	b.n	800a924 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	9300      	str	r3, [sp, #0]
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	2101      	movs	r1, #1
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	f7ff ff54 	bl	800a78e <SPI_WaitFlagStateUntilTimeout>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d01a      	beq.n	800a922 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8f0:	f043 0220 	orr.w	r2, r3, #32
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800a8f8:	2303      	movs	r3, #3
 800a8fa:	e013      	b.n	800a924 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	9300      	str	r3, [sp, #0]
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	2200      	movs	r2, #0
 800a904:	2101      	movs	r1, #1
 800a906:	68f8      	ldr	r0, [r7, #12]
 800a908:	f7ff ff41 	bl	800a78e <SPI_WaitFlagStateUntilTimeout>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d007      	beq.n	800a922 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a916:	f043 0220 	orr.w	r2, r3, #32
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a91e:	2303      	movs	r3, #3
 800a920:	e000      	b.n	800a924 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a922:	2300      	movs	r3, #0
}
 800a924:	4618      	mov	r0, r3
 800a926:	3710      	adds	r7, #16
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b088      	sub	sp, #32
 800a930:	af02      	add	r7, sp, #8
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a938:	4b1b      	ldr	r3, [pc, #108]	@ (800a9a8 <SPI_EndRxTxTransaction+0x7c>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a1b      	ldr	r2, [pc, #108]	@ (800a9ac <SPI_EndRxTxTransaction+0x80>)
 800a93e:	fba2 2303 	umull	r2, r3, r2, r3
 800a942:	0d5b      	lsrs	r3, r3, #21
 800a944:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a948:	fb02 f303 	mul.w	r3, r2, r3
 800a94c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a956:	d112      	bne.n	800a97e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	2200      	movs	r2, #0
 800a960:	2180      	movs	r1, #128	@ 0x80
 800a962:	68f8      	ldr	r0, [r7, #12]
 800a964:	f7ff ff13 	bl	800a78e <SPI_WaitFlagStateUntilTimeout>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d016      	beq.n	800a99c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a972:	f043 0220 	orr.w	r2, r3, #32
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a97a:	2303      	movs	r3, #3
 800a97c:	e00f      	b.n	800a99e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00a      	beq.n	800a99a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	3b01      	subs	r3, #1
 800a988:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a994:	2b80      	cmp	r3, #128	@ 0x80
 800a996:	d0f2      	beq.n	800a97e <SPI_EndRxTxTransaction+0x52>
 800a998:	e000      	b.n	800a99c <SPI_EndRxTxTransaction+0x70>
        break;
 800a99a:	bf00      	nop
  }

  return HAL_OK;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3718      	adds	r7, #24
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	20000018 	.word	0x20000018
 800a9ac:	165e9f81 	.word	0x165e9f81

0800a9b0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b085      	sub	sp, #20
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d029      	beq.n	800aa1e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a9d6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a9da:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a9e4:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800a9ea:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800a9f0:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800a9f6:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800a9fc:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800aa02:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800aa08:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                                               Init->ReadBurst          |\
 800aa0e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800aa10:	68fa      	ldr	r2, [r7, #12]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	601a      	str	r2, [r3, #0]
 800aa1c:	e034      	b.n	800aa88 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800aa2a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800aa34:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        Init->ReadBurst          |\
 800aa3a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800aa4e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800aa52:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800aa5c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800aa62:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800aa68:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800aa6e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800aa74:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800aa76:	68ba      	ldr	r2, [r7, #8]
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	68fa      	ldr	r2, [r7, #12]
 800aa80:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	68ba      	ldr	r2, [r7, #8]
 800aa86:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800aa88:	2300      	movs	r3, #0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3714      	adds	r7, #20
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr

0800aa96 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800aa96:	b480      	push	{r7}
 800aa98:	b087      	sub	sp, #28
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	60f8      	str	r0, [r7, #12]
 800aa9e:	60b9      	str	r1, [r7, #8]
 800aaa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d02e      	beq.n	800ab0e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	689b      	ldr	r3, [r3, #8]
 800aab4:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800aabc:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	3b01      	subs	r3, #1
 800aaca:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800aacc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	689b      	ldr	r3, [r3, #8]
 800aad2:	3b01      	subs	r3, #1
 800aad4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800aad6:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	68db      	ldr	r3, [r3, #12]
 800aadc:	3b01      	subs	r3, #1
 800aade:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800aae0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	691b      	ldr	r3, [r3, #16]
 800aae6:	3b01      	subs	r3, #1
 800aae8:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800aaea:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	695b      	ldr	r3, [r3, #20]
 800aaf0:	3b01      	subs	r3, #1
 800aaf2:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800aaf4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	699b      	ldr	r3, [r3, #24]
 800aafa:	3b01      	subs	r3, #1
 800aafc:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800aafe:	4313      	orrs	r3, r2
 800ab00:	697a      	ldr	r2, [r7, #20]
 800ab02:	4313      	orrs	r3, r2
 800ab04:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	697a      	ldr	r2, [r7, #20]
 800ab0a:	609a      	str	r2, [r3, #8]
 800ab0c:	e03b      	b.n	800ab86 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ab1a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ab1e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	3b01      	subs	r3, #1
 800ab26:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	695b      	ldr	r3, [r3, #20]
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800ab30:	4313      	orrs	r3, r2
 800ab32:	697a      	ldr	r2, [r7, #20]
 800ab34:	4313      	orrs	r3, r2
 800ab36:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	68db      	ldr	r3, [r3, #12]
 800ab3c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ab44:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	3b01      	subs	r3, #1
 800ab52:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800ab54:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	3b01      	subs	r3, #1
 800ab5c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800ab5e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	691b      	ldr	r3, [r3, #16]
 800ab64:	3b01      	subs	r3, #1
 800ab66:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800ab68:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	699b      	ldr	r3, [r3, #24]
 800ab6e:	3b01      	subs	r3, #1
 800ab70:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800ab72:	4313      	orrs	r3, r2
 800ab74:	693a      	ldr	r2, [r7, #16]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	697a      	ldr	r2, [r7, #20]
 800ab7e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	693a      	ldr	r2, [r7, #16]
 800ab84:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	371c      	adds	r7, #28
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b086      	sub	sp, #24
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800aba0:	2300      	movs	r3, #0
 800aba2:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800aba4:	2300      	movs	r3, #0
 800aba6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800abb0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	689b      	ldr	r3, [r3, #8]
 800abb6:	3b01      	subs	r3, #1
 800abb8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800abba:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800abc2:	4313      	orrs	r3, r2
 800abc4:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800abc6:	693a      	ldr	r2, [r7, #16]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800abcc:	f7fc fcae 	bl	800752c <HAL_GetTick>
 800abd0:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800abd2:	e010      	b.n	800abf6 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abda:	d00c      	beq.n	800abf6 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d007      	beq.n	800abf2 <FMC_SDRAM_SendCommand+0x5e>
 800abe2:	f7fc fca3 	bl	800752c <HAL_GetTick>
 800abe6:	4602      	mov	r2, r0
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	1ad3      	subs	r3, r2, r3
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	429a      	cmp	r2, r3
 800abf0:	d201      	bcs.n	800abf6 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800abf2:	2303      	movs	r3, #3
 800abf4:	e006      	b.n	800ac04 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	699b      	ldr	r3, [r3, #24]
 800abfa:	f003 0320 	and.w	r3, r3, #32
 800abfe:	2b20      	cmp	r3, #32
 800ac00:	d0e8      	beq.n	800abd4 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800ac02:	2300      	movs	r3, #0
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3718      	adds	r7, #24
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	695a      	ldr	r2, [r3, #20]
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	005b      	lsls	r3, r3, #1
 800ac1e:	431a      	orrs	r2, r3
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	370c      	adds	r7, #12
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr

0800ac32 <memset>:
 800ac32:	4402      	add	r2, r0
 800ac34:	4603      	mov	r3, r0
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d100      	bne.n	800ac3c <memset+0xa>
 800ac3a:	4770      	bx	lr
 800ac3c:	f803 1b01 	strb.w	r1, [r3], #1
 800ac40:	e7f9      	b.n	800ac36 <memset+0x4>
	...

0800ac44 <__libc_init_array>:
 800ac44:	b570      	push	{r4, r5, r6, lr}
 800ac46:	4d0d      	ldr	r5, [pc, #52]	@ (800ac7c <__libc_init_array+0x38>)
 800ac48:	4c0d      	ldr	r4, [pc, #52]	@ (800ac80 <__libc_init_array+0x3c>)
 800ac4a:	1b64      	subs	r4, r4, r5
 800ac4c:	10a4      	asrs	r4, r4, #2
 800ac4e:	2600      	movs	r6, #0
 800ac50:	42a6      	cmp	r6, r4
 800ac52:	d109      	bne.n	800ac68 <__libc_init_array+0x24>
 800ac54:	4d0b      	ldr	r5, [pc, #44]	@ (800ac84 <__libc_init_array+0x40>)
 800ac56:	4c0c      	ldr	r4, [pc, #48]	@ (800ac88 <__libc_init_array+0x44>)
 800ac58:	f000 f818 	bl	800ac8c <_init>
 800ac5c:	1b64      	subs	r4, r4, r5
 800ac5e:	10a4      	asrs	r4, r4, #2
 800ac60:	2600      	movs	r6, #0
 800ac62:	42a6      	cmp	r6, r4
 800ac64:	d105      	bne.n	800ac72 <__libc_init_array+0x2e>
 800ac66:	bd70      	pop	{r4, r5, r6, pc}
 800ac68:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac6c:	4798      	blx	r3
 800ac6e:	3601      	adds	r6, #1
 800ac70:	e7ee      	b.n	800ac50 <__libc_init_array+0xc>
 800ac72:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac76:	4798      	blx	r3
 800ac78:	3601      	adds	r6, #1
 800ac7a:	e7f2      	b.n	800ac62 <__libc_init_array+0x1e>
 800ac7c:	0800cc50 	.word	0x0800cc50
 800ac80:	0800cc50 	.word	0x0800cc50
 800ac84:	0800cc50 	.word	0x0800cc50
 800ac88:	0800cc54 	.word	0x0800cc54

0800ac8c <_init>:
 800ac8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac8e:	bf00      	nop
 800ac90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac92:	bc08      	pop	{r3}
 800ac94:	469e      	mov	lr, r3
 800ac96:	4770      	bx	lr

0800ac98 <_fini>:
 800ac98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9a:	bf00      	nop
 800ac9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac9e:	bc08      	pop	{r3}
 800aca0:	469e      	mov	lr, r3
 800aca2:	4770      	bx	lr
